// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type DeviceprofileApAeroscout struct {
	// whether to enable aeroscout config
	Enabled *bool `pulumi:"enabled"`
	// required if enabled, aeroscout server host
	Host *string `pulumi:"host"`
	// whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
	LocateConnected *bool `pulumi:"locateConnected"`
}

// DeviceprofileApAeroscoutInput is an input type that accepts DeviceprofileApAeroscoutArgs and DeviceprofileApAeroscoutOutput values.
// You can construct a concrete instance of `DeviceprofileApAeroscoutInput` via:
//
//	DeviceprofileApAeroscoutArgs{...}
type DeviceprofileApAeroscoutInput interface {
	pulumi.Input

	ToDeviceprofileApAeroscoutOutput() DeviceprofileApAeroscoutOutput
	ToDeviceprofileApAeroscoutOutputWithContext(context.Context) DeviceprofileApAeroscoutOutput
}

type DeviceprofileApAeroscoutArgs struct {
	// whether to enable aeroscout config
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// required if enabled, aeroscout server host
	Host pulumi.StringPtrInput `pulumi:"host"`
	// whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
	LocateConnected pulumi.BoolPtrInput `pulumi:"locateConnected"`
}

func (DeviceprofileApAeroscoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApAeroscout)(nil)).Elem()
}

func (i DeviceprofileApAeroscoutArgs) ToDeviceprofileApAeroscoutOutput() DeviceprofileApAeroscoutOutput {
	return i.ToDeviceprofileApAeroscoutOutputWithContext(context.Background())
}

func (i DeviceprofileApAeroscoutArgs) ToDeviceprofileApAeroscoutOutputWithContext(ctx context.Context) DeviceprofileApAeroscoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApAeroscoutOutput)
}

func (i DeviceprofileApAeroscoutArgs) ToDeviceprofileApAeroscoutPtrOutput() DeviceprofileApAeroscoutPtrOutput {
	return i.ToDeviceprofileApAeroscoutPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApAeroscoutArgs) ToDeviceprofileApAeroscoutPtrOutputWithContext(ctx context.Context) DeviceprofileApAeroscoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApAeroscoutOutput).ToDeviceprofileApAeroscoutPtrOutputWithContext(ctx)
}

// DeviceprofileApAeroscoutPtrInput is an input type that accepts DeviceprofileApAeroscoutArgs, DeviceprofileApAeroscoutPtr and DeviceprofileApAeroscoutPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApAeroscoutPtrInput` via:
//
//	        DeviceprofileApAeroscoutArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApAeroscoutPtrInput interface {
	pulumi.Input

	ToDeviceprofileApAeroscoutPtrOutput() DeviceprofileApAeroscoutPtrOutput
	ToDeviceprofileApAeroscoutPtrOutputWithContext(context.Context) DeviceprofileApAeroscoutPtrOutput
}

type deviceprofileApAeroscoutPtrType DeviceprofileApAeroscoutArgs

func DeviceprofileApAeroscoutPtr(v *DeviceprofileApAeroscoutArgs) DeviceprofileApAeroscoutPtrInput {
	return (*deviceprofileApAeroscoutPtrType)(v)
}

func (*deviceprofileApAeroscoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApAeroscout)(nil)).Elem()
}

func (i *deviceprofileApAeroscoutPtrType) ToDeviceprofileApAeroscoutPtrOutput() DeviceprofileApAeroscoutPtrOutput {
	return i.ToDeviceprofileApAeroscoutPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApAeroscoutPtrType) ToDeviceprofileApAeroscoutPtrOutputWithContext(ctx context.Context) DeviceprofileApAeroscoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApAeroscoutPtrOutput)
}

type DeviceprofileApAeroscoutOutput struct{ *pulumi.OutputState }

func (DeviceprofileApAeroscoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApAeroscout)(nil)).Elem()
}

func (o DeviceprofileApAeroscoutOutput) ToDeviceprofileApAeroscoutOutput() DeviceprofileApAeroscoutOutput {
	return o
}

func (o DeviceprofileApAeroscoutOutput) ToDeviceprofileApAeroscoutOutputWithContext(ctx context.Context) DeviceprofileApAeroscoutOutput {
	return o
}

func (o DeviceprofileApAeroscoutOutput) ToDeviceprofileApAeroscoutPtrOutput() DeviceprofileApAeroscoutPtrOutput {
	return o.ToDeviceprofileApAeroscoutPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApAeroscoutOutput) ToDeviceprofileApAeroscoutPtrOutputWithContext(ctx context.Context) DeviceprofileApAeroscoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApAeroscout) *DeviceprofileApAeroscout {
		return &v
	}).(DeviceprofileApAeroscoutPtrOutput)
}

// whether to enable aeroscout config
func (o DeviceprofileApAeroscoutOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApAeroscout) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// required if enabled, aeroscout server host
func (o DeviceprofileApAeroscoutOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApAeroscout) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
func (o DeviceprofileApAeroscoutOutput) LocateConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApAeroscout) *bool { return v.LocateConnected }).(pulumi.BoolPtrOutput)
}

type DeviceprofileApAeroscoutPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApAeroscoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApAeroscout)(nil)).Elem()
}

func (o DeviceprofileApAeroscoutPtrOutput) ToDeviceprofileApAeroscoutPtrOutput() DeviceprofileApAeroscoutPtrOutput {
	return o
}

func (o DeviceprofileApAeroscoutPtrOutput) ToDeviceprofileApAeroscoutPtrOutputWithContext(ctx context.Context) DeviceprofileApAeroscoutPtrOutput {
	return o
}

func (o DeviceprofileApAeroscoutPtrOutput) Elem() DeviceprofileApAeroscoutOutput {
	return o.ApplyT(func(v *DeviceprofileApAeroscout) DeviceprofileApAeroscout {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApAeroscout
		return ret
	}).(DeviceprofileApAeroscoutOutput)
}

// whether to enable aeroscout config
func (o DeviceprofileApAeroscoutPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApAeroscout) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// required if enabled, aeroscout server host
func (o DeviceprofileApAeroscoutPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApAeroscout) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
func (o DeviceprofileApAeroscoutPtrOutput) LocateConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApAeroscout) *bool {
		if v == nil {
			return nil
		}
		return v.LocateConnected
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileApBleConfig struct {
	// whether Mist beacons is enabled
	BeaconEnabled *bool `pulumi:"beaconEnabled"`
	// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
	BeaconRate *int `pulumi:"beaconRate"`
	// enum: `custom`, `default`
	BeaconRateMode *string `pulumi:"beaconRateMode"`
	// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
	BeamDisableds []int `pulumi:"beamDisableds"`
	// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
	CustomBlePacketEnabled *bool `pulumi:"customBlePacketEnabled"`
	// The custom frame to be sent out in this beacon. The frame must be a hexstring
	CustomBlePacketFrame *string `pulumi:"customBlePacketFrame"`
	// Frequency (msec) of data emitted by custom ble beacon
	CustomBlePacketFreqMsec *int `pulumi:"customBlePacketFreqMsec"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUidAdvPower *int    `pulumi:"eddystoneUidAdvPower"`
	EddystoneUidBeams    *string `pulumi:"eddystoneUidBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
	EddystoneUidEnabled *bool `pulumi:"eddystoneUidEnabled"`
	// Frequency (msec) of data emmit by Eddystone-UID beacon
	EddystoneUidFreqMsec *int `pulumi:"eddystoneUidFreqMsec"`
	// Eddystone-UID instance for the device
	EddystoneUidInstance *string `pulumi:"eddystoneUidInstance"`
	// Eddystone-UID namespace
	EddystoneUidNamespace *string `pulumi:"eddystoneUidNamespace"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUrlAdvPower *int    `pulumi:"eddystoneUrlAdvPower"`
	EddystoneUrlBeams    *string `pulumi:"eddystoneUrlBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
	EddystoneUrlEnabled *bool `pulumi:"eddystoneUrlEnabled"`
	// Frequency (msec) of data emit by Eddystone-UID beacon
	EddystoneUrlFreqMsec *int `pulumi:"eddystoneUrlFreqMsec"`
	// URL pointed by Eddystone-URL beacon
	EddystoneUrlUrl *string `pulumi:"eddystoneUrlUrl"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	IbeaconAdvPower *int    `pulumi:"ibeaconAdvPower"`
	IbeaconBeams    *string `pulumi:"ibeaconBeams"`
	// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
	IbeaconEnabled *bool `pulumi:"ibeaconEnabled"`
	// Frequency (msec) of data emmit for iBeacon
	IbeaconFreqMsec *int `pulumi:"ibeaconFreqMsec"`
	// Major number for iBeacon
	IbeaconMajor *int `pulumi:"ibeaconMajor"`
	// Minor number for iBeacon
	IbeaconMinor *int `pulumi:"ibeaconMinor"`
	// optional, if not specified, the same UUID as the beacon will be used
	IbeaconUuid *string `pulumi:"ibeaconUuid"`
	// required if `powerMode`==`custom`
	Power *int `pulumi:"power"`
	// enum: `custom`, `default`
	PowerMode *string `pulumi:"powerMode"`
}

// DeviceprofileApBleConfigInput is an input type that accepts DeviceprofileApBleConfigArgs and DeviceprofileApBleConfigOutput values.
// You can construct a concrete instance of `DeviceprofileApBleConfigInput` via:
//
//	DeviceprofileApBleConfigArgs{...}
type DeviceprofileApBleConfigInput interface {
	pulumi.Input

	ToDeviceprofileApBleConfigOutput() DeviceprofileApBleConfigOutput
	ToDeviceprofileApBleConfigOutputWithContext(context.Context) DeviceprofileApBleConfigOutput
}

type DeviceprofileApBleConfigArgs struct {
	// whether Mist beacons is enabled
	BeaconEnabled pulumi.BoolPtrInput `pulumi:"beaconEnabled"`
	// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
	BeaconRate pulumi.IntPtrInput `pulumi:"beaconRate"`
	// enum: `custom`, `default`
	BeaconRateMode pulumi.StringPtrInput `pulumi:"beaconRateMode"`
	// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
	BeamDisableds pulumi.IntArrayInput `pulumi:"beamDisableds"`
	// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
	CustomBlePacketEnabled pulumi.BoolPtrInput `pulumi:"customBlePacketEnabled"`
	// The custom frame to be sent out in this beacon. The frame must be a hexstring
	CustomBlePacketFrame pulumi.StringPtrInput `pulumi:"customBlePacketFrame"`
	// Frequency (msec) of data emitted by custom ble beacon
	CustomBlePacketFreqMsec pulumi.IntPtrInput `pulumi:"customBlePacketFreqMsec"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUidAdvPower pulumi.IntPtrInput    `pulumi:"eddystoneUidAdvPower"`
	EddystoneUidBeams    pulumi.StringPtrInput `pulumi:"eddystoneUidBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
	EddystoneUidEnabled pulumi.BoolPtrInput `pulumi:"eddystoneUidEnabled"`
	// Frequency (msec) of data emmit by Eddystone-UID beacon
	EddystoneUidFreqMsec pulumi.IntPtrInput `pulumi:"eddystoneUidFreqMsec"`
	// Eddystone-UID instance for the device
	EddystoneUidInstance pulumi.StringPtrInput `pulumi:"eddystoneUidInstance"`
	// Eddystone-UID namespace
	EddystoneUidNamespace pulumi.StringPtrInput `pulumi:"eddystoneUidNamespace"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUrlAdvPower pulumi.IntPtrInput    `pulumi:"eddystoneUrlAdvPower"`
	EddystoneUrlBeams    pulumi.StringPtrInput `pulumi:"eddystoneUrlBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
	EddystoneUrlEnabled pulumi.BoolPtrInput `pulumi:"eddystoneUrlEnabled"`
	// Frequency (msec) of data emit by Eddystone-UID beacon
	EddystoneUrlFreqMsec pulumi.IntPtrInput `pulumi:"eddystoneUrlFreqMsec"`
	// URL pointed by Eddystone-URL beacon
	EddystoneUrlUrl pulumi.StringPtrInput `pulumi:"eddystoneUrlUrl"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	IbeaconAdvPower pulumi.IntPtrInput    `pulumi:"ibeaconAdvPower"`
	IbeaconBeams    pulumi.StringPtrInput `pulumi:"ibeaconBeams"`
	// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
	IbeaconEnabled pulumi.BoolPtrInput `pulumi:"ibeaconEnabled"`
	// Frequency (msec) of data emmit for iBeacon
	IbeaconFreqMsec pulumi.IntPtrInput `pulumi:"ibeaconFreqMsec"`
	// Major number for iBeacon
	IbeaconMajor pulumi.IntPtrInput `pulumi:"ibeaconMajor"`
	// Minor number for iBeacon
	IbeaconMinor pulumi.IntPtrInput `pulumi:"ibeaconMinor"`
	// optional, if not specified, the same UUID as the beacon will be used
	IbeaconUuid pulumi.StringPtrInput `pulumi:"ibeaconUuid"`
	// required if `powerMode`==`custom`
	Power pulumi.IntPtrInput `pulumi:"power"`
	// enum: `custom`, `default`
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
}

func (DeviceprofileApBleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApBleConfig)(nil)).Elem()
}

func (i DeviceprofileApBleConfigArgs) ToDeviceprofileApBleConfigOutput() DeviceprofileApBleConfigOutput {
	return i.ToDeviceprofileApBleConfigOutputWithContext(context.Background())
}

func (i DeviceprofileApBleConfigArgs) ToDeviceprofileApBleConfigOutputWithContext(ctx context.Context) DeviceprofileApBleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApBleConfigOutput)
}

func (i DeviceprofileApBleConfigArgs) ToDeviceprofileApBleConfigPtrOutput() DeviceprofileApBleConfigPtrOutput {
	return i.ToDeviceprofileApBleConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApBleConfigArgs) ToDeviceprofileApBleConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApBleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApBleConfigOutput).ToDeviceprofileApBleConfigPtrOutputWithContext(ctx)
}

// DeviceprofileApBleConfigPtrInput is an input type that accepts DeviceprofileApBleConfigArgs, DeviceprofileApBleConfigPtr and DeviceprofileApBleConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApBleConfigPtrInput` via:
//
//	        DeviceprofileApBleConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApBleConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileApBleConfigPtrOutput() DeviceprofileApBleConfigPtrOutput
	ToDeviceprofileApBleConfigPtrOutputWithContext(context.Context) DeviceprofileApBleConfigPtrOutput
}

type deviceprofileApBleConfigPtrType DeviceprofileApBleConfigArgs

func DeviceprofileApBleConfigPtr(v *DeviceprofileApBleConfigArgs) DeviceprofileApBleConfigPtrInput {
	return (*deviceprofileApBleConfigPtrType)(v)
}

func (*deviceprofileApBleConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApBleConfig)(nil)).Elem()
}

func (i *deviceprofileApBleConfigPtrType) ToDeviceprofileApBleConfigPtrOutput() DeviceprofileApBleConfigPtrOutput {
	return i.ToDeviceprofileApBleConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApBleConfigPtrType) ToDeviceprofileApBleConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApBleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApBleConfigPtrOutput)
}

type DeviceprofileApBleConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileApBleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApBleConfig)(nil)).Elem()
}

func (o DeviceprofileApBleConfigOutput) ToDeviceprofileApBleConfigOutput() DeviceprofileApBleConfigOutput {
	return o
}

func (o DeviceprofileApBleConfigOutput) ToDeviceprofileApBleConfigOutputWithContext(ctx context.Context) DeviceprofileApBleConfigOutput {
	return o
}

func (o DeviceprofileApBleConfigOutput) ToDeviceprofileApBleConfigPtrOutput() DeviceprofileApBleConfigPtrOutput {
	return o.ToDeviceprofileApBleConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApBleConfigOutput) ToDeviceprofileApBleConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApBleConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApBleConfig) *DeviceprofileApBleConfig {
		return &v
	}).(DeviceprofileApBleConfigPtrOutput)
}

// whether Mist beacons is enabled
func (o DeviceprofileApBleConfigOutput) BeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *bool { return v.BeaconEnabled }).(pulumi.BoolPtrOutput)
}

// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
func (o DeviceprofileApBleConfigOutput) BeaconRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.BeaconRate }).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o DeviceprofileApBleConfigOutput) BeaconRateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.BeaconRateMode }).(pulumi.StringPtrOutput)
}

// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
func (o DeviceprofileApBleConfigOutput) BeamDisableds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) []int { return v.BeamDisableds }).(pulumi.IntArrayOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
func (o DeviceprofileApBleConfigOutput) CustomBlePacketEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *bool { return v.CustomBlePacketEnabled }).(pulumi.BoolPtrOutput)
}

// The custom frame to be sent out in this beacon. The frame must be a hexstring
func (o DeviceprofileApBleConfigOutput) CustomBlePacketFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.CustomBlePacketFrame }).(pulumi.StringPtrOutput)
}

// Frequency (msec) of data emitted by custom ble beacon
func (o DeviceprofileApBleConfigOutput) CustomBlePacketFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.CustomBlePacketFreqMsec }).(pulumi.IntPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o DeviceprofileApBleConfigOutput) EddystoneUidAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.EddystoneUidAdvPower }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApBleConfigOutput) EddystoneUidBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.EddystoneUidBeams }).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
func (o DeviceprofileApBleConfigOutput) EddystoneUidEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *bool { return v.EddystoneUidEnabled }).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit by Eddystone-UID beacon
func (o DeviceprofileApBleConfigOutput) EddystoneUidFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.EddystoneUidFreqMsec }).(pulumi.IntPtrOutput)
}

// Eddystone-UID instance for the device
func (o DeviceprofileApBleConfigOutput) EddystoneUidInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.EddystoneUidInstance }).(pulumi.StringPtrOutput)
}

// Eddystone-UID namespace
func (o DeviceprofileApBleConfigOutput) EddystoneUidNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.EddystoneUidNamespace }).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o DeviceprofileApBleConfigOutput) EddystoneUrlAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.EddystoneUrlAdvPower }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApBleConfigOutput) EddystoneUrlBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.EddystoneUrlBeams }).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
func (o DeviceprofileApBleConfigOutput) EddystoneUrlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *bool { return v.EddystoneUrlEnabled }).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emit by Eddystone-UID beacon
func (o DeviceprofileApBleConfigOutput) EddystoneUrlFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.EddystoneUrlFreqMsec }).(pulumi.IntPtrOutput)
}

// URL pointed by Eddystone-URL beacon
func (o DeviceprofileApBleConfigOutput) EddystoneUrlUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.EddystoneUrlUrl }).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o DeviceprofileApBleConfigOutput) IbeaconAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.IbeaconAdvPower }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApBleConfigOutput) IbeaconBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.IbeaconBeams }).(pulumi.StringPtrOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
func (o DeviceprofileApBleConfigOutput) IbeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *bool { return v.IbeaconEnabled }).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit for iBeacon
func (o DeviceprofileApBleConfigOutput) IbeaconFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.IbeaconFreqMsec }).(pulumi.IntPtrOutput)
}

// Major number for iBeacon
func (o DeviceprofileApBleConfigOutput) IbeaconMajor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.IbeaconMajor }).(pulumi.IntPtrOutput)
}

// Minor number for iBeacon
func (o DeviceprofileApBleConfigOutput) IbeaconMinor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.IbeaconMinor }).(pulumi.IntPtrOutput)
}

// optional, if not specified, the same UUID as the beacon will be used
func (o DeviceprofileApBleConfigOutput) IbeaconUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.IbeaconUuid }).(pulumi.StringPtrOutput)
}

// required if `powerMode`==`custom`
func (o DeviceprofileApBleConfigOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o DeviceprofileApBleConfigOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApBleConfig) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

type DeviceprofileApBleConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApBleConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApBleConfig)(nil)).Elem()
}

func (o DeviceprofileApBleConfigPtrOutput) ToDeviceprofileApBleConfigPtrOutput() DeviceprofileApBleConfigPtrOutput {
	return o
}

func (o DeviceprofileApBleConfigPtrOutput) ToDeviceprofileApBleConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApBleConfigPtrOutput {
	return o
}

func (o DeviceprofileApBleConfigPtrOutput) Elem() DeviceprofileApBleConfigOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) DeviceprofileApBleConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApBleConfig
		return ret
	}).(DeviceprofileApBleConfigOutput)
}

// whether Mist beacons is enabled
func (o DeviceprofileApBleConfigPtrOutput) BeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.BeaconEnabled
	}).(pulumi.BoolPtrOutput)
}

// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
func (o DeviceprofileApBleConfigPtrOutput) BeaconRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.BeaconRate
	}).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o DeviceprofileApBleConfigPtrOutput) BeaconRateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.BeaconRateMode
	}).(pulumi.StringPtrOutput)
}

// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
func (o DeviceprofileApBleConfigPtrOutput) BeamDisableds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) []int {
		if v == nil {
			return nil
		}
		return v.BeamDisableds
	}).(pulumi.IntArrayOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
func (o DeviceprofileApBleConfigPtrOutput) CustomBlePacketEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CustomBlePacketEnabled
	}).(pulumi.BoolPtrOutput)
}

// The custom frame to be sent out in this beacon. The frame must be a hexstring
func (o DeviceprofileApBleConfigPtrOutput) CustomBlePacketFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.CustomBlePacketFrame
	}).(pulumi.StringPtrOutput)
}

// Frequency (msec) of data emitted by custom ble beacon
func (o DeviceprofileApBleConfigPtrOutput) CustomBlePacketFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.CustomBlePacketFreqMsec
	}).(pulumi.IntPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUidAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUidAdvPower
	}).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApBleConfigPtrOutput) EddystoneUidBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUidBeams
	}).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUidEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EddystoneUidEnabled
	}).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit by Eddystone-UID beacon
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUidFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUidFreqMsec
	}).(pulumi.IntPtrOutput)
}

// Eddystone-UID instance for the device
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUidInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUidInstance
	}).(pulumi.StringPtrOutput)
}

// Eddystone-UID namespace
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUidNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUidNamespace
	}).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUrlAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlAdvPower
	}).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApBleConfigPtrOutput) EddystoneUrlBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlBeams
	}).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUrlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlEnabled
	}).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emit by Eddystone-UID beacon
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUrlFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlFreqMsec
	}).(pulumi.IntPtrOutput)
}

// URL pointed by Eddystone-URL beacon
func (o DeviceprofileApBleConfigPtrOutput) EddystoneUrlUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlUrl
	}).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o DeviceprofileApBleConfigPtrOutput) IbeaconAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconAdvPower
	}).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApBleConfigPtrOutput) IbeaconBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.IbeaconBeams
	}).(pulumi.StringPtrOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
func (o DeviceprofileApBleConfigPtrOutput) IbeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IbeaconEnabled
	}).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit for iBeacon
func (o DeviceprofileApBleConfigPtrOutput) IbeaconFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconFreqMsec
	}).(pulumi.IntPtrOutput)
}

// Major number for iBeacon
func (o DeviceprofileApBleConfigPtrOutput) IbeaconMajor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconMajor
	}).(pulumi.IntPtrOutput)
}

// Minor number for iBeacon
func (o DeviceprofileApBleConfigPtrOutput) IbeaconMinor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconMinor
	}).(pulumi.IntPtrOutput)
}

// optional, if not specified, the same UUID as the beacon will be used
func (o DeviceprofileApBleConfigPtrOutput) IbeaconUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.IbeaconUuid
	}).(pulumi.StringPtrOutput)
}

// required if `powerMode`==`custom`
func (o DeviceprofileApBleConfigPtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o DeviceprofileApBleConfigPtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileApEslConfig struct {
	// Only if `type`==`imagotag` or `type`==`native`
	Cacert *string `pulumi:"cacert"`
	// Only if `type`==`imagotag` or `type`==`native`
	Channel *int `pulumi:"channel"`
	// usb*config is ignored if esl*config enabled
	Enabled *bool `pulumi:"enabled"`
	// Only if `type`==`imagotag` or `type`==`native`
	Host *string `pulumi:"host"`
	// Only if `type`==`imagotag` or `type`==`native`
	Port *int `pulumi:"port"`
	// note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
	Type *string `pulumi:"type"`
	// Only if `type`==`imagotag` or `type`==`native`
	VerifyCert *bool `pulumi:"verifyCert"`
	// Only if `type`==`solum` or `type`==`hanshow`
	VlanId *int `pulumi:"vlanId"`
}

// DeviceprofileApEslConfigInput is an input type that accepts DeviceprofileApEslConfigArgs and DeviceprofileApEslConfigOutput values.
// You can construct a concrete instance of `DeviceprofileApEslConfigInput` via:
//
//	DeviceprofileApEslConfigArgs{...}
type DeviceprofileApEslConfigInput interface {
	pulumi.Input

	ToDeviceprofileApEslConfigOutput() DeviceprofileApEslConfigOutput
	ToDeviceprofileApEslConfigOutputWithContext(context.Context) DeviceprofileApEslConfigOutput
}

type DeviceprofileApEslConfigArgs struct {
	// Only if `type`==`imagotag` or `type`==`native`
	Cacert pulumi.StringPtrInput `pulumi:"cacert"`
	// Only if `type`==`imagotag` or `type`==`native`
	Channel pulumi.IntPtrInput `pulumi:"channel"`
	// usb*config is ignored if esl*config enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Only if `type`==`imagotag` or `type`==`native`
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Only if `type`==`imagotag` or `type`==`native`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Only if `type`==`imagotag` or `type`==`native`
	VerifyCert pulumi.BoolPtrInput `pulumi:"verifyCert"`
	// Only if `type`==`solum` or `type`==`hanshow`
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
}

func (DeviceprofileApEslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApEslConfig)(nil)).Elem()
}

func (i DeviceprofileApEslConfigArgs) ToDeviceprofileApEslConfigOutput() DeviceprofileApEslConfigOutput {
	return i.ToDeviceprofileApEslConfigOutputWithContext(context.Background())
}

func (i DeviceprofileApEslConfigArgs) ToDeviceprofileApEslConfigOutputWithContext(ctx context.Context) DeviceprofileApEslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApEslConfigOutput)
}

func (i DeviceprofileApEslConfigArgs) ToDeviceprofileApEslConfigPtrOutput() DeviceprofileApEslConfigPtrOutput {
	return i.ToDeviceprofileApEslConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApEslConfigArgs) ToDeviceprofileApEslConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApEslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApEslConfigOutput).ToDeviceprofileApEslConfigPtrOutputWithContext(ctx)
}

// DeviceprofileApEslConfigPtrInput is an input type that accepts DeviceprofileApEslConfigArgs, DeviceprofileApEslConfigPtr and DeviceprofileApEslConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApEslConfigPtrInput` via:
//
//	        DeviceprofileApEslConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApEslConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileApEslConfigPtrOutput() DeviceprofileApEslConfigPtrOutput
	ToDeviceprofileApEslConfigPtrOutputWithContext(context.Context) DeviceprofileApEslConfigPtrOutput
}

type deviceprofileApEslConfigPtrType DeviceprofileApEslConfigArgs

func DeviceprofileApEslConfigPtr(v *DeviceprofileApEslConfigArgs) DeviceprofileApEslConfigPtrInput {
	return (*deviceprofileApEslConfigPtrType)(v)
}

func (*deviceprofileApEslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApEslConfig)(nil)).Elem()
}

func (i *deviceprofileApEslConfigPtrType) ToDeviceprofileApEslConfigPtrOutput() DeviceprofileApEslConfigPtrOutput {
	return i.ToDeviceprofileApEslConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApEslConfigPtrType) ToDeviceprofileApEslConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApEslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApEslConfigPtrOutput)
}

type DeviceprofileApEslConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileApEslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApEslConfig)(nil)).Elem()
}

func (o DeviceprofileApEslConfigOutput) ToDeviceprofileApEslConfigOutput() DeviceprofileApEslConfigOutput {
	return o
}

func (o DeviceprofileApEslConfigOutput) ToDeviceprofileApEslConfigOutputWithContext(ctx context.Context) DeviceprofileApEslConfigOutput {
	return o
}

func (o DeviceprofileApEslConfigOutput) ToDeviceprofileApEslConfigPtrOutput() DeviceprofileApEslConfigPtrOutput {
	return o.ToDeviceprofileApEslConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApEslConfigOutput) ToDeviceprofileApEslConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApEslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApEslConfig) *DeviceprofileApEslConfig {
		return &v
	}).(DeviceprofileApEslConfigPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigOutput) Cacert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *string { return v.Cacert }).(pulumi.StringPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *int { return v.Channel }).(pulumi.IntPtrOutput)
}

// usb*config is ignored if esl*config enabled
func (o DeviceprofileApEslConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
func (o DeviceprofileApEslConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigOutput) VerifyCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *bool { return v.VerifyCert }).(pulumi.BoolPtrOutput)
}

// Only if `type`==`solum` or `type`==`hanshow`
func (o DeviceprofileApEslConfigOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApEslConfig) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

type DeviceprofileApEslConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApEslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApEslConfig)(nil)).Elem()
}

func (o DeviceprofileApEslConfigPtrOutput) ToDeviceprofileApEslConfigPtrOutput() DeviceprofileApEslConfigPtrOutput {
	return o
}

func (o DeviceprofileApEslConfigPtrOutput) ToDeviceprofileApEslConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApEslConfigPtrOutput {
	return o
}

func (o DeviceprofileApEslConfigPtrOutput) Elem() DeviceprofileApEslConfigOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) DeviceprofileApEslConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApEslConfig
		return ret
	}).(DeviceprofileApEslConfigOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigPtrOutput) Cacert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *string {
		if v == nil {
			return nil
		}
		return v.Cacert
	}).(pulumi.StringPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigPtrOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *int {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.IntPtrOutput)
}

// usb*config is ignored if esl*config enabled
func (o DeviceprofileApEslConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
func (o DeviceprofileApEslConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Only if `type`==`imagotag` or `type`==`native`
func (o DeviceprofileApEslConfigPtrOutput) VerifyCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.VerifyCert
	}).(pulumi.BoolPtrOutput)
}

// Only if `type`==`solum` or `type`==`hanshow`
func (o DeviceprofileApEslConfigPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApEslConfig) *int {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.IntPtrOutput)
}

type DeviceprofileApIpConfig struct {
	// if `type`==`static`
	Dns []string `pulumi:"dns"`
	// required if `type`==`static`
	DnsSuffixes []string `pulumi:"dnsSuffixes"`
	// required if `type`==`static`
	Gateway  *string `pulumi:"gateway"`
	Gateway6 *string `pulumi:"gateway6"`
	// required if `type`==`static`
	Ip  *string `pulumi:"ip"`
	Ip6 *string `pulumi:"ip6"`
	Mtu *int    `pulumi:"mtu"`
	// required if `type`==`static`
	Netmask  *string `pulumi:"netmask"`
	Netmask6 *string `pulumi:"netmask6"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
	// enum: `autoconf`, `dhcp`, `disabled`, `static`
	Type6 *string `pulumi:"type6"`
	// management vlan id, default is 1 (untagged)
	VlanId *int `pulumi:"vlanId"`
}

// DeviceprofileApIpConfigInput is an input type that accepts DeviceprofileApIpConfigArgs and DeviceprofileApIpConfigOutput values.
// You can construct a concrete instance of `DeviceprofileApIpConfigInput` via:
//
//	DeviceprofileApIpConfigArgs{...}
type DeviceprofileApIpConfigInput interface {
	pulumi.Input

	ToDeviceprofileApIpConfigOutput() DeviceprofileApIpConfigOutput
	ToDeviceprofileApIpConfigOutputWithContext(context.Context) DeviceprofileApIpConfigOutput
}

type DeviceprofileApIpConfigArgs struct {
	// if `type`==`static`
	Dns pulumi.StringArrayInput `pulumi:"dns"`
	// required if `type`==`static`
	DnsSuffixes pulumi.StringArrayInput `pulumi:"dnsSuffixes"`
	// required if `type`==`static`
	Gateway  pulumi.StringPtrInput `pulumi:"gateway"`
	Gateway6 pulumi.StringPtrInput `pulumi:"gateway6"`
	// required if `type`==`static`
	Ip  pulumi.StringPtrInput `pulumi:"ip"`
	Ip6 pulumi.StringPtrInput `pulumi:"ip6"`
	Mtu pulumi.IntPtrInput    `pulumi:"mtu"`
	// required if `type`==`static`
	Netmask  pulumi.StringPtrInput `pulumi:"netmask"`
	Netmask6 pulumi.StringPtrInput `pulumi:"netmask6"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// enum: `autoconf`, `dhcp`, `disabled`, `static`
	Type6 pulumi.StringPtrInput `pulumi:"type6"`
	// management vlan id, default is 1 (untagged)
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
}

func (DeviceprofileApIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApIpConfig)(nil)).Elem()
}

func (i DeviceprofileApIpConfigArgs) ToDeviceprofileApIpConfigOutput() DeviceprofileApIpConfigOutput {
	return i.ToDeviceprofileApIpConfigOutputWithContext(context.Background())
}

func (i DeviceprofileApIpConfigArgs) ToDeviceprofileApIpConfigOutputWithContext(ctx context.Context) DeviceprofileApIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApIpConfigOutput)
}

func (i DeviceprofileApIpConfigArgs) ToDeviceprofileApIpConfigPtrOutput() DeviceprofileApIpConfigPtrOutput {
	return i.ToDeviceprofileApIpConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApIpConfigArgs) ToDeviceprofileApIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApIpConfigOutput).ToDeviceprofileApIpConfigPtrOutputWithContext(ctx)
}

// DeviceprofileApIpConfigPtrInput is an input type that accepts DeviceprofileApIpConfigArgs, DeviceprofileApIpConfigPtr and DeviceprofileApIpConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApIpConfigPtrInput` via:
//
//	        DeviceprofileApIpConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApIpConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileApIpConfigPtrOutput() DeviceprofileApIpConfigPtrOutput
	ToDeviceprofileApIpConfigPtrOutputWithContext(context.Context) DeviceprofileApIpConfigPtrOutput
}

type deviceprofileApIpConfigPtrType DeviceprofileApIpConfigArgs

func DeviceprofileApIpConfigPtr(v *DeviceprofileApIpConfigArgs) DeviceprofileApIpConfigPtrInput {
	return (*deviceprofileApIpConfigPtrType)(v)
}

func (*deviceprofileApIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApIpConfig)(nil)).Elem()
}

func (i *deviceprofileApIpConfigPtrType) ToDeviceprofileApIpConfigPtrOutput() DeviceprofileApIpConfigPtrOutput {
	return i.ToDeviceprofileApIpConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApIpConfigPtrType) ToDeviceprofileApIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApIpConfigPtrOutput)
}

type DeviceprofileApIpConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileApIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApIpConfig)(nil)).Elem()
}

func (o DeviceprofileApIpConfigOutput) ToDeviceprofileApIpConfigOutput() DeviceprofileApIpConfigOutput {
	return o
}

func (o DeviceprofileApIpConfigOutput) ToDeviceprofileApIpConfigOutputWithContext(ctx context.Context) DeviceprofileApIpConfigOutput {
	return o
}

func (o DeviceprofileApIpConfigOutput) ToDeviceprofileApIpConfigPtrOutput() DeviceprofileApIpConfigPtrOutput {
	return o.ToDeviceprofileApIpConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApIpConfigOutput) ToDeviceprofileApIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApIpConfig) *DeviceprofileApIpConfig {
		return &v
	}).(DeviceprofileApIpConfigPtrOutput)
}

// if `type`==`static`
func (o DeviceprofileApIpConfigOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) []string { return v.Dns }).(pulumi.StringArrayOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) []string { return v.DnsSuffixes }).(pulumi.StringArrayOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigOutput) Gateway6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Gateway6 }).(pulumi.StringPtrOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigOutput) Ip6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Ip6 }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigOutput) Netmask6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Netmask6 }).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o DeviceprofileApIpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// enum: `autoconf`, `dhcp`, `disabled`, `static`
func (o DeviceprofileApIpConfigOutput) Type6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *string { return v.Type6 }).(pulumi.StringPtrOutput)
}

// management vlan id, default is 1 (untagged)
func (o DeviceprofileApIpConfigOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApIpConfig) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

type DeviceprofileApIpConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApIpConfig)(nil)).Elem()
}

func (o DeviceprofileApIpConfigPtrOutput) ToDeviceprofileApIpConfigPtrOutput() DeviceprofileApIpConfigPtrOutput {
	return o
}

func (o DeviceprofileApIpConfigPtrOutput) ToDeviceprofileApIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApIpConfigPtrOutput {
	return o
}

func (o DeviceprofileApIpConfigPtrOutput) Elem() DeviceprofileApIpConfigOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) DeviceprofileApIpConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApIpConfig
		return ret
	}).(DeviceprofileApIpConfigOutput)
}

// if `type`==`static`
func (o DeviceprofileApIpConfigPtrOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) []string {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(pulumi.StringArrayOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigPtrOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) []string {
		if v == nil {
			return nil
		}
		return v.DnsSuffixes
	}).(pulumi.StringArrayOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigPtrOutput) Gateway6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Gateway6
	}).(pulumi.StringPtrOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigPtrOutput) Ip6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Ip6
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigPtrOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *int {
		if v == nil {
			return nil
		}
		return v.Mtu
	}).(pulumi.IntPtrOutput)
}

// required if `type`==`static`
func (o DeviceprofileApIpConfigPtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileApIpConfigPtrOutput) Netmask6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Netmask6
	}).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o DeviceprofileApIpConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// enum: `autoconf`, `dhcp`, `disabled`, `static`
func (o DeviceprofileApIpConfigPtrOutput) Type6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type6
	}).(pulumi.StringPtrOutput)
}

// management vlan id, default is 1 (untagged)
func (o DeviceprofileApIpConfigPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApIpConfig) *int {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.IntPtrOutput)
}

type DeviceprofileApLed struct {
	Brightness *int  `pulumi:"brightness"`
	Enabled    *bool `pulumi:"enabled"`
}

// DeviceprofileApLedInput is an input type that accepts DeviceprofileApLedArgs and DeviceprofileApLedOutput values.
// You can construct a concrete instance of `DeviceprofileApLedInput` via:
//
//	DeviceprofileApLedArgs{...}
type DeviceprofileApLedInput interface {
	pulumi.Input

	ToDeviceprofileApLedOutput() DeviceprofileApLedOutput
	ToDeviceprofileApLedOutputWithContext(context.Context) DeviceprofileApLedOutput
}

type DeviceprofileApLedArgs struct {
	Brightness pulumi.IntPtrInput  `pulumi:"brightness"`
	Enabled    pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DeviceprofileApLedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApLed)(nil)).Elem()
}

func (i DeviceprofileApLedArgs) ToDeviceprofileApLedOutput() DeviceprofileApLedOutput {
	return i.ToDeviceprofileApLedOutputWithContext(context.Background())
}

func (i DeviceprofileApLedArgs) ToDeviceprofileApLedOutputWithContext(ctx context.Context) DeviceprofileApLedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApLedOutput)
}

func (i DeviceprofileApLedArgs) ToDeviceprofileApLedPtrOutput() DeviceprofileApLedPtrOutput {
	return i.ToDeviceprofileApLedPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApLedArgs) ToDeviceprofileApLedPtrOutputWithContext(ctx context.Context) DeviceprofileApLedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApLedOutput).ToDeviceprofileApLedPtrOutputWithContext(ctx)
}

// DeviceprofileApLedPtrInput is an input type that accepts DeviceprofileApLedArgs, DeviceprofileApLedPtr and DeviceprofileApLedPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApLedPtrInput` via:
//
//	        DeviceprofileApLedArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApLedPtrInput interface {
	pulumi.Input

	ToDeviceprofileApLedPtrOutput() DeviceprofileApLedPtrOutput
	ToDeviceprofileApLedPtrOutputWithContext(context.Context) DeviceprofileApLedPtrOutput
}

type deviceprofileApLedPtrType DeviceprofileApLedArgs

func DeviceprofileApLedPtr(v *DeviceprofileApLedArgs) DeviceprofileApLedPtrInput {
	return (*deviceprofileApLedPtrType)(v)
}

func (*deviceprofileApLedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApLed)(nil)).Elem()
}

func (i *deviceprofileApLedPtrType) ToDeviceprofileApLedPtrOutput() DeviceprofileApLedPtrOutput {
	return i.ToDeviceprofileApLedPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApLedPtrType) ToDeviceprofileApLedPtrOutputWithContext(ctx context.Context) DeviceprofileApLedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApLedPtrOutput)
}

type DeviceprofileApLedOutput struct{ *pulumi.OutputState }

func (DeviceprofileApLedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApLed)(nil)).Elem()
}

func (o DeviceprofileApLedOutput) ToDeviceprofileApLedOutput() DeviceprofileApLedOutput {
	return o
}

func (o DeviceprofileApLedOutput) ToDeviceprofileApLedOutputWithContext(ctx context.Context) DeviceprofileApLedOutput {
	return o
}

func (o DeviceprofileApLedOutput) ToDeviceprofileApLedPtrOutput() DeviceprofileApLedPtrOutput {
	return o.ToDeviceprofileApLedPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApLedOutput) ToDeviceprofileApLedPtrOutputWithContext(ctx context.Context) DeviceprofileApLedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApLed) *DeviceprofileApLed {
		return &v
	}).(DeviceprofileApLedPtrOutput)
}

func (o DeviceprofileApLedOutput) Brightness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApLed) *int { return v.Brightness }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApLedOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApLed) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileApLedPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApLedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApLed)(nil)).Elem()
}

func (o DeviceprofileApLedPtrOutput) ToDeviceprofileApLedPtrOutput() DeviceprofileApLedPtrOutput {
	return o
}

func (o DeviceprofileApLedPtrOutput) ToDeviceprofileApLedPtrOutputWithContext(ctx context.Context) DeviceprofileApLedPtrOutput {
	return o
}

func (o DeviceprofileApLedPtrOutput) Elem() DeviceprofileApLedOutput {
	return o.ApplyT(func(v *DeviceprofileApLed) DeviceprofileApLed {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApLed
		return ret
	}).(DeviceprofileApLedOutput)
}

func (o DeviceprofileApLedPtrOutput) Brightness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApLed) *int {
		if v == nil {
			return nil
		}
		return v.Brightness
	}).(pulumi.IntPtrOutput)
}

func (o DeviceprofileApLedPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApLed) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileApMesh struct {
	// whether mesh is enabled on this AP
	Enabled *bool `pulumi:"enabled"`
	// mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
	Group *int `pulumi:"group"`
	// enum: `base`, `remote`
	Role *string `pulumi:"role"`
}

// DeviceprofileApMeshInput is an input type that accepts DeviceprofileApMeshArgs and DeviceprofileApMeshOutput values.
// You can construct a concrete instance of `DeviceprofileApMeshInput` via:
//
//	DeviceprofileApMeshArgs{...}
type DeviceprofileApMeshInput interface {
	pulumi.Input

	ToDeviceprofileApMeshOutput() DeviceprofileApMeshOutput
	ToDeviceprofileApMeshOutputWithContext(context.Context) DeviceprofileApMeshOutput
}

type DeviceprofileApMeshArgs struct {
	// whether mesh is enabled on this AP
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
	Group pulumi.IntPtrInput `pulumi:"group"`
	// enum: `base`, `remote`
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (DeviceprofileApMeshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApMesh)(nil)).Elem()
}

func (i DeviceprofileApMeshArgs) ToDeviceprofileApMeshOutput() DeviceprofileApMeshOutput {
	return i.ToDeviceprofileApMeshOutputWithContext(context.Background())
}

func (i DeviceprofileApMeshArgs) ToDeviceprofileApMeshOutputWithContext(ctx context.Context) DeviceprofileApMeshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApMeshOutput)
}

func (i DeviceprofileApMeshArgs) ToDeviceprofileApMeshPtrOutput() DeviceprofileApMeshPtrOutput {
	return i.ToDeviceprofileApMeshPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApMeshArgs) ToDeviceprofileApMeshPtrOutputWithContext(ctx context.Context) DeviceprofileApMeshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApMeshOutput).ToDeviceprofileApMeshPtrOutputWithContext(ctx)
}

// DeviceprofileApMeshPtrInput is an input type that accepts DeviceprofileApMeshArgs, DeviceprofileApMeshPtr and DeviceprofileApMeshPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApMeshPtrInput` via:
//
//	        DeviceprofileApMeshArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApMeshPtrInput interface {
	pulumi.Input

	ToDeviceprofileApMeshPtrOutput() DeviceprofileApMeshPtrOutput
	ToDeviceprofileApMeshPtrOutputWithContext(context.Context) DeviceprofileApMeshPtrOutput
}

type deviceprofileApMeshPtrType DeviceprofileApMeshArgs

func DeviceprofileApMeshPtr(v *DeviceprofileApMeshArgs) DeviceprofileApMeshPtrInput {
	return (*deviceprofileApMeshPtrType)(v)
}

func (*deviceprofileApMeshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApMesh)(nil)).Elem()
}

func (i *deviceprofileApMeshPtrType) ToDeviceprofileApMeshPtrOutput() DeviceprofileApMeshPtrOutput {
	return i.ToDeviceprofileApMeshPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApMeshPtrType) ToDeviceprofileApMeshPtrOutputWithContext(ctx context.Context) DeviceprofileApMeshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApMeshPtrOutput)
}

type DeviceprofileApMeshOutput struct{ *pulumi.OutputState }

func (DeviceprofileApMeshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApMesh)(nil)).Elem()
}

func (o DeviceprofileApMeshOutput) ToDeviceprofileApMeshOutput() DeviceprofileApMeshOutput {
	return o
}

func (o DeviceprofileApMeshOutput) ToDeviceprofileApMeshOutputWithContext(ctx context.Context) DeviceprofileApMeshOutput {
	return o
}

func (o DeviceprofileApMeshOutput) ToDeviceprofileApMeshPtrOutput() DeviceprofileApMeshPtrOutput {
	return o.ToDeviceprofileApMeshPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApMeshOutput) ToDeviceprofileApMeshPtrOutputWithContext(ctx context.Context) DeviceprofileApMeshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApMesh) *DeviceprofileApMesh {
		return &v
	}).(DeviceprofileApMeshPtrOutput)
}

// whether mesh is enabled on this AP
func (o DeviceprofileApMeshOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApMesh) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
func (o DeviceprofileApMeshOutput) Group() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApMesh) *int { return v.Group }).(pulumi.IntPtrOutput)
}

// enum: `base`, `remote`
func (o DeviceprofileApMeshOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApMesh) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type DeviceprofileApMeshPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApMeshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApMesh)(nil)).Elem()
}

func (o DeviceprofileApMeshPtrOutput) ToDeviceprofileApMeshPtrOutput() DeviceprofileApMeshPtrOutput {
	return o
}

func (o DeviceprofileApMeshPtrOutput) ToDeviceprofileApMeshPtrOutputWithContext(ctx context.Context) DeviceprofileApMeshPtrOutput {
	return o
}

func (o DeviceprofileApMeshPtrOutput) Elem() DeviceprofileApMeshOutput {
	return o.ApplyT(func(v *DeviceprofileApMesh) DeviceprofileApMesh {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApMesh
		return ret
	}).(DeviceprofileApMeshOutput)
}

// whether mesh is enabled on this AP
func (o DeviceprofileApMeshPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApMesh) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
func (o DeviceprofileApMeshPtrOutput) Group() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApMesh) *int {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.IntPtrOutput)
}

// enum: `base`, `remote`
func (o DeviceprofileApMeshPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApMesh) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileApPwrConfig struct {
	// additional power to request during negotiating with PSE over PoE, in mW
	Base *int `pulumi:"base"`
	// whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
	PreferUsbOverWifi *bool `pulumi:"preferUsbOverWifi"`
}

// DeviceprofileApPwrConfigInput is an input type that accepts DeviceprofileApPwrConfigArgs and DeviceprofileApPwrConfigOutput values.
// You can construct a concrete instance of `DeviceprofileApPwrConfigInput` via:
//
//	DeviceprofileApPwrConfigArgs{...}
type DeviceprofileApPwrConfigInput interface {
	pulumi.Input

	ToDeviceprofileApPwrConfigOutput() DeviceprofileApPwrConfigOutput
	ToDeviceprofileApPwrConfigOutputWithContext(context.Context) DeviceprofileApPwrConfigOutput
}

type DeviceprofileApPwrConfigArgs struct {
	// additional power to request during negotiating with PSE over PoE, in mW
	Base pulumi.IntPtrInput `pulumi:"base"`
	// whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
	PreferUsbOverWifi pulumi.BoolPtrInput `pulumi:"preferUsbOverWifi"`
}

func (DeviceprofileApPwrConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApPwrConfig)(nil)).Elem()
}

func (i DeviceprofileApPwrConfigArgs) ToDeviceprofileApPwrConfigOutput() DeviceprofileApPwrConfigOutput {
	return i.ToDeviceprofileApPwrConfigOutputWithContext(context.Background())
}

func (i DeviceprofileApPwrConfigArgs) ToDeviceprofileApPwrConfigOutputWithContext(ctx context.Context) DeviceprofileApPwrConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApPwrConfigOutput)
}

func (i DeviceprofileApPwrConfigArgs) ToDeviceprofileApPwrConfigPtrOutput() DeviceprofileApPwrConfigPtrOutput {
	return i.ToDeviceprofileApPwrConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApPwrConfigArgs) ToDeviceprofileApPwrConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApPwrConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApPwrConfigOutput).ToDeviceprofileApPwrConfigPtrOutputWithContext(ctx)
}

// DeviceprofileApPwrConfigPtrInput is an input type that accepts DeviceprofileApPwrConfigArgs, DeviceprofileApPwrConfigPtr and DeviceprofileApPwrConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApPwrConfigPtrInput` via:
//
//	        DeviceprofileApPwrConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApPwrConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileApPwrConfigPtrOutput() DeviceprofileApPwrConfigPtrOutput
	ToDeviceprofileApPwrConfigPtrOutputWithContext(context.Context) DeviceprofileApPwrConfigPtrOutput
}

type deviceprofileApPwrConfigPtrType DeviceprofileApPwrConfigArgs

func DeviceprofileApPwrConfigPtr(v *DeviceprofileApPwrConfigArgs) DeviceprofileApPwrConfigPtrInput {
	return (*deviceprofileApPwrConfigPtrType)(v)
}

func (*deviceprofileApPwrConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApPwrConfig)(nil)).Elem()
}

func (i *deviceprofileApPwrConfigPtrType) ToDeviceprofileApPwrConfigPtrOutput() DeviceprofileApPwrConfigPtrOutput {
	return i.ToDeviceprofileApPwrConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApPwrConfigPtrType) ToDeviceprofileApPwrConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApPwrConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApPwrConfigPtrOutput)
}

type DeviceprofileApPwrConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileApPwrConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApPwrConfig)(nil)).Elem()
}

func (o DeviceprofileApPwrConfigOutput) ToDeviceprofileApPwrConfigOutput() DeviceprofileApPwrConfigOutput {
	return o
}

func (o DeviceprofileApPwrConfigOutput) ToDeviceprofileApPwrConfigOutputWithContext(ctx context.Context) DeviceprofileApPwrConfigOutput {
	return o
}

func (o DeviceprofileApPwrConfigOutput) ToDeviceprofileApPwrConfigPtrOutput() DeviceprofileApPwrConfigPtrOutput {
	return o.ToDeviceprofileApPwrConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApPwrConfigOutput) ToDeviceprofileApPwrConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApPwrConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApPwrConfig) *DeviceprofileApPwrConfig {
		return &v
	}).(DeviceprofileApPwrConfigPtrOutput)
}

// additional power to request during negotiating with PSE over PoE, in mW
func (o DeviceprofileApPwrConfigOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApPwrConfig) *int { return v.Base }).(pulumi.IntPtrOutput)
}

// whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
func (o DeviceprofileApPwrConfigOutput) PreferUsbOverWifi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApPwrConfig) *bool { return v.PreferUsbOverWifi }).(pulumi.BoolPtrOutput)
}

type DeviceprofileApPwrConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApPwrConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApPwrConfig)(nil)).Elem()
}

func (o DeviceprofileApPwrConfigPtrOutput) ToDeviceprofileApPwrConfigPtrOutput() DeviceprofileApPwrConfigPtrOutput {
	return o
}

func (o DeviceprofileApPwrConfigPtrOutput) ToDeviceprofileApPwrConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApPwrConfigPtrOutput {
	return o
}

func (o DeviceprofileApPwrConfigPtrOutput) Elem() DeviceprofileApPwrConfigOutput {
	return o.ApplyT(func(v *DeviceprofileApPwrConfig) DeviceprofileApPwrConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApPwrConfig
		return ret
	}).(DeviceprofileApPwrConfigOutput)
}

// additional power to request during negotiating with PSE over PoE, in mW
func (o DeviceprofileApPwrConfigPtrOutput) Base() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApPwrConfig) *int {
		if v == nil {
			return nil
		}
		return v.Base
	}).(pulumi.IntPtrOutput)
}

// whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
func (o DeviceprofileApPwrConfigPtrOutput) PreferUsbOverWifi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApPwrConfig) *bool {
		if v == nil {
			return nil
		}
		return v.PreferUsbOverWifi
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileApRadioConfig struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	// antenna gain for 2.4G - for models with external antenna only
	AntGain24 *int `pulumi:"antGain24"`
	// antenna gain for 5G - for models with external antenna only
	AntGain5 *int `pulumi:"antGain5"`
	// antenna gain for 6G - for models with external antenna only
	AntGain6 *int `pulumi:"antGain6"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// Radio Band AP settings
	Band24 *DeviceprofileApRadioConfigBand24 `pulumi:"band24"`
	// enum: `24`, `5`, `6`, `auto`
	Band24Usage *string `pulumi:"band24Usage"`
	// Radio Band AP settings
	Band5 *DeviceprofileApRadioConfigBand5 `pulumi:"band5"`
	// Radio Band AP settings
	Band5On24Radio *DeviceprofileApRadioConfigBand5On24Radio `pulumi:"band5On24Radio"`
	// Radio Band AP settings
	Band6 *DeviceprofileApRadioConfigBand6 `pulumi:"band6"`
	// to make an outdoor operate indoor.
	// for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
	IndoorUse *bool `pulumi:"indoorUse"`
	// whether scanning radio is enabled
	ScanningEnabled *bool `pulumi:"scanningEnabled"`
}

// DeviceprofileApRadioConfigInput is an input type that accepts DeviceprofileApRadioConfigArgs and DeviceprofileApRadioConfigOutput values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigInput` via:
//
//	DeviceprofileApRadioConfigArgs{...}
type DeviceprofileApRadioConfigInput interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigOutput() DeviceprofileApRadioConfigOutput
	ToDeviceprofileApRadioConfigOutputWithContext(context.Context) DeviceprofileApRadioConfigOutput
}

type DeviceprofileApRadioConfigArgs struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	// antenna gain for 2.4G - for models with external antenna only
	AntGain24 pulumi.IntPtrInput `pulumi:"antGain24"`
	// antenna gain for 5G - for models with external antenna only
	AntGain5 pulumi.IntPtrInput `pulumi:"antGain5"`
	// antenna gain for 6G - for models with external antenna only
	AntGain6 pulumi.IntPtrInput `pulumi:"antGain6"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// Radio Band AP settings
	Band24 DeviceprofileApRadioConfigBand24PtrInput `pulumi:"band24"`
	// enum: `24`, `5`, `6`, `auto`
	Band24Usage pulumi.StringPtrInput `pulumi:"band24Usage"`
	// Radio Band AP settings
	Band5 DeviceprofileApRadioConfigBand5PtrInput `pulumi:"band5"`
	// Radio Band AP settings
	Band5On24Radio DeviceprofileApRadioConfigBand5On24RadioPtrInput `pulumi:"band5On24Radio"`
	// Radio Band AP settings
	Band6 DeviceprofileApRadioConfigBand6PtrInput `pulumi:"band6"`
	// to make an outdoor operate indoor.
	// for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
	IndoorUse pulumi.BoolPtrInput `pulumi:"indoorUse"`
	// whether scanning radio is enabled
	ScanningEnabled pulumi.BoolPtrInput `pulumi:"scanningEnabled"`
}

func (DeviceprofileApRadioConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfig)(nil)).Elem()
}

func (i DeviceprofileApRadioConfigArgs) ToDeviceprofileApRadioConfigOutput() DeviceprofileApRadioConfigOutput {
	return i.ToDeviceprofileApRadioConfigOutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigArgs) ToDeviceprofileApRadioConfigOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigOutput)
}

func (i DeviceprofileApRadioConfigArgs) ToDeviceprofileApRadioConfigPtrOutput() DeviceprofileApRadioConfigPtrOutput {
	return i.ToDeviceprofileApRadioConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigArgs) ToDeviceprofileApRadioConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigOutput).ToDeviceprofileApRadioConfigPtrOutputWithContext(ctx)
}

// DeviceprofileApRadioConfigPtrInput is an input type that accepts DeviceprofileApRadioConfigArgs, DeviceprofileApRadioConfigPtr and DeviceprofileApRadioConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigPtrInput` via:
//
//	        DeviceprofileApRadioConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApRadioConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigPtrOutput() DeviceprofileApRadioConfigPtrOutput
	ToDeviceprofileApRadioConfigPtrOutputWithContext(context.Context) DeviceprofileApRadioConfigPtrOutput
}

type deviceprofileApRadioConfigPtrType DeviceprofileApRadioConfigArgs

func DeviceprofileApRadioConfigPtr(v *DeviceprofileApRadioConfigArgs) DeviceprofileApRadioConfigPtrInput {
	return (*deviceprofileApRadioConfigPtrType)(v)
}

func (*deviceprofileApRadioConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfig)(nil)).Elem()
}

func (i *deviceprofileApRadioConfigPtrType) ToDeviceprofileApRadioConfigPtrOutput() DeviceprofileApRadioConfigPtrOutput {
	return i.ToDeviceprofileApRadioConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApRadioConfigPtrType) ToDeviceprofileApRadioConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigPtrOutput)
}

type DeviceprofileApRadioConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfig)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigOutput) ToDeviceprofileApRadioConfigOutput() DeviceprofileApRadioConfigOutput {
	return o
}

func (o DeviceprofileApRadioConfigOutput) ToDeviceprofileApRadioConfigOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigOutput {
	return o
}

func (o DeviceprofileApRadioConfigOutput) ToDeviceprofileApRadioConfigPtrOutput() DeviceprofileApRadioConfigPtrOutput {
	return o.ToDeviceprofileApRadioConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApRadioConfigOutput) ToDeviceprofileApRadioConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApRadioConfig) *DeviceprofileApRadioConfig {
		return &v
	}).(DeviceprofileApRadioConfigPtrOutput)
}

func (o DeviceprofileApRadioConfigOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

// antenna gain for 2.4G - for models with external antenna only
func (o DeviceprofileApRadioConfigOutput) AntGain24() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *int { return v.AntGain24 }).(pulumi.IntPtrOutput)
}

// antenna gain for 5G - for models with external antenna only
func (o DeviceprofileApRadioConfigOutput) AntGain5() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *int { return v.AntGain5 }).(pulumi.IntPtrOutput)
}

// antenna gain for 6G - for models with external antenna only
func (o DeviceprofileApRadioConfigOutput) AntGain6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *int { return v.AntGain6 }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigOutput) Band24() DeviceprofileApRadioConfigBand24PtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand24 { return v.Band24 }).(DeviceprofileApRadioConfigBand24PtrOutput)
}

// enum: `24`, `5`, `6`, `auto`
func (o DeviceprofileApRadioConfigOutput) Band24Usage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *string { return v.Band24Usage }).(pulumi.StringPtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigOutput) Band5() DeviceprofileApRadioConfigBand5PtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand5 { return v.Band5 }).(DeviceprofileApRadioConfigBand5PtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigOutput) Band5On24Radio() DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand5On24Radio { return v.Band5On24Radio }).(DeviceprofileApRadioConfigBand5On24RadioPtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigOutput) Band6() DeviceprofileApRadioConfigBand6PtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand6 { return v.Band6 }).(DeviceprofileApRadioConfigBand6PtrOutput)
}

// to make an outdoor operate indoor.
// for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
func (o DeviceprofileApRadioConfigOutput) IndoorUse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *bool { return v.IndoorUse }).(pulumi.BoolPtrOutput)
}

// whether scanning radio is enabled
func (o DeviceprofileApRadioConfigOutput) ScanningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfig) *bool { return v.ScanningEnabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileApRadioConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfig)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigPtrOutput) ToDeviceprofileApRadioConfigPtrOutput() DeviceprofileApRadioConfigPtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigPtrOutput) ToDeviceprofileApRadioConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigPtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigPtrOutput) Elem() DeviceprofileApRadioConfigOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) DeviceprofileApRadioConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApRadioConfig
		return ret
	}).(DeviceprofileApRadioConfigOutput)
}

func (o DeviceprofileApRadioConfigPtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

// antenna gain for 2.4G - for models with external antenna only
func (o DeviceprofileApRadioConfigPtrOutput) AntGain24() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *int {
		if v == nil {
			return nil
		}
		return v.AntGain24
	}).(pulumi.IntPtrOutput)
}

// antenna gain for 5G - for models with external antenna only
func (o DeviceprofileApRadioConfigPtrOutput) AntGain5() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *int {
		if v == nil {
			return nil
		}
		return v.AntGain5
	}).(pulumi.IntPtrOutput)
}

// antenna gain for 6G - for models with external antenna only
func (o DeviceprofileApRadioConfigPtrOutput) AntGain6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *int {
		if v == nil {
			return nil
		}
		return v.AntGain6
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigPtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigPtrOutput) Band24() DeviceprofileApRadioConfigBand24PtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand24 {
		if v == nil {
			return nil
		}
		return v.Band24
	}).(DeviceprofileApRadioConfigBand24PtrOutput)
}

// enum: `24`, `5`, `6`, `auto`
func (o DeviceprofileApRadioConfigPtrOutput) Band24Usage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *string {
		if v == nil {
			return nil
		}
		return v.Band24Usage
	}).(pulumi.StringPtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigPtrOutput) Band5() DeviceprofileApRadioConfigBand5PtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand5 {
		if v == nil {
			return nil
		}
		return v.Band5
	}).(DeviceprofileApRadioConfigBand5PtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigPtrOutput) Band5On24Radio() DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand5On24Radio {
		if v == nil {
			return nil
		}
		return v.Band5On24Radio
	}).(DeviceprofileApRadioConfigBand5On24RadioPtrOutput)
}

// Radio Band AP settings
func (o DeviceprofileApRadioConfigPtrOutput) Band6() DeviceprofileApRadioConfigBand6PtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *DeviceprofileApRadioConfigBand6 {
		if v == nil {
			return nil
		}
		return v.Band6
	}).(DeviceprofileApRadioConfigBand6PtrOutput)
}

// to make an outdoor operate indoor.
// for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
func (o DeviceprofileApRadioConfigPtrOutput) IndoorUse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IndoorUse
	}).(pulumi.BoolPtrOutput)
}

// whether scanning radio is enabled
func (o DeviceprofileApRadioConfigPtrOutput) ScanningEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ScanningEnabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileApRadioConfigBand24 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 2.4GHz band. enum: `20`, `40`
	Bandwidth *int `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel *int `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// DeviceprofileApRadioConfigBand24Input is an input type that accepts DeviceprofileApRadioConfigBand24Args and DeviceprofileApRadioConfigBand24Output values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand24Input` via:
//
//	DeviceprofileApRadioConfigBand24Args{...}
type DeviceprofileApRadioConfigBand24Input interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand24Output() DeviceprofileApRadioConfigBand24Output
	ToDeviceprofileApRadioConfigBand24OutputWithContext(context.Context) DeviceprofileApRadioConfigBand24Output
}

type DeviceprofileApRadioConfigBand24Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 2.4GHz band. enum: `20`, `40`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel pulumi.IntPtrInput `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (DeviceprofileApRadioConfigBand24Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand24)(nil)).Elem()
}

func (i DeviceprofileApRadioConfigBand24Args) ToDeviceprofileApRadioConfigBand24Output() DeviceprofileApRadioConfigBand24Output {
	return i.ToDeviceprofileApRadioConfigBand24OutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand24Args) ToDeviceprofileApRadioConfigBand24OutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand24Output {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand24Output)
}

func (i DeviceprofileApRadioConfigBand24Args) ToDeviceprofileApRadioConfigBand24PtrOutput() DeviceprofileApRadioConfigBand24PtrOutput {
	return i.ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand24Args) ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand24PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand24Output).ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(ctx)
}

// DeviceprofileApRadioConfigBand24PtrInput is an input type that accepts DeviceprofileApRadioConfigBand24Args, DeviceprofileApRadioConfigBand24Ptr and DeviceprofileApRadioConfigBand24PtrOutput values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand24PtrInput` via:
//
//	        DeviceprofileApRadioConfigBand24Args{...}
//
//	or:
//
//	        nil
type DeviceprofileApRadioConfigBand24PtrInput interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand24PtrOutput() DeviceprofileApRadioConfigBand24PtrOutput
	ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(context.Context) DeviceprofileApRadioConfigBand24PtrOutput
}

type deviceprofileApRadioConfigBand24PtrType DeviceprofileApRadioConfigBand24Args

func DeviceprofileApRadioConfigBand24Ptr(v *DeviceprofileApRadioConfigBand24Args) DeviceprofileApRadioConfigBand24PtrInput {
	return (*deviceprofileApRadioConfigBand24PtrType)(v)
}

func (*deviceprofileApRadioConfigBand24PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand24)(nil)).Elem()
}

func (i *deviceprofileApRadioConfigBand24PtrType) ToDeviceprofileApRadioConfigBand24PtrOutput() DeviceprofileApRadioConfigBand24PtrOutput {
	return i.ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(context.Background())
}

func (i *deviceprofileApRadioConfigBand24PtrType) ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand24PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand24PtrOutput)
}

type DeviceprofileApRadioConfigBand24Output struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand24Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand24)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand24Output) ToDeviceprofileApRadioConfigBand24Output() DeviceprofileApRadioConfigBand24Output {
	return o
}

func (o DeviceprofileApRadioConfigBand24Output) ToDeviceprofileApRadioConfigBand24OutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand24Output {
	return o
}

func (o DeviceprofileApRadioConfigBand24Output) ToDeviceprofileApRadioConfigBand24PtrOutput() DeviceprofileApRadioConfigBand24PtrOutput {
	return o.ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(context.Background())
}

func (o DeviceprofileApRadioConfigBand24Output) ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand24PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApRadioConfigBand24) *DeviceprofileApRadioConfigBand24 {
		return &v
	}).(DeviceprofileApRadioConfigBand24PtrOutput)
}

func (o DeviceprofileApRadioConfigBand24Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand24Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand24Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 2.4GHz band. enum: `20`, `40`
func (o DeviceprofileApRadioConfigBand24Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand24Output) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *int { return v.Channel }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand24Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand24Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand24Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand24Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand24Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand24Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand24) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type DeviceprofileApRadioConfigBand24PtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand24PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand24)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand24PtrOutput) ToDeviceprofileApRadioConfigBand24PtrOutput() DeviceprofileApRadioConfigBand24PtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand24PtrOutput) ToDeviceprofileApRadioConfigBand24PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand24PtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand24PtrOutput) Elem() DeviceprofileApRadioConfigBand24Output {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) DeviceprofileApRadioConfigBand24 {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApRadioConfigBand24
		return ret
	}).(DeviceprofileApRadioConfigBand24Output)
}

func (o DeviceprofileApRadioConfigBand24PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand24PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand24PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 2.4GHz band. enum: `20`, `40`
func (o DeviceprofileApRadioConfigBand24PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand24PtrOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *int {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand24PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand24PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand24PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand24PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand24PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand24PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand24) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileApRadioConfigBand5 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth *int `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel *int `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// DeviceprofileApRadioConfigBand5Input is an input type that accepts DeviceprofileApRadioConfigBand5Args and DeviceprofileApRadioConfigBand5Output values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand5Input` via:
//
//	DeviceprofileApRadioConfigBand5Args{...}
type DeviceprofileApRadioConfigBand5Input interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand5Output() DeviceprofileApRadioConfigBand5Output
	ToDeviceprofileApRadioConfigBand5OutputWithContext(context.Context) DeviceprofileApRadioConfigBand5Output
}

type DeviceprofileApRadioConfigBand5Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel pulumi.IntPtrInput `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (DeviceprofileApRadioConfigBand5Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand5)(nil)).Elem()
}

func (i DeviceprofileApRadioConfigBand5Args) ToDeviceprofileApRadioConfigBand5Output() DeviceprofileApRadioConfigBand5Output {
	return i.ToDeviceprofileApRadioConfigBand5OutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand5Args) ToDeviceprofileApRadioConfigBand5OutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5Output {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand5Output)
}

func (i DeviceprofileApRadioConfigBand5Args) ToDeviceprofileApRadioConfigBand5PtrOutput() DeviceprofileApRadioConfigBand5PtrOutput {
	return i.ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand5Args) ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand5Output).ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(ctx)
}

// DeviceprofileApRadioConfigBand5PtrInput is an input type that accepts DeviceprofileApRadioConfigBand5Args, DeviceprofileApRadioConfigBand5Ptr and DeviceprofileApRadioConfigBand5PtrOutput values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand5PtrInput` via:
//
//	        DeviceprofileApRadioConfigBand5Args{...}
//
//	or:
//
//	        nil
type DeviceprofileApRadioConfigBand5PtrInput interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand5PtrOutput() DeviceprofileApRadioConfigBand5PtrOutput
	ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(context.Context) DeviceprofileApRadioConfigBand5PtrOutput
}

type deviceprofileApRadioConfigBand5PtrType DeviceprofileApRadioConfigBand5Args

func DeviceprofileApRadioConfigBand5Ptr(v *DeviceprofileApRadioConfigBand5Args) DeviceprofileApRadioConfigBand5PtrInput {
	return (*deviceprofileApRadioConfigBand5PtrType)(v)
}

func (*deviceprofileApRadioConfigBand5PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand5)(nil)).Elem()
}

func (i *deviceprofileApRadioConfigBand5PtrType) ToDeviceprofileApRadioConfigBand5PtrOutput() DeviceprofileApRadioConfigBand5PtrOutput {
	return i.ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(context.Background())
}

func (i *deviceprofileApRadioConfigBand5PtrType) ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand5PtrOutput)
}

type DeviceprofileApRadioConfigBand5Output struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand5Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand5)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand5Output) ToDeviceprofileApRadioConfigBand5Output() DeviceprofileApRadioConfigBand5Output {
	return o
}

func (o DeviceprofileApRadioConfigBand5Output) ToDeviceprofileApRadioConfigBand5OutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5Output {
	return o
}

func (o DeviceprofileApRadioConfigBand5Output) ToDeviceprofileApRadioConfigBand5PtrOutput() DeviceprofileApRadioConfigBand5PtrOutput {
	return o.ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(context.Background())
}

func (o DeviceprofileApRadioConfigBand5Output) ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApRadioConfigBand5) *DeviceprofileApRadioConfigBand5 {
		return &v
	}).(DeviceprofileApRadioConfigBand5PtrOutput)
}

func (o DeviceprofileApRadioConfigBand5Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand5Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand5Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o DeviceprofileApRadioConfigBand5Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand5Output) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *int { return v.Channel }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand5Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand5Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand5Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand5Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type DeviceprofileApRadioConfigBand5PtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand5PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand5)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand5PtrOutput) ToDeviceprofileApRadioConfigBand5PtrOutput() DeviceprofileApRadioConfigBand5PtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand5PtrOutput) ToDeviceprofileApRadioConfigBand5PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5PtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand5PtrOutput) Elem() DeviceprofileApRadioConfigBand5Output {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) DeviceprofileApRadioConfigBand5 {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApRadioConfigBand5
		return ret
	}).(DeviceprofileApRadioConfigBand5Output)
}

func (o DeviceprofileApRadioConfigBand5PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand5PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand5PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o DeviceprofileApRadioConfigBand5PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand5PtrOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *int {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand5PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand5PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand5PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand5PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileApRadioConfigBand5On24Radio struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth *int `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel *int `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// DeviceprofileApRadioConfigBand5On24RadioInput is an input type that accepts DeviceprofileApRadioConfigBand5On24RadioArgs and DeviceprofileApRadioConfigBand5On24RadioOutput values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand5On24RadioInput` via:
//
//	DeviceprofileApRadioConfigBand5On24RadioArgs{...}
type DeviceprofileApRadioConfigBand5On24RadioInput interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand5On24RadioOutput() DeviceprofileApRadioConfigBand5On24RadioOutput
	ToDeviceprofileApRadioConfigBand5On24RadioOutputWithContext(context.Context) DeviceprofileApRadioConfigBand5On24RadioOutput
}

type DeviceprofileApRadioConfigBand5On24RadioArgs struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel pulumi.IntPtrInput `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (DeviceprofileApRadioConfigBand5On24RadioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand5On24Radio)(nil)).Elem()
}

func (i DeviceprofileApRadioConfigBand5On24RadioArgs) ToDeviceprofileApRadioConfigBand5On24RadioOutput() DeviceprofileApRadioConfigBand5On24RadioOutput {
	return i.ToDeviceprofileApRadioConfigBand5On24RadioOutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand5On24RadioArgs) ToDeviceprofileApRadioConfigBand5On24RadioOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5On24RadioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand5On24RadioOutput)
}

func (i DeviceprofileApRadioConfigBand5On24RadioArgs) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutput() DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return i.ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand5On24RadioArgs) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand5On24RadioOutput).ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(ctx)
}

// DeviceprofileApRadioConfigBand5On24RadioPtrInput is an input type that accepts DeviceprofileApRadioConfigBand5On24RadioArgs, DeviceprofileApRadioConfigBand5On24RadioPtr and DeviceprofileApRadioConfigBand5On24RadioPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand5On24RadioPtrInput` via:
//
//	        DeviceprofileApRadioConfigBand5On24RadioArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApRadioConfigBand5On24RadioPtrInput interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand5On24RadioPtrOutput() DeviceprofileApRadioConfigBand5On24RadioPtrOutput
	ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(context.Context) DeviceprofileApRadioConfigBand5On24RadioPtrOutput
}

type deviceprofileApRadioConfigBand5On24RadioPtrType DeviceprofileApRadioConfigBand5On24RadioArgs

func DeviceprofileApRadioConfigBand5On24RadioPtr(v *DeviceprofileApRadioConfigBand5On24RadioArgs) DeviceprofileApRadioConfigBand5On24RadioPtrInput {
	return (*deviceprofileApRadioConfigBand5On24RadioPtrType)(v)
}

func (*deviceprofileApRadioConfigBand5On24RadioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand5On24Radio)(nil)).Elem()
}

func (i *deviceprofileApRadioConfigBand5On24RadioPtrType) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutput() DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return i.ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApRadioConfigBand5On24RadioPtrType) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand5On24RadioPtrOutput)
}

type DeviceprofileApRadioConfigBand5On24RadioOutput struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand5On24RadioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand5On24Radio)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand5On24RadioOutput) ToDeviceprofileApRadioConfigBand5On24RadioOutput() DeviceprofileApRadioConfigBand5On24RadioOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand5On24RadioOutput) ToDeviceprofileApRadioConfigBand5On24RadioOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5On24RadioOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand5On24RadioOutput) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutput() DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return o.ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApRadioConfigBand5On24RadioOutput) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApRadioConfigBand5On24Radio) *DeviceprofileApRadioConfigBand5On24Radio {
		return &v
	}).(DeviceprofileApRadioConfigBand5On24RadioPtrOutput)
}

func (o DeviceprofileApRadioConfigBand5On24RadioOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand5On24RadioOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *int { return v.Channel }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand5On24RadioOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand5On24Radio) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type DeviceprofileApRadioConfigBand5On24RadioPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand5On24RadioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand5On24Radio)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutput() DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) ToDeviceprofileApRadioConfigBand5On24RadioPtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand5On24RadioPtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) Elem() DeviceprofileApRadioConfigBand5On24RadioOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) DeviceprofileApRadioConfigBand5On24Radio {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApRadioConfigBand5On24Radio
		return ret
	}).(DeviceprofileApRadioConfigBand5On24RadioOutput)
}

func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand5On24RadioPtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand5On24Radio) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileApRadioConfigBand6 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
	Bandwidth *int `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel *int `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
	// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
	StandardPower *bool `pulumi:"standardPower"`
}

// DeviceprofileApRadioConfigBand6Input is an input type that accepts DeviceprofileApRadioConfigBand6Args and DeviceprofileApRadioConfigBand6Output values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand6Input` via:
//
//	DeviceprofileApRadioConfigBand6Args{...}
type DeviceprofileApRadioConfigBand6Input interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand6Output() DeviceprofileApRadioConfigBand6Output
	ToDeviceprofileApRadioConfigBand6OutputWithContext(context.Context) DeviceprofileApRadioConfigBand6Output
}

type DeviceprofileApRadioConfigBand6Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For Device. (primary) channel for the band, 0 means using the Site Setting
	Channel pulumi.IntPtrInput `pulumi:"channel"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
	// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
	StandardPower pulumi.BoolPtrInput `pulumi:"standardPower"`
}

func (DeviceprofileApRadioConfigBand6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand6)(nil)).Elem()
}

func (i DeviceprofileApRadioConfigBand6Args) ToDeviceprofileApRadioConfigBand6Output() DeviceprofileApRadioConfigBand6Output {
	return i.ToDeviceprofileApRadioConfigBand6OutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand6Args) ToDeviceprofileApRadioConfigBand6OutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand6Output {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand6Output)
}

func (i DeviceprofileApRadioConfigBand6Args) ToDeviceprofileApRadioConfigBand6PtrOutput() DeviceprofileApRadioConfigBand6PtrOutput {
	return i.ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(context.Background())
}

func (i DeviceprofileApRadioConfigBand6Args) ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand6Output).ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(ctx)
}

// DeviceprofileApRadioConfigBand6PtrInput is an input type that accepts DeviceprofileApRadioConfigBand6Args, DeviceprofileApRadioConfigBand6Ptr and DeviceprofileApRadioConfigBand6PtrOutput values.
// You can construct a concrete instance of `DeviceprofileApRadioConfigBand6PtrInput` via:
//
//	        DeviceprofileApRadioConfigBand6Args{...}
//
//	or:
//
//	        nil
type DeviceprofileApRadioConfigBand6PtrInput interface {
	pulumi.Input

	ToDeviceprofileApRadioConfigBand6PtrOutput() DeviceprofileApRadioConfigBand6PtrOutput
	ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(context.Context) DeviceprofileApRadioConfigBand6PtrOutput
}

type deviceprofileApRadioConfigBand6PtrType DeviceprofileApRadioConfigBand6Args

func DeviceprofileApRadioConfigBand6Ptr(v *DeviceprofileApRadioConfigBand6Args) DeviceprofileApRadioConfigBand6PtrInput {
	return (*deviceprofileApRadioConfigBand6PtrType)(v)
}

func (*deviceprofileApRadioConfigBand6PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand6)(nil)).Elem()
}

func (i *deviceprofileApRadioConfigBand6PtrType) ToDeviceprofileApRadioConfigBand6PtrOutput() DeviceprofileApRadioConfigBand6PtrOutput {
	return i.ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(context.Background())
}

func (i *deviceprofileApRadioConfigBand6PtrType) ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApRadioConfigBand6PtrOutput)
}

type DeviceprofileApRadioConfigBand6Output struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApRadioConfigBand6)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand6Output) ToDeviceprofileApRadioConfigBand6Output() DeviceprofileApRadioConfigBand6Output {
	return o
}

func (o DeviceprofileApRadioConfigBand6Output) ToDeviceprofileApRadioConfigBand6OutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand6Output {
	return o
}

func (o DeviceprofileApRadioConfigBand6Output) ToDeviceprofileApRadioConfigBand6PtrOutput() DeviceprofileApRadioConfigBand6PtrOutput {
	return o.ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(context.Background())
}

func (o DeviceprofileApRadioConfigBand6Output) ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand6PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApRadioConfigBand6) *DeviceprofileApRadioConfigBand6 {
		return &v
	}).(DeviceprofileApRadioConfigBand6PtrOutput)
}

func (o DeviceprofileApRadioConfigBand6Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand6Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand6Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
func (o DeviceprofileApRadioConfigBand6Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand6Output) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *int { return v.Channel }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand6Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand6Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand6Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand6Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand6Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand6Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
func (o DeviceprofileApRadioConfigBand6Output) StandardPower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApRadioConfigBand6) *bool { return v.StandardPower }).(pulumi.BoolPtrOutput)
}

type DeviceprofileApRadioConfigBand6PtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApRadioConfigBand6PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApRadioConfigBand6)(nil)).Elem()
}

func (o DeviceprofileApRadioConfigBand6PtrOutput) ToDeviceprofileApRadioConfigBand6PtrOutput() DeviceprofileApRadioConfigBand6PtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand6PtrOutput) ToDeviceprofileApRadioConfigBand6PtrOutputWithContext(ctx context.Context) DeviceprofileApRadioConfigBand6PtrOutput {
	return o
}

func (o DeviceprofileApRadioConfigBand6PtrOutput) Elem() DeviceprofileApRadioConfigBand6Output {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) DeviceprofileApRadioConfigBand6 {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApRadioConfigBand6
		return ret
	}).(DeviceprofileApRadioConfigBand6Output)
}

func (o DeviceprofileApRadioConfigBand6PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileApRadioConfigBand6PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o DeviceprofileApRadioConfigBand6PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
func (o DeviceprofileApRadioConfigBand6PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For Device. (primary) channel for the band, 0 means using the Site Setting
func (o DeviceprofileApRadioConfigBand6PtrOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *int {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o DeviceprofileApRadioConfigBand6PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o DeviceprofileApRadioConfigBand6PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o DeviceprofileApRadioConfigBand6PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand6PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o DeviceprofileApRadioConfigBand6PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o DeviceprofileApRadioConfigBand6PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
func (o DeviceprofileApRadioConfigBand6PtrOutput) StandardPower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApRadioConfigBand6) *bool {
		if v == nil {
			return nil
		}
		return v.StandardPower
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileApUplinkPortConfig struct {
	// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
	Dot1x *bool `pulumi:"dot1x"`
	// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
	KeepWlansUpIfDown *bool `pulumi:"keepWlansUpIfDown"`
}

// DeviceprofileApUplinkPortConfigInput is an input type that accepts DeviceprofileApUplinkPortConfigArgs and DeviceprofileApUplinkPortConfigOutput values.
// You can construct a concrete instance of `DeviceprofileApUplinkPortConfigInput` via:
//
//	DeviceprofileApUplinkPortConfigArgs{...}
type DeviceprofileApUplinkPortConfigInput interface {
	pulumi.Input

	ToDeviceprofileApUplinkPortConfigOutput() DeviceprofileApUplinkPortConfigOutput
	ToDeviceprofileApUplinkPortConfigOutputWithContext(context.Context) DeviceprofileApUplinkPortConfigOutput
}

type DeviceprofileApUplinkPortConfigArgs struct {
	// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
	Dot1x pulumi.BoolPtrInput `pulumi:"dot1x"`
	// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
	KeepWlansUpIfDown pulumi.BoolPtrInput `pulumi:"keepWlansUpIfDown"`
}

func (DeviceprofileApUplinkPortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApUplinkPortConfig)(nil)).Elem()
}

func (i DeviceprofileApUplinkPortConfigArgs) ToDeviceprofileApUplinkPortConfigOutput() DeviceprofileApUplinkPortConfigOutput {
	return i.ToDeviceprofileApUplinkPortConfigOutputWithContext(context.Background())
}

func (i DeviceprofileApUplinkPortConfigArgs) ToDeviceprofileApUplinkPortConfigOutputWithContext(ctx context.Context) DeviceprofileApUplinkPortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApUplinkPortConfigOutput)
}

func (i DeviceprofileApUplinkPortConfigArgs) ToDeviceprofileApUplinkPortConfigPtrOutput() DeviceprofileApUplinkPortConfigPtrOutput {
	return i.ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApUplinkPortConfigArgs) ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUplinkPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApUplinkPortConfigOutput).ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(ctx)
}

// DeviceprofileApUplinkPortConfigPtrInput is an input type that accepts DeviceprofileApUplinkPortConfigArgs, DeviceprofileApUplinkPortConfigPtr and DeviceprofileApUplinkPortConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApUplinkPortConfigPtrInput` via:
//
//	        DeviceprofileApUplinkPortConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApUplinkPortConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileApUplinkPortConfigPtrOutput() DeviceprofileApUplinkPortConfigPtrOutput
	ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(context.Context) DeviceprofileApUplinkPortConfigPtrOutput
}

type deviceprofileApUplinkPortConfigPtrType DeviceprofileApUplinkPortConfigArgs

func DeviceprofileApUplinkPortConfigPtr(v *DeviceprofileApUplinkPortConfigArgs) DeviceprofileApUplinkPortConfigPtrInput {
	return (*deviceprofileApUplinkPortConfigPtrType)(v)
}

func (*deviceprofileApUplinkPortConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApUplinkPortConfig)(nil)).Elem()
}

func (i *deviceprofileApUplinkPortConfigPtrType) ToDeviceprofileApUplinkPortConfigPtrOutput() DeviceprofileApUplinkPortConfigPtrOutput {
	return i.ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApUplinkPortConfigPtrType) ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUplinkPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApUplinkPortConfigPtrOutput)
}

type DeviceprofileApUplinkPortConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileApUplinkPortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApUplinkPortConfig)(nil)).Elem()
}

func (o DeviceprofileApUplinkPortConfigOutput) ToDeviceprofileApUplinkPortConfigOutput() DeviceprofileApUplinkPortConfigOutput {
	return o
}

func (o DeviceprofileApUplinkPortConfigOutput) ToDeviceprofileApUplinkPortConfigOutputWithContext(ctx context.Context) DeviceprofileApUplinkPortConfigOutput {
	return o
}

func (o DeviceprofileApUplinkPortConfigOutput) ToDeviceprofileApUplinkPortConfigPtrOutput() DeviceprofileApUplinkPortConfigPtrOutput {
	return o.ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApUplinkPortConfigOutput) ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUplinkPortConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApUplinkPortConfig) *DeviceprofileApUplinkPortConfig {
		return &v
	}).(DeviceprofileApUplinkPortConfigPtrOutput)
}

// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
func (o DeviceprofileApUplinkPortConfigOutput) Dot1x() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUplinkPortConfig) *bool { return v.Dot1x }).(pulumi.BoolPtrOutput)
}

// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
func (o DeviceprofileApUplinkPortConfigOutput) KeepWlansUpIfDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUplinkPortConfig) *bool { return v.KeepWlansUpIfDown }).(pulumi.BoolPtrOutput)
}

type DeviceprofileApUplinkPortConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApUplinkPortConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApUplinkPortConfig)(nil)).Elem()
}

func (o DeviceprofileApUplinkPortConfigPtrOutput) ToDeviceprofileApUplinkPortConfigPtrOutput() DeviceprofileApUplinkPortConfigPtrOutput {
	return o
}

func (o DeviceprofileApUplinkPortConfigPtrOutput) ToDeviceprofileApUplinkPortConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUplinkPortConfigPtrOutput {
	return o
}

func (o DeviceprofileApUplinkPortConfigPtrOutput) Elem() DeviceprofileApUplinkPortConfigOutput {
	return o.ApplyT(func(v *DeviceprofileApUplinkPortConfig) DeviceprofileApUplinkPortConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApUplinkPortConfig
		return ret
	}).(DeviceprofileApUplinkPortConfigOutput)
}

// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
func (o DeviceprofileApUplinkPortConfigPtrOutput) Dot1x() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUplinkPortConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Dot1x
	}).(pulumi.BoolPtrOutput)
}

// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
func (o DeviceprofileApUplinkPortConfigPtrOutput) KeepWlansUpIfDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUplinkPortConfig) *bool {
		if v == nil {
			return nil
		}
		return v.KeepWlansUpIfDown
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileApUsbConfig struct {
	// only if `type`==`imagotag`
	Cacert *string `pulumi:"cacert"`
	// only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
	Channel *int `pulumi:"channel"`
	// whether to enable any usb config
	Enabled *bool `pulumi:"enabled"`
	// only if `type`==`imagotag`
	Host *string `pulumi:"host"`
	// only if `type`==`imagotag`
	Port *int `pulumi:"port"`
	// usb config type. enum: `hanshow`, `imagotag`, `solum`
	Type *string `pulumi:"type"`
	// only if `type`==`imagotag`, whether to turn on SSL verification
	VerifyCert *bool `pulumi:"verifyCert"`
	// only if `type`==`solum` or `type`==`hanshow`
	VlanId *int `pulumi:"vlanId"`
}

// DeviceprofileApUsbConfigInput is an input type that accepts DeviceprofileApUsbConfigArgs and DeviceprofileApUsbConfigOutput values.
// You can construct a concrete instance of `DeviceprofileApUsbConfigInput` via:
//
//	DeviceprofileApUsbConfigArgs{...}
type DeviceprofileApUsbConfigInput interface {
	pulumi.Input

	ToDeviceprofileApUsbConfigOutput() DeviceprofileApUsbConfigOutput
	ToDeviceprofileApUsbConfigOutputWithContext(context.Context) DeviceprofileApUsbConfigOutput
}

type DeviceprofileApUsbConfigArgs struct {
	// only if `type`==`imagotag`
	Cacert pulumi.StringPtrInput `pulumi:"cacert"`
	// only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
	Channel pulumi.IntPtrInput `pulumi:"channel"`
	// whether to enable any usb config
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// only if `type`==`imagotag`
	Host pulumi.StringPtrInput `pulumi:"host"`
	// only if `type`==`imagotag`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// usb config type. enum: `hanshow`, `imagotag`, `solum`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// only if `type`==`imagotag`, whether to turn on SSL verification
	VerifyCert pulumi.BoolPtrInput `pulumi:"verifyCert"`
	// only if `type`==`solum` or `type`==`hanshow`
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
}

func (DeviceprofileApUsbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApUsbConfig)(nil)).Elem()
}

func (i DeviceprofileApUsbConfigArgs) ToDeviceprofileApUsbConfigOutput() DeviceprofileApUsbConfigOutput {
	return i.ToDeviceprofileApUsbConfigOutputWithContext(context.Background())
}

func (i DeviceprofileApUsbConfigArgs) ToDeviceprofileApUsbConfigOutputWithContext(ctx context.Context) DeviceprofileApUsbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApUsbConfigOutput)
}

func (i DeviceprofileApUsbConfigArgs) ToDeviceprofileApUsbConfigPtrOutput() DeviceprofileApUsbConfigPtrOutput {
	return i.ToDeviceprofileApUsbConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileApUsbConfigArgs) ToDeviceprofileApUsbConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUsbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApUsbConfigOutput).ToDeviceprofileApUsbConfigPtrOutputWithContext(ctx)
}

// DeviceprofileApUsbConfigPtrInput is an input type that accepts DeviceprofileApUsbConfigArgs, DeviceprofileApUsbConfigPtr and DeviceprofileApUsbConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileApUsbConfigPtrInput` via:
//
//	        DeviceprofileApUsbConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileApUsbConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileApUsbConfigPtrOutput() DeviceprofileApUsbConfigPtrOutput
	ToDeviceprofileApUsbConfigPtrOutputWithContext(context.Context) DeviceprofileApUsbConfigPtrOutput
}

type deviceprofileApUsbConfigPtrType DeviceprofileApUsbConfigArgs

func DeviceprofileApUsbConfigPtr(v *DeviceprofileApUsbConfigArgs) DeviceprofileApUsbConfigPtrInput {
	return (*deviceprofileApUsbConfigPtrType)(v)
}

func (*deviceprofileApUsbConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApUsbConfig)(nil)).Elem()
}

func (i *deviceprofileApUsbConfigPtrType) ToDeviceprofileApUsbConfigPtrOutput() DeviceprofileApUsbConfigPtrOutput {
	return i.ToDeviceprofileApUsbConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileApUsbConfigPtrType) ToDeviceprofileApUsbConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUsbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileApUsbConfigPtrOutput)
}

type DeviceprofileApUsbConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileApUsbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileApUsbConfig)(nil)).Elem()
}

func (o DeviceprofileApUsbConfigOutput) ToDeviceprofileApUsbConfigOutput() DeviceprofileApUsbConfigOutput {
	return o
}

func (o DeviceprofileApUsbConfigOutput) ToDeviceprofileApUsbConfigOutputWithContext(ctx context.Context) DeviceprofileApUsbConfigOutput {
	return o
}

func (o DeviceprofileApUsbConfigOutput) ToDeviceprofileApUsbConfigPtrOutput() DeviceprofileApUsbConfigPtrOutput {
	return o.ToDeviceprofileApUsbConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileApUsbConfigOutput) ToDeviceprofileApUsbConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUsbConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileApUsbConfig) *DeviceprofileApUsbConfig {
		return &v
	}).(DeviceprofileApUsbConfigPtrOutput)
}

// only if `type`==`imagotag`
func (o DeviceprofileApUsbConfigOutput) Cacert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *string { return v.Cacert }).(pulumi.StringPtrOutput)
}

// only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
func (o DeviceprofileApUsbConfigOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *int { return v.Channel }).(pulumi.IntPtrOutput)
}

// whether to enable any usb config
func (o DeviceprofileApUsbConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// only if `type`==`imagotag`
func (o DeviceprofileApUsbConfigOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// only if `type`==`imagotag`
func (o DeviceprofileApUsbConfigOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// usb config type. enum: `hanshow`, `imagotag`, `solum`
func (o DeviceprofileApUsbConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// only if `type`==`imagotag`, whether to turn on SSL verification
func (o DeviceprofileApUsbConfigOutput) VerifyCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *bool { return v.VerifyCert }).(pulumi.BoolPtrOutput)
}

// only if `type`==`solum` or `type`==`hanshow`
func (o DeviceprofileApUsbConfigOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileApUsbConfig) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

type DeviceprofileApUsbConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileApUsbConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileApUsbConfig)(nil)).Elem()
}

func (o DeviceprofileApUsbConfigPtrOutput) ToDeviceprofileApUsbConfigPtrOutput() DeviceprofileApUsbConfigPtrOutput {
	return o
}

func (o DeviceprofileApUsbConfigPtrOutput) ToDeviceprofileApUsbConfigPtrOutputWithContext(ctx context.Context) DeviceprofileApUsbConfigPtrOutput {
	return o
}

func (o DeviceprofileApUsbConfigPtrOutput) Elem() DeviceprofileApUsbConfigOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) DeviceprofileApUsbConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileApUsbConfig
		return ret
	}).(DeviceprofileApUsbConfigOutput)
}

// only if `type`==`imagotag`
func (o DeviceprofileApUsbConfigPtrOutput) Cacert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *string {
		if v == nil {
			return nil
		}
		return v.Cacert
	}).(pulumi.StringPtrOutput)
}

// only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
func (o DeviceprofileApUsbConfigPtrOutput) Channel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *int {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.IntPtrOutput)
}

// whether to enable any usb config
func (o DeviceprofileApUsbConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// only if `type`==`imagotag`
func (o DeviceprofileApUsbConfigPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// only if `type`==`imagotag`
func (o DeviceprofileApUsbConfigPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// usb config type. enum: `hanshow`, `imagotag`, `solum`
func (o DeviceprofileApUsbConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// only if `type`==`imagotag`, whether to turn on SSL verification
func (o DeviceprofileApUsbConfigPtrOutput) VerifyCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *bool {
		if v == nil {
			return nil
		}
		return v.VerifyCert
	}).(pulumi.BoolPtrOutput)
}

// only if `type`==`solum` or `type`==`hanshow`
func (o DeviceprofileApUsbConfigPtrOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileApUsbConfig) *int {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayBgpConfig struct {
	AuthKey *string `pulumi:"authKey"`
	// when bfdMultiplier is configured alone. Default:
	//   * 1000 if `type`==`external`
	//   * 350 `type`==`internal`
	BfdMinimumInterval *int `pulumi:"bfdMinimumInterval"`
	// when bfdMinimumIntervalIsConfigured alone
	BfdMultiplier *int                                     `pulumi:"bfdMultiplier"`
	Communities   []DeviceprofileGatewayBgpConfigCommunity `pulumi:"communities"`
	// BFD provides faster path failure detection and is enabled by default
	DisableBfd *bool   `pulumi:"disableBfd"`
	Export     *string `pulumi:"export"`
	// default export policies if no per-neighbor policies defined
	ExportPolicy *string `pulumi:"exportPolicy"`
	// by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
	// for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
	ExtendedV4Nexthop *bool `pulumi:"extendedV4Nexthop"`
	// `0` means disable
	GracefulRestartTime *int    `pulumi:"gracefulRestartTime"`
	HoldTime            *int    `pulumi:"holdTime"`
	Import              *string `pulumi:"import"`
	// default import policies if no per-neighbor policies defined
	ImportPolicy *string `pulumi:"importPolicy"`
	LocalAs      *int    `pulumi:"localAs"`
	NeighborAs   *int    `pulumi:"neighborAs"`
	// if per-neighbor as is desired. Property key is the neighbor address
	Neighbors map[string]DeviceprofileGatewayBgpConfigNeighbors `pulumi:"neighbors"`
	// if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
	Networks []string `pulumi:"networks"`
	// by default, we'll re-advertise all learned BGP routers toward overlay
	NoReadvertiseToOverlay *bool `pulumi:"noReadvertiseToOverlay"`
	// enum: `external`, `internal`
	Type *string `pulumi:"type"`
	// network name. enum: `lan`, `vpn`, `wan`
	Via     *string `pulumi:"via"`
	VpnName *string `pulumi:"vpnName"`
	// if `via`==`wan`
	WanName *string `pulumi:"wanName"`
}

// DeviceprofileGatewayBgpConfigInput is an input type that accepts DeviceprofileGatewayBgpConfigArgs and DeviceprofileGatewayBgpConfigOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayBgpConfigInput` via:
//
//	DeviceprofileGatewayBgpConfigArgs{...}
type DeviceprofileGatewayBgpConfigInput interface {
	pulumi.Input

	ToDeviceprofileGatewayBgpConfigOutput() DeviceprofileGatewayBgpConfigOutput
	ToDeviceprofileGatewayBgpConfigOutputWithContext(context.Context) DeviceprofileGatewayBgpConfigOutput
}

type DeviceprofileGatewayBgpConfigArgs struct {
	AuthKey pulumi.StringPtrInput `pulumi:"authKey"`
	// when bfdMultiplier is configured alone. Default:
	//   * 1000 if `type`==`external`
	//   * 350 `type`==`internal`
	BfdMinimumInterval pulumi.IntPtrInput `pulumi:"bfdMinimumInterval"`
	// when bfdMinimumIntervalIsConfigured alone
	BfdMultiplier pulumi.IntPtrInput                               `pulumi:"bfdMultiplier"`
	Communities   DeviceprofileGatewayBgpConfigCommunityArrayInput `pulumi:"communities"`
	// BFD provides faster path failure detection and is enabled by default
	DisableBfd pulumi.BoolPtrInput   `pulumi:"disableBfd"`
	Export     pulumi.StringPtrInput `pulumi:"export"`
	// default export policies if no per-neighbor policies defined
	ExportPolicy pulumi.StringPtrInput `pulumi:"exportPolicy"`
	// by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
	// for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
	ExtendedV4Nexthop pulumi.BoolPtrInput `pulumi:"extendedV4Nexthop"`
	// `0` means disable
	GracefulRestartTime pulumi.IntPtrInput    `pulumi:"gracefulRestartTime"`
	HoldTime            pulumi.IntPtrInput    `pulumi:"holdTime"`
	Import              pulumi.StringPtrInput `pulumi:"import"`
	// default import policies if no per-neighbor policies defined
	ImportPolicy pulumi.StringPtrInput `pulumi:"importPolicy"`
	LocalAs      pulumi.IntPtrInput    `pulumi:"localAs"`
	NeighborAs   pulumi.IntPtrInput    `pulumi:"neighborAs"`
	// if per-neighbor as is desired. Property key is the neighbor address
	Neighbors DeviceprofileGatewayBgpConfigNeighborsMapInput `pulumi:"neighbors"`
	// if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// by default, we'll re-advertise all learned BGP routers toward overlay
	NoReadvertiseToOverlay pulumi.BoolPtrInput `pulumi:"noReadvertiseToOverlay"`
	// enum: `external`, `internal`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// network name. enum: `lan`, `vpn`, `wan`
	Via     pulumi.StringPtrInput `pulumi:"via"`
	VpnName pulumi.StringPtrInput `pulumi:"vpnName"`
	// if `via`==`wan`
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (DeviceprofileGatewayBgpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayBgpConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayBgpConfigArgs) ToDeviceprofileGatewayBgpConfigOutput() DeviceprofileGatewayBgpConfigOutput {
	return i.ToDeviceprofileGatewayBgpConfigOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayBgpConfigArgs) ToDeviceprofileGatewayBgpConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayBgpConfigOutput)
}

// DeviceprofileGatewayBgpConfigMapInput is an input type that accepts DeviceprofileGatewayBgpConfigMap and DeviceprofileGatewayBgpConfigMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayBgpConfigMapInput` via:
//
//	DeviceprofileGatewayBgpConfigMap{ "key": DeviceprofileGatewayBgpConfigArgs{...} }
type DeviceprofileGatewayBgpConfigMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayBgpConfigMapOutput() DeviceprofileGatewayBgpConfigMapOutput
	ToDeviceprofileGatewayBgpConfigMapOutputWithContext(context.Context) DeviceprofileGatewayBgpConfigMapOutput
}

type DeviceprofileGatewayBgpConfigMap map[string]DeviceprofileGatewayBgpConfigInput

func (DeviceprofileGatewayBgpConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayBgpConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayBgpConfigMap) ToDeviceprofileGatewayBgpConfigMapOutput() DeviceprofileGatewayBgpConfigMapOutput {
	return i.ToDeviceprofileGatewayBgpConfigMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayBgpConfigMap) ToDeviceprofileGatewayBgpConfigMapOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayBgpConfigMapOutput)
}

type DeviceprofileGatewayBgpConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayBgpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayBgpConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayBgpConfigOutput) ToDeviceprofileGatewayBgpConfigOutput() DeviceprofileGatewayBgpConfigOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigOutput) ToDeviceprofileGatewayBgpConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigOutput) AuthKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.AuthKey }).(pulumi.StringPtrOutput)
}

// when bfdMultiplier is configured alone. Default:
//   - 1000 if `type`==`external`
//   - 350 `type`==`internal`
func (o DeviceprofileGatewayBgpConfigOutput) BfdMinimumInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *int { return v.BfdMinimumInterval }).(pulumi.IntPtrOutput)
}

// when bfdMinimumIntervalIsConfigured alone
func (o DeviceprofileGatewayBgpConfigOutput) BfdMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *int { return v.BfdMultiplier }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigOutput) Communities() DeviceprofileGatewayBgpConfigCommunityArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) []DeviceprofileGatewayBgpConfigCommunity { return v.Communities }).(DeviceprofileGatewayBgpConfigCommunityArrayOutput)
}

// BFD provides faster path failure detection and is enabled by default
func (o DeviceprofileGatewayBgpConfigOutput) DisableBfd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *bool { return v.DisableBfd }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigOutput) Export() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.Export }).(pulumi.StringPtrOutput)
}

// default export policies if no per-neighbor policies defined
func (o DeviceprofileGatewayBgpConfigOutput) ExportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.ExportPolicy }).(pulumi.StringPtrOutput)
}

// by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
// for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
func (o DeviceprofileGatewayBgpConfigOutput) ExtendedV4Nexthop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *bool { return v.ExtendedV4Nexthop }).(pulumi.BoolPtrOutput)
}

// `0` means disable
func (o DeviceprofileGatewayBgpConfigOutput) GracefulRestartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *int { return v.GracefulRestartTime }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigOutput) HoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *int { return v.HoldTime }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigOutput) Import() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.Import }).(pulumi.StringPtrOutput)
}

// default import policies if no per-neighbor policies defined
func (o DeviceprofileGatewayBgpConfigOutput) ImportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.ImportPolicy }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigOutput) LocalAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *int { return v.LocalAs }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigOutput) NeighborAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *int { return v.NeighborAs }).(pulumi.IntPtrOutput)
}

// if per-neighbor as is desired. Property key is the neighbor address
func (o DeviceprofileGatewayBgpConfigOutput) Neighbors() DeviceprofileGatewayBgpConfigNeighborsMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) map[string]DeviceprofileGatewayBgpConfigNeighbors {
		return v.Neighbors
	}).(DeviceprofileGatewayBgpConfigNeighborsMapOutput)
}

// if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
func (o DeviceprofileGatewayBgpConfigOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// by default, we'll re-advertise all learned BGP routers toward overlay
func (o DeviceprofileGatewayBgpConfigOutput) NoReadvertiseToOverlay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *bool { return v.NoReadvertiseToOverlay }).(pulumi.BoolPtrOutput)
}

// enum: `external`, `internal`
func (o DeviceprofileGatewayBgpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// network name. enum: `lan`, `vpn`, `wan`
func (o DeviceprofileGatewayBgpConfigOutput) Via() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.Via }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigOutput) VpnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.VpnName }).(pulumi.StringPtrOutput)
}

// if `via`==`wan`
func (o DeviceprofileGatewayBgpConfigOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfig) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayBgpConfigMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayBgpConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayBgpConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayBgpConfigMapOutput) ToDeviceprofileGatewayBgpConfigMapOutput() DeviceprofileGatewayBgpConfigMapOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigMapOutput) ToDeviceprofileGatewayBgpConfigMapOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigMapOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayBgpConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayBgpConfig {
		return vs[0].(map[string]DeviceprofileGatewayBgpConfig)[vs[1].(string)]
	}).(DeviceprofileGatewayBgpConfigOutput)
}

type DeviceprofileGatewayBgpConfigCommunity struct {
	Id              *string `pulumi:"id"`
	LocalPreference *int    `pulumi:"localPreference"`
	VpnName         *string `pulumi:"vpnName"`
}

// DeviceprofileGatewayBgpConfigCommunityInput is an input type that accepts DeviceprofileGatewayBgpConfigCommunityArgs and DeviceprofileGatewayBgpConfigCommunityOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayBgpConfigCommunityInput` via:
//
//	DeviceprofileGatewayBgpConfigCommunityArgs{...}
type DeviceprofileGatewayBgpConfigCommunityInput interface {
	pulumi.Input

	ToDeviceprofileGatewayBgpConfigCommunityOutput() DeviceprofileGatewayBgpConfigCommunityOutput
	ToDeviceprofileGatewayBgpConfigCommunityOutputWithContext(context.Context) DeviceprofileGatewayBgpConfigCommunityOutput
}

type DeviceprofileGatewayBgpConfigCommunityArgs struct {
	Id              pulumi.StringPtrInput `pulumi:"id"`
	LocalPreference pulumi.IntPtrInput    `pulumi:"localPreference"`
	VpnName         pulumi.StringPtrInput `pulumi:"vpnName"`
}

func (DeviceprofileGatewayBgpConfigCommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayBgpConfigCommunity)(nil)).Elem()
}

func (i DeviceprofileGatewayBgpConfigCommunityArgs) ToDeviceprofileGatewayBgpConfigCommunityOutput() DeviceprofileGatewayBgpConfigCommunityOutput {
	return i.ToDeviceprofileGatewayBgpConfigCommunityOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayBgpConfigCommunityArgs) ToDeviceprofileGatewayBgpConfigCommunityOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigCommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayBgpConfigCommunityOutput)
}

// DeviceprofileGatewayBgpConfigCommunityArrayInput is an input type that accepts DeviceprofileGatewayBgpConfigCommunityArray and DeviceprofileGatewayBgpConfigCommunityArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayBgpConfigCommunityArrayInput` via:
//
//	DeviceprofileGatewayBgpConfigCommunityArray{ DeviceprofileGatewayBgpConfigCommunityArgs{...} }
type DeviceprofileGatewayBgpConfigCommunityArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayBgpConfigCommunityArrayOutput() DeviceprofileGatewayBgpConfigCommunityArrayOutput
	ToDeviceprofileGatewayBgpConfigCommunityArrayOutputWithContext(context.Context) DeviceprofileGatewayBgpConfigCommunityArrayOutput
}

type DeviceprofileGatewayBgpConfigCommunityArray []DeviceprofileGatewayBgpConfigCommunityInput

func (DeviceprofileGatewayBgpConfigCommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayBgpConfigCommunity)(nil)).Elem()
}

func (i DeviceprofileGatewayBgpConfigCommunityArray) ToDeviceprofileGatewayBgpConfigCommunityArrayOutput() DeviceprofileGatewayBgpConfigCommunityArrayOutput {
	return i.ToDeviceprofileGatewayBgpConfigCommunityArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayBgpConfigCommunityArray) ToDeviceprofileGatewayBgpConfigCommunityArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigCommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayBgpConfigCommunityArrayOutput)
}

type DeviceprofileGatewayBgpConfigCommunityOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayBgpConfigCommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayBgpConfigCommunity)(nil)).Elem()
}

func (o DeviceprofileGatewayBgpConfigCommunityOutput) ToDeviceprofileGatewayBgpConfigCommunityOutput() DeviceprofileGatewayBgpConfigCommunityOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigCommunityOutput) ToDeviceprofileGatewayBgpConfigCommunityOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigCommunityOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigCommunityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigCommunity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigCommunityOutput) LocalPreference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigCommunity) *int { return v.LocalPreference }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigCommunityOutput) VpnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigCommunity) *string { return v.VpnName }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayBgpConfigCommunityArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayBgpConfigCommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayBgpConfigCommunity)(nil)).Elem()
}

func (o DeviceprofileGatewayBgpConfigCommunityArrayOutput) ToDeviceprofileGatewayBgpConfigCommunityArrayOutput() DeviceprofileGatewayBgpConfigCommunityArrayOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigCommunityArrayOutput) ToDeviceprofileGatewayBgpConfigCommunityArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigCommunityArrayOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigCommunityArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayBgpConfigCommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayBgpConfigCommunity {
		return vs[0].([]DeviceprofileGatewayBgpConfigCommunity)[vs[1].(int)]
	}).(DeviceprofileGatewayBgpConfigCommunityOutput)
}

type DeviceprofileGatewayBgpConfigNeighbors struct {
	// If true, the BGP session to this neighbor will be administratively disabled/shutdown
	Disabled     *bool   `pulumi:"disabled"`
	ExportPolicy *string `pulumi:"exportPolicy"`
	HoldTime     *int    `pulumi:"holdTime"`
	ImportPolicy *string `pulumi:"importPolicy"`
	// assuming BGP neighbor is directly connected
	MultihopTtl *int `pulumi:"multihopTtl"`
	NeighborAs  *int `pulumi:"neighborAs"`
}

// DeviceprofileGatewayBgpConfigNeighborsInput is an input type that accepts DeviceprofileGatewayBgpConfigNeighborsArgs and DeviceprofileGatewayBgpConfigNeighborsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayBgpConfigNeighborsInput` via:
//
//	DeviceprofileGatewayBgpConfigNeighborsArgs{...}
type DeviceprofileGatewayBgpConfigNeighborsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayBgpConfigNeighborsOutput() DeviceprofileGatewayBgpConfigNeighborsOutput
	ToDeviceprofileGatewayBgpConfigNeighborsOutputWithContext(context.Context) DeviceprofileGatewayBgpConfigNeighborsOutput
}

type DeviceprofileGatewayBgpConfigNeighborsArgs struct {
	// If true, the BGP session to this neighbor will be administratively disabled/shutdown
	Disabled     pulumi.BoolPtrInput   `pulumi:"disabled"`
	ExportPolicy pulumi.StringPtrInput `pulumi:"exportPolicy"`
	HoldTime     pulumi.IntPtrInput    `pulumi:"holdTime"`
	ImportPolicy pulumi.StringPtrInput `pulumi:"importPolicy"`
	// assuming BGP neighbor is directly connected
	MultihopTtl pulumi.IntPtrInput `pulumi:"multihopTtl"`
	NeighborAs  pulumi.IntPtrInput `pulumi:"neighborAs"`
}

func (DeviceprofileGatewayBgpConfigNeighborsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayBgpConfigNeighbors)(nil)).Elem()
}

func (i DeviceprofileGatewayBgpConfigNeighborsArgs) ToDeviceprofileGatewayBgpConfigNeighborsOutput() DeviceprofileGatewayBgpConfigNeighborsOutput {
	return i.ToDeviceprofileGatewayBgpConfigNeighborsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayBgpConfigNeighborsArgs) ToDeviceprofileGatewayBgpConfigNeighborsOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigNeighborsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayBgpConfigNeighborsOutput)
}

// DeviceprofileGatewayBgpConfigNeighborsMapInput is an input type that accepts DeviceprofileGatewayBgpConfigNeighborsMap and DeviceprofileGatewayBgpConfigNeighborsMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayBgpConfigNeighborsMapInput` via:
//
//	DeviceprofileGatewayBgpConfigNeighborsMap{ "key": DeviceprofileGatewayBgpConfigNeighborsArgs{...} }
type DeviceprofileGatewayBgpConfigNeighborsMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayBgpConfigNeighborsMapOutput() DeviceprofileGatewayBgpConfigNeighborsMapOutput
	ToDeviceprofileGatewayBgpConfigNeighborsMapOutputWithContext(context.Context) DeviceprofileGatewayBgpConfigNeighborsMapOutput
}

type DeviceprofileGatewayBgpConfigNeighborsMap map[string]DeviceprofileGatewayBgpConfigNeighborsInput

func (DeviceprofileGatewayBgpConfigNeighborsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayBgpConfigNeighbors)(nil)).Elem()
}

func (i DeviceprofileGatewayBgpConfigNeighborsMap) ToDeviceprofileGatewayBgpConfigNeighborsMapOutput() DeviceprofileGatewayBgpConfigNeighborsMapOutput {
	return i.ToDeviceprofileGatewayBgpConfigNeighborsMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayBgpConfigNeighborsMap) ToDeviceprofileGatewayBgpConfigNeighborsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigNeighborsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayBgpConfigNeighborsMapOutput)
}

type DeviceprofileGatewayBgpConfigNeighborsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayBgpConfigNeighborsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayBgpConfigNeighbors)(nil)).Elem()
}

func (o DeviceprofileGatewayBgpConfigNeighborsOutput) ToDeviceprofileGatewayBgpConfigNeighborsOutput() DeviceprofileGatewayBgpConfigNeighborsOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigNeighborsOutput) ToDeviceprofileGatewayBgpConfigNeighborsOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigNeighborsOutput {
	return o
}

// If true, the BGP session to this neighbor will be administratively disabled/shutdown
func (o DeviceprofileGatewayBgpConfigNeighborsOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigNeighbors) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigNeighborsOutput) ExportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigNeighbors) *string { return v.ExportPolicy }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigNeighborsOutput) HoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigNeighbors) *int { return v.HoldTime }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigNeighborsOutput) ImportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigNeighbors) *string { return v.ImportPolicy }).(pulumi.StringPtrOutput)
}

// assuming BGP neighbor is directly connected
func (o DeviceprofileGatewayBgpConfigNeighborsOutput) MultihopTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigNeighbors) *int { return v.MultihopTtl }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayBgpConfigNeighborsOutput) NeighborAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayBgpConfigNeighbors) *int { return v.NeighborAs }).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayBgpConfigNeighborsMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayBgpConfigNeighborsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayBgpConfigNeighbors)(nil)).Elem()
}

func (o DeviceprofileGatewayBgpConfigNeighborsMapOutput) ToDeviceprofileGatewayBgpConfigNeighborsMapOutput() DeviceprofileGatewayBgpConfigNeighborsMapOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigNeighborsMapOutput) ToDeviceprofileGatewayBgpConfigNeighborsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayBgpConfigNeighborsMapOutput {
	return o
}

func (o DeviceprofileGatewayBgpConfigNeighborsMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayBgpConfigNeighborsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayBgpConfigNeighbors {
		return vs[0].(map[string]DeviceprofileGatewayBgpConfigNeighbors)[vs[1].(string)]
	}).(DeviceprofileGatewayBgpConfigNeighborsOutput)
}

type DeviceprofileGatewayDhcpdConfig struct {
	Config map[string]DeviceprofileGatewayDhcpdConfigConfig `pulumi:"config"`
	// if set to `true`, enable the DHCP server
	Enabled *bool `pulumi:"enabled"`
}

// DeviceprofileGatewayDhcpdConfigInput is an input type that accepts DeviceprofileGatewayDhcpdConfigArgs and DeviceprofileGatewayDhcpdConfigOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigInput` via:
//
//	DeviceprofileGatewayDhcpdConfigArgs{...}
type DeviceprofileGatewayDhcpdConfigInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigOutput() DeviceprofileGatewayDhcpdConfigOutput
	ToDeviceprofileGatewayDhcpdConfigOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigOutput
}

type DeviceprofileGatewayDhcpdConfigArgs struct {
	Config DeviceprofileGatewayDhcpdConfigConfigMapInput `pulumi:"config"`
	// if set to `true`, enable the DHCP server
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DeviceprofileGatewayDhcpdConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigArgs) ToDeviceprofileGatewayDhcpdConfigOutput() DeviceprofileGatewayDhcpdConfigOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigArgs) ToDeviceprofileGatewayDhcpdConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigOutput)
}

func (i DeviceprofileGatewayDhcpdConfigArgs) ToDeviceprofileGatewayDhcpdConfigPtrOutput() DeviceprofileGatewayDhcpdConfigPtrOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigArgs) ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigOutput).ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayDhcpdConfigPtrInput is an input type that accepts DeviceprofileGatewayDhcpdConfigArgs, DeviceprofileGatewayDhcpdConfigPtr and DeviceprofileGatewayDhcpdConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigPtrInput` via:
//
//	        DeviceprofileGatewayDhcpdConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayDhcpdConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigPtrOutput() DeviceprofileGatewayDhcpdConfigPtrOutput
	ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigPtrOutput
}

type deviceprofileGatewayDhcpdConfigPtrType DeviceprofileGatewayDhcpdConfigArgs

func DeviceprofileGatewayDhcpdConfigPtr(v *DeviceprofileGatewayDhcpdConfigArgs) DeviceprofileGatewayDhcpdConfigPtrInput {
	return (*deviceprofileGatewayDhcpdConfigPtrType)(v)
}

func (*deviceprofileGatewayDhcpdConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayDhcpdConfig)(nil)).Elem()
}

func (i *deviceprofileGatewayDhcpdConfigPtrType) ToDeviceprofileGatewayDhcpdConfigPtrOutput() DeviceprofileGatewayDhcpdConfigPtrOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayDhcpdConfigPtrType) ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigPtrOutput)
}

type DeviceprofileGatewayDhcpdConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigOutput) ToDeviceprofileGatewayDhcpdConfigOutput() DeviceprofileGatewayDhcpdConfigOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigOutput) ToDeviceprofileGatewayDhcpdConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigOutput) ToDeviceprofileGatewayDhcpdConfigPtrOutput() DeviceprofileGatewayDhcpdConfigPtrOutput {
	return o.ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayDhcpdConfigOutput) ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayDhcpdConfig) *DeviceprofileGatewayDhcpdConfig {
		return &v
	}).(DeviceprofileGatewayDhcpdConfigPtrOutput)
}

func (o DeviceprofileGatewayDhcpdConfigOutput) Config() DeviceprofileGatewayDhcpdConfigConfigMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfig) map[string]DeviceprofileGatewayDhcpdConfigConfig {
		return v.Config
	}).(DeviceprofileGatewayDhcpdConfigConfigMapOutput)
}

// if set to `true`, enable the DHCP server
func (o DeviceprofileGatewayDhcpdConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayDhcpdConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayDhcpdConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigPtrOutput) ToDeviceprofileGatewayDhcpdConfigPtrOutput() DeviceprofileGatewayDhcpdConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigPtrOutput) ToDeviceprofileGatewayDhcpdConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigPtrOutput) Elem() DeviceprofileGatewayDhcpdConfigOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayDhcpdConfig) DeviceprofileGatewayDhcpdConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayDhcpdConfig
		return ret
	}).(DeviceprofileGatewayDhcpdConfigOutput)
}

func (o DeviceprofileGatewayDhcpdConfigPtrOutput) Config() DeviceprofileGatewayDhcpdConfigConfigMapOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayDhcpdConfig) map[string]DeviceprofileGatewayDhcpdConfigConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(DeviceprofileGatewayDhcpdConfigConfigMapOutput)
}

// if set to `true`, enable the DHCP server
func (o DeviceprofileGatewayDhcpdConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayDhcpdConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayDhcpdConfigConfig struct {
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsServers []string `pulumi:"dnsServers"`
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsSuffixes []string `pulumi:"dnsSuffixes"`
	// Property key is the MAC Address
	FixedBindings map[string]DeviceprofileGatewayDhcpdConfigConfigFixedBindings `pulumi:"fixedBindings"`
	// if `type`==`local` - optional, `ip` will be used if not provided
	Gateway *string `pulumi:"gateway"`
	// if `type`==`local`
	IpEnd *string `pulumi:"ipEnd"`
	// if `type6`==`local`
	IpEnd6 *string `pulumi:"ipEnd6"`
	// if `type`==`local`
	IpStart *string `pulumi:"ipStart"`
	// if `type6`==`local`
	IpStart6 *string `pulumi:"ipStart6"`
	// in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
	LeaseTime *int `pulumi:"leaseTime"`
	// Property key is the DHCP option number
	Options map[string]DeviceprofileGatewayDhcpdConfigConfigOptions `pulumi:"options"`
	// `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients,
	// should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
	ServerIdOverride *bool `pulumi:"serverIdOverride"`
	// if `type`==`relay`
	Servers []string `pulumi:"servers"`
	// if `type6`==`relay`
	Servers6s []string `pulumi:"servers6s"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type *string `pulumi:"type"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type6 *string `pulumi:"type6"`
	// Property key is <enterprise number>:<sub option code>, with
	//   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
	//   * sub option code: 1-255, sub-option code'
	VendorEncapulated map[string]DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated `pulumi:"vendorEncapulated"`
}

// DeviceprofileGatewayDhcpdConfigConfigInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigArgs and DeviceprofileGatewayDhcpdConfigConfigOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigArgs{...}
type DeviceprofileGatewayDhcpdConfigConfigInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigOutput() DeviceprofileGatewayDhcpdConfigConfigOutput
	ToDeviceprofileGatewayDhcpdConfigConfigOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigOutput
}

type DeviceprofileGatewayDhcpdConfigConfigArgs struct {
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsSuffixes pulumi.StringArrayInput `pulumi:"dnsSuffixes"`
	// Property key is the MAC Address
	FixedBindings DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapInput `pulumi:"fixedBindings"`
	// if `type`==`local` - optional, `ip` will be used if not provided
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// if `type`==`local`
	IpEnd pulumi.StringPtrInput `pulumi:"ipEnd"`
	// if `type6`==`local`
	IpEnd6 pulumi.StringPtrInput `pulumi:"ipEnd6"`
	// if `type`==`local`
	IpStart pulumi.StringPtrInput `pulumi:"ipStart"`
	// if `type6`==`local`
	IpStart6 pulumi.StringPtrInput `pulumi:"ipStart6"`
	// in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
	LeaseTime pulumi.IntPtrInput `pulumi:"leaseTime"`
	// Property key is the DHCP option number
	Options DeviceprofileGatewayDhcpdConfigConfigOptionsMapInput `pulumi:"options"`
	// `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients,
	// should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
	ServerIdOverride pulumi.BoolPtrInput `pulumi:"serverIdOverride"`
	// if `type`==`relay`
	Servers pulumi.StringArrayInput `pulumi:"servers"`
	// if `type6`==`relay`
	Servers6s pulumi.StringArrayInput `pulumi:"servers6s"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type pulumi.StringPtrInput `pulumi:"type"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type6 pulumi.StringPtrInput `pulumi:"type6"`
	// Property key is <enterprise number>:<sub option code>, with
	//   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
	//   * sub option code: 1-255, sub-option code'
	VendorEncapulated DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapInput `pulumi:"vendorEncapulated"`
}

func (DeviceprofileGatewayDhcpdConfigConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigArgs) ToDeviceprofileGatewayDhcpdConfigConfigOutput() DeviceprofileGatewayDhcpdConfigConfigOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigArgs) ToDeviceprofileGatewayDhcpdConfigConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigOutput)
}

// DeviceprofileGatewayDhcpdConfigConfigMapInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigMap and DeviceprofileGatewayDhcpdConfigConfigMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigMapInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigMap{ "key": DeviceprofileGatewayDhcpdConfigConfigArgs{...} }
type DeviceprofileGatewayDhcpdConfigConfigMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigMapOutput() DeviceprofileGatewayDhcpdConfigConfigMapOutput
	ToDeviceprofileGatewayDhcpdConfigConfigMapOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigMapOutput
}

type DeviceprofileGatewayDhcpdConfigConfigMap map[string]DeviceprofileGatewayDhcpdConfigConfigInput

func (DeviceprofileGatewayDhcpdConfigConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigMap) ToDeviceprofileGatewayDhcpdConfigConfigMapOutput() DeviceprofileGatewayDhcpdConfigConfigMapOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigMap) ToDeviceprofileGatewayDhcpdConfigConfigMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigMapOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigOutput) ToDeviceprofileGatewayDhcpdConfigConfigOutput() DeviceprofileGatewayDhcpdConfigConfigOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigOutput) ToDeviceprofileGatewayDhcpdConfigConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigOutput {
	return o
}

// if `type`==`local` - optional, if not defined, system one will be used
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// if `type`==`local` - optional, if not defined, system one will be used
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) []string { return v.DnsSuffixes }).(pulumi.StringArrayOutput)
}

// Property key is the MAC Address
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) FixedBindings() DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) map[string]DeviceprofileGatewayDhcpdConfigConfigFixedBindings {
		return v.FixedBindings
	}).(DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput)
}

// if `type`==`local` - optional, `ip` will be used if not provided
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// if `type`==`local`
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) IpEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *string { return v.IpEnd }).(pulumi.StringPtrOutput)
}

// if `type6`==`local`
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) IpEnd6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *string { return v.IpEnd6 }).(pulumi.StringPtrOutput)
}

// if `type`==`local`
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) IpStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *string { return v.IpStart }).(pulumi.StringPtrOutput)
}

// if `type6`==`local`
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) IpStart6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *string { return v.IpStart6 }).(pulumi.StringPtrOutput)
}

// in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) LeaseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *int { return v.LeaseTime }).(pulumi.IntPtrOutput)
}

// Property key is the DHCP option number
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) Options() DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) map[string]DeviceprofileGatewayDhcpdConfigConfigOptions {
		return v.Options
	}).(DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput)
}

// `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients,
// should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) ServerIdOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *bool { return v.ServerIdOverride }).(pulumi.BoolPtrOutput)
}

// if `type`==`relay`
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

// if `type6`==`relay`
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) Servers6s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) []string { return v.Servers6s }).(pulumi.StringArrayOutput)
}

// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) Type6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) *string { return v.Type6 }).(pulumi.StringPtrOutput)
}

// Property key is <enterprise number>:<sub option code>, with
//   - enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
//   - sub option code: 1-255, sub-option code'
func (o DeviceprofileGatewayDhcpdConfigConfigOutput) VendorEncapulated() DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfig) map[string]DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated {
		return v.VendorEncapulated
	}).(DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigMapOutput() DeviceprofileGatewayDhcpdConfigConfigMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayDhcpdConfigConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayDhcpdConfigConfig {
		return vs[0].(map[string]DeviceprofileGatewayDhcpdConfigConfig)[vs[1].(string)]
	}).(DeviceprofileGatewayDhcpdConfigConfigOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigFixedBindings struct {
	Ip   string  `pulumi:"ip"`
	Name *string `pulumi:"name"`
}

// DeviceprofileGatewayDhcpdConfigConfigFixedBindingsInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs and DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigFixedBindingsInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs{...}
type DeviceprofileGatewayDhcpdConfigConfigFixedBindingsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput() DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput
	ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput
}

type DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs struct {
	Ip   pulumi.StringInput    `pulumi:"ip"`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput() DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput)
}

// DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMap and DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMap{ "key": DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs{...} }
type DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput() DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput
	ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput
}

type DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMap map[string]DeviceprofileGatewayDhcpdConfigConfigFixedBindingsInput

func (DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMap) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput() DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMap) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput() DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfigFixedBindings) string { return v.Ip }).(pulumi.StringOutput)
}

func (o DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfigFixedBindings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput() DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayDhcpdConfigConfigFixedBindings {
		return vs[0].(map[string]DeviceprofileGatewayDhcpdConfigConfigFixedBindings)[vs[1].(string)]
	}).(DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigOptions struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// DeviceprofileGatewayDhcpdConfigConfigOptionsInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigOptionsArgs and DeviceprofileGatewayDhcpdConfigConfigOptionsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigOptionsInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigOptionsArgs{...}
type DeviceprofileGatewayDhcpdConfigConfigOptionsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigOptionsOutput() DeviceprofileGatewayDhcpdConfigConfigOptionsOutput
	ToDeviceprofileGatewayDhcpdConfigConfigOptionsOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigOptionsOutput
}

type DeviceprofileGatewayDhcpdConfigConfigOptionsArgs struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DeviceprofileGatewayDhcpdConfigConfigOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigOptions)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigOptionsArgs) ToDeviceprofileGatewayDhcpdConfigConfigOptionsOutput() DeviceprofileGatewayDhcpdConfigConfigOptionsOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigOptionsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigOptionsArgs) ToDeviceprofileGatewayDhcpdConfigConfigOptionsOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigOptionsOutput)
}

// DeviceprofileGatewayDhcpdConfigConfigOptionsMapInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigOptionsMap and DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigOptionsMapInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigOptionsMap{ "key": DeviceprofileGatewayDhcpdConfigConfigOptionsArgs{...} }
type DeviceprofileGatewayDhcpdConfigConfigOptionsMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput() DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput
	ToDeviceprofileGatewayDhcpdConfigConfigOptionsMapOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput
}

type DeviceprofileGatewayDhcpdConfigConfigOptionsMap map[string]DeviceprofileGatewayDhcpdConfigConfigOptionsInput

func (DeviceprofileGatewayDhcpdConfigConfigOptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfigOptions)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigOptionsMap) ToDeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput() DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigOptionsMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigOptionsMap) ToDeviceprofileGatewayDhcpdConfigConfigOptionsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigOptionsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigOptions)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigOptionsOutput) ToDeviceprofileGatewayDhcpdConfigConfigOptionsOutput() DeviceprofileGatewayDhcpdConfigConfigOptionsOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigOptionsOutput) ToDeviceprofileGatewayDhcpdConfigConfigOptionsOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigOptionsOutput {
	return o
}

// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
func (o DeviceprofileGatewayDhcpdConfigConfigOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfigOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayDhcpdConfigConfigOptionsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfigOptions) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfigOptions)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput() DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigOptionsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayDhcpdConfigConfigOptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayDhcpdConfigConfigOptions {
		return vs[0].(map[string]DeviceprofileGatewayDhcpdConfigConfigOptions)[vs[1].(string)]
	}).(DeviceprofileGatewayDhcpdConfigConfigOptionsOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs and DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs{...}
type DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput() DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput
	ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput
}

type DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput() DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput)
}

// DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapInput is an input type that accepts DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMap and DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapInput` via:
//
//	DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMap{ "key": DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs{...} }
type DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput() DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput
	ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(context.Context) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput
}

type DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMap map[string]DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedInput

func (DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (i DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMap) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput() DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput {
	return i.ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMap) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput() DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput {
	return o
}

// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
func (o DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (o DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput() DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput) ToDeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(ctx context.Context) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput {
	return o
}

func (o DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated {
		return vs[0].(map[string]DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated)[vs[1].(string)]
	}).(DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput)
}

type DeviceprofileGatewayExtraRoutes6 struct {
	Via string `pulumi:"via"`
}

// DeviceprofileGatewayExtraRoutes6Input is an input type that accepts DeviceprofileGatewayExtraRoutes6Args and DeviceprofileGatewayExtraRoutes6Output values.
// You can construct a concrete instance of `DeviceprofileGatewayExtraRoutes6Input` via:
//
//	DeviceprofileGatewayExtraRoutes6Args{...}
type DeviceprofileGatewayExtraRoutes6Input interface {
	pulumi.Input

	ToDeviceprofileGatewayExtraRoutes6Output() DeviceprofileGatewayExtraRoutes6Output
	ToDeviceprofileGatewayExtraRoutes6OutputWithContext(context.Context) DeviceprofileGatewayExtraRoutes6Output
}

type DeviceprofileGatewayExtraRoutes6Args struct {
	Via pulumi.StringInput `pulumi:"via"`
}

func (DeviceprofileGatewayExtraRoutes6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayExtraRoutes6)(nil)).Elem()
}

func (i DeviceprofileGatewayExtraRoutes6Args) ToDeviceprofileGatewayExtraRoutes6Output() DeviceprofileGatewayExtraRoutes6Output {
	return i.ToDeviceprofileGatewayExtraRoutes6OutputWithContext(context.Background())
}

func (i DeviceprofileGatewayExtraRoutes6Args) ToDeviceprofileGatewayExtraRoutes6OutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutes6Output {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayExtraRoutes6Output)
}

// DeviceprofileGatewayExtraRoutes6MapInput is an input type that accepts DeviceprofileGatewayExtraRoutes6Map and DeviceprofileGatewayExtraRoutes6MapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayExtraRoutes6MapInput` via:
//
//	DeviceprofileGatewayExtraRoutes6Map{ "key": DeviceprofileGatewayExtraRoutes6Args{...} }
type DeviceprofileGatewayExtraRoutes6MapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayExtraRoutes6MapOutput() DeviceprofileGatewayExtraRoutes6MapOutput
	ToDeviceprofileGatewayExtraRoutes6MapOutputWithContext(context.Context) DeviceprofileGatewayExtraRoutes6MapOutput
}

type DeviceprofileGatewayExtraRoutes6Map map[string]DeviceprofileGatewayExtraRoutes6Input

func (DeviceprofileGatewayExtraRoutes6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayExtraRoutes6)(nil)).Elem()
}

func (i DeviceprofileGatewayExtraRoutes6Map) ToDeviceprofileGatewayExtraRoutes6MapOutput() DeviceprofileGatewayExtraRoutes6MapOutput {
	return i.ToDeviceprofileGatewayExtraRoutes6MapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayExtraRoutes6Map) ToDeviceprofileGatewayExtraRoutes6MapOutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutes6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayExtraRoutes6MapOutput)
}

type DeviceprofileGatewayExtraRoutes6Output struct{ *pulumi.OutputState }

func (DeviceprofileGatewayExtraRoutes6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayExtraRoutes6)(nil)).Elem()
}

func (o DeviceprofileGatewayExtraRoutes6Output) ToDeviceprofileGatewayExtraRoutes6Output() DeviceprofileGatewayExtraRoutes6Output {
	return o
}

func (o DeviceprofileGatewayExtraRoutes6Output) ToDeviceprofileGatewayExtraRoutes6OutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutes6Output {
	return o
}

func (o DeviceprofileGatewayExtraRoutes6Output) Via() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayExtraRoutes6) string { return v.Via }).(pulumi.StringOutput)
}

type DeviceprofileGatewayExtraRoutes6MapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayExtraRoutes6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayExtraRoutes6)(nil)).Elem()
}

func (o DeviceprofileGatewayExtraRoutes6MapOutput) ToDeviceprofileGatewayExtraRoutes6MapOutput() DeviceprofileGatewayExtraRoutes6MapOutput {
	return o
}

func (o DeviceprofileGatewayExtraRoutes6MapOutput) ToDeviceprofileGatewayExtraRoutes6MapOutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutes6MapOutput {
	return o
}

func (o DeviceprofileGatewayExtraRoutes6MapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayExtraRoutes6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayExtraRoutes6 {
		return vs[0].(map[string]DeviceprofileGatewayExtraRoutes6)[vs[1].(string)]
	}).(DeviceprofileGatewayExtraRoutes6Output)
}

type DeviceprofileGatewayExtraRoutes struct {
	Via string `pulumi:"via"`
}

// DeviceprofileGatewayExtraRoutesInput is an input type that accepts DeviceprofileGatewayExtraRoutesArgs and DeviceprofileGatewayExtraRoutesOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayExtraRoutesInput` via:
//
//	DeviceprofileGatewayExtraRoutesArgs{...}
type DeviceprofileGatewayExtraRoutesInput interface {
	pulumi.Input

	ToDeviceprofileGatewayExtraRoutesOutput() DeviceprofileGatewayExtraRoutesOutput
	ToDeviceprofileGatewayExtraRoutesOutputWithContext(context.Context) DeviceprofileGatewayExtraRoutesOutput
}

type DeviceprofileGatewayExtraRoutesArgs struct {
	Via pulumi.StringInput `pulumi:"via"`
}

func (DeviceprofileGatewayExtraRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayExtraRoutes)(nil)).Elem()
}

func (i DeviceprofileGatewayExtraRoutesArgs) ToDeviceprofileGatewayExtraRoutesOutput() DeviceprofileGatewayExtraRoutesOutput {
	return i.ToDeviceprofileGatewayExtraRoutesOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayExtraRoutesArgs) ToDeviceprofileGatewayExtraRoutesOutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayExtraRoutesOutput)
}

// DeviceprofileGatewayExtraRoutesMapInput is an input type that accepts DeviceprofileGatewayExtraRoutesMap and DeviceprofileGatewayExtraRoutesMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayExtraRoutesMapInput` via:
//
//	DeviceprofileGatewayExtraRoutesMap{ "key": DeviceprofileGatewayExtraRoutesArgs{...} }
type DeviceprofileGatewayExtraRoutesMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayExtraRoutesMapOutput() DeviceprofileGatewayExtraRoutesMapOutput
	ToDeviceprofileGatewayExtraRoutesMapOutputWithContext(context.Context) DeviceprofileGatewayExtraRoutesMapOutput
}

type DeviceprofileGatewayExtraRoutesMap map[string]DeviceprofileGatewayExtraRoutesInput

func (DeviceprofileGatewayExtraRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayExtraRoutes)(nil)).Elem()
}

func (i DeviceprofileGatewayExtraRoutesMap) ToDeviceprofileGatewayExtraRoutesMapOutput() DeviceprofileGatewayExtraRoutesMapOutput {
	return i.ToDeviceprofileGatewayExtraRoutesMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayExtraRoutesMap) ToDeviceprofileGatewayExtraRoutesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayExtraRoutesMapOutput)
}

type DeviceprofileGatewayExtraRoutesOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayExtraRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayExtraRoutes)(nil)).Elem()
}

func (o DeviceprofileGatewayExtraRoutesOutput) ToDeviceprofileGatewayExtraRoutesOutput() DeviceprofileGatewayExtraRoutesOutput {
	return o
}

func (o DeviceprofileGatewayExtraRoutesOutput) ToDeviceprofileGatewayExtraRoutesOutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutesOutput {
	return o
}

func (o DeviceprofileGatewayExtraRoutesOutput) Via() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayExtraRoutes) string { return v.Via }).(pulumi.StringOutput)
}

type DeviceprofileGatewayExtraRoutesMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayExtraRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayExtraRoutes)(nil)).Elem()
}

func (o DeviceprofileGatewayExtraRoutesMapOutput) ToDeviceprofileGatewayExtraRoutesMapOutput() DeviceprofileGatewayExtraRoutesMapOutput {
	return o
}

func (o DeviceprofileGatewayExtraRoutesMapOutput) ToDeviceprofileGatewayExtraRoutesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayExtraRoutesMapOutput {
	return o
}

func (o DeviceprofileGatewayExtraRoutesMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayExtraRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayExtraRoutes {
		return vs[0].(map[string]DeviceprofileGatewayExtraRoutes)[vs[1].(string)]
	}).(DeviceprofileGatewayExtraRoutesOutput)
}

type DeviceprofileGatewayIdpProfiles struct {
	// enum: `critical`, `standard`, `strict`
	BaseProfile *string                                    `pulumi:"baseProfile"`
	Name        *string                                    `pulumi:"name"`
	OrgId       *string                                    `pulumi:"orgId"`
	Overwrites  []DeviceprofileGatewayIdpProfilesOverwrite `pulumi:"overwrites"`
}

// DeviceprofileGatewayIdpProfilesInput is an input type that accepts DeviceprofileGatewayIdpProfilesArgs and DeviceprofileGatewayIdpProfilesOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIdpProfilesInput` via:
//
//	DeviceprofileGatewayIdpProfilesArgs{...}
type DeviceprofileGatewayIdpProfilesInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIdpProfilesOutput() DeviceprofileGatewayIdpProfilesOutput
	ToDeviceprofileGatewayIdpProfilesOutputWithContext(context.Context) DeviceprofileGatewayIdpProfilesOutput
}

type DeviceprofileGatewayIdpProfilesArgs struct {
	// enum: `critical`, `standard`, `strict`
	BaseProfile pulumi.StringPtrInput                              `pulumi:"baseProfile"`
	Name        pulumi.StringPtrInput                              `pulumi:"name"`
	OrgId       pulumi.StringPtrInput                              `pulumi:"orgId"`
	Overwrites  DeviceprofileGatewayIdpProfilesOverwriteArrayInput `pulumi:"overwrites"`
}

func (DeviceprofileGatewayIdpProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIdpProfiles)(nil)).Elem()
}

func (i DeviceprofileGatewayIdpProfilesArgs) ToDeviceprofileGatewayIdpProfilesOutput() DeviceprofileGatewayIdpProfilesOutput {
	return i.ToDeviceprofileGatewayIdpProfilesOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIdpProfilesArgs) ToDeviceprofileGatewayIdpProfilesOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIdpProfilesOutput)
}

// DeviceprofileGatewayIdpProfilesMapInput is an input type that accepts DeviceprofileGatewayIdpProfilesMap and DeviceprofileGatewayIdpProfilesMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIdpProfilesMapInput` via:
//
//	DeviceprofileGatewayIdpProfilesMap{ "key": DeviceprofileGatewayIdpProfilesArgs{...} }
type DeviceprofileGatewayIdpProfilesMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIdpProfilesMapOutput() DeviceprofileGatewayIdpProfilesMapOutput
	ToDeviceprofileGatewayIdpProfilesMapOutputWithContext(context.Context) DeviceprofileGatewayIdpProfilesMapOutput
}

type DeviceprofileGatewayIdpProfilesMap map[string]DeviceprofileGatewayIdpProfilesInput

func (DeviceprofileGatewayIdpProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayIdpProfiles)(nil)).Elem()
}

func (i DeviceprofileGatewayIdpProfilesMap) ToDeviceprofileGatewayIdpProfilesMapOutput() DeviceprofileGatewayIdpProfilesMapOutput {
	return i.ToDeviceprofileGatewayIdpProfilesMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIdpProfilesMap) ToDeviceprofileGatewayIdpProfilesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIdpProfilesMapOutput)
}

type DeviceprofileGatewayIdpProfilesOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIdpProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIdpProfiles)(nil)).Elem()
}

func (o DeviceprofileGatewayIdpProfilesOutput) ToDeviceprofileGatewayIdpProfilesOutput() DeviceprofileGatewayIdpProfilesOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOutput) ToDeviceprofileGatewayIdpProfilesOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOutput {
	return o
}

// enum: `critical`, `standard`, `strict`
func (o DeviceprofileGatewayIdpProfilesOutput) BaseProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfiles) *string { return v.BaseProfile }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayIdpProfilesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfiles) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayIdpProfilesOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfiles) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayIdpProfilesOutput) Overwrites() DeviceprofileGatewayIdpProfilesOverwriteArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfiles) []DeviceprofileGatewayIdpProfilesOverwrite {
		return v.Overwrites
	}).(DeviceprofileGatewayIdpProfilesOverwriteArrayOutput)
}

type DeviceprofileGatewayIdpProfilesMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIdpProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayIdpProfiles)(nil)).Elem()
}

func (o DeviceprofileGatewayIdpProfilesMapOutput) ToDeviceprofileGatewayIdpProfilesMapOutput() DeviceprofileGatewayIdpProfilesMapOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesMapOutput) ToDeviceprofileGatewayIdpProfilesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesMapOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayIdpProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayIdpProfiles {
		return vs[0].(map[string]DeviceprofileGatewayIdpProfiles)[vs[1].(string)]
	}).(DeviceprofileGatewayIdpProfilesOutput)
}

type DeviceprofileGatewayIdpProfilesOverwrite struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   *string                                           `pulumi:"action"`
	Matching *DeviceprofileGatewayIdpProfilesOverwriteMatching `pulumi:"matching"`
	Name     *string                                           `pulumi:"name"`
}

// DeviceprofileGatewayIdpProfilesOverwriteInput is an input type that accepts DeviceprofileGatewayIdpProfilesOverwriteArgs and DeviceprofileGatewayIdpProfilesOverwriteOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIdpProfilesOverwriteInput` via:
//
//	DeviceprofileGatewayIdpProfilesOverwriteArgs{...}
type DeviceprofileGatewayIdpProfilesOverwriteInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIdpProfilesOverwriteOutput() DeviceprofileGatewayIdpProfilesOverwriteOutput
	ToDeviceprofileGatewayIdpProfilesOverwriteOutputWithContext(context.Context) DeviceprofileGatewayIdpProfilesOverwriteOutput
}

type DeviceprofileGatewayIdpProfilesOverwriteArgs struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   pulumi.StringPtrInput                                    `pulumi:"action"`
	Matching DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrInput `pulumi:"matching"`
	Name     pulumi.StringPtrInput                                    `pulumi:"name"`
}

func (DeviceprofileGatewayIdpProfilesOverwriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwrite)(nil)).Elem()
}

func (i DeviceprofileGatewayIdpProfilesOverwriteArgs) ToDeviceprofileGatewayIdpProfilesOverwriteOutput() DeviceprofileGatewayIdpProfilesOverwriteOutput {
	return i.ToDeviceprofileGatewayIdpProfilesOverwriteOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIdpProfilesOverwriteArgs) ToDeviceprofileGatewayIdpProfilesOverwriteOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIdpProfilesOverwriteOutput)
}

// DeviceprofileGatewayIdpProfilesOverwriteArrayInput is an input type that accepts DeviceprofileGatewayIdpProfilesOverwriteArray and DeviceprofileGatewayIdpProfilesOverwriteArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIdpProfilesOverwriteArrayInput` via:
//
//	DeviceprofileGatewayIdpProfilesOverwriteArray{ DeviceprofileGatewayIdpProfilesOverwriteArgs{...} }
type DeviceprofileGatewayIdpProfilesOverwriteArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIdpProfilesOverwriteArrayOutput() DeviceprofileGatewayIdpProfilesOverwriteArrayOutput
	ToDeviceprofileGatewayIdpProfilesOverwriteArrayOutputWithContext(context.Context) DeviceprofileGatewayIdpProfilesOverwriteArrayOutput
}

type DeviceprofileGatewayIdpProfilesOverwriteArray []DeviceprofileGatewayIdpProfilesOverwriteInput

func (DeviceprofileGatewayIdpProfilesOverwriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayIdpProfilesOverwrite)(nil)).Elem()
}

func (i DeviceprofileGatewayIdpProfilesOverwriteArray) ToDeviceprofileGatewayIdpProfilesOverwriteArrayOutput() DeviceprofileGatewayIdpProfilesOverwriteArrayOutput {
	return i.ToDeviceprofileGatewayIdpProfilesOverwriteArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIdpProfilesOverwriteArray) ToDeviceprofileGatewayIdpProfilesOverwriteArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIdpProfilesOverwriteArrayOutput)
}

type DeviceprofileGatewayIdpProfilesOverwriteOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIdpProfilesOverwriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwrite)(nil)).Elem()
}

func (o DeviceprofileGatewayIdpProfilesOverwriteOutput) ToDeviceprofileGatewayIdpProfilesOverwriteOutput() DeviceprofileGatewayIdpProfilesOverwriteOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOverwriteOutput) ToDeviceprofileGatewayIdpProfilesOverwriteOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteOutput {
	return o
}

// enum:
//   - alert (default)
//   - drop: siliently dropping packets
//   - close: notify client/server to close connection
func (o DeviceprofileGatewayIdpProfilesOverwriteOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfilesOverwrite) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteOutput) Matching() DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfilesOverwrite) *DeviceprofileGatewayIdpProfilesOverwriteMatching {
		return v.Matching
	}).(DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfilesOverwrite) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayIdpProfilesOverwriteArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIdpProfilesOverwriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayIdpProfilesOverwrite)(nil)).Elem()
}

func (o DeviceprofileGatewayIdpProfilesOverwriteArrayOutput) ToDeviceprofileGatewayIdpProfilesOverwriteArrayOutput() DeviceprofileGatewayIdpProfilesOverwriteArrayOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOverwriteArrayOutput) ToDeviceprofileGatewayIdpProfilesOverwriteArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteArrayOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOverwriteArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayIdpProfilesOverwriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayIdpProfilesOverwrite {
		return vs[0].([]DeviceprofileGatewayIdpProfilesOverwrite)[vs[1].(int)]
	}).(DeviceprofileGatewayIdpProfilesOverwriteOutput)
}

type DeviceprofileGatewayIdpProfilesOverwriteMatching struct {
	AttackNames []string `pulumi:"attackNames"`
	DstSubnets  []string `pulumi:"dstSubnets"`
	Severities  []string `pulumi:"severities"`
}

// DeviceprofileGatewayIdpProfilesOverwriteMatchingInput is an input type that accepts DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs and DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIdpProfilesOverwriteMatchingInput` via:
//
//	DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs{...}
type DeviceprofileGatewayIdpProfilesOverwriteMatchingInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIdpProfilesOverwriteMatchingOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput
	ToDeviceprofileGatewayIdpProfilesOverwriteMatchingOutputWithContext(context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput
}

type DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs struct {
	AttackNames pulumi.StringArrayInput `pulumi:"attackNames"`
	DstSubnets  pulumi.StringArrayInput `pulumi:"dstSubnets"`
	Severities  pulumi.StringArrayInput `pulumi:"severities"`
}

func (DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (i DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput {
	return i.ToDeviceprofileGatewayIdpProfilesOverwriteMatchingOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput)
}

func (i DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return i.ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput).ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrInput is an input type that accepts DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs, DeviceprofileGatewayIdpProfilesOverwriteMatchingPtr and DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrInput` via:
//
//	        DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput
	ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput
}

type deviceprofileGatewayIdpProfilesOverwriteMatchingPtrType DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs

func DeviceprofileGatewayIdpProfilesOverwriteMatchingPtr(v *DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs) DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrInput {
	return (*deviceprofileGatewayIdpProfilesOverwriteMatchingPtrType)(v)
}

func (*deviceprofileGatewayIdpProfilesOverwriteMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (i *deviceprofileGatewayIdpProfilesOverwriteMatchingPtrType) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return i.ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayIdpProfilesOverwriteMatchingPtrType) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput)
}

type DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return o.ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayIdpProfilesOverwriteMatching) *DeviceprofileGatewayIdpProfilesOverwriteMatching {
		return &v
	}).(DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) AttackNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfilesOverwriteMatching) []string { return v.AttackNames }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) DstSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfilesOverwriteMatching) []string { return v.DstSubnets }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIdpProfilesOverwriteMatching) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput() DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput) ToDeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput {
	return o
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput) Elem() DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayIdpProfilesOverwriteMatching) DeviceprofileGatewayIdpProfilesOverwriteMatching {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayIdpProfilesOverwriteMatching
		return ret
	}).(DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput) AttackNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayIdpProfilesOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.AttackNames
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput) DstSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayIdpProfilesOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.DstSubnets
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayIdpProfilesOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayIpConfigs struct {
	Ip      string `pulumi:"ip"`
	Netmask string `pulumi:"netmask"`
	// optional list of secondary IPs in CIDR format
	SecondaryIps []string `pulumi:"secondaryIps"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
}

// DeviceprofileGatewayIpConfigsInput is an input type that accepts DeviceprofileGatewayIpConfigsArgs and DeviceprofileGatewayIpConfigsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIpConfigsInput` via:
//
//	DeviceprofileGatewayIpConfigsArgs{...}
type DeviceprofileGatewayIpConfigsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIpConfigsOutput() DeviceprofileGatewayIpConfigsOutput
	ToDeviceprofileGatewayIpConfigsOutputWithContext(context.Context) DeviceprofileGatewayIpConfigsOutput
}

type DeviceprofileGatewayIpConfigsArgs struct {
	Ip      pulumi.StringInput `pulumi:"ip"`
	Netmask pulumi.StringInput `pulumi:"netmask"`
	// optional list of secondary IPs in CIDR format
	SecondaryIps pulumi.StringArrayInput `pulumi:"secondaryIps"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeviceprofileGatewayIpConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIpConfigs)(nil)).Elem()
}

func (i DeviceprofileGatewayIpConfigsArgs) ToDeviceprofileGatewayIpConfigsOutput() DeviceprofileGatewayIpConfigsOutput {
	return i.ToDeviceprofileGatewayIpConfigsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIpConfigsArgs) ToDeviceprofileGatewayIpConfigsOutputWithContext(ctx context.Context) DeviceprofileGatewayIpConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIpConfigsOutput)
}

// DeviceprofileGatewayIpConfigsMapInput is an input type that accepts DeviceprofileGatewayIpConfigsMap and DeviceprofileGatewayIpConfigsMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayIpConfigsMapInput` via:
//
//	DeviceprofileGatewayIpConfigsMap{ "key": DeviceprofileGatewayIpConfigsArgs{...} }
type DeviceprofileGatewayIpConfigsMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayIpConfigsMapOutput() DeviceprofileGatewayIpConfigsMapOutput
	ToDeviceprofileGatewayIpConfigsMapOutputWithContext(context.Context) DeviceprofileGatewayIpConfigsMapOutput
}

type DeviceprofileGatewayIpConfigsMap map[string]DeviceprofileGatewayIpConfigsInput

func (DeviceprofileGatewayIpConfigsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayIpConfigs)(nil)).Elem()
}

func (i DeviceprofileGatewayIpConfigsMap) ToDeviceprofileGatewayIpConfigsMapOutput() DeviceprofileGatewayIpConfigsMapOutput {
	return i.ToDeviceprofileGatewayIpConfigsMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayIpConfigsMap) ToDeviceprofileGatewayIpConfigsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayIpConfigsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayIpConfigsMapOutput)
}

type DeviceprofileGatewayIpConfigsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIpConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayIpConfigs)(nil)).Elem()
}

func (o DeviceprofileGatewayIpConfigsOutput) ToDeviceprofileGatewayIpConfigsOutput() DeviceprofileGatewayIpConfigsOutput {
	return o
}

func (o DeviceprofileGatewayIpConfigsOutput) ToDeviceprofileGatewayIpConfigsOutputWithContext(ctx context.Context) DeviceprofileGatewayIpConfigsOutput {
	return o
}

func (o DeviceprofileGatewayIpConfigsOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIpConfigs) string { return v.Ip }).(pulumi.StringOutput)
}

func (o DeviceprofileGatewayIpConfigsOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIpConfigs) string { return v.Netmask }).(pulumi.StringOutput)
}

// optional list of secondary IPs in CIDR format
func (o DeviceprofileGatewayIpConfigsOutput) SecondaryIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIpConfigs) []string { return v.SecondaryIps }).(pulumi.StringArrayOutput)
}

// enum: `dhcp`, `static`
func (o DeviceprofileGatewayIpConfigsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayIpConfigs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayIpConfigsMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayIpConfigsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayIpConfigs)(nil)).Elem()
}

func (o DeviceprofileGatewayIpConfigsMapOutput) ToDeviceprofileGatewayIpConfigsMapOutput() DeviceprofileGatewayIpConfigsMapOutput {
	return o
}

func (o DeviceprofileGatewayIpConfigsMapOutput) ToDeviceprofileGatewayIpConfigsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayIpConfigsMapOutput {
	return o
}

func (o DeviceprofileGatewayIpConfigsMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayIpConfigsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayIpConfigs {
		return vs[0].(map[string]DeviceprofileGatewayIpConfigs)[vs[1].(string)]
	}).(DeviceprofileGatewayIpConfigsOutput)
}

type DeviceprofileGatewayNetwork struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices *bool                                      `pulumi:"disallowMistServices"`
	Gateway              *string                                    `pulumi:"gateway"`
	Gateway6             *string                                    `pulumi:"gateway6"`
	InternalAccess       *DeviceprofileGatewayNetworkInternalAccess `pulumi:"internalAccess"`
	// whether this network has direct internet access
	InternetAccess *DeviceprofileGatewayNetworkInternetAccess `pulumi:"internetAccess"`
	// whether to allow clients in the network to talk to each other
	Isolation *bool  `pulumi:"isolation"`
	Name      string `pulumi:"name"`
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks []string                                      `pulumi:"routedForNetworks"`
	Subnet            string                                        `pulumi:"subnet"`
	Subnet6           *string                                       `pulumi:"subnet6"`
	Tenants           map[string]DeviceprofileGatewayNetworkTenants `pulumi:"tenants"`
	VlanId            *string                                       `pulumi:"vlanId"`
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess map[string]DeviceprofileGatewayNetworkVpnAccess `pulumi:"vpnAccess"`
}

// DeviceprofileGatewayNetworkInput is an input type that accepts DeviceprofileGatewayNetworkArgs and DeviceprofileGatewayNetworkOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInput` via:
//
//	DeviceprofileGatewayNetworkArgs{...}
type DeviceprofileGatewayNetworkInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkOutput() DeviceprofileGatewayNetworkOutput
	ToDeviceprofileGatewayNetworkOutputWithContext(context.Context) DeviceprofileGatewayNetworkOutput
}

type DeviceprofileGatewayNetworkArgs struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices pulumi.BoolPtrInput                               `pulumi:"disallowMistServices"`
	Gateway              pulumi.StringPtrInput                             `pulumi:"gateway"`
	Gateway6             pulumi.StringPtrInput                             `pulumi:"gateway6"`
	InternalAccess       DeviceprofileGatewayNetworkInternalAccessPtrInput `pulumi:"internalAccess"`
	// whether this network has direct internet access
	InternetAccess DeviceprofileGatewayNetworkInternetAccessPtrInput `pulumi:"internetAccess"`
	// whether to allow clients in the network to talk to each other
	Isolation pulumi.BoolPtrInput `pulumi:"isolation"`
	Name      pulumi.StringInput  `pulumi:"name"`
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks pulumi.StringArrayInput                    `pulumi:"routedForNetworks"`
	Subnet            pulumi.StringInput                         `pulumi:"subnet"`
	Subnet6           pulumi.StringPtrInput                      `pulumi:"subnet6"`
	Tenants           DeviceprofileGatewayNetworkTenantsMapInput `pulumi:"tenants"`
	VlanId            pulumi.StringPtrInput                      `pulumi:"vlanId"`
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess DeviceprofileGatewayNetworkVpnAccessMapInput `pulumi:"vpnAccess"`
}

func (DeviceprofileGatewayNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetwork)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkArgs) ToDeviceprofileGatewayNetworkOutput() DeviceprofileGatewayNetworkOutput {
	return i.ToDeviceprofileGatewayNetworkOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkArgs) ToDeviceprofileGatewayNetworkOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkOutput)
}

// DeviceprofileGatewayNetworkArrayInput is an input type that accepts DeviceprofileGatewayNetworkArray and DeviceprofileGatewayNetworkArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkArrayInput` via:
//
//	DeviceprofileGatewayNetworkArray{ DeviceprofileGatewayNetworkArgs{...} }
type DeviceprofileGatewayNetworkArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkArrayOutput() DeviceprofileGatewayNetworkArrayOutput
	ToDeviceprofileGatewayNetworkArrayOutputWithContext(context.Context) DeviceprofileGatewayNetworkArrayOutput
}

type DeviceprofileGatewayNetworkArray []DeviceprofileGatewayNetworkInput

func (DeviceprofileGatewayNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayNetwork)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkArray) ToDeviceprofileGatewayNetworkArrayOutput() DeviceprofileGatewayNetworkArrayOutput {
	return i.ToDeviceprofileGatewayNetworkArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkArray) ToDeviceprofileGatewayNetworkArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkArrayOutput)
}

type DeviceprofileGatewayNetworkOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetwork)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkOutput) ToDeviceprofileGatewayNetworkOutput() DeviceprofileGatewayNetworkOutput {
	return o
}

func (o DeviceprofileGatewayNetworkOutput) ToDeviceprofileGatewayNetworkOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkOutput {
	return o
}

// whether to disallow Mist Devices in the network
func (o DeviceprofileGatewayNetworkOutput) DisallowMistServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *bool { return v.DisallowMistServices }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayNetworkOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkOutput) Gateway6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *string { return v.Gateway6 }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkOutput) InternalAccess() DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *DeviceprofileGatewayNetworkInternalAccess {
		return v.InternalAccess
	}).(DeviceprofileGatewayNetworkInternalAccessPtrOutput)
}

// whether this network has direct internet access
func (o DeviceprofileGatewayNetworkOutput) InternetAccess() DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *DeviceprofileGatewayNetworkInternetAccess {
		return v.InternetAccess
	}).(DeviceprofileGatewayNetworkInternetAccessPtrOutput)
}

// whether to allow clients in the network to talk to each other
func (o DeviceprofileGatewayNetworkOutput) Isolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *bool { return v.Isolation }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) string { return v.Name }).(pulumi.StringOutput)
}

// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
func (o DeviceprofileGatewayNetworkOutput) RoutedForNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) []string { return v.RoutedForNetworks }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayNetworkOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) string { return v.Subnet }).(pulumi.StringOutput)
}

func (o DeviceprofileGatewayNetworkOutput) Subnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *string { return v.Subnet6 }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkOutput) Tenants() DeviceprofileGatewayNetworkTenantsMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) map[string]DeviceprofileGatewayNetworkTenants { return v.Tenants }).(DeviceprofileGatewayNetworkTenantsMapOutput)
}

func (o DeviceprofileGatewayNetworkOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

// Property key is the VPN name. Whether this network can be accessed from vpn
func (o DeviceprofileGatewayNetworkOutput) VpnAccess() DeviceprofileGatewayNetworkVpnAccessMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetwork) map[string]DeviceprofileGatewayNetworkVpnAccess {
		return v.VpnAccess
	}).(DeviceprofileGatewayNetworkVpnAccessMapOutput)
}

type DeviceprofileGatewayNetworkArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayNetwork)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkArrayOutput) ToDeviceprofileGatewayNetworkArrayOutput() DeviceprofileGatewayNetworkArrayOutput {
	return o
}

func (o DeviceprofileGatewayNetworkArrayOutput) ToDeviceprofileGatewayNetworkArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkArrayOutput {
	return o
}

func (o DeviceprofileGatewayNetworkArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayNetwork {
		return vs[0].([]DeviceprofileGatewayNetwork)[vs[1].(int)]
	}).(DeviceprofileGatewayNetworkOutput)
}

type DeviceprofileGatewayNetworkInternalAccess struct {
	Enabled *bool `pulumi:"enabled"`
}

// DeviceprofileGatewayNetworkInternalAccessInput is an input type that accepts DeviceprofileGatewayNetworkInternalAccessArgs and DeviceprofileGatewayNetworkInternalAccessOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternalAccessInput` via:
//
//	DeviceprofileGatewayNetworkInternalAccessArgs{...}
type DeviceprofileGatewayNetworkInternalAccessInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternalAccessOutput() DeviceprofileGatewayNetworkInternalAccessOutput
	ToDeviceprofileGatewayNetworkInternalAccessOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternalAccessOutput
}

type DeviceprofileGatewayNetworkInternalAccessArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DeviceprofileGatewayNetworkInternalAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternalAccess)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkInternalAccessArgs) ToDeviceprofileGatewayNetworkInternalAccessOutput() DeviceprofileGatewayNetworkInternalAccessOutput {
	return i.ToDeviceprofileGatewayNetworkInternalAccessOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternalAccessArgs) ToDeviceprofileGatewayNetworkInternalAccessOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternalAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternalAccessOutput)
}

func (i DeviceprofileGatewayNetworkInternalAccessArgs) ToDeviceprofileGatewayNetworkInternalAccessPtrOutput() DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return i.ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternalAccessArgs) ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternalAccessOutput).ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayNetworkInternalAccessPtrInput is an input type that accepts DeviceprofileGatewayNetworkInternalAccessArgs, DeviceprofileGatewayNetworkInternalAccessPtr and DeviceprofileGatewayNetworkInternalAccessPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternalAccessPtrInput` via:
//
//	        DeviceprofileGatewayNetworkInternalAccessArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayNetworkInternalAccessPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternalAccessPtrOutput() DeviceprofileGatewayNetworkInternalAccessPtrOutput
	ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternalAccessPtrOutput
}

type deviceprofileGatewayNetworkInternalAccessPtrType DeviceprofileGatewayNetworkInternalAccessArgs

func DeviceprofileGatewayNetworkInternalAccessPtr(v *DeviceprofileGatewayNetworkInternalAccessArgs) DeviceprofileGatewayNetworkInternalAccessPtrInput {
	return (*deviceprofileGatewayNetworkInternalAccessPtrType)(v)
}

func (*deviceprofileGatewayNetworkInternalAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayNetworkInternalAccess)(nil)).Elem()
}

func (i *deviceprofileGatewayNetworkInternalAccessPtrType) ToDeviceprofileGatewayNetworkInternalAccessPtrOutput() DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return i.ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayNetworkInternalAccessPtrType) ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternalAccessPtrOutput)
}

type DeviceprofileGatewayNetworkInternalAccessOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternalAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternalAccess)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternalAccessOutput) ToDeviceprofileGatewayNetworkInternalAccessOutput() DeviceprofileGatewayNetworkInternalAccessOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternalAccessOutput) ToDeviceprofileGatewayNetworkInternalAccessOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternalAccessOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternalAccessOutput) ToDeviceprofileGatewayNetworkInternalAccessPtrOutput() DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return o.ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayNetworkInternalAccessOutput) ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayNetworkInternalAccess) *DeviceprofileGatewayNetworkInternalAccess {
		return &v
	}).(DeviceprofileGatewayNetworkInternalAccessPtrOutput)
}

func (o DeviceprofileGatewayNetworkInternalAccessOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternalAccess) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayNetworkInternalAccessPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternalAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayNetworkInternalAccess)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternalAccessPtrOutput) ToDeviceprofileGatewayNetworkInternalAccessPtrOutput() DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternalAccessPtrOutput) ToDeviceprofileGatewayNetworkInternalAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternalAccessPtrOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternalAccessPtrOutput) Elem() DeviceprofileGatewayNetworkInternalAccessOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternalAccess) DeviceprofileGatewayNetworkInternalAccess {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayNetworkInternalAccess
		return ret
	}).(DeviceprofileGatewayNetworkInternalAccessOutput)
}

func (o DeviceprofileGatewayNetworkInternalAccessPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternalAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayNetworkInternetAccess struct {
	CreateSimpleServicePolicy *bool `pulumi:"createSimpleServicePolicy"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat map[string]DeviceprofileGatewayNetworkInternetAccessDestinationNat `pulumi:"destinationNat"`
	Enabled        *bool                                                              `pulumi:"enabled"`
	// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
	Restricted *bool `pulumi:"restricted"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat map[string]DeviceprofileGatewayNetworkInternetAccessStaticNat `pulumi:"staticNat"`
}

// DeviceprofileGatewayNetworkInternetAccessInput is an input type that accepts DeviceprofileGatewayNetworkInternetAccessArgs and DeviceprofileGatewayNetworkInternetAccessOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternetAccessInput` via:
//
//	DeviceprofileGatewayNetworkInternetAccessArgs{...}
type DeviceprofileGatewayNetworkInternetAccessInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternetAccessOutput() DeviceprofileGatewayNetworkInternetAccessOutput
	ToDeviceprofileGatewayNetworkInternetAccessOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternetAccessOutput
}

type DeviceprofileGatewayNetworkInternetAccessArgs struct {
	CreateSimpleServicePolicy pulumi.BoolPtrInput `pulumi:"createSimpleServicePolicy"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat DeviceprofileGatewayNetworkInternetAccessDestinationNatMapInput `pulumi:"destinationNat"`
	Enabled        pulumi.BoolPtrInput                                             `pulumi:"enabled"`
	// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
	Restricted pulumi.BoolPtrInput `pulumi:"restricted"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat DeviceprofileGatewayNetworkInternetAccessStaticNatMapInput `pulumi:"staticNat"`
}

func (DeviceprofileGatewayNetworkInternetAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccess)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkInternetAccessArgs) ToDeviceprofileGatewayNetworkInternetAccessOutput() DeviceprofileGatewayNetworkInternetAccessOutput {
	return i.ToDeviceprofileGatewayNetworkInternetAccessOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternetAccessArgs) ToDeviceprofileGatewayNetworkInternetAccessOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternetAccessOutput)
}

func (i DeviceprofileGatewayNetworkInternetAccessArgs) ToDeviceprofileGatewayNetworkInternetAccessPtrOutput() DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return i.ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternetAccessArgs) ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternetAccessOutput).ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayNetworkInternetAccessPtrInput is an input type that accepts DeviceprofileGatewayNetworkInternetAccessArgs, DeviceprofileGatewayNetworkInternetAccessPtr and DeviceprofileGatewayNetworkInternetAccessPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternetAccessPtrInput` via:
//
//	        DeviceprofileGatewayNetworkInternetAccessArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayNetworkInternetAccessPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternetAccessPtrOutput() DeviceprofileGatewayNetworkInternetAccessPtrOutput
	ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternetAccessPtrOutput
}

type deviceprofileGatewayNetworkInternetAccessPtrType DeviceprofileGatewayNetworkInternetAccessArgs

func DeviceprofileGatewayNetworkInternetAccessPtr(v *DeviceprofileGatewayNetworkInternetAccessArgs) DeviceprofileGatewayNetworkInternetAccessPtrInput {
	return (*deviceprofileGatewayNetworkInternetAccessPtrType)(v)
}

func (*deviceprofileGatewayNetworkInternetAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayNetworkInternetAccess)(nil)).Elem()
}

func (i *deviceprofileGatewayNetworkInternetAccessPtrType) ToDeviceprofileGatewayNetworkInternetAccessPtrOutput() DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return i.ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayNetworkInternetAccessPtrType) ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternetAccessPtrOutput)
}

type DeviceprofileGatewayNetworkInternetAccessOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternetAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccess)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternetAccessOutput) ToDeviceprofileGatewayNetworkInternetAccessOutput() DeviceprofileGatewayNetworkInternetAccessOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessOutput) ToDeviceprofileGatewayNetworkInternetAccessOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessOutput) ToDeviceprofileGatewayNetworkInternetAccessPtrOutput() DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return o.ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayNetworkInternetAccessOutput) ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayNetworkInternetAccess) *DeviceprofileGatewayNetworkInternetAccess {
		return &v
	}).(DeviceprofileGatewayNetworkInternetAccessPtrOutput)
}

func (o DeviceprofileGatewayNetworkInternetAccessOutput) CreateSimpleServicePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccess) *bool { return v.CreateSimpleServicePolicy }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o DeviceprofileGatewayNetworkInternetAccessOutput) DestinationNat() DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccess) map[string]DeviceprofileGatewayNetworkInternetAccessDestinationNat {
		return v.DestinationNat
	}).(DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput)
}

func (o DeviceprofileGatewayNetworkInternetAccessOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccess) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
func (o DeviceprofileGatewayNetworkInternetAccessOutput) Restricted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccess) *bool { return v.Restricted }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o DeviceprofileGatewayNetworkInternetAccessOutput) StaticNat() DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccess) map[string]DeviceprofileGatewayNetworkInternetAccessStaticNat {
		return v.StaticNat
	}).(DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput)
}

type DeviceprofileGatewayNetworkInternetAccessPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternetAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayNetworkInternetAccess)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) ToDeviceprofileGatewayNetworkInternetAccessPtrOutput() DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) ToDeviceprofileGatewayNetworkInternetAccessPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessPtrOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) Elem() DeviceprofileGatewayNetworkInternetAccessOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternetAccess) DeviceprofileGatewayNetworkInternetAccess {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayNetworkInternetAccess
		return ret
	}).(DeviceprofileGatewayNetworkInternetAccessOutput)
}

func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) CreateSimpleServicePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSimpleServicePolicy
	}).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) DestinationNat() DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternetAccess) map[string]DeviceprofileGatewayNetworkInternetAccessDestinationNat {
		if v == nil {
			return nil
		}
		return v.DestinationNat
	}).(DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput)
}

func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) Restricted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Restricted
	}).(pulumi.BoolPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o DeviceprofileGatewayNetworkInternetAccessPtrOutput) StaticNat() DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkInternetAccess) map[string]DeviceprofileGatewayNetworkInternetAccessStaticNat {
		if v == nil {
			return nil
		}
		return v.StaticNat
	}).(DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput)
}

type DeviceprofileGatewayNetworkInternetAccessDestinationNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	Port       *int    `pulumi:"port"`
}

// DeviceprofileGatewayNetworkInternetAccessDestinationNatInput is an input type that accepts DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs and DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternetAccessDestinationNatInput` via:
//
//	DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs{...}
type DeviceprofileGatewayNetworkInternetAccessDestinationNatInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternetAccessDestinationNatOutput() DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput
	ToDeviceprofileGatewayNetworkInternetAccessDestinationNatOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput
}

type DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
}

func (DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatOutput() DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput {
	return i.ToDeviceprofileGatewayNetworkInternetAccessDestinationNatOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput)
}

// DeviceprofileGatewayNetworkInternetAccessDestinationNatMapInput is an input type that accepts DeviceprofileGatewayNetworkInternetAccessDestinationNatMap and DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternetAccessDestinationNatMapInput` via:
//
//	DeviceprofileGatewayNetworkInternetAccessDestinationNatMap{ "key": DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs{...} }
type DeviceprofileGatewayNetworkInternetAccessDestinationNatMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput() DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput
	ToDeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput
}

type DeviceprofileGatewayNetworkInternetAccessDestinationNatMap map[string]DeviceprofileGatewayNetworkInternetAccessDestinationNatInput

func (DeviceprofileGatewayNetworkInternetAccessDestinationNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkInternetAccessDestinationNatMap) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput() DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput {
	return i.ToDeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternetAccessDestinationNatMap) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput)
}

type DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatOutput() DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccessDestinationNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccessDestinationNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccessDestinationNat) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput() DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput) ToDeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayNetworkInternetAccessDestinationNat {
		return vs[0].(map[string]DeviceprofileGatewayNetworkInternetAccessDestinationNat)[vs[1].(string)]
	}).(DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput)
}

type DeviceprofileGatewayNetworkInternetAccessStaticNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName *string `pulumi:"wanName"`
}

// DeviceprofileGatewayNetworkInternetAccessStaticNatInput is an input type that accepts DeviceprofileGatewayNetworkInternetAccessStaticNatArgs and DeviceprofileGatewayNetworkInternetAccessStaticNatOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternetAccessStaticNatInput` via:
//
//	DeviceprofileGatewayNetworkInternetAccessStaticNatArgs{...}
type DeviceprofileGatewayNetworkInternetAccessStaticNatInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternetAccessStaticNatOutput() DeviceprofileGatewayNetworkInternetAccessStaticNatOutput
	ToDeviceprofileGatewayNetworkInternetAccessStaticNatOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternetAccessStaticNatOutput
}

type DeviceprofileGatewayNetworkInternetAccessStaticNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (DeviceprofileGatewayNetworkInternetAccessStaticNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkInternetAccessStaticNatArgs) ToDeviceprofileGatewayNetworkInternetAccessStaticNatOutput() DeviceprofileGatewayNetworkInternetAccessStaticNatOutput {
	return i.ToDeviceprofileGatewayNetworkInternetAccessStaticNatOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternetAccessStaticNatArgs) ToDeviceprofileGatewayNetworkInternetAccessStaticNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessStaticNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternetAccessStaticNatOutput)
}

// DeviceprofileGatewayNetworkInternetAccessStaticNatMapInput is an input type that accepts DeviceprofileGatewayNetworkInternetAccessStaticNatMap and DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkInternetAccessStaticNatMapInput` via:
//
//	DeviceprofileGatewayNetworkInternetAccessStaticNatMap{ "key": DeviceprofileGatewayNetworkInternetAccessStaticNatArgs{...} }
type DeviceprofileGatewayNetworkInternetAccessStaticNatMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput() DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput
	ToDeviceprofileGatewayNetworkInternetAccessStaticNatMapOutputWithContext(context.Context) DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput
}

type DeviceprofileGatewayNetworkInternetAccessStaticNatMap map[string]DeviceprofileGatewayNetworkInternetAccessStaticNatInput

func (DeviceprofileGatewayNetworkInternetAccessStaticNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkInternetAccessStaticNatMap) ToDeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput() DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput {
	return i.ToDeviceprofileGatewayNetworkInternetAccessStaticNatMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkInternetAccessStaticNatMap) ToDeviceprofileGatewayNetworkInternetAccessStaticNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput)
}

type DeviceprofileGatewayNetworkInternetAccessStaticNatOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternetAccessStaticNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternetAccessStaticNatOutput) ToDeviceprofileGatewayNetworkInternetAccessStaticNatOutput() DeviceprofileGatewayNetworkInternetAccessStaticNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessStaticNatOutput) ToDeviceprofileGatewayNetworkInternetAccessStaticNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessStaticNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessStaticNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccessStaticNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkInternetAccessStaticNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccessStaticNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not set, we configure the nat policies against all WAN ports for simplicity
func (o DeviceprofileGatewayNetworkInternetAccessStaticNatOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkInternetAccessStaticNat) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput) ToDeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput() DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput) ToDeviceprofileGatewayNetworkInternetAccessStaticNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayNetworkInternetAccessStaticNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayNetworkInternetAccessStaticNat {
		return vs[0].(map[string]DeviceprofileGatewayNetworkInternetAccessStaticNat)[vs[1].(string)]
	}).(DeviceprofileGatewayNetworkInternetAccessStaticNatOutput)
}

type DeviceprofileGatewayNetworkTenants struct {
	Addresses []string `pulumi:"addresses"`
}

// DeviceprofileGatewayNetworkTenantsInput is an input type that accepts DeviceprofileGatewayNetworkTenantsArgs and DeviceprofileGatewayNetworkTenantsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkTenantsInput` via:
//
//	DeviceprofileGatewayNetworkTenantsArgs{...}
type DeviceprofileGatewayNetworkTenantsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkTenantsOutput() DeviceprofileGatewayNetworkTenantsOutput
	ToDeviceprofileGatewayNetworkTenantsOutputWithContext(context.Context) DeviceprofileGatewayNetworkTenantsOutput
}

type DeviceprofileGatewayNetworkTenantsArgs struct {
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
}

func (DeviceprofileGatewayNetworkTenantsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkTenants)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkTenantsArgs) ToDeviceprofileGatewayNetworkTenantsOutput() DeviceprofileGatewayNetworkTenantsOutput {
	return i.ToDeviceprofileGatewayNetworkTenantsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkTenantsArgs) ToDeviceprofileGatewayNetworkTenantsOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkTenantsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkTenantsOutput)
}

// DeviceprofileGatewayNetworkTenantsMapInput is an input type that accepts DeviceprofileGatewayNetworkTenantsMap and DeviceprofileGatewayNetworkTenantsMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkTenantsMapInput` via:
//
//	DeviceprofileGatewayNetworkTenantsMap{ "key": DeviceprofileGatewayNetworkTenantsArgs{...} }
type DeviceprofileGatewayNetworkTenantsMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkTenantsMapOutput() DeviceprofileGatewayNetworkTenantsMapOutput
	ToDeviceprofileGatewayNetworkTenantsMapOutputWithContext(context.Context) DeviceprofileGatewayNetworkTenantsMapOutput
}

type DeviceprofileGatewayNetworkTenantsMap map[string]DeviceprofileGatewayNetworkTenantsInput

func (DeviceprofileGatewayNetworkTenantsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkTenants)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkTenantsMap) ToDeviceprofileGatewayNetworkTenantsMapOutput() DeviceprofileGatewayNetworkTenantsMapOutput {
	return i.ToDeviceprofileGatewayNetworkTenantsMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkTenantsMap) ToDeviceprofileGatewayNetworkTenantsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkTenantsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkTenantsMapOutput)
}

type DeviceprofileGatewayNetworkTenantsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkTenantsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkTenants)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkTenantsOutput) ToDeviceprofileGatewayNetworkTenantsOutput() DeviceprofileGatewayNetworkTenantsOutput {
	return o
}

func (o DeviceprofileGatewayNetworkTenantsOutput) ToDeviceprofileGatewayNetworkTenantsOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkTenantsOutput {
	return o
}

func (o DeviceprofileGatewayNetworkTenantsOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkTenants) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayNetworkTenantsMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkTenantsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkTenants)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkTenantsMapOutput) ToDeviceprofileGatewayNetworkTenantsMapOutput() DeviceprofileGatewayNetworkTenantsMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkTenantsMapOutput) ToDeviceprofileGatewayNetworkTenantsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkTenantsMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkTenantsMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayNetworkTenantsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayNetworkTenants {
		return vs[0].(map[string]DeviceprofileGatewayNetworkTenants)[vs[1].(string)]
	}).(DeviceprofileGatewayNetworkTenantsOutput)
}

type DeviceprofileGatewayNetworkVpnAccess struct {
	// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
	AdvertisedSubnet *string `pulumi:"advertisedSubnet"`
	// whether to allow ping from vpn into this routed network
	AllowPing *bool `pulumi:"allowPing"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat map[string]DeviceprofileGatewayNetworkVpnAccessDestinationNat `pulumi:"destinationNat"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
	NatPool *string `pulumi:"natPool"`
	// toward LAN-side BGP peers
	NoReadvertiseToLanBgp *bool `pulumi:"noReadvertiseToLanBgp"`
	// toward LAN-side OSPF peers
	NoReadvertiseToLanOspf *bool `pulumi:"noReadvertiseToLanOspf"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	NoReadvertiseToOverlay *bool `pulumi:"noReadvertiseToOverlay"`
	// by default, the routes are only readvertised toward the same vrf on spoke
	// to allow it to be leaked to other vrfs
	OtherVrfs []string `pulumi:"otherVrfs"`
	// whether this network is routable
	Routed *bool `pulumi:"routed"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
	SourceNat *DeviceprofileGatewayNetworkVpnAccessSourceNat `pulumi:"sourceNat"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat map[string]DeviceprofileGatewayNetworkVpnAccessStaticNat `pulumi:"staticNat"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	SummarizedSubnet *string `pulumi:"summarizedSubnet"`
	// toward LAN-side BGP peers
	SummarizedSubnetToLanBgp *string `pulumi:"summarizedSubnetToLanBgp"`
	// toward LAN-side OSPF peers
	SummarizedSubnetToLanOspf *string `pulumi:"summarizedSubnetToLanOspf"`
}

// DeviceprofileGatewayNetworkVpnAccessInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessArgs and DeviceprofileGatewayNetworkVpnAccessOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessInput` via:
//
//	DeviceprofileGatewayNetworkVpnAccessArgs{...}
type DeviceprofileGatewayNetworkVpnAccessInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessOutput() DeviceprofileGatewayNetworkVpnAccessOutput
	ToDeviceprofileGatewayNetworkVpnAccessOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessOutput
}

type DeviceprofileGatewayNetworkVpnAccessArgs struct {
	// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
	AdvertisedSubnet pulumi.StringPtrInput `pulumi:"advertisedSubnet"`
	// whether to allow ping from vpn into this routed network
	AllowPing pulumi.BoolPtrInput `pulumi:"allowPing"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat DeviceprofileGatewayNetworkVpnAccessDestinationNatMapInput `pulumi:"destinationNat"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
	NatPool pulumi.StringPtrInput `pulumi:"natPool"`
	// toward LAN-side BGP peers
	NoReadvertiseToLanBgp pulumi.BoolPtrInput `pulumi:"noReadvertiseToLanBgp"`
	// toward LAN-side OSPF peers
	NoReadvertiseToLanOspf pulumi.BoolPtrInput `pulumi:"noReadvertiseToLanOspf"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	NoReadvertiseToOverlay pulumi.BoolPtrInput `pulumi:"noReadvertiseToOverlay"`
	// by default, the routes are only readvertised toward the same vrf on spoke
	// to allow it to be leaked to other vrfs
	OtherVrfs pulumi.StringArrayInput `pulumi:"otherVrfs"`
	// whether this network is routable
	Routed pulumi.BoolPtrInput `pulumi:"routed"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
	SourceNat DeviceprofileGatewayNetworkVpnAccessSourceNatPtrInput `pulumi:"sourceNat"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat DeviceprofileGatewayNetworkVpnAccessStaticNatMapInput `pulumi:"staticNat"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	SummarizedSubnet pulumi.StringPtrInput `pulumi:"summarizedSubnet"`
	// toward LAN-side BGP peers
	SummarizedSubnetToLanBgp pulumi.StringPtrInput `pulumi:"summarizedSubnetToLanBgp"`
	// toward LAN-side OSPF peers
	SummarizedSubnetToLanOspf pulumi.StringPtrInput `pulumi:"summarizedSubnetToLanOspf"`
}

func (DeviceprofileGatewayNetworkVpnAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccess)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkVpnAccessArgs) ToDeviceprofileGatewayNetworkVpnAccessOutput() DeviceprofileGatewayNetworkVpnAccessOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessArgs) ToDeviceprofileGatewayNetworkVpnAccessOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessOutput)
}

// DeviceprofileGatewayNetworkVpnAccessMapInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessMap and DeviceprofileGatewayNetworkVpnAccessMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessMapInput` via:
//
//	DeviceprofileGatewayNetworkVpnAccessMap{ "key": DeviceprofileGatewayNetworkVpnAccessArgs{...} }
type DeviceprofileGatewayNetworkVpnAccessMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessMapOutput() DeviceprofileGatewayNetworkVpnAccessMapOutput
	ToDeviceprofileGatewayNetworkVpnAccessMapOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessMapOutput
}

type DeviceprofileGatewayNetworkVpnAccessMap map[string]DeviceprofileGatewayNetworkVpnAccessInput

func (DeviceprofileGatewayNetworkVpnAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkVpnAccess)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkVpnAccessMap) ToDeviceprofileGatewayNetworkVpnAccessMapOutput() DeviceprofileGatewayNetworkVpnAccessMapOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessMap) ToDeviceprofileGatewayNetworkVpnAccessMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessMapOutput)
}

type DeviceprofileGatewayNetworkVpnAccessOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccess)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessOutput) ToDeviceprofileGatewayNetworkVpnAccessOutput() DeviceprofileGatewayNetworkVpnAccessOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessOutput) ToDeviceprofileGatewayNetworkVpnAccessOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessOutput {
	return o
}

// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
func (o DeviceprofileGatewayNetworkVpnAccessOutput) AdvertisedSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *string { return v.AdvertisedSubnet }).(pulumi.StringPtrOutput)
}

// whether to allow ping from vpn into this routed network
func (o DeviceprofileGatewayNetworkVpnAccessOutput) AllowPing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *bool { return v.AllowPing }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o DeviceprofileGatewayNetworkVpnAccessOutput) DestinationNat() DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) map[string]DeviceprofileGatewayNetworkVpnAccessDestinationNat {
		return v.DestinationNat
	}).(DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput)
}

// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
func (o DeviceprofileGatewayNetworkVpnAccessOutput) NatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *string { return v.NatPool }).(pulumi.StringPtrOutput)
}

// toward LAN-side BGP peers
func (o DeviceprofileGatewayNetworkVpnAccessOutput) NoReadvertiseToLanBgp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *bool { return v.NoReadvertiseToLanBgp }).(pulumi.BoolPtrOutput)
}

// toward LAN-side OSPF peers
func (o DeviceprofileGatewayNetworkVpnAccessOutput) NoReadvertiseToLanOspf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *bool { return v.NoReadvertiseToLanOspf }).(pulumi.BoolPtrOutput)
}

// toward overlay
// how HUB should deal with routes it received from Spokes
func (o DeviceprofileGatewayNetworkVpnAccessOutput) NoReadvertiseToOverlay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *bool { return v.NoReadvertiseToOverlay }).(pulumi.BoolPtrOutput)
}

// by default, the routes are only readvertised toward the same vrf on spoke
// to allow it to be leaked to other vrfs
func (o DeviceprofileGatewayNetworkVpnAccessOutput) OtherVrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) []string { return v.OtherVrfs }).(pulumi.StringArrayOutput)
}

// whether this network is routable
func (o DeviceprofileGatewayNetworkVpnAccessOutput) Routed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *bool { return v.Routed }).(pulumi.BoolPtrOutput)
}

// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
func (o DeviceprofileGatewayNetworkVpnAccessOutput) SourceNat() DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *DeviceprofileGatewayNetworkVpnAccessSourceNat {
		return v.SourceNat
	}).(DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o DeviceprofileGatewayNetworkVpnAccessOutput) StaticNat() DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) map[string]DeviceprofileGatewayNetworkVpnAccessStaticNat {
		return v.StaticNat
	}).(DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput)
}

// toward overlay
// how HUB should deal with routes it received from Spokes
func (o DeviceprofileGatewayNetworkVpnAccessOutput) SummarizedSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *string { return v.SummarizedSubnet }).(pulumi.StringPtrOutput)
}

// toward LAN-side BGP peers
func (o DeviceprofileGatewayNetworkVpnAccessOutput) SummarizedSubnetToLanBgp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *string { return v.SummarizedSubnetToLanBgp }).(pulumi.StringPtrOutput)
}

// toward LAN-side OSPF peers
func (o DeviceprofileGatewayNetworkVpnAccessOutput) SummarizedSubnetToLanOspf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccess) *string { return v.SummarizedSubnetToLanOspf }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayNetworkVpnAccessMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkVpnAccess)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessMapOutput) ToDeviceprofileGatewayNetworkVpnAccessMapOutput() DeviceprofileGatewayNetworkVpnAccessMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessMapOutput) ToDeviceprofileGatewayNetworkVpnAccessMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayNetworkVpnAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayNetworkVpnAccess {
		return vs[0].(map[string]DeviceprofileGatewayNetworkVpnAccess)[vs[1].(string)]
	}).(DeviceprofileGatewayNetworkVpnAccessOutput)
}

type DeviceprofileGatewayNetworkVpnAccessDestinationNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	Port       *int    `pulumi:"port"`
}

// DeviceprofileGatewayNetworkVpnAccessDestinationNatInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs and DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessDestinationNatInput` via:
//
//	DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs{...}
type DeviceprofileGatewayNetworkVpnAccessDestinationNatInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessDestinationNatOutput() DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput
	ToDeviceprofileGatewayNetworkVpnAccessDestinationNatOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput
}

type DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
}

func (DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatOutput() DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessDestinationNatOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput)
}

// DeviceprofileGatewayNetworkVpnAccessDestinationNatMapInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessDestinationNatMap and DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessDestinationNatMapInput` via:
//
//	DeviceprofileGatewayNetworkVpnAccessDestinationNatMap{ "key": DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs{...} }
type DeviceprofileGatewayNetworkVpnAccessDestinationNatMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput() DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput
	ToDeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput
}

type DeviceprofileGatewayNetworkVpnAccessDestinationNatMap map[string]DeviceprofileGatewayNetworkVpnAccessDestinationNatInput

func (DeviceprofileGatewayNetworkVpnAccessDestinationNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkVpnAccessDestinationNatMap) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput() DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessDestinationNatMap) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput)
}

type DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatOutput() DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccessDestinationNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccessDestinationNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccessDestinationNat) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput() DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput) ToDeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayNetworkVpnAccessDestinationNat {
		return vs[0].(map[string]DeviceprofileGatewayNetworkVpnAccessDestinationNat)[vs[1].(string)]
	}).(DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput)
}

type DeviceprofileGatewayNetworkVpnAccessSourceNat struct {
	ExternalIp *string `pulumi:"externalIp"`
}

// DeviceprofileGatewayNetworkVpnAccessSourceNatInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessSourceNatArgs and DeviceprofileGatewayNetworkVpnAccessSourceNatOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessSourceNatInput` via:
//
//	DeviceprofileGatewayNetworkVpnAccessSourceNatArgs{...}
type DeviceprofileGatewayNetworkVpnAccessSourceNatInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessSourceNatOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatOutput
	ToDeviceprofileGatewayNetworkVpnAccessSourceNatOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatOutput
}

type DeviceprofileGatewayNetworkVpnAccessSourceNatArgs struct {
	ExternalIp pulumi.StringPtrInput `pulumi:"externalIp"`
}

func (DeviceprofileGatewayNetworkVpnAccessSourceNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkVpnAccessSourceNatArgs) ToDeviceprofileGatewayNetworkVpnAccessSourceNatOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessSourceNatOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessSourceNatArgs) ToDeviceprofileGatewayNetworkVpnAccessSourceNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessSourceNatOutput)
}

func (i DeviceprofileGatewayNetworkVpnAccessSourceNatArgs) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessSourceNatArgs) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessSourceNatOutput).ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayNetworkVpnAccessSourceNatPtrInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessSourceNatArgs, DeviceprofileGatewayNetworkVpnAccessSourceNatPtr and DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessSourceNatPtrInput` via:
//
//	        DeviceprofileGatewayNetworkVpnAccessSourceNatArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayNetworkVpnAccessSourceNatPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput
	ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput
}

type deviceprofileGatewayNetworkVpnAccessSourceNatPtrType DeviceprofileGatewayNetworkVpnAccessSourceNatArgs

func DeviceprofileGatewayNetworkVpnAccessSourceNatPtr(v *DeviceprofileGatewayNetworkVpnAccessSourceNatArgs) DeviceprofileGatewayNetworkVpnAccessSourceNatPtrInput {
	return (*deviceprofileGatewayNetworkVpnAccessSourceNatPtrType)(v)
}

func (*deviceprofileGatewayNetworkVpnAccessSourceNatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (i *deviceprofileGatewayNetworkVpnAccessSourceNatPtrType) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayNetworkVpnAccessSourceNatPtrType) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput)
}

type DeviceprofileGatewayNetworkVpnAccessSourceNatOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessSourceNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatOutput) ToDeviceprofileGatewayNetworkVpnAccessSourceNatOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatOutput) ToDeviceprofileGatewayNetworkVpnAccessSourceNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatOutput) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return o.ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatOutput) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayNetworkVpnAccessSourceNat) *DeviceprofileGatewayNetworkVpnAccessSourceNat {
		return &v
	}).(DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput)
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccessSourceNat) *string { return v.ExternalIp }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput() DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput) ToDeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput) Elem() DeviceprofileGatewayNetworkVpnAccessSourceNatOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkVpnAccessSourceNat) DeviceprofileGatewayNetworkVpnAccessSourceNat {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayNetworkVpnAccessSourceNat
		return ret
	}).(DeviceprofileGatewayNetworkVpnAccessSourceNatOutput)
}

func (o DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayNetworkVpnAccessSourceNat) *string {
		if v == nil {
			return nil
		}
		return v.ExternalIp
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayNetworkVpnAccessStaticNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName *string `pulumi:"wanName"`
}

// DeviceprofileGatewayNetworkVpnAccessStaticNatInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessStaticNatArgs and DeviceprofileGatewayNetworkVpnAccessStaticNatOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessStaticNatInput` via:
//
//	DeviceprofileGatewayNetworkVpnAccessStaticNatArgs{...}
type DeviceprofileGatewayNetworkVpnAccessStaticNatInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessStaticNatOutput() DeviceprofileGatewayNetworkVpnAccessStaticNatOutput
	ToDeviceprofileGatewayNetworkVpnAccessStaticNatOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessStaticNatOutput
}

type DeviceprofileGatewayNetworkVpnAccessStaticNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (DeviceprofileGatewayNetworkVpnAccessStaticNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkVpnAccessStaticNatArgs) ToDeviceprofileGatewayNetworkVpnAccessStaticNatOutput() DeviceprofileGatewayNetworkVpnAccessStaticNatOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessStaticNatOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessStaticNatArgs) ToDeviceprofileGatewayNetworkVpnAccessStaticNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessStaticNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessStaticNatOutput)
}

// DeviceprofileGatewayNetworkVpnAccessStaticNatMapInput is an input type that accepts DeviceprofileGatewayNetworkVpnAccessStaticNatMap and DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayNetworkVpnAccessStaticNatMapInput` via:
//
//	DeviceprofileGatewayNetworkVpnAccessStaticNatMap{ "key": DeviceprofileGatewayNetworkVpnAccessStaticNatArgs{...} }
type DeviceprofileGatewayNetworkVpnAccessStaticNatMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput() DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput
	ToDeviceprofileGatewayNetworkVpnAccessStaticNatMapOutputWithContext(context.Context) DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput
}

type DeviceprofileGatewayNetworkVpnAccessStaticNatMap map[string]DeviceprofileGatewayNetworkVpnAccessStaticNatInput

func (DeviceprofileGatewayNetworkVpnAccessStaticNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (i DeviceprofileGatewayNetworkVpnAccessStaticNatMap) ToDeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput() DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput {
	return i.ToDeviceprofileGatewayNetworkVpnAccessStaticNatMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayNetworkVpnAccessStaticNatMap) ToDeviceprofileGatewayNetworkVpnAccessStaticNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput)
}

type DeviceprofileGatewayNetworkVpnAccessStaticNatOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessStaticNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessStaticNatOutput) ToDeviceprofileGatewayNetworkVpnAccessStaticNatOutput() DeviceprofileGatewayNetworkVpnAccessStaticNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessStaticNatOutput) ToDeviceprofileGatewayNetworkVpnAccessStaticNatOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessStaticNatOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessStaticNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccessStaticNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayNetworkVpnAccessStaticNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccessStaticNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not set, we configure the nat policies against all WAN ports for simplicity
func (o DeviceprofileGatewayNetworkVpnAccessStaticNatOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayNetworkVpnAccessStaticNat) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (o DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput) ToDeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput() DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput) ToDeviceprofileGatewayNetworkVpnAccessStaticNatMapOutputWithContext(ctx context.Context) DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput {
	return o
}

func (o DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayNetworkVpnAccessStaticNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayNetworkVpnAccessStaticNat {
		return vs[0].(map[string]DeviceprofileGatewayNetworkVpnAccessStaticNat)[vs[1].(string)]
	}).(DeviceprofileGatewayNetworkVpnAccessStaticNatOutput)
}

type DeviceprofileGatewayOobIpConfig struct {
	// if `type`==`static`
	Gateway *string `pulumi:"gateway"`
	// if `type`==`static`
	Ip *string `pulumi:"ip"`
	// if `type`==`static`
	Netmask *string `pulumi:"netmask"`
	// for HA Cluster, node1 can have different IP Config
	Node1 *DeviceprofileGatewayOobIpConfigNode1 `pulumi:"node1"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf *bool `pulumi:"useMgmtVrf"`
	// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
	UseMgmtVrfForHostOut *bool   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               *string `pulumi:"vlanId"`
}

// DeviceprofileGatewayOobIpConfigInput is an input type that accepts DeviceprofileGatewayOobIpConfigArgs and DeviceprofileGatewayOobIpConfigOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayOobIpConfigInput` via:
//
//	DeviceprofileGatewayOobIpConfigArgs{...}
type DeviceprofileGatewayOobIpConfigInput interface {
	pulumi.Input

	ToDeviceprofileGatewayOobIpConfigOutput() DeviceprofileGatewayOobIpConfigOutput
	ToDeviceprofileGatewayOobIpConfigOutputWithContext(context.Context) DeviceprofileGatewayOobIpConfigOutput
}

type DeviceprofileGatewayOobIpConfigArgs struct {
	// if `type`==`static`
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// if `type`==`static`
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// if `type`==`static`
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
	// for HA Cluster, node1 can have different IP Config
	Node1 DeviceprofileGatewayOobIpConfigNode1PtrInput `pulumi:"node1"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf pulumi.BoolPtrInput `pulumi:"useMgmtVrf"`
	// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
	UseMgmtVrfForHostOut pulumi.BoolPtrInput   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               pulumi.StringPtrInput `pulumi:"vlanId"`
}

func (DeviceprofileGatewayOobIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayOobIpConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayOobIpConfigArgs) ToDeviceprofileGatewayOobIpConfigOutput() DeviceprofileGatewayOobIpConfigOutput {
	return i.ToDeviceprofileGatewayOobIpConfigOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayOobIpConfigArgs) ToDeviceprofileGatewayOobIpConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayOobIpConfigOutput)
}

func (i DeviceprofileGatewayOobIpConfigArgs) ToDeviceprofileGatewayOobIpConfigPtrOutput() DeviceprofileGatewayOobIpConfigPtrOutput {
	return i.ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayOobIpConfigArgs) ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayOobIpConfigOutput).ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayOobIpConfigPtrInput is an input type that accepts DeviceprofileGatewayOobIpConfigArgs, DeviceprofileGatewayOobIpConfigPtr and DeviceprofileGatewayOobIpConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayOobIpConfigPtrInput` via:
//
//	        DeviceprofileGatewayOobIpConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayOobIpConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayOobIpConfigPtrOutput() DeviceprofileGatewayOobIpConfigPtrOutput
	ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(context.Context) DeviceprofileGatewayOobIpConfigPtrOutput
}

type deviceprofileGatewayOobIpConfigPtrType DeviceprofileGatewayOobIpConfigArgs

func DeviceprofileGatewayOobIpConfigPtr(v *DeviceprofileGatewayOobIpConfigArgs) DeviceprofileGatewayOobIpConfigPtrInput {
	return (*deviceprofileGatewayOobIpConfigPtrType)(v)
}

func (*deviceprofileGatewayOobIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayOobIpConfig)(nil)).Elem()
}

func (i *deviceprofileGatewayOobIpConfigPtrType) ToDeviceprofileGatewayOobIpConfigPtrOutput() DeviceprofileGatewayOobIpConfigPtrOutput {
	return i.ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayOobIpConfigPtrType) ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayOobIpConfigPtrOutput)
}

type DeviceprofileGatewayOobIpConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayOobIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayOobIpConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayOobIpConfigOutput) ToDeviceprofileGatewayOobIpConfigOutput() DeviceprofileGatewayOobIpConfigOutput {
	return o
}

func (o DeviceprofileGatewayOobIpConfigOutput) ToDeviceprofileGatewayOobIpConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigOutput {
	return o
}

func (o DeviceprofileGatewayOobIpConfigOutput) ToDeviceprofileGatewayOobIpConfigPtrOutput() DeviceprofileGatewayOobIpConfigPtrOutput {
	return o.ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayOobIpConfigOutput) ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayOobIpConfig) *DeviceprofileGatewayOobIpConfig {
		return &v
	}).(DeviceprofileGatewayOobIpConfigPtrOutput)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

// for HA Cluster, node1 can have different IP Config
func (o DeviceprofileGatewayOobIpConfigOutput) Node1() DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *DeviceprofileGatewayOobIpConfigNode1 { return v.Node1 }).(DeviceprofileGatewayOobIpConfigNode1PtrOutput)
}

// enum: `dhcp`, `static`
func (o DeviceprofileGatewayOobIpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o DeviceprofileGatewayOobIpConfigOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *bool { return v.UseMgmtVrf }).(pulumi.BoolPtrOutput)
}

// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
func (o DeviceprofileGatewayOobIpConfigOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *bool { return v.UseMgmtVrfForHostOut }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayOobIpConfigOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfig) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayOobIpConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayOobIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayOobIpConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayOobIpConfigPtrOutput) ToDeviceprofileGatewayOobIpConfigPtrOutput() DeviceprofileGatewayOobIpConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayOobIpConfigPtrOutput) ToDeviceprofileGatewayOobIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayOobIpConfigPtrOutput) Elem() DeviceprofileGatewayOobIpConfigOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) DeviceprofileGatewayOobIpConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayOobIpConfig
		return ret
	}).(DeviceprofileGatewayOobIpConfigOutput)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigPtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

// for HA Cluster, node1 can have different IP Config
func (o DeviceprofileGatewayOobIpConfigPtrOutput) Node1() DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *DeviceprofileGatewayOobIpConfigNode1 {
		if v == nil {
			return nil
		}
		return v.Node1
	}).(DeviceprofileGatewayOobIpConfigNode1PtrOutput)
}

// enum: `dhcp`, `static`
func (o DeviceprofileGatewayOobIpConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o DeviceprofileGatewayOobIpConfigPtrOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrf
	}).(pulumi.BoolPtrOutput)
}

// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
func (o DeviceprofileGatewayOobIpConfigPtrOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrfForHostOut
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayOobIpConfigPtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayOobIpConfigNode1 struct {
	// if `type`==`static`
	Gateway *string `pulumi:"gateway"`
	Ip      *string `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask *string `pulumi:"netmask"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf *bool `pulumi:"useMgmtVrf"`
	// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
	UseMgmtVrfForHostOut *bool   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               *string `pulumi:"vlanId"`
}

// DeviceprofileGatewayOobIpConfigNode1Input is an input type that accepts DeviceprofileGatewayOobIpConfigNode1Args and DeviceprofileGatewayOobIpConfigNode1Output values.
// You can construct a concrete instance of `DeviceprofileGatewayOobIpConfigNode1Input` via:
//
//	DeviceprofileGatewayOobIpConfigNode1Args{...}
type DeviceprofileGatewayOobIpConfigNode1Input interface {
	pulumi.Input

	ToDeviceprofileGatewayOobIpConfigNode1Output() DeviceprofileGatewayOobIpConfigNode1Output
	ToDeviceprofileGatewayOobIpConfigNode1OutputWithContext(context.Context) DeviceprofileGatewayOobIpConfigNode1Output
}

type DeviceprofileGatewayOobIpConfigNode1Args struct {
	// if `type`==`static`
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	Ip      pulumi.StringPtrInput `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf pulumi.BoolPtrInput `pulumi:"useMgmtVrf"`
	// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
	UseMgmtVrfForHostOut pulumi.BoolPtrInput   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               pulumi.StringPtrInput `pulumi:"vlanId"`
}

func (DeviceprofileGatewayOobIpConfigNode1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayOobIpConfigNode1)(nil)).Elem()
}

func (i DeviceprofileGatewayOobIpConfigNode1Args) ToDeviceprofileGatewayOobIpConfigNode1Output() DeviceprofileGatewayOobIpConfigNode1Output {
	return i.ToDeviceprofileGatewayOobIpConfigNode1OutputWithContext(context.Background())
}

func (i DeviceprofileGatewayOobIpConfigNode1Args) ToDeviceprofileGatewayOobIpConfigNode1OutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigNode1Output {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayOobIpConfigNode1Output)
}

func (i DeviceprofileGatewayOobIpConfigNode1Args) ToDeviceprofileGatewayOobIpConfigNode1PtrOutput() DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return i.ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayOobIpConfigNode1Args) ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayOobIpConfigNode1Output).ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(ctx)
}

// DeviceprofileGatewayOobIpConfigNode1PtrInput is an input type that accepts DeviceprofileGatewayOobIpConfigNode1Args, DeviceprofileGatewayOobIpConfigNode1Ptr and DeviceprofileGatewayOobIpConfigNode1PtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayOobIpConfigNode1PtrInput` via:
//
//	        DeviceprofileGatewayOobIpConfigNode1Args{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayOobIpConfigNode1PtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayOobIpConfigNode1PtrOutput() DeviceprofileGatewayOobIpConfigNode1PtrOutput
	ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(context.Context) DeviceprofileGatewayOobIpConfigNode1PtrOutput
}

type deviceprofileGatewayOobIpConfigNode1PtrType DeviceprofileGatewayOobIpConfigNode1Args

func DeviceprofileGatewayOobIpConfigNode1Ptr(v *DeviceprofileGatewayOobIpConfigNode1Args) DeviceprofileGatewayOobIpConfigNode1PtrInput {
	return (*deviceprofileGatewayOobIpConfigNode1PtrType)(v)
}

func (*deviceprofileGatewayOobIpConfigNode1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayOobIpConfigNode1)(nil)).Elem()
}

func (i *deviceprofileGatewayOobIpConfigNode1PtrType) ToDeviceprofileGatewayOobIpConfigNode1PtrOutput() DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return i.ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayOobIpConfigNode1PtrType) ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayOobIpConfigNode1PtrOutput)
}

type DeviceprofileGatewayOobIpConfigNode1Output struct{ *pulumi.OutputState }

func (DeviceprofileGatewayOobIpConfigNode1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayOobIpConfigNode1)(nil)).Elem()
}

func (o DeviceprofileGatewayOobIpConfigNode1Output) ToDeviceprofileGatewayOobIpConfigNode1Output() DeviceprofileGatewayOobIpConfigNode1Output {
	return o
}

func (o DeviceprofileGatewayOobIpConfigNode1Output) ToDeviceprofileGatewayOobIpConfigNode1OutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigNode1Output {
	return o
}

func (o DeviceprofileGatewayOobIpConfigNode1Output) ToDeviceprofileGatewayOobIpConfigNode1PtrOutput() DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return o.ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayOobIpConfigNode1Output) ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayOobIpConfigNode1) *DeviceprofileGatewayOobIpConfigNode1 {
		return &v
	}).(DeviceprofileGatewayOobIpConfigNode1PtrOutput)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigNode1Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfigNode1) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayOobIpConfigNode1Output) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfigNode1) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o DeviceprofileGatewayOobIpConfigNode1Output) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfigNode1) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o DeviceprofileGatewayOobIpConfigNode1Output) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfigNode1) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o DeviceprofileGatewayOobIpConfigNode1Output) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfigNode1) *bool { return v.UseMgmtVrf }).(pulumi.BoolPtrOutput)
}

// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
func (o DeviceprofileGatewayOobIpConfigNode1Output) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfigNode1) *bool { return v.UseMgmtVrfForHostOut }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayOobIpConfigNode1Output) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayOobIpConfigNode1) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayOobIpConfigNode1PtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayOobIpConfigNode1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayOobIpConfigNode1)(nil)).Elem()
}

func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) ToDeviceprofileGatewayOobIpConfigNode1PtrOutput() DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return o
}

func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) ToDeviceprofileGatewayOobIpConfigNode1PtrOutputWithContext(ctx context.Context) DeviceprofileGatewayOobIpConfigNode1PtrOutput {
	return o
}

func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) Elem() DeviceprofileGatewayOobIpConfigNode1Output {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) DeviceprofileGatewayOobIpConfigNode1 {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayOobIpConfigNode1
		return ret
	}).(DeviceprofileGatewayOobIpConfigNode1Output)
}

// if `type`==`static`
func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrf
	}).(pulumi.BoolPtrOutput)
}

// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrfForHostOut
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayOobIpConfigNode1PtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayPathPreferences struct {
	Paths []DeviceprofileGatewayPathPreferencesPath `pulumi:"paths"`
	// enum: `ecmp`, `ordered`, `weighted`
	Strategy *string `pulumi:"strategy"`
}

// DeviceprofileGatewayPathPreferencesInput is an input type that accepts DeviceprofileGatewayPathPreferencesArgs and DeviceprofileGatewayPathPreferencesOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPathPreferencesInput` via:
//
//	DeviceprofileGatewayPathPreferencesArgs{...}
type DeviceprofileGatewayPathPreferencesInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPathPreferencesOutput() DeviceprofileGatewayPathPreferencesOutput
	ToDeviceprofileGatewayPathPreferencesOutputWithContext(context.Context) DeviceprofileGatewayPathPreferencesOutput
}

type DeviceprofileGatewayPathPreferencesArgs struct {
	Paths DeviceprofileGatewayPathPreferencesPathArrayInput `pulumi:"paths"`
	// enum: `ecmp`, `ordered`, `weighted`
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (DeviceprofileGatewayPathPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPathPreferences)(nil)).Elem()
}

func (i DeviceprofileGatewayPathPreferencesArgs) ToDeviceprofileGatewayPathPreferencesOutput() DeviceprofileGatewayPathPreferencesOutput {
	return i.ToDeviceprofileGatewayPathPreferencesOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPathPreferencesArgs) ToDeviceprofileGatewayPathPreferencesOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPathPreferencesOutput)
}

// DeviceprofileGatewayPathPreferencesMapInput is an input type that accepts DeviceprofileGatewayPathPreferencesMap and DeviceprofileGatewayPathPreferencesMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPathPreferencesMapInput` via:
//
//	DeviceprofileGatewayPathPreferencesMap{ "key": DeviceprofileGatewayPathPreferencesArgs{...} }
type DeviceprofileGatewayPathPreferencesMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPathPreferencesMapOutput() DeviceprofileGatewayPathPreferencesMapOutput
	ToDeviceprofileGatewayPathPreferencesMapOutputWithContext(context.Context) DeviceprofileGatewayPathPreferencesMapOutput
}

type DeviceprofileGatewayPathPreferencesMap map[string]DeviceprofileGatewayPathPreferencesInput

func (DeviceprofileGatewayPathPreferencesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayPathPreferences)(nil)).Elem()
}

func (i DeviceprofileGatewayPathPreferencesMap) ToDeviceprofileGatewayPathPreferencesMapOutput() DeviceprofileGatewayPathPreferencesMapOutput {
	return i.ToDeviceprofileGatewayPathPreferencesMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPathPreferencesMap) ToDeviceprofileGatewayPathPreferencesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPathPreferencesMapOutput)
}

type DeviceprofileGatewayPathPreferencesOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPathPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPathPreferences)(nil)).Elem()
}

func (o DeviceprofileGatewayPathPreferencesOutput) ToDeviceprofileGatewayPathPreferencesOutput() DeviceprofileGatewayPathPreferencesOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesOutput) ToDeviceprofileGatewayPathPreferencesOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesOutput) Paths() DeviceprofileGatewayPathPreferencesPathArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferences) []DeviceprofileGatewayPathPreferencesPath { return v.Paths }).(DeviceprofileGatewayPathPreferencesPathArrayOutput)
}

// enum: `ecmp`, `ordered`, `weighted`
func (o DeviceprofileGatewayPathPreferencesOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferences) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayPathPreferencesMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPathPreferencesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayPathPreferences)(nil)).Elem()
}

func (o DeviceprofileGatewayPathPreferencesMapOutput) ToDeviceprofileGatewayPathPreferencesMapOutput() DeviceprofileGatewayPathPreferencesMapOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesMapOutput) ToDeviceprofileGatewayPathPreferencesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesMapOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayPathPreferencesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayPathPreferences {
		return vs[0].(map[string]DeviceprofileGatewayPathPreferences)[vs[1].(string)]
	}).(DeviceprofileGatewayPathPreferencesOutput)
}

type DeviceprofileGatewayPathPreferencesPath struct {
	Cost *int `pulumi:"cost"`
	// For SSR Only. `true`, if this specific path is undesired
	Disabled *bool `pulumi:"disabled"`
	// only if `type`==`local`, if a different gateway is desired
	GatewayIp *string `pulumi:"gatewayIp"`
	// only if `type`==`vpn`, if this vpn path can be used for internet
	InternetAccess *bool `pulumi:"internetAccess"`
	// required when
	//   * `type`==`vpn`: the name of the VPN Path to use
	//   * `type`==`wan`: the name of the WAN interface to use'
	Name *string `pulumi:"name"`
	// required when `type`==`local`
	Networks []string `pulumi:"networks"`
	// if `type`==`local`, if destination IP is to be replaced
	TargetIps []string `pulumi:"targetIps"`
	// enum: `local`, `tunnel`, `vpn`, `wan`
	Type *string `pulumi:"type"`
	// required when`type`==`tunnel`
	WanName *string `pulumi:"wanName"`
}

// DeviceprofileGatewayPathPreferencesPathInput is an input type that accepts DeviceprofileGatewayPathPreferencesPathArgs and DeviceprofileGatewayPathPreferencesPathOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPathPreferencesPathInput` via:
//
//	DeviceprofileGatewayPathPreferencesPathArgs{...}
type DeviceprofileGatewayPathPreferencesPathInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPathPreferencesPathOutput() DeviceprofileGatewayPathPreferencesPathOutput
	ToDeviceprofileGatewayPathPreferencesPathOutputWithContext(context.Context) DeviceprofileGatewayPathPreferencesPathOutput
}

type DeviceprofileGatewayPathPreferencesPathArgs struct {
	Cost pulumi.IntPtrInput `pulumi:"cost"`
	// For SSR Only. `true`, if this specific path is undesired
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// only if `type`==`local`, if a different gateway is desired
	GatewayIp pulumi.StringPtrInput `pulumi:"gatewayIp"`
	// only if `type`==`vpn`, if this vpn path can be used for internet
	InternetAccess pulumi.BoolPtrInput `pulumi:"internetAccess"`
	// required when
	//   * `type`==`vpn`: the name of the VPN Path to use
	//   * `type`==`wan`: the name of the WAN interface to use'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// required when `type`==`local`
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// if `type`==`local`, if destination IP is to be replaced
	TargetIps pulumi.StringArrayInput `pulumi:"targetIps"`
	// enum: `local`, `tunnel`, `vpn`, `wan`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// required when`type`==`tunnel`
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (DeviceprofileGatewayPathPreferencesPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPathPreferencesPath)(nil)).Elem()
}

func (i DeviceprofileGatewayPathPreferencesPathArgs) ToDeviceprofileGatewayPathPreferencesPathOutput() DeviceprofileGatewayPathPreferencesPathOutput {
	return i.ToDeviceprofileGatewayPathPreferencesPathOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPathPreferencesPathArgs) ToDeviceprofileGatewayPathPreferencesPathOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPathPreferencesPathOutput)
}

// DeviceprofileGatewayPathPreferencesPathArrayInput is an input type that accepts DeviceprofileGatewayPathPreferencesPathArray and DeviceprofileGatewayPathPreferencesPathArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPathPreferencesPathArrayInput` via:
//
//	DeviceprofileGatewayPathPreferencesPathArray{ DeviceprofileGatewayPathPreferencesPathArgs{...} }
type DeviceprofileGatewayPathPreferencesPathArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPathPreferencesPathArrayOutput() DeviceprofileGatewayPathPreferencesPathArrayOutput
	ToDeviceprofileGatewayPathPreferencesPathArrayOutputWithContext(context.Context) DeviceprofileGatewayPathPreferencesPathArrayOutput
}

type DeviceprofileGatewayPathPreferencesPathArray []DeviceprofileGatewayPathPreferencesPathInput

func (DeviceprofileGatewayPathPreferencesPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayPathPreferencesPath)(nil)).Elem()
}

func (i DeviceprofileGatewayPathPreferencesPathArray) ToDeviceprofileGatewayPathPreferencesPathArrayOutput() DeviceprofileGatewayPathPreferencesPathArrayOutput {
	return i.ToDeviceprofileGatewayPathPreferencesPathArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPathPreferencesPathArray) ToDeviceprofileGatewayPathPreferencesPathArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPathPreferencesPathArrayOutput)
}

type DeviceprofileGatewayPathPreferencesPathOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPathPreferencesPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPathPreferencesPath)(nil)).Elem()
}

func (o DeviceprofileGatewayPathPreferencesPathOutput) ToDeviceprofileGatewayPathPreferencesPathOutput() DeviceprofileGatewayPathPreferencesPathOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesPathOutput) ToDeviceprofileGatewayPathPreferencesPathOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesPathOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesPathOutput) Cost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) *int { return v.Cost }).(pulumi.IntPtrOutput)
}

// For SSR Only. `true`, if this specific path is undesired
func (o DeviceprofileGatewayPathPreferencesPathOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// only if `type`==`local`, if a different gateway is desired
func (o DeviceprofileGatewayPathPreferencesPathOutput) GatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) *string { return v.GatewayIp }).(pulumi.StringPtrOutput)
}

// only if `type`==`vpn`, if this vpn path can be used for internet
func (o DeviceprofileGatewayPathPreferencesPathOutput) InternetAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) *bool { return v.InternetAccess }).(pulumi.BoolPtrOutput)
}

// required when
//   - `type`==`vpn`: the name of the VPN Path to use
//   - `type`==`wan`: the name of the WAN interface to use'
func (o DeviceprofileGatewayPathPreferencesPathOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// required when `type`==`local`
func (o DeviceprofileGatewayPathPreferencesPathOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// if `type`==`local`, if destination IP is to be replaced
func (o DeviceprofileGatewayPathPreferencesPathOutput) TargetIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) []string { return v.TargetIps }).(pulumi.StringArrayOutput)
}

// enum: `local`, `tunnel`, `vpn`, `wan`
func (o DeviceprofileGatewayPathPreferencesPathOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// required when`type`==`tunnel`
func (o DeviceprofileGatewayPathPreferencesPathOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPathPreferencesPath) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayPathPreferencesPathArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPathPreferencesPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayPathPreferencesPath)(nil)).Elem()
}

func (o DeviceprofileGatewayPathPreferencesPathArrayOutput) ToDeviceprofileGatewayPathPreferencesPathArrayOutput() DeviceprofileGatewayPathPreferencesPathArrayOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesPathArrayOutput) ToDeviceprofileGatewayPathPreferencesPathArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayPathPreferencesPathArrayOutput {
	return o
}

func (o DeviceprofileGatewayPathPreferencesPathArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayPathPreferencesPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayPathPreferencesPath {
		return vs[0].([]DeviceprofileGatewayPathPreferencesPath)[vs[1].(int)]
	}).(DeviceprofileGatewayPathPreferencesPathOutput)
}

type DeviceprofileGatewayPortConfig struct {
	Description    *string `pulumi:"description"`
	DisableAutoneg *bool   `pulumi:"disableAutoneg"`
	// port admin up (true) / down (false)
	Disabled *bool `pulumi:"disabled"`
	// if `wanType`==`lte`. enum: `adsl`, `vdsl`
	DslType *string `pulumi:"dslType"`
	// if `wanType`==`dsl`
	// 16 bit int
	DslVci *int `pulumi:"dslVci"`
	// if `wanType`==`dsl`
	// 8 bit int
	DslVpi *int `pulumi:"dslVpi"`
	// enum: `auto`, `full`, `half`
	Duplex *string `pulumi:"duplex"`
	// Junos IP Config
	IpConfig *DeviceprofileGatewayPortConfigIpConfig `pulumi:"ipConfig"`
	// if `wanType`==`lte`
	LteApn *string `pulumi:"lteApn"`
	// if `wanType`==`lte`. enum: `chap`, `none`, `pap`
	LteAuth   *string `pulumi:"lteAuth"`
	LteBackup *bool   `pulumi:"lteBackup"`
	// if `wanType`==`lte`
	LtePassword *string `pulumi:"ltePassword"`
	// if `wanType`==`lte`
	LteUsername *string `pulumi:"lteUsername"`
	Mtu         *int    `pulumi:"mtu"`
	// name that we'll use to derive config
	Name *string `pulumi:"name"`
	// if `usage`==`lan`
	Networks []string `pulumi:"networks"`
	// for Q-in-Q
	OuterVlanId *int  `pulumi:"outerVlanId"`
	PoeDisabled *bool `pulumi:"poeDisabled"`
	// if `usage`==`lan`
	PortNetwork *string `pulumi:"portNetwork"`
	// whether to preserve dscp when sending traffic over VPN (SSR-only)
	PreserveDscp *bool `pulumi:"preserveDscp"`
	// if HA mode
	Redundant *bool `pulumi:"redundant"`
	// if HA mode
	RethIdx *int `pulumi:"rethIdx"`
	// if HA mode
	RethNode *string `pulumi:"rethNode"`
	// SSR only - supporting vlan-based redundancy (matching the size of `networks`)
	RethNodes []string `pulumi:"rethNodes"`
	Speed     *string  `pulumi:"speed"`
	// when SSR is running as VM, this is required on certain hosting platforms
	SsrNoVirtualMac *bool `pulumi:"ssrNoVirtualMac"`
	// for SSR only
	SvrPortRange   *string                                       `pulumi:"svrPortRange"`
	TrafficShaping *DeviceprofileGatewayPortConfigTrafficShaping `pulumi:"trafficShaping"`
	// port usage name. enum: `haControl`, `haData`, `lan`, `wan`
	Usage string `pulumi:"usage"`
	// if WAN interface is on a VLAN
	VlanId   *int                                              `pulumi:"vlanId"`
	VpnPaths map[string]DeviceprofileGatewayPortConfigVpnPaths `pulumi:"vpnPaths"`
	// when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
	WanArpPolicer *string `pulumi:"wanArpPolicer"`
	// optional, if spoke should reach this port by a different IP
	WanExtIp *string `pulumi:"wanExtIp"`
	// optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
	WanSourceNat *DeviceprofileGatewayPortConfigWanSourceNat `pulumi:"wanSourceNat"`
	// if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
	WanType *string `pulumi:"wanType"`
}

// DeviceprofileGatewayPortConfigInput is an input type that accepts DeviceprofileGatewayPortConfigArgs and DeviceprofileGatewayPortConfigOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigInput` via:
//
//	DeviceprofileGatewayPortConfigArgs{...}
type DeviceprofileGatewayPortConfigInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigOutput() DeviceprofileGatewayPortConfigOutput
	ToDeviceprofileGatewayPortConfigOutputWithContext(context.Context) DeviceprofileGatewayPortConfigOutput
}

type DeviceprofileGatewayPortConfigArgs struct {
	Description    pulumi.StringPtrInput `pulumi:"description"`
	DisableAutoneg pulumi.BoolPtrInput   `pulumi:"disableAutoneg"`
	// port admin up (true) / down (false)
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// if `wanType`==`lte`. enum: `adsl`, `vdsl`
	DslType pulumi.StringPtrInput `pulumi:"dslType"`
	// if `wanType`==`dsl`
	// 16 bit int
	DslVci pulumi.IntPtrInput `pulumi:"dslVci"`
	// if `wanType`==`dsl`
	// 8 bit int
	DslVpi pulumi.IntPtrInput `pulumi:"dslVpi"`
	// enum: `auto`, `full`, `half`
	Duplex pulumi.StringPtrInput `pulumi:"duplex"`
	// Junos IP Config
	IpConfig DeviceprofileGatewayPortConfigIpConfigPtrInput `pulumi:"ipConfig"`
	// if `wanType`==`lte`
	LteApn pulumi.StringPtrInput `pulumi:"lteApn"`
	// if `wanType`==`lte`. enum: `chap`, `none`, `pap`
	LteAuth   pulumi.StringPtrInput `pulumi:"lteAuth"`
	LteBackup pulumi.BoolPtrInput   `pulumi:"lteBackup"`
	// if `wanType`==`lte`
	LtePassword pulumi.StringPtrInput `pulumi:"ltePassword"`
	// if `wanType`==`lte`
	LteUsername pulumi.StringPtrInput `pulumi:"lteUsername"`
	Mtu         pulumi.IntPtrInput    `pulumi:"mtu"`
	// name that we'll use to derive config
	Name pulumi.StringPtrInput `pulumi:"name"`
	// if `usage`==`lan`
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// for Q-in-Q
	OuterVlanId pulumi.IntPtrInput  `pulumi:"outerVlanId"`
	PoeDisabled pulumi.BoolPtrInput `pulumi:"poeDisabled"`
	// if `usage`==`lan`
	PortNetwork pulumi.StringPtrInput `pulumi:"portNetwork"`
	// whether to preserve dscp when sending traffic over VPN (SSR-only)
	PreserveDscp pulumi.BoolPtrInput `pulumi:"preserveDscp"`
	// if HA mode
	Redundant pulumi.BoolPtrInput `pulumi:"redundant"`
	// if HA mode
	RethIdx pulumi.IntPtrInput `pulumi:"rethIdx"`
	// if HA mode
	RethNode pulumi.StringPtrInput `pulumi:"rethNode"`
	// SSR only - supporting vlan-based redundancy (matching the size of `networks`)
	RethNodes pulumi.StringArrayInput `pulumi:"rethNodes"`
	Speed     pulumi.StringPtrInput   `pulumi:"speed"`
	// when SSR is running as VM, this is required on certain hosting platforms
	SsrNoVirtualMac pulumi.BoolPtrInput `pulumi:"ssrNoVirtualMac"`
	// for SSR only
	SvrPortRange   pulumi.StringPtrInput                                `pulumi:"svrPortRange"`
	TrafficShaping DeviceprofileGatewayPortConfigTrafficShapingPtrInput `pulumi:"trafficShaping"`
	// port usage name. enum: `haControl`, `haData`, `lan`, `wan`
	Usage pulumi.StringInput `pulumi:"usage"`
	// if WAN interface is on a VLAN
	VlanId   pulumi.IntPtrInput                             `pulumi:"vlanId"`
	VpnPaths DeviceprofileGatewayPortConfigVpnPathsMapInput `pulumi:"vpnPaths"`
	// when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
	WanArpPolicer pulumi.StringPtrInput `pulumi:"wanArpPolicer"`
	// optional, if spoke should reach this port by a different IP
	WanExtIp pulumi.StringPtrInput `pulumi:"wanExtIp"`
	// optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
	WanSourceNat DeviceprofileGatewayPortConfigWanSourceNatPtrInput `pulumi:"wanSourceNat"`
	// if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
	WanType pulumi.StringPtrInput `pulumi:"wanType"`
}

func (DeviceprofileGatewayPortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigArgs) ToDeviceprofileGatewayPortConfigOutput() DeviceprofileGatewayPortConfigOutput {
	return i.ToDeviceprofileGatewayPortConfigOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigArgs) ToDeviceprofileGatewayPortConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigOutput)
}

// DeviceprofileGatewayPortConfigMapInput is an input type that accepts DeviceprofileGatewayPortConfigMap and DeviceprofileGatewayPortConfigMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigMapInput` via:
//
//	DeviceprofileGatewayPortConfigMap{ "key": DeviceprofileGatewayPortConfigArgs{...} }
type DeviceprofileGatewayPortConfigMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigMapOutput() DeviceprofileGatewayPortConfigMapOutput
	ToDeviceprofileGatewayPortConfigMapOutputWithContext(context.Context) DeviceprofileGatewayPortConfigMapOutput
}

type DeviceprofileGatewayPortConfigMap map[string]DeviceprofileGatewayPortConfigInput

func (DeviceprofileGatewayPortConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayPortConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigMap) ToDeviceprofileGatewayPortConfigMapOutput() DeviceprofileGatewayPortConfigMapOutput {
	return i.ToDeviceprofileGatewayPortConfigMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigMap) ToDeviceprofileGatewayPortConfigMapOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigMapOutput)
}

type DeviceprofileGatewayPortConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigOutput) ToDeviceprofileGatewayPortConfigOutput() DeviceprofileGatewayPortConfigOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigOutput) ToDeviceprofileGatewayPortConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayPortConfigOutput) DisableAutoneg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *bool { return v.DisableAutoneg }).(pulumi.BoolPtrOutput)
}

// port admin up (true) / down (false)
func (o DeviceprofileGatewayPortConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// if `wanType`==`lte`. enum: `adsl`, `vdsl`
func (o DeviceprofileGatewayPortConfigOutput) DslType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.DslType }).(pulumi.StringPtrOutput)
}

// if `wanType`==`dsl`
// 16 bit int
func (o DeviceprofileGatewayPortConfigOutput) DslVci() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *int { return v.DslVci }).(pulumi.IntPtrOutput)
}

// if `wanType`==`dsl`
// 8 bit int
func (o DeviceprofileGatewayPortConfigOutput) DslVpi() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *int { return v.DslVpi }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `full`, `half`
func (o DeviceprofileGatewayPortConfigOutput) Duplex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.Duplex }).(pulumi.StringPtrOutput)
}

// Junos IP Config
func (o DeviceprofileGatewayPortConfigOutput) IpConfig() DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *DeviceprofileGatewayPortConfigIpConfig { return v.IpConfig }).(DeviceprofileGatewayPortConfigIpConfigPtrOutput)
}

// if `wanType`==`lte`
func (o DeviceprofileGatewayPortConfigOutput) LteApn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.LteApn }).(pulumi.StringPtrOutput)
}

// if `wanType`==`lte`. enum: `chap`, `none`, `pap`
func (o DeviceprofileGatewayPortConfigOutput) LteAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.LteAuth }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayPortConfigOutput) LteBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *bool { return v.LteBackup }).(pulumi.BoolPtrOutput)
}

// if `wanType`==`lte`
func (o DeviceprofileGatewayPortConfigOutput) LtePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.LtePassword }).(pulumi.StringPtrOutput)
}

// if `wanType`==`lte`
func (o DeviceprofileGatewayPortConfigOutput) LteUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.LteUsername }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayPortConfigOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// name that we'll use to derive config
func (o DeviceprofileGatewayPortConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// if `usage`==`lan`
func (o DeviceprofileGatewayPortConfigOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// for Q-in-Q
func (o DeviceprofileGatewayPortConfigOutput) OuterVlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *int { return v.OuterVlanId }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayPortConfigOutput) PoeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *bool { return v.PoeDisabled }).(pulumi.BoolPtrOutput)
}

// if `usage`==`lan`
func (o DeviceprofileGatewayPortConfigOutput) PortNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.PortNetwork }).(pulumi.StringPtrOutput)
}

// whether to preserve dscp when sending traffic over VPN (SSR-only)
func (o DeviceprofileGatewayPortConfigOutput) PreserveDscp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *bool { return v.PreserveDscp }).(pulumi.BoolPtrOutput)
}

// if HA mode
func (o DeviceprofileGatewayPortConfigOutput) Redundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *bool { return v.Redundant }).(pulumi.BoolPtrOutput)
}

// if HA mode
func (o DeviceprofileGatewayPortConfigOutput) RethIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *int { return v.RethIdx }).(pulumi.IntPtrOutput)
}

// if HA mode
func (o DeviceprofileGatewayPortConfigOutput) RethNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.RethNode }).(pulumi.StringPtrOutput)
}

// SSR only - supporting vlan-based redundancy (matching the size of `networks`)
func (o DeviceprofileGatewayPortConfigOutput) RethNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) []string { return v.RethNodes }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayPortConfigOutput) Speed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.Speed }).(pulumi.StringPtrOutput)
}

// when SSR is running as VM, this is required on certain hosting platforms
func (o DeviceprofileGatewayPortConfigOutput) SsrNoVirtualMac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *bool { return v.SsrNoVirtualMac }).(pulumi.BoolPtrOutput)
}

// for SSR only
func (o DeviceprofileGatewayPortConfigOutput) SvrPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.SvrPortRange }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayPortConfigOutput) TrafficShaping() DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *DeviceprofileGatewayPortConfigTrafficShaping {
		return v.TrafficShaping
	}).(DeviceprofileGatewayPortConfigTrafficShapingPtrOutput)
}

// port usage name. enum: `haControl`, `haData`, `lan`, `wan`
func (o DeviceprofileGatewayPortConfigOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) string { return v.Usage }).(pulumi.StringOutput)
}

// if WAN interface is on a VLAN
func (o DeviceprofileGatewayPortConfigOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayPortConfigOutput) VpnPaths() DeviceprofileGatewayPortConfigVpnPathsMapOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) map[string]DeviceprofileGatewayPortConfigVpnPaths {
		return v.VpnPaths
	}).(DeviceprofileGatewayPortConfigVpnPathsMapOutput)
}

// when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
func (o DeviceprofileGatewayPortConfigOutput) WanArpPolicer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.WanArpPolicer }).(pulumi.StringPtrOutput)
}

// optional, if spoke should reach this port by a different IP
func (o DeviceprofileGatewayPortConfigOutput) WanExtIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.WanExtIp }).(pulumi.StringPtrOutput)
}

// optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
func (o DeviceprofileGatewayPortConfigOutput) WanSourceNat() DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *DeviceprofileGatewayPortConfigWanSourceNat {
		return v.WanSourceNat
	}).(DeviceprofileGatewayPortConfigWanSourceNatPtrOutput)
}

// if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
func (o DeviceprofileGatewayPortConfigOutput) WanType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfig) *string { return v.WanType }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayPortConfigMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayPortConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigMapOutput) ToDeviceprofileGatewayPortConfigMapOutput() DeviceprofileGatewayPortConfigMapOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigMapOutput) ToDeviceprofileGatewayPortConfigMapOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigMapOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayPortConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayPortConfig {
		return vs[0].(map[string]DeviceprofileGatewayPortConfig)[vs[1].(string)]
	}).(DeviceprofileGatewayPortConfigOutput)
}

type DeviceprofileGatewayPortConfigIpConfig struct {
	// except for out-of_band interface (vme/em0/fxp0)
	Dns []string `pulumi:"dns"`
	// except for out-of_band interface (vme/em0/fxp0)
	DnsSuffixes []string `pulumi:"dnsSuffixes"`
	// except for out-of_band interface (vme/em0/fxp0)
	Gateway *string `pulumi:"gateway"`
	Ip      *string `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask *string `pulumi:"netmask"`
	// optional, the network to be used for mgmt
	Network *string `pulumi:"network"`
	// if `type`==`pppoe`
	PoserPassword *string `pulumi:"poserPassword"`
	// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
	PppoeAuth *string `pulumi:"pppoeAuth"`
	// if `type`==`pppoe`
	PppoeUsername *string `pulumi:"pppoeUsername"`
	// enum: `dhcp`, `pppoe`, `static`
	Type *string `pulumi:"type"`
}

// DeviceprofileGatewayPortConfigIpConfigInput is an input type that accepts DeviceprofileGatewayPortConfigIpConfigArgs and DeviceprofileGatewayPortConfigIpConfigOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigIpConfigInput` via:
//
//	DeviceprofileGatewayPortConfigIpConfigArgs{...}
type DeviceprofileGatewayPortConfigIpConfigInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigIpConfigOutput() DeviceprofileGatewayPortConfigIpConfigOutput
	ToDeviceprofileGatewayPortConfigIpConfigOutputWithContext(context.Context) DeviceprofileGatewayPortConfigIpConfigOutput
}

type DeviceprofileGatewayPortConfigIpConfigArgs struct {
	// except for out-of_band interface (vme/em0/fxp0)
	Dns pulumi.StringArrayInput `pulumi:"dns"`
	// except for out-of_band interface (vme/em0/fxp0)
	DnsSuffixes pulumi.StringArrayInput `pulumi:"dnsSuffixes"`
	// except for out-of_band interface (vme/em0/fxp0)
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	Ip      pulumi.StringPtrInput `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
	// optional, the network to be used for mgmt
	Network pulumi.StringPtrInput `pulumi:"network"`
	// if `type`==`pppoe`
	PoserPassword pulumi.StringPtrInput `pulumi:"poserPassword"`
	// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
	PppoeAuth pulumi.StringPtrInput `pulumi:"pppoeAuth"`
	// if `type`==`pppoe`
	PppoeUsername pulumi.StringPtrInput `pulumi:"pppoeUsername"`
	// enum: `dhcp`, `pppoe`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeviceprofileGatewayPortConfigIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigIpConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigIpConfigArgs) ToDeviceprofileGatewayPortConfigIpConfigOutput() DeviceprofileGatewayPortConfigIpConfigOutput {
	return i.ToDeviceprofileGatewayPortConfigIpConfigOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigIpConfigArgs) ToDeviceprofileGatewayPortConfigIpConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigIpConfigOutput)
}

func (i DeviceprofileGatewayPortConfigIpConfigArgs) ToDeviceprofileGatewayPortConfigIpConfigPtrOutput() DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigIpConfigArgs) ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigIpConfigOutput).ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayPortConfigIpConfigPtrInput is an input type that accepts DeviceprofileGatewayPortConfigIpConfigArgs, DeviceprofileGatewayPortConfigIpConfigPtr and DeviceprofileGatewayPortConfigIpConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigIpConfigPtrInput` via:
//
//	        DeviceprofileGatewayPortConfigIpConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayPortConfigIpConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigIpConfigPtrOutput() DeviceprofileGatewayPortConfigIpConfigPtrOutput
	ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(context.Context) DeviceprofileGatewayPortConfigIpConfigPtrOutput
}

type deviceprofileGatewayPortConfigIpConfigPtrType DeviceprofileGatewayPortConfigIpConfigArgs

func DeviceprofileGatewayPortConfigIpConfigPtr(v *DeviceprofileGatewayPortConfigIpConfigArgs) DeviceprofileGatewayPortConfigIpConfigPtrInput {
	return (*deviceprofileGatewayPortConfigIpConfigPtrType)(v)
}

func (*deviceprofileGatewayPortConfigIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigIpConfig)(nil)).Elem()
}

func (i *deviceprofileGatewayPortConfigIpConfigPtrType) ToDeviceprofileGatewayPortConfigIpConfigPtrOutput() DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayPortConfigIpConfigPtrType) ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigIpConfigPtrOutput)
}

type DeviceprofileGatewayPortConfigIpConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigIpConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigIpConfigOutput) ToDeviceprofileGatewayPortConfigIpConfigOutput() DeviceprofileGatewayPortConfigIpConfigOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigIpConfigOutput) ToDeviceprofileGatewayPortConfigIpConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigIpConfigOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigIpConfigOutput) ToDeviceprofileGatewayPortConfigIpConfigPtrOutput() DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return o.ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayPortConfigIpConfigOutput) ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayPortConfigIpConfig) *DeviceprofileGatewayPortConfigIpConfig {
		return &v
	}).(DeviceprofileGatewayPortConfigIpConfigPtrOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o DeviceprofileGatewayPortConfigIpConfigOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) []string { return v.Dns }).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o DeviceprofileGatewayPortConfigIpConfigOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) []string { return v.DnsSuffixes }).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o DeviceprofileGatewayPortConfigIpConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayPortConfigIpConfigOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o DeviceprofileGatewayPortConfigIpConfigOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

// optional, the network to be used for mgmt
func (o DeviceprofileGatewayPortConfigIpConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o DeviceprofileGatewayPortConfigIpConfigOutput) PoserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.PoserPassword }).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
func (o DeviceprofileGatewayPortConfigIpConfigOutput) PppoeAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.PppoeAuth }).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o DeviceprofileGatewayPortConfigIpConfigOutput) PppoeUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.PppoeUsername }).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `pppoe`, `static`
func (o DeviceprofileGatewayPortConfigIpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigIpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayPortConfigIpConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigIpConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) ToDeviceprofileGatewayPortConfigIpConfigPtrOutput() DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) ToDeviceprofileGatewayPortConfigIpConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigIpConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) Elem() DeviceprofileGatewayPortConfigIpConfigOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) DeviceprofileGatewayPortConfigIpConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayPortConfigIpConfig
		return ret
	}).(DeviceprofileGatewayPortConfigIpConfigOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) []string {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) []string {
		if v == nil {
			return nil
		}
		return v.DnsSuffixes
	}).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

// optional, the network to be used for mgmt
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) PoserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.PoserPassword
	}).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) PppoeAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.PppoeAuth
	}).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) PppoeUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.PppoeUsername
	}).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `pppoe`, `static`
func (o DeviceprofileGatewayPortConfigIpConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayPortConfigTrafficShaping struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages []int `pulumi:"classPercentages"`
	Enabled          *bool `pulumi:"enabled"`
}

// DeviceprofileGatewayPortConfigTrafficShapingInput is an input type that accepts DeviceprofileGatewayPortConfigTrafficShapingArgs and DeviceprofileGatewayPortConfigTrafficShapingOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigTrafficShapingInput` via:
//
//	DeviceprofileGatewayPortConfigTrafficShapingArgs{...}
type DeviceprofileGatewayPortConfigTrafficShapingInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigTrafficShapingOutput() DeviceprofileGatewayPortConfigTrafficShapingOutput
	ToDeviceprofileGatewayPortConfigTrafficShapingOutputWithContext(context.Context) DeviceprofileGatewayPortConfigTrafficShapingOutput
}

type DeviceprofileGatewayPortConfigTrafficShapingArgs struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages pulumi.IntArrayInput `pulumi:"classPercentages"`
	Enabled          pulumi.BoolPtrInput  `pulumi:"enabled"`
}

func (DeviceprofileGatewayPortConfigTrafficShapingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigTrafficShaping)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigTrafficShapingArgs) ToDeviceprofileGatewayPortConfigTrafficShapingOutput() DeviceprofileGatewayPortConfigTrafficShapingOutput {
	return i.ToDeviceprofileGatewayPortConfigTrafficShapingOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigTrafficShapingArgs) ToDeviceprofileGatewayPortConfigTrafficShapingOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigTrafficShapingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigTrafficShapingOutput)
}

func (i DeviceprofileGatewayPortConfigTrafficShapingArgs) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigTrafficShapingArgs) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigTrafficShapingOutput).ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayPortConfigTrafficShapingPtrInput is an input type that accepts DeviceprofileGatewayPortConfigTrafficShapingArgs, DeviceprofileGatewayPortConfigTrafficShapingPtr and DeviceprofileGatewayPortConfigTrafficShapingPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigTrafficShapingPtrInput` via:
//
//	        DeviceprofileGatewayPortConfigTrafficShapingArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayPortConfigTrafficShapingPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigTrafficShapingPtrOutput
	ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(context.Context) DeviceprofileGatewayPortConfigTrafficShapingPtrOutput
}

type deviceprofileGatewayPortConfigTrafficShapingPtrType DeviceprofileGatewayPortConfigTrafficShapingArgs

func DeviceprofileGatewayPortConfigTrafficShapingPtr(v *DeviceprofileGatewayPortConfigTrafficShapingArgs) DeviceprofileGatewayPortConfigTrafficShapingPtrInput {
	return (*deviceprofileGatewayPortConfigTrafficShapingPtrType)(v)
}

func (*deviceprofileGatewayPortConfigTrafficShapingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigTrafficShaping)(nil)).Elem()
}

func (i *deviceprofileGatewayPortConfigTrafficShapingPtrType) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayPortConfigTrafficShapingPtrType) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigTrafficShapingPtrOutput)
}

type DeviceprofileGatewayPortConfigTrafficShapingOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigTrafficShapingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigTrafficShaping)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigTrafficShapingOutput) ToDeviceprofileGatewayPortConfigTrafficShapingOutput() DeviceprofileGatewayPortConfigTrafficShapingOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigTrafficShapingOutput) ToDeviceprofileGatewayPortConfigTrafficShapingOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigTrafficShapingOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigTrafficShapingOutput) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return o.ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayPortConfigTrafficShapingOutput) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayPortConfigTrafficShaping) *DeviceprofileGatewayPortConfigTrafficShaping {
		return &v
	}).(DeviceprofileGatewayPortConfigTrafficShapingPtrOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o DeviceprofileGatewayPortConfigTrafficShapingOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigTrafficShaping) []int { return v.ClassPercentages }).(pulumi.IntArrayOutput)
}

func (o DeviceprofileGatewayPortConfigTrafficShapingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigTrafficShaping) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayPortConfigTrafficShapingPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigTrafficShapingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigTrafficShaping)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigTrafficShapingPtrOutput) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigTrafficShapingPtrOutput) ToDeviceprofileGatewayPortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigTrafficShapingPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigTrafficShapingPtrOutput) Elem() DeviceprofileGatewayPortConfigTrafficShapingOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigTrafficShaping) DeviceprofileGatewayPortConfigTrafficShaping {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayPortConfigTrafficShaping
		return ret
	}).(DeviceprofileGatewayPortConfigTrafficShapingOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o DeviceprofileGatewayPortConfigTrafficShapingPtrOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigTrafficShaping) []int {
		if v == nil {
			return nil
		}
		return v.ClassPercentages
	}).(pulumi.IntArrayOutput)
}

func (o DeviceprofileGatewayPortConfigTrafficShapingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigTrafficShaping) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayPortConfigVpnPaths struct {
	// enum: `broadband`, `lte`
	BfdProfile *string `pulumi:"bfdProfile"`
	// whether to use tunnel mode. SSR only
	BfdUseTunnelMode *bool `pulumi:"bfdUseTunnelMode"`
	// for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
	Preference *int `pulumi:"preference"`
	// enum: `hub`, `spoke`
	Role           *string                                               `pulumi:"role"`
	TrafficShaping *DeviceprofileGatewayPortConfigVpnPathsTrafficShaping `pulumi:"trafficShaping"`
}

// DeviceprofileGatewayPortConfigVpnPathsInput is an input type that accepts DeviceprofileGatewayPortConfigVpnPathsArgs and DeviceprofileGatewayPortConfigVpnPathsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigVpnPathsInput` via:
//
//	DeviceprofileGatewayPortConfigVpnPathsArgs{...}
type DeviceprofileGatewayPortConfigVpnPathsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigVpnPathsOutput() DeviceprofileGatewayPortConfigVpnPathsOutput
	ToDeviceprofileGatewayPortConfigVpnPathsOutputWithContext(context.Context) DeviceprofileGatewayPortConfigVpnPathsOutput
}

type DeviceprofileGatewayPortConfigVpnPathsArgs struct {
	// enum: `broadband`, `lte`
	BfdProfile pulumi.StringPtrInput `pulumi:"bfdProfile"`
	// whether to use tunnel mode. SSR only
	BfdUseTunnelMode pulumi.BoolPtrInput `pulumi:"bfdUseTunnelMode"`
	// for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
	Preference pulumi.IntPtrInput `pulumi:"preference"`
	// enum: `hub`, `spoke`
	Role           pulumi.StringPtrInput                                        `pulumi:"role"`
	TrafficShaping DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrInput `pulumi:"trafficShaping"`
}

func (DeviceprofileGatewayPortConfigVpnPathsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPaths)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigVpnPathsArgs) ToDeviceprofileGatewayPortConfigVpnPathsOutput() DeviceprofileGatewayPortConfigVpnPathsOutput {
	return i.ToDeviceprofileGatewayPortConfigVpnPathsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigVpnPathsArgs) ToDeviceprofileGatewayPortConfigVpnPathsOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigVpnPathsOutput)
}

// DeviceprofileGatewayPortConfigVpnPathsMapInput is an input type that accepts DeviceprofileGatewayPortConfigVpnPathsMap and DeviceprofileGatewayPortConfigVpnPathsMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigVpnPathsMapInput` via:
//
//	DeviceprofileGatewayPortConfigVpnPathsMap{ "key": DeviceprofileGatewayPortConfigVpnPathsArgs{...} }
type DeviceprofileGatewayPortConfigVpnPathsMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigVpnPathsMapOutput() DeviceprofileGatewayPortConfigVpnPathsMapOutput
	ToDeviceprofileGatewayPortConfigVpnPathsMapOutputWithContext(context.Context) DeviceprofileGatewayPortConfigVpnPathsMapOutput
}

type DeviceprofileGatewayPortConfigVpnPathsMap map[string]DeviceprofileGatewayPortConfigVpnPathsInput

func (DeviceprofileGatewayPortConfigVpnPathsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayPortConfigVpnPaths)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigVpnPathsMap) ToDeviceprofileGatewayPortConfigVpnPathsMapOutput() DeviceprofileGatewayPortConfigVpnPathsMapOutput {
	return i.ToDeviceprofileGatewayPortConfigVpnPathsMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigVpnPathsMap) ToDeviceprofileGatewayPortConfigVpnPathsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigVpnPathsMapOutput)
}

type DeviceprofileGatewayPortConfigVpnPathsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigVpnPathsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPaths)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigVpnPathsOutput) ToDeviceprofileGatewayPortConfigVpnPathsOutput() DeviceprofileGatewayPortConfigVpnPathsOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigVpnPathsOutput) ToDeviceprofileGatewayPortConfigVpnPathsOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsOutput {
	return o
}

// enum: `broadband`, `lte`
func (o DeviceprofileGatewayPortConfigVpnPathsOutput) BfdProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigVpnPaths) *string { return v.BfdProfile }).(pulumi.StringPtrOutput)
}

// whether to use tunnel mode. SSR only
func (o DeviceprofileGatewayPortConfigVpnPathsOutput) BfdUseTunnelMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigVpnPaths) *bool { return v.BfdUseTunnelMode }).(pulumi.BoolPtrOutput)
}

// for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
func (o DeviceprofileGatewayPortConfigVpnPathsOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigVpnPaths) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// enum: `hub`, `spoke`
func (o DeviceprofileGatewayPortConfigVpnPathsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigVpnPaths) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayPortConfigVpnPathsOutput) TrafficShaping() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigVpnPaths) *DeviceprofileGatewayPortConfigVpnPathsTrafficShaping {
		return v.TrafficShaping
	}).(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput)
}

type DeviceprofileGatewayPortConfigVpnPathsMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigVpnPathsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayPortConfigVpnPaths)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigVpnPathsMapOutput) ToDeviceprofileGatewayPortConfigVpnPathsMapOutput() DeviceprofileGatewayPortConfigVpnPathsMapOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigVpnPathsMapOutput) ToDeviceprofileGatewayPortConfigVpnPathsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsMapOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigVpnPathsMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayPortConfigVpnPathsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayPortConfigVpnPaths {
		return vs[0].(map[string]DeviceprofileGatewayPortConfigVpnPaths)[vs[1].(string)]
	}).(DeviceprofileGatewayPortConfigVpnPathsOutput)
}

type DeviceprofileGatewayPortConfigVpnPathsTrafficShaping struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages []int `pulumi:"classPercentages"`
	Enabled          *bool `pulumi:"enabled"`
}

// DeviceprofileGatewayPortConfigVpnPathsTrafficShapingInput is an input type that accepts DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs and DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigVpnPathsTrafficShapingInput` via:
//
//	DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs{...}
type DeviceprofileGatewayPortConfigVpnPathsTrafficShapingInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput
	ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutputWithContext(context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput
}

type DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages pulumi.IntArrayInput `pulumi:"classPercentages"`
	Enabled          pulumi.BoolPtrInput  `pulumi:"enabled"`
}

func (DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput {
	return i.ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput)
}

func (i DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput).ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrInput is an input type that accepts DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs, DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtr and DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrInput` via:
//
//	        DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput
	ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput
}

type deviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrType DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs

func DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtr(v *DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrInput {
	return (*deviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrType)(v)
}

func (*deviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (i *deviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrType) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrType) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput)
}

type DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return o.ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayPortConfigVpnPathsTrafficShaping) *DeviceprofileGatewayPortConfigVpnPathsTrafficShaping {
		return &v
	}).(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigVpnPathsTrafficShaping) []int { return v.ClassPercentages }).(pulumi.IntArrayOutput)
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigVpnPathsTrafficShaping) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput) ToDeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput) Elem() DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigVpnPathsTrafficShaping) DeviceprofileGatewayPortConfigVpnPathsTrafficShaping {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayPortConfigVpnPathsTrafficShaping
		return ret
	}).(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigVpnPathsTrafficShaping) []int {
		if v == nil {
			return nil
		}
		return v.ClassPercentages
	}).(pulumi.IntArrayOutput)
}

func (o DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigVpnPathsTrafficShaping) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayPortConfigWanSourceNat struct {
	// or to disable the source-nat
	Disabled *bool `pulumi:"disabled"`
	// if alternative natPool is desired
	NatPool *string `pulumi:"natPool"`
}

// DeviceprofileGatewayPortConfigWanSourceNatInput is an input type that accepts DeviceprofileGatewayPortConfigWanSourceNatArgs and DeviceprofileGatewayPortConfigWanSourceNatOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigWanSourceNatInput` via:
//
//	DeviceprofileGatewayPortConfigWanSourceNatArgs{...}
type DeviceprofileGatewayPortConfigWanSourceNatInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigWanSourceNatOutput() DeviceprofileGatewayPortConfigWanSourceNatOutput
	ToDeviceprofileGatewayPortConfigWanSourceNatOutputWithContext(context.Context) DeviceprofileGatewayPortConfigWanSourceNatOutput
}

type DeviceprofileGatewayPortConfigWanSourceNatArgs struct {
	// or to disable the source-nat
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// if alternative natPool is desired
	NatPool pulumi.StringPtrInput `pulumi:"natPool"`
}

func (DeviceprofileGatewayPortConfigWanSourceNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigWanSourceNat)(nil)).Elem()
}

func (i DeviceprofileGatewayPortConfigWanSourceNatArgs) ToDeviceprofileGatewayPortConfigWanSourceNatOutput() DeviceprofileGatewayPortConfigWanSourceNatOutput {
	return i.ToDeviceprofileGatewayPortConfigWanSourceNatOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigWanSourceNatArgs) ToDeviceprofileGatewayPortConfigWanSourceNatOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigWanSourceNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigWanSourceNatOutput)
}

func (i DeviceprofileGatewayPortConfigWanSourceNatArgs) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutput() DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayPortConfigWanSourceNatArgs) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigWanSourceNatOutput).ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayPortConfigWanSourceNatPtrInput is an input type that accepts DeviceprofileGatewayPortConfigWanSourceNatArgs, DeviceprofileGatewayPortConfigWanSourceNatPtr and DeviceprofileGatewayPortConfigWanSourceNatPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayPortConfigWanSourceNatPtrInput` via:
//
//	        DeviceprofileGatewayPortConfigWanSourceNatArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayPortConfigWanSourceNatPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutput() DeviceprofileGatewayPortConfigWanSourceNatPtrOutput
	ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(context.Context) DeviceprofileGatewayPortConfigWanSourceNatPtrOutput
}

type deviceprofileGatewayPortConfigWanSourceNatPtrType DeviceprofileGatewayPortConfigWanSourceNatArgs

func DeviceprofileGatewayPortConfigWanSourceNatPtr(v *DeviceprofileGatewayPortConfigWanSourceNatArgs) DeviceprofileGatewayPortConfigWanSourceNatPtrInput {
	return (*deviceprofileGatewayPortConfigWanSourceNatPtrType)(v)
}

func (*deviceprofileGatewayPortConfigWanSourceNatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigWanSourceNat)(nil)).Elem()
}

func (i *deviceprofileGatewayPortConfigWanSourceNatPtrType) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutput() DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return i.ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayPortConfigWanSourceNatPtrType) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayPortConfigWanSourceNatPtrOutput)
}

type DeviceprofileGatewayPortConfigWanSourceNatOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigWanSourceNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayPortConfigWanSourceNat)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigWanSourceNatOutput) ToDeviceprofileGatewayPortConfigWanSourceNatOutput() DeviceprofileGatewayPortConfigWanSourceNatOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigWanSourceNatOutput) ToDeviceprofileGatewayPortConfigWanSourceNatOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigWanSourceNatOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigWanSourceNatOutput) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutput() DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return o.ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayPortConfigWanSourceNatOutput) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayPortConfigWanSourceNat) *DeviceprofileGatewayPortConfigWanSourceNat {
		return &v
	}).(DeviceprofileGatewayPortConfigWanSourceNatPtrOutput)
}

// or to disable the source-nat
func (o DeviceprofileGatewayPortConfigWanSourceNatOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigWanSourceNat) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// if alternative natPool is desired
func (o DeviceprofileGatewayPortConfigWanSourceNatOutput) NatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayPortConfigWanSourceNat) *string { return v.NatPool }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayPortConfigWanSourceNatPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayPortConfigWanSourceNatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayPortConfigWanSourceNat)(nil)).Elem()
}

func (o DeviceprofileGatewayPortConfigWanSourceNatPtrOutput) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutput() DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigWanSourceNatPtrOutput) ToDeviceprofileGatewayPortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayPortConfigWanSourceNatPtrOutput {
	return o
}

func (o DeviceprofileGatewayPortConfigWanSourceNatPtrOutput) Elem() DeviceprofileGatewayPortConfigWanSourceNatOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigWanSourceNat) DeviceprofileGatewayPortConfigWanSourceNat {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayPortConfigWanSourceNat
		return ret
	}).(DeviceprofileGatewayPortConfigWanSourceNatOutput)
}

// or to disable the source-nat
func (o DeviceprofileGatewayPortConfigWanSourceNatPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigWanSourceNat) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// if alternative natPool is desired
func (o DeviceprofileGatewayPortConfigWanSourceNatPtrOutput) NatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayPortConfigWanSourceNat) *string {
		if v == nil {
			return nil
		}
		return v.NatPool
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayRoutingPolicies struct {
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Terms []DeviceprofileGatewayRoutingPoliciesTerm `pulumi:"terms"`
}

// DeviceprofileGatewayRoutingPoliciesInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesArgs and DeviceprofileGatewayRoutingPoliciesOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesArgs{...}
type DeviceprofileGatewayRoutingPoliciesInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesOutput() DeviceprofileGatewayRoutingPoliciesOutput
	ToDeviceprofileGatewayRoutingPoliciesOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesOutput
}

type DeviceprofileGatewayRoutingPoliciesArgs struct {
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Terms DeviceprofileGatewayRoutingPoliciesTermArrayInput `pulumi:"terms"`
}

func (DeviceprofileGatewayRoutingPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPolicies)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesArgs) ToDeviceprofileGatewayRoutingPoliciesOutput() DeviceprofileGatewayRoutingPoliciesOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesArgs) ToDeviceprofileGatewayRoutingPoliciesOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesOutput)
}

// DeviceprofileGatewayRoutingPoliciesMapInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesMap and DeviceprofileGatewayRoutingPoliciesMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesMapInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesMap{ "key": DeviceprofileGatewayRoutingPoliciesArgs{...} }
type DeviceprofileGatewayRoutingPoliciesMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesMapOutput() DeviceprofileGatewayRoutingPoliciesMapOutput
	ToDeviceprofileGatewayRoutingPoliciesMapOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesMapOutput
}

type DeviceprofileGatewayRoutingPoliciesMap map[string]DeviceprofileGatewayRoutingPoliciesInput

func (DeviceprofileGatewayRoutingPoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayRoutingPolicies)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesMap) ToDeviceprofileGatewayRoutingPoliciesMapOutput() DeviceprofileGatewayRoutingPoliciesMapOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesMap) ToDeviceprofileGatewayRoutingPoliciesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesMapOutput)
}

type DeviceprofileGatewayRoutingPoliciesOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPolicies)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesOutput) ToDeviceprofileGatewayRoutingPoliciesOutput() DeviceprofileGatewayRoutingPoliciesOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesOutput) ToDeviceprofileGatewayRoutingPoliciesOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesOutput {
	return o
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o DeviceprofileGatewayRoutingPoliciesOutput) Terms() DeviceprofileGatewayRoutingPoliciesTermArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPolicies) []DeviceprofileGatewayRoutingPoliciesTerm { return v.Terms }).(DeviceprofileGatewayRoutingPoliciesTermArrayOutput)
}

type DeviceprofileGatewayRoutingPoliciesMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayRoutingPolicies)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesMapOutput) ToDeviceprofileGatewayRoutingPoliciesMapOutput() DeviceprofileGatewayRoutingPoliciesMapOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesMapOutput) ToDeviceprofileGatewayRoutingPoliciesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesMapOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayRoutingPoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayRoutingPolicies {
		return vs[0].(map[string]DeviceprofileGatewayRoutingPolicies)[vs[1].(string)]
	}).(DeviceprofileGatewayRoutingPoliciesOutput)
}

type DeviceprofileGatewayRoutingPoliciesTerm struct {
	// when used as import policy
	Action *DeviceprofileGatewayRoutingPoliciesTermAction `pulumi:"action"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Matching *DeviceprofileGatewayRoutingPoliciesTermMatching `pulumi:"matching"`
}

// DeviceprofileGatewayRoutingPoliciesTermInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermArgs and DeviceprofileGatewayRoutingPoliciesTermOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesTermArgs{...}
type DeviceprofileGatewayRoutingPoliciesTermInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermOutput() DeviceprofileGatewayRoutingPoliciesTermOutput
	ToDeviceprofileGatewayRoutingPoliciesTermOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermOutput
}

type DeviceprofileGatewayRoutingPoliciesTermArgs struct {
	// when used as import policy
	Action DeviceprofileGatewayRoutingPoliciesTermActionPtrInput `pulumi:"action"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Matching DeviceprofileGatewayRoutingPoliciesTermMatchingPtrInput `pulumi:"matching"`
}

func (DeviceprofileGatewayRoutingPoliciesTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTerm)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesTermArgs) ToDeviceprofileGatewayRoutingPoliciesTermOutput() DeviceprofileGatewayRoutingPoliciesTermOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermArgs) ToDeviceprofileGatewayRoutingPoliciesTermOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermOutput)
}

// DeviceprofileGatewayRoutingPoliciesTermArrayInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermArray and DeviceprofileGatewayRoutingPoliciesTermArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermArrayInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesTermArray{ DeviceprofileGatewayRoutingPoliciesTermArgs{...} }
type DeviceprofileGatewayRoutingPoliciesTermArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermArrayOutput() DeviceprofileGatewayRoutingPoliciesTermArrayOutput
	ToDeviceprofileGatewayRoutingPoliciesTermArrayOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermArrayOutput
}

type DeviceprofileGatewayRoutingPoliciesTermArray []DeviceprofileGatewayRoutingPoliciesTermInput

func (DeviceprofileGatewayRoutingPoliciesTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayRoutingPoliciesTerm)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesTermArray) ToDeviceprofileGatewayRoutingPoliciesTermArrayOutput() DeviceprofileGatewayRoutingPoliciesTermArrayOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermArray) ToDeviceprofileGatewayRoutingPoliciesTermArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermArrayOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTerm)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermOutput) ToDeviceprofileGatewayRoutingPoliciesTermOutput() DeviceprofileGatewayRoutingPoliciesTermOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermOutput) ToDeviceprofileGatewayRoutingPoliciesTermOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermOutput {
	return o
}

// when used as import policy
func (o DeviceprofileGatewayRoutingPoliciesTermOutput) Action() DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTerm) *DeviceprofileGatewayRoutingPoliciesTermAction {
		return v.Action
	}).(DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput)
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o DeviceprofileGatewayRoutingPoliciesTermOutput) Matching() DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTerm) *DeviceprofileGatewayRoutingPoliciesTermMatching {
		return v.Matching
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayRoutingPoliciesTerm)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermArrayOutput) ToDeviceprofileGatewayRoutingPoliciesTermArrayOutput() DeviceprofileGatewayRoutingPoliciesTermArrayOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermArrayOutput) ToDeviceprofileGatewayRoutingPoliciesTermArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermArrayOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayRoutingPoliciesTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayRoutingPoliciesTerm {
		return vs[0].([]DeviceprofileGatewayRoutingPoliciesTerm)[vs[1].(int)]
	}).(DeviceprofileGatewayRoutingPoliciesTermOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermAction struct {
	Accept         *bool    `pulumi:"accept"`
	AddCommunities []string `pulumi:"addCommunities"`
	// for SSR, hub decides how VRF routes are leaked on spoke
	AddTargetVrfs []string `pulumi:"addTargetVrfs"`
	// when used as export policy, optional
	Communities []string `pulumi:"communities"`
	// when used as export policy, optional. To exclude certain AS
	ExcludeAsPaths     []string `pulumi:"excludeAsPaths"`
	ExcludeCommunities []string `pulumi:"excludeCommunities"`
	// when used as export policy, optional
	ExportCommunitites []string `pulumi:"exportCommunitites"`
	// optional, for an import policy, localPreference can be changed
	LocalPreference *string `pulumi:"localPreference"`
	// when used as export policy, optional. By default, the local AS will be prepended, to change it
	PrependAsPaths []string `pulumi:"prependAsPaths"`
}

// DeviceprofileGatewayRoutingPoliciesTermActionInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermActionArgs and DeviceprofileGatewayRoutingPoliciesTermActionOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermActionInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesTermActionArgs{...}
type DeviceprofileGatewayRoutingPoliciesTermActionInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermActionOutput() DeviceprofileGatewayRoutingPoliciesTermActionOutput
	ToDeviceprofileGatewayRoutingPoliciesTermActionOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermActionOutput
}

type DeviceprofileGatewayRoutingPoliciesTermActionArgs struct {
	Accept         pulumi.BoolPtrInput     `pulumi:"accept"`
	AddCommunities pulumi.StringArrayInput `pulumi:"addCommunities"`
	// for SSR, hub decides how VRF routes are leaked on spoke
	AddTargetVrfs pulumi.StringArrayInput `pulumi:"addTargetVrfs"`
	// when used as export policy, optional
	Communities pulumi.StringArrayInput `pulumi:"communities"`
	// when used as export policy, optional. To exclude certain AS
	ExcludeAsPaths     pulumi.StringArrayInput `pulumi:"excludeAsPaths"`
	ExcludeCommunities pulumi.StringArrayInput `pulumi:"excludeCommunities"`
	// when used as export policy, optional
	ExportCommunitites pulumi.StringArrayInput `pulumi:"exportCommunitites"`
	// optional, for an import policy, localPreference can be changed
	LocalPreference pulumi.StringPtrInput `pulumi:"localPreference"`
	// when used as export policy, optional. By default, the local AS will be prepended, to change it
	PrependAsPaths pulumi.StringArrayInput `pulumi:"prependAsPaths"`
}

func (DeviceprofileGatewayRoutingPoliciesTermActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermAction)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesTermActionArgs) ToDeviceprofileGatewayRoutingPoliciesTermActionOutput() DeviceprofileGatewayRoutingPoliciesTermActionOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermActionOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermActionArgs) ToDeviceprofileGatewayRoutingPoliciesTermActionOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermActionOutput)
}

func (i DeviceprofileGatewayRoutingPoliciesTermActionArgs) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutput() DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermActionArgs) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermActionOutput).ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayRoutingPoliciesTermActionPtrInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermActionArgs, DeviceprofileGatewayRoutingPoliciesTermActionPtr and DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermActionPtrInput` via:
//
//	        DeviceprofileGatewayRoutingPoliciesTermActionArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayRoutingPoliciesTermActionPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutput() DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput
	ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput
}

type deviceprofileGatewayRoutingPoliciesTermActionPtrType DeviceprofileGatewayRoutingPoliciesTermActionArgs

func DeviceprofileGatewayRoutingPoliciesTermActionPtr(v *DeviceprofileGatewayRoutingPoliciesTermActionArgs) DeviceprofileGatewayRoutingPoliciesTermActionPtrInput {
	return (*deviceprofileGatewayRoutingPoliciesTermActionPtrType)(v)
}

func (*deviceprofileGatewayRoutingPoliciesTermActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermAction)(nil)).Elem()
}

func (i *deviceprofileGatewayRoutingPoliciesTermActionPtrType) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutput() DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayRoutingPoliciesTermActionPtrType) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermActionOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermAction)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) ToDeviceprofileGatewayRoutingPoliciesTermActionOutput() DeviceprofileGatewayRoutingPoliciesTermActionOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) ToDeviceprofileGatewayRoutingPoliciesTermActionOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermActionOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutput() DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return o.ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayRoutingPoliciesTermAction) *DeviceprofileGatewayRoutingPoliciesTermAction {
		return &v
	}).(DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) Accept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) *bool { return v.Accept }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) AddCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) []string { return v.AddCommunities }).(pulumi.StringArrayOutput)
}

// for SSR, hub decides how VRF routes are leaked on spoke
func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) AddTargetVrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) []string { return v.AddTargetVrfs }).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

// when used as export policy, optional. To exclude certain AS
func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) ExcludeAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) []string { return v.ExcludeAsPaths }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) ExcludeCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) []string { return v.ExcludeCommunities }).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) ExportCommunitites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) []string { return v.ExportCommunitites }).(pulumi.StringArrayOutput)
}

// optional, for an import policy, localPreference can be changed
func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) LocalPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) *string { return v.LocalPreference }).(pulumi.StringPtrOutput)
}

// when used as export policy, optional. By default, the local AS will be prepended, to change it
func (o DeviceprofileGatewayRoutingPoliciesTermActionOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermAction) []string { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermAction)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutput() DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) Elem() DeviceprofileGatewayRoutingPoliciesTermActionOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) DeviceprofileGatewayRoutingPoliciesTermAction {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayRoutingPoliciesTermAction
		return ret
	}).(DeviceprofileGatewayRoutingPoliciesTermActionOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) Accept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) *bool {
		if v == nil {
			return nil
		}
		return v.Accept
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) AddCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.AddCommunities
	}).(pulumi.StringArrayOutput)
}

// for SSR, hub decides how VRF routes are leaked on spoke
func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) AddTargetVrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.AddTargetVrfs
	}).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.Communities
	}).(pulumi.StringArrayOutput)
}

// when used as export policy, optional. To exclude certain AS
func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) ExcludeAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeAsPaths
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) ExcludeCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeCommunities
	}).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) ExportCommunitites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.ExportCommunitites
	}).(pulumi.StringArrayOutput)
}

// optional, for an import policy, localPreference can be changed
func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) LocalPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) *string {
		if v == nil {
			return nil
		}
		return v.LocalPreference
	}).(pulumi.StringPtrOutput)
}

// when used as export policy, optional. By default, the local AS will be prepended, to change it
func (o DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.PrependAsPaths
	}).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatching struct {
	// takes regular expression
	AsPaths     []string `pulumi:"asPaths"`
	Communities []string `pulumi:"communities"`
	Networks    []string `pulumi:"networks"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Prefixes []string `pulumi:"prefixes"`
	// `direct`, `bgp`, `osp`, ...
	Protocols   []string                                                    `pulumi:"protocols"`
	RouteExists *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists `pulumi:"routeExists"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	VpnNeighborMacs []string                                                   `pulumi:"vpnNeighborMacs"`
	VpnPathSla      *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla `pulumi:"vpnPathSla"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	// ordered-
	VpnPaths []string `pulumi:"vpnPaths"`
}

// DeviceprofileGatewayRoutingPoliciesTermMatchingInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermMatchingArgs and DeviceprofileGatewayRoutingPoliciesTermMatchingOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermMatchingInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesTermMatchingArgs{...}
type DeviceprofileGatewayRoutingPoliciesTermMatchingInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermMatchingOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingOutput
	ToDeviceprofileGatewayRoutingPoliciesTermMatchingOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingOutput
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingArgs struct {
	// takes regular expression
	AsPaths     pulumi.StringArrayInput `pulumi:"asPaths"`
	Communities pulumi.StringArrayInput `pulumi:"communities"`
	Networks    pulumi.StringArrayInput `pulumi:"networks"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Prefixes pulumi.StringArrayInput `pulumi:"prefixes"`
	// `direct`, `bgp`, `osp`, ...
	Protocols   pulumi.StringArrayInput                                            `pulumi:"protocols"`
	RouteExists DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrInput `pulumi:"routeExists"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	VpnNeighborMacs pulumi.StringArrayInput                                           `pulumi:"vpnNeighborMacs"`
	VpnPathSla      DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrInput `pulumi:"vpnPathSla"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	// ordered-
	VpnPaths pulumi.StringArrayInput `pulumi:"vpnPaths"`
}

func (DeviceprofileGatewayRoutingPoliciesTermMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatching)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingOutput)
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingOutput).ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayRoutingPoliciesTermMatchingPtrInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermMatchingArgs, DeviceprofileGatewayRoutingPoliciesTermMatchingPtr and DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermMatchingPtrInput` via:
//
//	        DeviceprofileGatewayRoutingPoliciesTermMatchingArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayRoutingPoliciesTermMatchingPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput
	ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput
}

type deviceprofileGatewayRoutingPoliciesTermMatchingPtrType DeviceprofileGatewayRoutingPoliciesTermMatchingArgs

func DeviceprofileGatewayRoutingPoliciesTermMatchingPtr(v *DeviceprofileGatewayRoutingPoliciesTermMatchingArgs) DeviceprofileGatewayRoutingPoliciesTermMatchingPtrInput {
	return (*deviceprofileGatewayRoutingPoliciesTermMatchingPtrType)(v)
}

func (*deviceprofileGatewayRoutingPoliciesTermMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermMatching)(nil)).Elem()
}

func (i *deviceprofileGatewayRoutingPoliciesTermMatchingPtrType) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayRoutingPoliciesTermMatchingPtrType) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatching)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return o.ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayRoutingPoliciesTermMatching) *DeviceprofileGatewayRoutingPoliciesTermMatching {
		return &v
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput)
}

// takes regular expression
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) AsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) []string { return v.AsPaths }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) []string { return v.Prefixes }).(pulumi.StringArrayOutput)
}

// `direct`, `bgp`, `osp`, ...
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) []string { return v.Protocols }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) RouteExists() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists {
		return v.RouteExists
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) VpnNeighborMacs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) []string { return v.VpnNeighborMacs }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) VpnPathSla() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla {
		return v.VpnPathSla
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
// ordered-
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingOutput) VpnPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatching) []string { return v.VpnPaths }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermMatching)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) Elem() DeviceprofileGatewayRoutingPoliciesTermMatchingOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) DeviceprofileGatewayRoutingPoliciesTermMatching {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayRoutingPoliciesTermMatching
		return ret
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingOutput)
}

// takes regular expression
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) AsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.AsPaths
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Communities
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(pulumi.StringArrayOutput)
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Prefixes
	}).(pulumi.StringArrayOutput)
}

// `direct`, `bgp`, `osp`, ...
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Protocols
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) RouteExists() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists {
		if v == nil {
			return nil
		}
		return v.RouteExists
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) VpnNeighborMacs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.VpnNeighborMacs
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) VpnPathSla() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla {
		if v == nil {
			return nil
		}
		return v.VpnPathSla
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
// ordered-
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput) VpnPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.VpnPaths
	}).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists struct {
	Route *string `pulumi:"route"`
	// name of the vrf instance
	// it can also be the name of the VPN or wan if they
	VrfName *string `pulumi:"vrfName"`
}

// DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs and DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs{...}
type DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput
	ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs struct {
	Route pulumi.StringPtrInput `pulumi:"route"`
	// name of the vrf instance
	// it can also be the name of the VPN or wan if they
	VrfName pulumi.StringPtrInput `pulumi:"vrfName"`
}

func (DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput)
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput).ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs, DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtr and DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrInput` via:
//
//	        DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput
	ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput
}

type deviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrType DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs

func DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtr(v *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrInput {
	return (*deviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrType)(v)
}

func (*deviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (i *deviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrType) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrType) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists) *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists {
		return &v
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists) *string { return v.Route }).(pulumi.StringPtrOutput)
}

// name of the vrf instance
// it can also be the name of the VPN or wan if they
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput) VrfName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists) *string { return v.VrfName }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput) Elem() DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists) DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists
		return ret
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists) *string {
		if v == nil {
			return nil
		}
		return v.Route
	}).(pulumi.StringPtrOutput)
}

// name of the vrf instance
// it can also be the name of the VPN or wan if they
func (o DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput) VrfName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists) *string {
		if v == nil {
			return nil
		}
		return v.VrfName
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla struct {
	MaxJitter  *int `pulumi:"maxJitter"`
	MaxLatency *int `pulumi:"maxLatency"`
	MaxLoss    *int `pulumi:"maxLoss"`
}

// DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs and DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaInput` via:
//
//	DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs{...}
type DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput
	ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs struct {
	MaxJitter  pulumi.IntPtrInput `pulumi:"maxJitter"`
	MaxLatency pulumi.IntPtrInput `pulumi:"maxLatency"`
	MaxLoss    pulumi.IntPtrInput `pulumi:"maxLoss"`
}

func (DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput)
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput).ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrInput is an input type that accepts DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs, DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtr and DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrInput` via:
//
//	        DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput
	ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput
}

type deviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrType DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs

func DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtr(v *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrInput {
	return (*deviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrType)(v)
}

func (*deviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (i *deviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrType) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return i.ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrType) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla {
		return &v
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) MaxJitter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) *int { return v.MaxJitter }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) *int { return v.MaxLatency }).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput) MaxLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) *int { return v.MaxLoss }).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) ToDeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) Elem() DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla
		return ret
	}).(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) MaxJitter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) *int {
		if v == nil {
			return nil
		}
		return v.MaxJitter
	}).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) *int {
		if v == nil {
			return nil
		}
		return v.MaxLatency
	}).(pulumi.IntPtrOutput)
}

func (o DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) MaxLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla) *int {
		if v == nil {
			return nil
		}
		return v.MaxLoss
	}).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayServicePolicy struct {
	// enum: `allow`, `deny`
	Action *string `pulumi:"action"`
	// For SRX Only
	Appqoe *DeviceprofileGatewayServicePolicyAppqoe `pulumi:"appqoe"`
	Ewfs   []DeviceprofileGatewayServicePolicyEwf   `pulumi:"ewfs"`
	Idp    *DeviceprofileGatewayServicePolicyIdp    `pulumi:"idp"`
	// access within the same VRF
	LocalRouting *bool   `pulumi:"localRouting"`
	Name         *string `pulumi:"name"`
	// by default, we derive all paths available and use them
	// optionally, you can customize by using `pathPreference`
	PathPreference *string `pulumi:"pathPreference"`
	// used to link servicepolicy defined at org level and overwrite some attributes
	ServicepolicyId *string  `pulumi:"servicepolicyId"`
	Services        []string `pulumi:"services"`
	Tenants         []string `pulumi:"tenants"`
}

// DeviceprofileGatewayServicePolicyInput is an input type that accepts DeviceprofileGatewayServicePolicyArgs and DeviceprofileGatewayServicePolicyOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyInput` via:
//
//	DeviceprofileGatewayServicePolicyArgs{...}
type DeviceprofileGatewayServicePolicyInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyOutput() DeviceprofileGatewayServicePolicyOutput
	ToDeviceprofileGatewayServicePolicyOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyOutput
}

type DeviceprofileGatewayServicePolicyArgs struct {
	// enum: `allow`, `deny`
	Action pulumi.StringPtrInput `pulumi:"action"`
	// For SRX Only
	Appqoe DeviceprofileGatewayServicePolicyAppqoePtrInput `pulumi:"appqoe"`
	Ewfs   DeviceprofileGatewayServicePolicyEwfArrayInput  `pulumi:"ewfs"`
	Idp    DeviceprofileGatewayServicePolicyIdpPtrInput    `pulumi:"idp"`
	// access within the same VRF
	LocalRouting pulumi.BoolPtrInput   `pulumi:"localRouting"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
	// by default, we derive all paths available and use them
	// optionally, you can customize by using `pathPreference`
	PathPreference pulumi.StringPtrInput `pulumi:"pathPreference"`
	// used to link servicepolicy defined at org level and overwrite some attributes
	ServicepolicyId pulumi.StringPtrInput   `pulumi:"servicepolicyId"`
	Services        pulumi.StringArrayInput `pulumi:"services"`
	Tenants         pulumi.StringArrayInput `pulumi:"tenants"`
}

func (DeviceprofileGatewayServicePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicy)(nil)).Elem()
}

func (i DeviceprofileGatewayServicePolicyArgs) ToDeviceprofileGatewayServicePolicyOutput() DeviceprofileGatewayServicePolicyOutput {
	return i.ToDeviceprofileGatewayServicePolicyOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyArgs) ToDeviceprofileGatewayServicePolicyOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyOutput)
}

// DeviceprofileGatewayServicePolicyArrayInput is an input type that accepts DeviceprofileGatewayServicePolicyArray and DeviceprofileGatewayServicePolicyArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyArrayInput` via:
//
//	DeviceprofileGatewayServicePolicyArray{ DeviceprofileGatewayServicePolicyArgs{...} }
type DeviceprofileGatewayServicePolicyArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyArrayOutput() DeviceprofileGatewayServicePolicyArrayOutput
	ToDeviceprofileGatewayServicePolicyArrayOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyArrayOutput
}

type DeviceprofileGatewayServicePolicyArray []DeviceprofileGatewayServicePolicyInput

func (DeviceprofileGatewayServicePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayServicePolicy)(nil)).Elem()
}

func (i DeviceprofileGatewayServicePolicyArray) ToDeviceprofileGatewayServicePolicyArrayOutput() DeviceprofileGatewayServicePolicyArrayOutput {
	return i.ToDeviceprofileGatewayServicePolicyArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyArray) ToDeviceprofileGatewayServicePolicyArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyArrayOutput)
}

type DeviceprofileGatewayServicePolicyOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicy)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyOutput) ToDeviceprofileGatewayServicePolicyOutput() DeviceprofileGatewayServicePolicyOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyOutput) ToDeviceprofileGatewayServicePolicyOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyOutput {
	return o
}

// enum: `allow`, `deny`
func (o DeviceprofileGatewayServicePolicyOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// For SRX Only
func (o DeviceprofileGatewayServicePolicyOutput) Appqoe() DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) *DeviceprofileGatewayServicePolicyAppqoe { return v.Appqoe }).(DeviceprofileGatewayServicePolicyAppqoePtrOutput)
}

func (o DeviceprofileGatewayServicePolicyOutput) Ewfs() DeviceprofileGatewayServicePolicyEwfArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) []DeviceprofileGatewayServicePolicyEwf { return v.Ewfs }).(DeviceprofileGatewayServicePolicyEwfArrayOutput)
}

func (o DeviceprofileGatewayServicePolicyOutput) Idp() DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) *DeviceprofileGatewayServicePolicyIdp { return v.Idp }).(DeviceprofileGatewayServicePolicyIdpPtrOutput)
}

// access within the same VRF
func (o DeviceprofileGatewayServicePolicyOutput) LocalRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) *bool { return v.LocalRouting }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayServicePolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// by default, we derive all paths available and use them
// optionally, you can customize by using `pathPreference`
func (o DeviceprofileGatewayServicePolicyOutput) PathPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) *string { return v.PathPreference }).(pulumi.StringPtrOutput)
}

// used to link servicepolicy defined at org level and overwrite some attributes
func (o DeviceprofileGatewayServicePolicyOutput) ServicepolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) *string { return v.ServicepolicyId }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayServicePolicyOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) []string { return v.Services }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayServicePolicyOutput) Tenants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicy) []string { return v.Tenants }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayServicePolicyArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayServicePolicy)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyArrayOutput) ToDeviceprofileGatewayServicePolicyArrayOutput() DeviceprofileGatewayServicePolicyArrayOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyArrayOutput) ToDeviceprofileGatewayServicePolicyArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyArrayOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayServicePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayServicePolicy {
		return vs[0].([]DeviceprofileGatewayServicePolicy)[vs[1].(int)]
	}).(DeviceprofileGatewayServicePolicyOutput)
}

type DeviceprofileGatewayServicePolicyAppqoe struct {
	Enabled *bool `pulumi:"enabled"`
}

// DeviceprofileGatewayServicePolicyAppqoeInput is an input type that accepts DeviceprofileGatewayServicePolicyAppqoeArgs and DeviceprofileGatewayServicePolicyAppqoeOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyAppqoeInput` via:
//
//	DeviceprofileGatewayServicePolicyAppqoeArgs{...}
type DeviceprofileGatewayServicePolicyAppqoeInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyAppqoeOutput() DeviceprofileGatewayServicePolicyAppqoeOutput
	ToDeviceprofileGatewayServicePolicyAppqoeOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyAppqoeOutput
}

type DeviceprofileGatewayServicePolicyAppqoeArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DeviceprofileGatewayServicePolicyAppqoeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicyAppqoe)(nil)).Elem()
}

func (i DeviceprofileGatewayServicePolicyAppqoeArgs) ToDeviceprofileGatewayServicePolicyAppqoeOutput() DeviceprofileGatewayServicePolicyAppqoeOutput {
	return i.ToDeviceprofileGatewayServicePolicyAppqoeOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyAppqoeArgs) ToDeviceprofileGatewayServicePolicyAppqoeOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyAppqoeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyAppqoeOutput)
}

func (i DeviceprofileGatewayServicePolicyAppqoeArgs) ToDeviceprofileGatewayServicePolicyAppqoePtrOutput() DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return i.ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyAppqoeArgs) ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyAppqoeOutput).ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(ctx)
}

// DeviceprofileGatewayServicePolicyAppqoePtrInput is an input type that accepts DeviceprofileGatewayServicePolicyAppqoeArgs, DeviceprofileGatewayServicePolicyAppqoePtr and DeviceprofileGatewayServicePolicyAppqoePtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyAppqoePtrInput` via:
//
//	        DeviceprofileGatewayServicePolicyAppqoeArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayServicePolicyAppqoePtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyAppqoePtrOutput() DeviceprofileGatewayServicePolicyAppqoePtrOutput
	ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyAppqoePtrOutput
}

type deviceprofileGatewayServicePolicyAppqoePtrType DeviceprofileGatewayServicePolicyAppqoeArgs

func DeviceprofileGatewayServicePolicyAppqoePtr(v *DeviceprofileGatewayServicePolicyAppqoeArgs) DeviceprofileGatewayServicePolicyAppqoePtrInput {
	return (*deviceprofileGatewayServicePolicyAppqoePtrType)(v)
}

func (*deviceprofileGatewayServicePolicyAppqoePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayServicePolicyAppqoe)(nil)).Elem()
}

func (i *deviceprofileGatewayServicePolicyAppqoePtrType) ToDeviceprofileGatewayServicePolicyAppqoePtrOutput() DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return i.ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayServicePolicyAppqoePtrType) ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyAppqoePtrOutput)
}

type DeviceprofileGatewayServicePolicyAppqoeOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyAppqoeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicyAppqoe)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyAppqoeOutput) ToDeviceprofileGatewayServicePolicyAppqoeOutput() DeviceprofileGatewayServicePolicyAppqoeOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyAppqoeOutput) ToDeviceprofileGatewayServicePolicyAppqoeOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyAppqoeOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyAppqoeOutput) ToDeviceprofileGatewayServicePolicyAppqoePtrOutput() DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return o.ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayServicePolicyAppqoeOutput) ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayServicePolicyAppqoe) *DeviceprofileGatewayServicePolicyAppqoe {
		return &v
	}).(DeviceprofileGatewayServicePolicyAppqoePtrOutput)
}

func (o DeviceprofileGatewayServicePolicyAppqoeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyAppqoe) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayServicePolicyAppqoePtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyAppqoePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayServicePolicyAppqoe)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyAppqoePtrOutput) ToDeviceprofileGatewayServicePolicyAppqoePtrOutput() DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyAppqoePtrOutput) ToDeviceprofileGatewayServicePolicyAppqoePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyAppqoePtrOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyAppqoePtrOutput) Elem() DeviceprofileGatewayServicePolicyAppqoeOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayServicePolicyAppqoe) DeviceprofileGatewayServicePolicyAppqoe {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayServicePolicyAppqoe
		return ret
	}).(DeviceprofileGatewayServicePolicyAppqoeOutput)
}

func (o DeviceprofileGatewayServicePolicyAppqoePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayServicePolicyAppqoe) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayServicePolicyEwf struct {
	AlertOnly    *bool   `pulumi:"alertOnly"`
	BlockMessage *string `pulumi:"blockMessage"`
	Enabled      *bool   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile *string `pulumi:"profile"`
}

// DeviceprofileGatewayServicePolicyEwfInput is an input type that accepts DeviceprofileGatewayServicePolicyEwfArgs and DeviceprofileGatewayServicePolicyEwfOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyEwfInput` via:
//
//	DeviceprofileGatewayServicePolicyEwfArgs{...}
type DeviceprofileGatewayServicePolicyEwfInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyEwfOutput() DeviceprofileGatewayServicePolicyEwfOutput
	ToDeviceprofileGatewayServicePolicyEwfOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyEwfOutput
}

type DeviceprofileGatewayServicePolicyEwfArgs struct {
	AlertOnly    pulumi.BoolPtrInput   `pulumi:"alertOnly"`
	BlockMessage pulumi.StringPtrInput `pulumi:"blockMessage"`
	Enabled      pulumi.BoolPtrInput   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (DeviceprofileGatewayServicePolicyEwfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicyEwf)(nil)).Elem()
}

func (i DeviceprofileGatewayServicePolicyEwfArgs) ToDeviceprofileGatewayServicePolicyEwfOutput() DeviceprofileGatewayServicePolicyEwfOutput {
	return i.ToDeviceprofileGatewayServicePolicyEwfOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyEwfArgs) ToDeviceprofileGatewayServicePolicyEwfOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyEwfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyEwfOutput)
}

// DeviceprofileGatewayServicePolicyEwfArrayInput is an input type that accepts DeviceprofileGatewayServicePolicyEwfArray and DeviceprofileGatewayServicePolicyEwfArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyEwfArrayInput` via:
//
//	DeviceprofileGatewayServicePolicyEwfArray{ DeviceprofileGatewayServicePolicyEwfArgs{...} }
type DeviceprofileGatewayServicePolicyEwfArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyEwfArrayOutput() DeviceprofileGatewayServicePolicyEwfArrayOutput
	ToDeviceprofileGatewayServicePolicyEwfArrayOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyEwfArrayOutput
}

type DeviceprofileGatewayServicePolicyEwfArray []DeviceprofileGatewayServicePolicyEwfInput

func (DeviceprofileGatewayServicePolicyEwfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayServicePolicyEwf)(nil)).Elem()
}

func (i DeviceprofileGatewayServicePolicyEwfArray) ToDeviceprofileGatewayServicePolicyEwfArrayOutput() DeviceprofileGatewayServicePolicyEwfArrayOutput {
	return i.ToDeviceprofileGatewayServicePolicyEwfArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyEwfArray) ToDeviceprofileGatewayServicePolicyEwfArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyEwfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyEwfArrayOutput)
}

type DeviceprofileGatewayServicePolicyEwfOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyEwfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicyEwf)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyEwfOutput) ToDeviceprofileGatewayServicePolicyEwfOutput() DeviceprofileGatewayServicePolicyEwfOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyEwfOutput) ToDeviceprofileGatewayServicePolicyEwfOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyEwfOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyEwfOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyEwf) *bool { return v.AlertOnly }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayServicePolicyEwfOutput) BlockMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyEwf) *string { return v.BlockMessage }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayServicePolicyEwfOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyEwf) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// enum: `critical`, `standard`, `strict`
func (o DeviceprofileGatewayServicePolicyEwfOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyEwf) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayServicePolicyEwfArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyEwfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayServicePolicyEwf)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyEwfArrayOutput) ToDeviceprofileGatewayServicePolicyEwfArrayOutput() DeviceprofileGatewayServicePolicyEwfArrayOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyEwfArrayOutput) ToDeviceprofileGatewayServicePolicyEwfArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyEwfArrayOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyEwfArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayServicePolicyEwfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayServicePolicyEwf {
		return vs[0].([]DeviceprofileGatewayServicePolicyEwf)[vs[1].(int)]
	}).(DeviceprofileGatewayServicePolicyEwfOutput)
}

type DeviceprofileGatewayServicePolicyIdp struct {
	AlertOnly *bool `pulumi:"alertOnly"`
	Enabled   *bool `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId *string `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile *string `pulumi:"profile"`
}

// DeviceprofileGatewayServicePolicyIdpInput is an input type that accepts DeviceprofileGatewayServicePolicyIdpArgs and DeviceprofileGatewayServicePolicyIdpOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyIdpInput` via:
//
//	DeviceprofileGatewayServicePolicyIdpArgs{...}
type DeviceprofileGatewayServicePolicyIdpInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyIdpOutput() DeviceprofileGatewayServicePolicyIdpOutput
	ToDeviceprofileGatewayServicePolicyIdpOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyIdpOutput
}

type DeviceprofileGatewayServicePolicyIdpArgs struct {
	AlertOnly pulumi.BoolPtrInput `pulumi:"alertOnly"`
	Enabled   pulumi.BoolPtrInput `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId pulumi.StringPtrInput `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (DeviceprofileGatewayServicePolicyIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicyIdp)(nil)).Elem()
}

func (i DeviceprofileGatewayServicePolicyIdpArgs) ToDeviceprofileGatewayServicePolicyIdpOutput() DeviceprofileGatewayServicePolicyIdpOutput {
	return i.ToDeviceprofileGatewayServicePolicyIdpOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyIdpArgs) ToDeviceprofileGatewayServicePolicyIdpOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyIdpOutput)
}

func (i DeviceprofileGatewayServicePolicyIdpArgs) ToDeviceprofileGatewayServicePolicyIdpPtrOutput() DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return i.ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayServicePolicyIdpArgs) ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyIdpOutput).ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayServicePolicyIdpPtrInput is an input type that accepts DeviceprofileGatewayServicePolicyIdpArgs, DeviceprofileGatewayServicePolicyIdpPtr and DeviceprofileGatewayServicePolicyIdpPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayServicePolicyIdpPtrInput` via:
//
//	        DeviceprofileGatewayServicePolicyIdpArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayServicePolicyIdpPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayServicePolicyIdpPtrOutput() DeviceprofileGatewayServicePolicyIdpPtrOutput
	ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(context.Context) DeviceprofileGatewayServicePolicyIdpPtrOutput
}

type deviceprofileGatewayServicePolicyIdpPtrType DeviceprofileGatewayServicePolicyIdpArgs

func DeviceprofileGatewayServicePolicyIdpPtr(v *DeviceprofileGatewayServicePolicyIdpArgs) DeviceprofileGatewayServicePolicyIdpPtrInput {
	return (*deviceprofileGatewayServicePolicyIdpPtrType)(v)
}

func (*deviceprofileGatewayServicePolicyIdpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayServicePolicyIdp)(nil)).Elem()
}

func (i *deviceprofileGatewayServicePolicyIdpPtrType) ToDeviceprofileGatewayServicePolicyIdpPtrOutput() DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return i.ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayServicePolicyIdpPtrType) ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayServicePolicyIdpPtrOutput)
}

type DeviceprofileGatewayServicePolicyIdpOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayServicePolicyIdp)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyIdpOutput) ToDeviceprofileGatewayServicePolicyIdpOutput() DeviceprofileGatewayServicePolicyIdpOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyIdpOutput) ToDeviceprofileGatewayServicePolicyIdpOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyIdpOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyIdpOutput) ToDeviceprofileGatewayServicePolicyIdpPtrOutput() DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return o.ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayServicePolicyIdpOutput) ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayServicePolicyIdp) *DeviceprofileGatewayServicePolicyIdp {
		return &v
	}).(DeviceprofileGatewayServicePolicyIdpPtrOutput)
}

func (o DeviceprofileGatewayServicePolicyIdpOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyIdp) *bool { return v.AlertOnly }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayServicePolicyIdpOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyIdp) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// org_level IDP Profile can be used, this takes precedence over `profile`
func (o DeviceprofileGatewayServicePolicyIdpOutput) IdpprofileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyIdp) *string { return v.IdpprofileId }).(pulumi.StringPtrOutput)
}

// `strict` (default) / `standard` / or keys from from idp_profiles
func (o DeviceprofileGatewayServicePolicyIdpOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayServicePolicyIdp) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayServicePolicyIdpPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayServicePolicyIdpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayServicePolicyIdp)(nil)).Elem()
}

func (o DeviceprofileGatewayServicePolicyIdpPtrOutput) ToDeviceprofileGatewayServicePolicyIdpPtrOutput() DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyIdpPtrOutput) ToDeviceprofileGatewayServicePolicyIdpPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayServicePolicyIdpPtrOutput {
	return o
}

func (o DeviceprofileGatewayServicePolicyIdpPtrOutput) Elem() DeviceprofileGatewayServicePolicyIdpOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayServicePolicyIdp) DeviceprofileGatewayServicePolicyIdp {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayServicePolicyIdp
		return ret
	}).(DeviceprofileGatewayServicePolicyIdpOutput)
}

func (o DeviceprofileGatewayServicePolicyIdpPtrOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayServicePolicyIdp) *bool {
		if v == nil {
			return nil
		}
		return v.AlertOnly
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayServicePolicyIdpPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayServicePolicyIdp) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// org_level IDP Profile can be used, this takes precedence over `profile`
func (o DeviceprofileGatewayServicePolicyIdpPtrOutput) IdpprofileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayServicePolicyIdp) *string {
		if v == nil {
			return nil
		}
		return v.IdpprofileId
	}).(pulumi.StringPtrOutput)
}

// `strict` (default) / `standard` / or keys from from idp_profiles
func (o DeviceprofileGatewayServicePolicyIdpPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayServicePolicyIdp) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayTunnelConfigs struct {
	AutoProvision *DeviceprofileGatewayTunnelConfigsAutoProvision `pulumi:"autoProvision"`
	// Only if `provider`== `custom-ipsec`
	IkeLifetime *int `pulumi:"ikeLifetime"`
	// Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
	IkeMode *string `pulumi:"ikeMode"`
	// if `provider`== `custom-ipsec`
	IkeProposals []DeviceprofileGatewayTunnelConfigsIkeProposal `pulumi:"ikeProposals"`
	// if `provider`== `custom-ipsec`
	IpsecLifetime *int `pulumi:"ipsecLifetime"`
	// Only if  `provider`== `custom-ipsec`
	IpsecProposals []DeviceprofileGatewayTunnelConfigsIpsecProposal `pulumi:"ipsecProposals"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	LocalId *string `pulumi:"localId"`
	// enum: `active-active`, `active-standby`
	Mode    *string                                   `pulumi:"mode"`
	Primary *DeviceprofileGatewayTunnelConfigsPrimary `pulumi:"primary"`
	// Only if `provider`== `custom-ipsec`
	Probe *DeviceprofileGatewayTunnelConfigsProbe `pulumi:"probe"`
	// Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
	Protocol *string `pulumi:"protocol"`
	// enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
	Provider *string `pulumi:"provider"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	Psk       *string                                     `pulumi:"psk"`
	Secondary *DeviceprofileGatewayTunnelConfigsSecondary `pulumi:"secondary"`
	// Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
	Version *string `pulumi:"version"`
}

// DeviceprofileGatewayTunnelConfigsInput is an input type that accepts DeviceprofileGatewayTunnelConfigsArgs and DeviceprofileGatewayTunnelConfigsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsInput` via:
//
//	DeviceprofileGatewayTunnelConfigsArgs{...}
type DeviceprofileGatewayTunnelConfigsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsOutput() DeviceprofileGatewayTunnelConfigsOutput
	ToDeviceprofileGatewayTunnelConfigsOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsOutput
}

type DeviceprofileGatewayTunnelConfigsArgs struct {
	AutoProvision DeviceprofileGatewayTunnelConfigsAutoProvisionPtrInput `pulumi:"autoProvision"`
	// Only if `provider`== `custom-ipsec`
	IkeLifetime pulumi.IntPtrInput `pulumi:"ikeLifetime"`
	// Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
	IkeMode pulumi.StringPtrInput `pulumi:"ikeMode"`
	// if `provider`== `custom-ipsec`
	IkeProposals DeviceprofileGatewayTunnelConfigsIkeProposalArrayInput `pulumi:"ikeProposals"`
	// if `provider`== `custom-ipsec`
	IpsecLifetime pulumi.IntPtrInput `pulumi:"ipsecLifetime"`
	// Only if  `provider`== `custom-ipsec`
	IpsecProposals DeviceprofileGatewayTunnelConfigsIpsecProposalArrayInput `pulumi:"ipsecProposals"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	LocalId pulumi.StringPtrInput `pulumi:"localId"`
	// enum: `active-active`, `active-standby`
	Mode    pulumi.StringPtrInput                            `pulumi:"mode"`
	Primary DeviceprofileGatewayTunnelConfigsPrimaryPtrInput `pulumi:"primary"`
	// Only if `provider`== `custom-ipsec`
	Probe DeviceprofileGatewayTunnelConfigsProbePtrInput `pulumi:"probe"`
	// Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	Psk       pulumi.StringPtrInput                              `pulumi:"psk"`
	Secondary DeviceprofileGatewayTunnelConfigsSecondaryPtrInput `pulumi:"secondary"`
	// Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DeviceprofileGatewayTunnelConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigs)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsArgs) ToDeviceprofileGatewayTunnelConfigsOutput() DeviceprofileGatewayTunnelConfigsOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsArgs) ToDeviceprofileGatewayTunnelConfigsOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsOutput)
}

// DeviceprofileGatewayTunnelConfigsMapInput is an input type that accepts DeviceprofileGatewayTunnelConfigsMap and DeviceprofileGatewayTunnelConfigsMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsMapInput` via:
//
//	DeviceprofileGatewayTunnelConfigsMap{ "key": DeviceprofileGatewayTunnelConfigsArgs{...} }
type DeviceprofileGatewayTunnelConfigsMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsMapOutput() DeviceprofileGatewayTunnelConfigsMapOutput
	ToDeviceprofileGatewayTunnelConfigsMapOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsMapOutput
}

type DeviceprofileGatewayTunnelConfigsMap map[string]DeviceprofileGatewayTunnelConfigsInput

func (DeviceprofileGatewayTunnelConfigsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayTunnelConfigs)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsMap) ToDeviceprofileGatewayTunnelConfigsMapOutput() DeviceprofileGatewayTunnelConfigsMapOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsMap) ToDeviceprofileGatewayTunnelConfigsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsMapOutput)
}

type DeviceprofileGatewayTunnelConfigsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigs)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsOutput) ToDeviceprofileGatewayTunnelConfigsOutput() DeviceprofileGatewayTunnelConfigsOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsOutput) ToDeviceprofileGatewayTunnelConfigsOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsOutput) AutoProvision() DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *DeviceprofileGatewayTunnelConfigsAutoProvision {
		return v.AutoProvision
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput)
}

// Only if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) IkeLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *int { return v.IkeLifetime }).(pulumi.IntPtrOutput)
}

// Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
func (o DeviceprofileGatewayTunnelConfigsOutput) IkeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *string { return v.IkeMode }).(pulumi.StringPtrOutput)
}

// if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) IkeProposals() DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) []DeviceprofileGatewayTunnelConfigsIkeProposal {
		return v.IkeProposals
	}).(DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput)
}

// if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) IpsecLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *int { return v.IpsecLifetime }).(pulumi.IntPtrOutput)
}

// Only if  `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) IpsecProposals() DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) []DeviceprofileGatewayTunnelConfigsIpsecProposal {
		return v.IpsecProposals
	}).(DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-ipsec`
//   - `provider`==`jse-ipsec`
//   - `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) LocalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *string { return v.LocalId }).(pulumi.StringPtrOutput)
}

// enum: `active-active`, `active-standby`
func (o DeviceprofileGatewayTunnelConfigsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsOutput) Primary() DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *DeviceprofileGatewayTunnelConfigsPrimary { return v.Primary }).(DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput)
}

// Only if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) Probe() DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *DeviceprofileGatewayTunnelConfigsProbe { return v.Probe }).(DeviceprofileGatewayTunnelConfigsProbePtrOutput)
}

// Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// Only if:
//   - `provider`== `zscaler-ipsec`
//   - `provider`==`jse-ipsec`
//   - `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *string { return v.Psk }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsOutput) Secondary() DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *DeviceprofileGatewayTunnelConfigsSecondary {
		return v.Secondary
	}).(DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput)
}

// Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
func (o DeviceprofileGatewayTunnelConfigsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigs) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayTunnelConfigs)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsMapOutput) ToDeviceprofileGatewayTunnelConfigsMapOutput() DeviceprofileGatewayTunnelConfigsMapOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsMapOutput) ToDeviceprofileGatewayTunnelConfigsMapOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsMapOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayTunnelConfigsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayTunnelConfigs {
		return vs[0].(map[string]DeviceprofileGatewayTunnelConfigs)[vs[1].(string)]
	}).(DeviceprofileGatewayTunnelConfigsOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvision struct {
	Enable  *bool                                                  `pulumi:"enable"`
	Latlng  *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng  `pulumi:"latlng"`
	Primary *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary `pulumi:"primary"`
	// enum: `APAC`, `Americas`, `EMEA`, `auto`
	Region    *string                                                  `pulumi:"region"`
	Secondary *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary `pulumi:"secondary"`
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionArgs and DeviceprofileGatewayTunnelConfigsAutoProvisionOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionInput` via:
//
//	DeviceprofileGatewayTunnelConfigsAutoProvisionArgs{...}
type DeviceprofileGatewayTunnelConfigsAutoProvisionInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionOutput
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionArgs struct {
	Enable  pulumi.BoolPtrInput                                           `pulumi:"enable"`
	Latlng  DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrInput  `pulumi:"latlng"`
	Primary DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrInput `pulumi:"primary"`
	// enum: `APAC`, `Americas`, `EMEA`, `auto`
	Region    pulumi.StringPtrInput                                           `pulumi:"region"`
	Secondary DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrInput `pulumi:"secondary"`
}

func (DeviceprofileGatewayTunnelConfigsAutoProvisionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvision)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionOutput)
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionOutput).ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionPtrInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionArgs, DeviceprofileGatewayTunnelConfigsAutoProvisionPtr and DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionPtrInput` via:
//
//	        DeviceprofileGatewayTunnelConfigsAutoProvisionArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelConfigsAutoProvisionPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput
}

type deviceprofileGatewayTunnelConfigsAutoProvisionPtrType DeviceprofileGatewayTunnelConfigsAutoProvisionArgs

func DeviceprofileGatewayTunnelConfigsAutoProvisionPtr(v *DeviceprofileGatewayTunnelConfigsAutoProvisionArgs) DeviceprofileGatewayTunnelConfigsAutoProvisionPtrInput {
	return (*deviceprofileGatewayTunnelConfigsAutoProvisionPtrType)(v)
}

func (*deviceprofileGatewayTunnelConfigsAutoProvisionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvision)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvision)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return o.ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelConfigsAutoProvision) *DeviceprofileGatewayTunnelConfigsAutoProvision {
		return &v
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvision) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) Latlng() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvision) *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng {
		return v.Latlng
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) Primary() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvision) *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary {
		return v.Primary
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

// enum: `APAC`, `Americas`, `EMEA`, `auto`
func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvision) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionOutput) Secondary() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvision) *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary {
		return v.Secondary
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvision)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) Elem() DeviceprofileGatewayTunnelConfigsAutoProvisionOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvision) DeviceprofileGatewayTunnelConfigsAutoProvision {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelConfigsAutoProvision
		return ret
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvision) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) Latlng() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvision) *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng {
		if v == nil {
			return nil
		}
		return v.Latlng
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) Primary() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvision) *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary {
		if v == nil {
			return nil
		}
		return v.Primary
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

// enum: `APAC`, `Americas`, `EMEA`, `auto`
func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvision) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput) Secondary() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvision) *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary {
		if v == nil {
			return nil
		}
		return v.Secondary
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng struct {
	Lat float64 `pulumi:"lat"`
	Lng float64 `pulumi:"lng"`
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs and DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngInput` via:
//
//	DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs{...}
type DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs struct {
	Lat pulumi.Float64Input `pulumi:"lat"`
	Lng pulumi.Float64Input `pulumi:"lng"`
}

func (DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput)
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput).ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs, DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtr and DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrInput` via:
//
//	        DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput
}

type deviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrType DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs

func DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtr(v *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrInput {
	return (*deviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrType)(v)
}

func (*deviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng) *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng {
		return &v
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput) Lat() pulumi.Float64Output {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng) float64 { return v.Lat }).(pulumi.Float64Output)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput) Lng() pulumi.Float64Output {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng) float64 { return v.Lng }).(pulumi.Float64Output)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput) Elem() DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng) DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng
		return ret
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput) Lat() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng) *float64 {
		if v == nil {
			return nil
		}
		return &v.Lat
	}).(pulumi.Float64PtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput) Lng() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng) *float64 {
		if v == nil {
			return nil
		}
		return &v.Lng
	}).(pulumi.Float64PtrOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary struct {
	NumHosts *string `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames []string `pulumi:"wanNames"`
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs and DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryInput` via:
//
//	DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs{...}
type DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs struct {
	NumHosts pulumi.StringPtrInput `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput)
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput).ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs, DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtr and DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrInput` via:
//
//	        DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput
}

type deviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrType DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs

func DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtr(v *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrInput {
	return (*deviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrType)(v)
}

func (*deviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary) *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary {
		return &v
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary) *string { return v.NumHosts }).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput) Elem() DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary) DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary
		return ret
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary) *string {
		if v == nil {
			return nil
		}
		return v.NumHosts
	}).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary struct {
	NumHosts *string `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames []string `pulumi:"wanNames"`
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs and DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryInput` via:
//
//	DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs{...}
type DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs struct {
	NumHosts pulumi.StringPtrInput `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput)
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput).ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrInput is an input type that accepts DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs, DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtr and DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrInput` via:
//
//	        DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput
	ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput
}

type deviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrType DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs

func DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtr(v *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrInput {
	return (*deviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrType)(v)
}

func (*deviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrType) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary) *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary {
		return &v
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary) *string { return v.NumHosts }).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput) Elem() DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary) DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary
		return ret
	}).(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput)
}

func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary) *string {
		if v == nil {
			return nil
		}
		return v.NumHosts
	}).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsIkeProposal struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo *string `pulumi:"authAlgo"`
	// enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup *string `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo *string `pulumi:"encAlgo"`
}

// DeviceprofileGatewayTunnelConfigsIkeProposalInput is an input type that accepts DeviceprofileGatewayTunnelConfigsIkeProposalArgs and DeviceprofileGatewayTunnelConfigsIkeProposalOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsIkeProposalInput` via:
//
//	DeviceprofileGatewayTunnelConfigsIkeProposalArgs{...}
type DeviceprofileGatewayTunnelConfigsIkeProposalInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsIkeProposalOutput() DeviceprofileGatewayTunnelConfigsIkeProposalOutput
	ToDeviceprofileGatewayTunnelConfigsIkeProposalOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsIkeProposalOutput
}

type DeviceprofileGatewayTunnelConfigsIkeProposalArgs struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo pulumi.StringPtrInput `pulumi:"authAlgo"`
	// enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup pulumi.StringPtrInput `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo pulumi.StringPtrInput `pulumi:"encAlgo"`
}

func (DeviceprofileGatewayTunnelConfigsIkeProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIkeProposal)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsIkeProposalArgs) ToDeviceprofileGatewayTunnelConfigsIkeProposalOutput() DeviceprofileGatewayTunnelConfigsIkeProposalOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsIkeProposalOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsIkeProposalArgs) ToDeviceprofileGatewayTunnelConfigsIkeProposalOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIkeProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsIkeProposalOutput)
}

// DeviceprofileGatewayTunnelConfigsIkeProposalArrayInput is an input type that accepts DeviceprofileGatewayTunnelConfigsIkeProposalArray and DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsIkeProposalArrayInput` via:
//
//	DeviceprofileGatewayTunnelConfigsIkeProposalArray{ DeviceprofileGatewayTunnelConfigsIkeProposalArgs{...} }
type DeviceprofileGatewayTunnelConfigsIkeProposalArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput() DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput
	ToDeviceprofileGatewayTunnelConfigsIkeProposalArrayOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput
}

type DeviceprofileGatewayTunnelConfigsIkeProposalArray []DeviceprofileGatewayTunnelConfigsIkeProposalInput

func (DeviceprofileGatewayTunnelConfigsIkeProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayTunnelConfigsIkeProposal)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsIkeProposalArray) ToDeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput() DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsIkeProposalArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsIkeProposalArray) ToDeviceprofileGatewayTunnelConfigsIkeProposalArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsIkeProposalOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsIkeProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIkeProposal)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsIkeProposalOutput) ToDeviceprofileGatewayTunnelConfigsIkeProposalOutput() DeviceprofileGatewayTunnelConfigsIkeProposalOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsIkeProposalOutput) ToDeviceprofileGatewayTunnelConfigsIkeProposalOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIkeProposalOutput {
	return o
}

// enum: `md5`, `sha1`, `sha2`
func (o DeviceprofileGatewayTunnelConfigsIkeProposalOutput) AuthAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsIkeProposal) *string { return v.AuthAlgo }).(pulumi.StringPtrOutput)
}

// enum:
//   - 1
//   - 2 (1024-bit)
//   - 5
//   - 14 (default, 2048-bit)
//   - 15 (3072-bit)
//   - 16 (4096-bit)
//   - 19 (256-bit ECP)
//   - 20 (384-bit ECP)
//   - 21 (521-bit ECP)
//   - 24 (2048-bit ECP)
func (o DeviceprofileGatewayTunnelConfigsIkeProposalOutput) DhGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsIkeProposal) *string { return v.DhGroup }).(pulumi.StringPtrOutput)
}

// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
func (o DeviceprofileGatewayTunnelConfigsIkeProposalOutput) EncAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsIkeProposal) *string { return v.EncAlgo }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayTunnelConfigsIkeProposal)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput) ToDeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput() DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput) ToDeviceprofileGatewayTunnelConfigsIkeProposalArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayTunnelConfigsIkeProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayTunnelConfigsIkeProposal {
		return vs[0].([]DeviceprofileGatewayTunnelConfigsIkeProposal)[vs[1].(int)]
	}).(DeviceprofileGatewayTunnelConfigsIkeProposalOutput)
}

type DeviceprofileGatewayTunnelConfigsIpsecProposal struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo *string `pulumi:"authAlgo"`
	// Only if `provider`== `custom-ipsec`. enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup *string `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo *string `pulumi:"encAlgo"`
}

// DeviceprofileGatewayTunnelConfigsIpsecProposalInput is an input type that accepts DeviceprofileGatewayTunnelConfigsIpsecProposalArgs and DeviceprofileGatewayTunnelConfigsIpsecProposalOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsIpsecProposalInput` via:
//
//	DeviceprofileGatewayTunnelConfigsIpsecProposalArgs{...}
type DeviceprofileGatewayTunnelConfigsIpsecProposalInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsIpsecProposalOutput() DeviceprofileGatewayTunnelConfigsIpsecProposalOutput
	ToDeviceprofileGatewayTunnelConfigsIpsecProposalOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsIpsecProposalOutput
}

type DeviceprofileGatewayTunnelConfigsIpsecProposalArgs struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo pulumi.StringPtrInput `pulumi:"authAlgo"`
	// Only if `provider`== `custom-ipsec`. enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup pulumi.StringPtrInput `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo pulumi.StringPtrInput `pulumi:"encAlgo"`
}

func (DeviceprofileGatewayTunnelConfigsIpsecProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsIpsecProposalArgs) ToDeviceprofileGatewayTunnelConfigsIpsecProposalOutput() DeviceprofileGatewayTunnelConfigsIpsecProposalOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsIpsecProposalOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsIpsecProposalArgs) ToDeviceprofileGatewayTunnelConfigsIpsecProposalOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIpsecProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsIpsecProposalOutput)
}

// DeviceprofileGatewayTunnelConfigsIpsecProposalArrayInput is an input type that accepts DeviceprofileGatewayTunnelConfigsIpsecProposalArray and DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsIpsecProposalArrayInput` via:
//
//	DeviceprofileGatewayTunnelConfigsIpsecProposalArray{ DeviceprofileGatewayTunnelConfigsIpsecProposalArgs{...} }
type DeviceprofileGatewayTunnelConfigsIpsecProposalArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput() DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput
	ToDeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput
}

type DeviceprofileGatewayTunnelConfigsIpsecProposalArray []DeviceprofileGatewayTunnelConfigsIpsecProposalInput

func (DeviceprofileGatewayTunnelConfigsIpsecProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsIpsecProposalArray) ToDeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput() DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsIpsecProposalArray) ToDeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsIpsecProposalOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsIpsecProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsIpsecProposalOutput) ToDeviceprofileGatewayTunnelConfigsIpsecProposalOutput() DeviceprofileGatewayTunnelConfigsIpsecProposalOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsIpsecProposalOutput) ToDeviceprofileGatewayTunnelConfigsIpsecProposalOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIpsecProposalOutput {
	return o
}

// enum: `md5`, `sha1`, `sha2`
func (o DeviceprofileGatewayTunnelConfigsIpsecProposalOutput) AuthAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsIpsecProposal) *string { return v.AuthAlgo }).(pulumi.StringPtrOutput)
}

// Only if `provider`== `custom-ipsec`. enum:
//   - 1
//   - 2 (1024-bit)
//   - 5
//   - 14 (default, 2048-bit)
//   - 15 (3072-bit)
//   - 16 (4096-bit)
//   - 19 (256-bit ECP)
//   - 20 (384-bit ECP)
//   - 21 (521-bit ECP)
//   - 24 (2048-bit ECP)
func (o DeviceprofileGatewayTunnelConfigsIpsecProposalOutput) DhGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsIpsecProposal) *string { return v.DhGroup }).(pulumi.StringPtrOutput)
}

// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
func (o DeviceprofileGatewayTunnelConfigsIpsecProposalOutput) EncAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsIpsecProposal) *string { return v.EncAlgo }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput) ToDeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput() DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput) ToDeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayTunnelConfigsIpsecProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayTunnelConfigsIpsecProposal {
		return vs[0].([]DeviceprofileGatewayTunnelConfigsIpsecProposal)[vs[1].(int)]
	}).(DeviceprofileGatewayTunnelConfigsIpsecProposalOutput)
}

type DeviceprofileGatewayTunnelConfigsPrimary struct {
	Hosts []string `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps []string `pulumi:"internalIps"`
	ProbeIps    []string `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds []string `pulumi:"remoteIds"`
	WanNames  []string `pulumi:"wanNames"`
}

// DeviceprofileGatewayTunnelConfigsPrimaryInput is an input type that accepts DeviceprofileGatewayTunnelConfigsPrimaryArgs and DeviceprofileGatewayTunnelConfigsPrimaryOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsPrimaryInput` via:
//
//	DeviceprofileGatewayTunnelConfigsPrimaryArgs{...}
type DeviceprofileGatewayTunnelConfigsPrimaryInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsPrimaryOutput() DeviceprofileGatewayTunnelConfigsPrimaryOutput
	ToDeviceprofileGatewayTunnelConfigsPrimaryOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsPrimaryOutput
}

type DeviceprofileGatewayTunnelConfigsPrimaryArgs struct {
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps pulumi.StringArrayInput `pulumi:"internalIps"`
	ProbeIps    pulumi.StringArrayInput `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds pulumi.StringArrayInput `pulumi:"remoteIds"`
	WanNames  pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (DeviceprofileGatewayTunnelConfigsPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsPrimary)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsPrimaryOutput() DeviceprofileGatewayTunnelConfigsPrimaryOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsPrimaryOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsPrimaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsPrimaryOutput)
}

func (i DeviceprofileGatewayTunnelConfigsPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsPrimaryArgs) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsPrimaryOutput).ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelConfigsPrimaryPtrInput is an input type that accepts DeviceprofileGatewayTunnelConfigsPrimaryArgs, DeviceprofileGatewayTunnelConfigsPrimaryPtr and DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsPrimaryPtrInput` via:
//
//	        DeviceprofileGatewayTunnelConfigsPrimaryArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelConfigsPrimaryPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput
	ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput
}

type deviceprofileGatewayTunnelConfigsPrimaryPtrType DeviceprofileGatewayTunnelConfigsPrimaryArgs

func DeviceprofileGatewayTunnelConfigsPrimaryPtr(v *DeviceprofileGatewayTunnelConfigsPrimaryArgs) DeviceprofileGatewayTunnelConfigsPrimaryPtrInput {
	return (*deviceprofileGatewayTunnelConfigsPrimaryPtrType)(v)
}

func (*deviceprofileGatewayTunnelConfigsPrimaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsPrimary)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelConfigsPrimaryPtrType) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelConfigsPrimaryPtrType) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsPrimaryOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsPrimary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsPrimaryOutput() DeviceprofileGatewayTunnelConfigsPrimaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsPrimaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsPrimaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return o.ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelConfigsPrimary) *DeviceprofileGatewayTunnelConfigsPrimary {
		return &v
	}).(DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsPrimary) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsPrimary) []string { return v.InternalIps }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsPrimary) []string { return v.ProbeIps }).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsPrimary) []string { return v.RemoteIds }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsPrimary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsPrimary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutput() DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) Elem() DeviceprofileGatewayTunnelConfigsPrimaryOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsPrimary) DeviceprofileGatewayTunnelConfigsPrimary {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelConfigsPrimary
		return ret
	}).(DeviceprofileGatewayTunnelConfigsPrimaryOutput)
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.InternalIps
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.ProbeIps
	}).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.RemoteIds
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsProbe struct {
	// how often to trigger the probe
	Interval *int `pulumi:"interval"`
	// number of consecutive misses before declaring the tunnel down
	Threshold *int `pulumi:"threshold"`
	// time within which to complete the connectivity check
	Timeout *int `pulumi:"timeout"`
	// enum: `http`, `icmp`
	Type *string `pulumi:"type"`
}

// DeviceprofileGatewayTunnelConfigsProbeInput is an input type that accepts DeviceprofileGatewayTunnelConfigsProbeArgs and DeviceprofileGatewayTunnelConfigsProbeOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsProbeInput` via:
//
//	DeviceprofileGatewayTunnelConfigsProbeArgs{...}
type DeviceprofileGatewayTunnelConfigsProbeInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsProbeOutput() DeviceprofileGatewayTunnelConfigsProbeOutput
	ToDeviceprofileGatewayTunnelConfigsProbeOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsProbeOutput
}

type DeviceprofileGatewayTunnelConfigsProbeArgs struct {
	// how often to trigger the probe
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// number of consecutive misses before declaring the tunnel down
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	// time within which to complete the connectivity check
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// enum: `http`, `icmp`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DeviceprofileGatewayTunnelConfigsProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsProbe)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsProbeArgs) ToDeviceprofileGatewayTunnelConfigsProbeOutput() DeviceprofileGatewayTunnelConfigsProbeOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsProbeOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsProbeArgs) ToDeviceprofileGatewayTunnelConfigsProbeOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsProbeOutput)
}

func (i DeviceprofileGatewayTunnelConfigsProbeArgs) ToDeviceprofileGatewayTunnelConfigsProbePtrOutput() DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsProbeArgs) ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsProbeOutput).ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelConfigsProbePtrInput is an input type that accepts DeviceprofileGatewayTunnelConfigsProbeArgs, DeviceprofileGatewayTunnelConfigsProbePtr and DeviceprofileGatewayTunnelConfigsProbePtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsProbePtrInput` via:
//
//	        DeviceprofileGatewayTunnelConfigsProbeArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelConfigsProbePtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsProbePtrOutput() DeviceprofileGatewayTunnelConfigsProbePtrOutput
	ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsProbePtrOutput
}

type deviceprofileGatewayTunnelConfigsProbePtrType DeviceprofileGatewayTunnelConfigsProbeArgs

func DeviceprofileGatewayTunnelConfigsProbePtr(v *DeviceprofileGatewayTunnelConfigsProbeArgs) DeviceprofileGatewayTunnelConfigsProbePtrInput {
	return (*deviceprofileGatewayTunnelConfigsProbePtrType)(v)
}

func (*deviceprofileGatewayTunnelConfigsProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsProbe)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelConfigsProbePtrType) ToDeviceprofileGatewayTunnelConfigsProbePtrOutput() DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelConfigsProbePtrType) ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsProbePtrOutput)
}

type DeviceprofileGatewayTunnelConfigsProbeOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsProbe)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsProbeOutput) ToDeviceprofileGatewayTunnelConfigsProbeOutput() DeviceprofileGatewayTunnelConfigsProbeOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsProbeOutput) ToDeviceprofileGatewayTunnelConfigsProbeOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsProbeOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsProbeOutput) ToDeviceprofileGatewayTunnelConfigsProbePtrOutput() DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return o.ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelConfigsProbeOutput) ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelConfigsProbe) *DeviceprofileGatewayTunnelConfigsProbe {
		return &v
	}).(DeviceprofileGatewayTunnelConfigsProbePtrOutput)
}

// how often to trigger the probe
func (o DeviceprofileGatewayTunnelConfigsProbeOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsProbe) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// number of consecutive misses before declaring the tunnel down
func (o DeviceprofileGatewayTunnelConfigsProbeOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsProbe) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

// time within which to complete the connectivity check
func (o DeviceprofileGatewayTunnelConfigsProbeOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsProbe) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// enum: `http`, `icmp`
func (o DeviceprofileGatewayTunnelConfigsProbeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsProbe) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsProbePtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsProbe)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsProbePtrOutput) ToDeviceprofileGatewayTunnelConfigsProbePtrOutput() DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsProbePtrOutput) ToDeviceprofileGatewayTunnelConfigsProbePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsProbePtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsProbePtrOutput) Elem() DeviceprofileGatewayTunnelConfigsProbeOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsProbe) DeviceprofileGatewayTunnelConfigsProbe {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelConfigsProbe
		return ret
	}).(DeviceprofileGatewayTunnelConfigsProbeOutput)
}

// how often to trigger the probe
func (o DeviceprofileGatewayTunnelConfigsProbePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsProbe) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// number of consecutive misses before declaring the tunnel down
func (o DeviceprofileGatewayTunnelConfigsProbePtrOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsProbe) *int {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.IntPtrOutput)
}

// time within which to complete the connectivity check
func (o DeviceprofileGatewayTunnelConfigsProbePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsProbe) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// enum: `http`, `icmp`
func (o DeviceprofileGatewayTunnelConfigsProbePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsProbe) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsSecondary struct {
	Hosts []string `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps []string `pulumi:"internalIps"`
	ProbeIps    []string `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds []string `pulumi:"remoteIds"`
	WanNames  []string `pulumi:"wanNames"`
}

// DeviceprofileGatewayTunnelConfigsSecondaryInput is an input type that accepts DeviceprofileGatewayTunnelConfigsSecondaryArgs and DeviceprofileGatewayTunnelConfigsSecondaryOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsSecondaryInput` via:
//
//	DeviceprofileGatewayTunnelConfigsSecondaryArgs{...}
type DeviceprofileGatewayTunnelConfigsSecondaryInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsSecondaryOutput() DeviceprofileGatewayTunnelConfigsSecondaryOutput
	ToDeviceprofileGatewayTunnelConfigsSecondaryOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsSecondaryOutput
}

type DeviceprofileGatewayTunnelConfigsSecondaryArgs struct {
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps pulumi.StringArrayInput `pulumi:"internalIps"`
	ProbeIps    pulumi.StringArrayInput `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds pulumi.StringArrayInput `pulumi:"remoteIds"`
	WanNames  pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (DeviceprofileGatewayTunnelConfigsSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsSecondary)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelConfigsSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsSecondaryOutput() DeviceprofileGatewayTunnelConfigsSecondaryOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsSecondaryOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsSecondaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsSecondaryOutput)
}

func (i DeviceprofileGatewayTunnelConfigsSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelConfigsSecondaryArgs) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsSecondaryOutput).ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelConfigsSecondaryPtrInput is an input type that accepts DeviceprofileGatewayTunnelConfigsSecondaryArgs, DeviceprofileGatewayTunnelConfigsSecondaryPtr and DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelConfigsSecondaryPtrInput` via:
//
//	        DeviceprofileGatewayTunnelConfigsSecondaryArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelConfigsSecondaryPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput
	ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput
}

type deviceprofileGatewayTunnelConfigsSecondaryPtrType DeviceprofileGatewayTunnelConfigsSecondaryArgs

func DeviceprofileGatewayTunnelConfigsSecondaryPtr(v *DeviceprofileGatewayTunnelConfigsSecondaryArgs) DeviceprofileGatewayTunnelConfigsSecondaryPtrInput {
	return (*deviceprofileGatewayTunnelConfigsSecondaryPtrType)(v)
}

func (*deviceprofileGatewayTunnelConfigsSecondaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsSecondary)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelConfigsSecondaryPtrType) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return i.ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelConfigsSecondaryPtrType) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput)
}

type DeviceprofileGatewayTunnelConfigsSecondaryOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsSecondary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsSecondaryOutput() DeviceprofileGatewayTunnelConfigsSecondaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsSecondaryOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsSecondaryOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return o.ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelConfigsSecondary) *DeviceprofileGatewayTunnelConfigsSecondary {
		return &v
	}).(DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput)
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsSecondary) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsSecondary) []string { return v.InternalIps }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsSecondary) []string { return v.ProbeIps }).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsSecondary) []string { return v.RemoteIds }).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelConfigsSecondary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelConfigsSecondary)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutput() DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) ToDeviceprofileGatewayTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) Elem() DeviceprofileGatewayTunnelConfigsSecondaryOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsSecondary) DeviceprofileGatewayTunnelConfigsSecondary {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelConfigsSecondary
		return ret
	}).(DeviceprofileGatewayTunnelConfigsSecondaryOutput)
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.InternalIps
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.ProbeIps
	}).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.RemoteIds
	}).(pulumi.StringArrayOutput)
}

func (o DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayTunnelProviderOptions struct {
	// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
	Jse *DeviceprofileGatewayTunnelProviderOptionsJse `pulumi:"jse"`
	// for zscaler-ipsec and zscaler-gre
	Zscaler *DeviceprofileGatewayTunnelProviderOptionsZscaler `pulumi:"zscaler"`
}

// DeviceprofileGatewayTunnelProviderOptionsInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsArgs and DeviceprofileGatewayTunnelProviderOptionsOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsInput` via:
//
//	DeviceprofileGatewayTunnelProviderOptionsArgs{...}
type DeviceprofileGatewayTunnelProviderOptionsInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsOutput() DeviceprofileGatewayTunnelProviderOptionsOutput
	ToDeviceprofileGatewayTunnelProviderOptionsOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsOutput
}

type DeviceprofileGatewayTunnelProviderOptionsArgs struct {
	// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
	Jse DeviceprofileGatewayTunnelProviderOptionsJsePtrInput `pulumi:"jse"`
	// for zscaler-ipsec and zscaler-gre
	Zscaler DeviceprofileGatewayTunnelProviderOptionsZscalerPtrInput `pulumi:"zscaler"`
}

func (DeviceprofileGatewayTunnelProviderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptions)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelProviderOptionsArgs) ToDeviceprofileGatewayTunnelProviderOptionsOutput() DeviceprofileGatewayTunnelProviderOptionsOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsArgs) ToDeviceprofileGatewayTunnelProviderOptionsOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsOutput)
}

func (i DeviceprofileGatewayTunnelProviderOptionsArgs) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutput() DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsArgs) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsOutput).ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelProviderOptionsPtrInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsArgs, DeviceprofileGatewayTunnelProviderOptionsPtr and DeviceprofileGatewayTunnelProviderOptionsPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsPtrInput` via:
//
//	        DeviceprofileGatewayTunnelProviderOptionsArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelProviderOptionsPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsPtrOutput() DeviceprofileGatewayTunnelProviderOptionsPtrOutput
	ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsPtrOutput
}

type deviceprofileGatewayTunnelProviderOptionsPtrType DeviceprofileGatewayTunnelProviderOptionsArgs

func DeviceprofileGatewayTunnelProviderOptionsPtr(v *DeviceprofileGatewayTunnelProviderOptionsArgs) DeviceprofileGatewayTunnelProviderOptionsPtrInput {
	return (*deviceprofileGatewayTunnelProviderOptionsPtrType)(v)
}

func (*deviceprofileGatewayTunnelProviderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelProviderOptions)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelProviderOptionsPtrType) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutput() DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelProviderOptionsPtrType) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptions)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsOutput) ToDeviceprofileGatewayTunnelProviderOptionsOutput() DeviceprofileGatewayTunnelProviderOptionsOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsOutput) ToDeviceprofileGatewayTunnelProviderOptionsOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsOutput) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutput() DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return o.ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelProviderOptionsOutput) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelProviderOptions) *DeviceprofileGatewayTunnelProviderOptions {
		return &v
	}).(DeviceprofileGatewayTunnelProviderOptionsPtrOutput)
}

// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
func (o DeviceprofileGatewayTunnelProviderOptionsOutput) Jse() DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptions) *DeviceprofileGatewayTunnelProviderOptionsJse {
		return v.Jse
	}).(DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput)
}

// for zscaler-ipsec and zscaler-gre
func (o DeviceprofileGatewayTunnelProviderOptionsOutput) Zscaler() DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptions) *DeviceprofileGatewayTunnelProviderOptionsZscaler {
		return v.Zscaler
	}).(DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelProviderOptions)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsPtrOutput) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutput() DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsPtrOutput) ToDeviceprofileGatewayTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsPtrOutput) Elem() DeviceprofileGatewayTunnelProviderOptionsOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptions) DeviceprofileGatewayTunnelProviderOptions {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelProviderOptions
		return ret
	}).(DeviceprofileGatewayTunnelProviderOptionsOutput)
}

// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
func (o DeviceprofileGatewayTunnelProviderOptionsPtrOutput) Jse() DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptions) *DeviceprofileGatewayTunnelProviderOptionsJse {
		if v == nil {
			return nil
		}
		return v.Jse
	}).(DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput)
}

// for zscaler-ipsec and zscaler-gre
func (o DeviceprofileGatewayTunnelProviderOptionsPtrOutput) Zscaler() DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptions) *DeviceprofileGatewayTunnelProviderOptionsZscaler {
		if v == nil {
			return nil
		}
		return v.Zscaler
	}).(DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsJse struct {
	Name     *string `pulumi:"name"`
	NumUsers *int    `pulumi:"numUsers"`
}

// DeviceprofileGatewayTunnelProviderOptionsJseInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsJseArgs and DeviceprofileGatewayTunnelProviderOptionsJseOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsJseInput` via:
//
//	DeviceprofileGatewayTunnelProviderOptionsJseArgs{...}
type DeviceprofileGatewayTunnelProviderOptionsJseInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsJseOutput() DeviceprofileGatewayTunnelProviderOptionsJseOutput
	ToDeviceprofileGatewayTunnelProviderOptionsJseOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsJseOutput
}

type DeviceprofileGatewayTunnelProviderOptionsJseArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	NumUsers pulumi.IntPtrInput    `pulumi:"numUsers"`
}

func (DeviceprofileGatewayTunnelProviderOptionsJseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsJse)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelProviderOptionsJseArgs) ToDeviceprofileGatewayTunnelProviderOptionsJseOutput() DeviceprofileGatewayTunnelProviderOptionsJseOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsJseOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsJseArgs) ToDeviceprofileGatewayTunnelProviderOptionsJseOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsJseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsJseOutput)
}

func (i DeviceprofileGatewayTunnelProviderOptionsJseArgs) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutput() DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsJseArgs) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsJseOutput).ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelProviderOptionsJsePtrInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsJseArgs, DeviceprofileGatewayTunnelProviderOptionsJsePtr and DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsJsePtrInput` via:
//
//	        DeviceprofileGatewayTunnelProviderOptionsJseArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelProviderOptionsJsePtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutput() DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput
	ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput
}

type deviceprofileGatewayTunnelProviderOptionsJsePtrType DeviceprofileGatewayTunnelProviderOptionsJseArgs

func DeviceprofileGatewayTunnelProviderOptionsJsePtr(v *DeviceprofileGatewayTunnelProviderOptionsJseArgs) DeviceprofileGatewayTunnelProviderOptionsJsePtrInput {
	return (*deviceprofileGatewayTunnelProviderOptionsJsePtrType)(v)
}

func (*deviceprofileGatewayTunnelProviderOptionsJsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelProviderOptionsJse)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelProviderOptionsJsePtrType) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutput() DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelProviderOptionsJsePtrType) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsJseOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsJseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsJse)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsJseOutput) ToDeviceprofileGatewayTunnelProviderOptionsJseOutput() DeviceprofileGatewayTunnelProviderOptionsJseOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsJseOutput) ToDeviceprofileGatewayTunnelProviderOptionsJseOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsJseOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsJseOutput) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutput() DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return o.ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelProviderOptionsJseOutput) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelProviderOptionsJse) *DeviceprofileGatewayTunnelProviderOptionsJse {
		return &v
	}).(DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsJseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsJse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsJseOutput) NumUsers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsJse) *int { return v.NumUsers }).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelProviderOptionsJse)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutput() DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput) ToDeviceprofileGatewayTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput) Elem() DeviceprofileGatewayTunnelProviderOptionsJseOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsJse) DeviceprofileGatewayTunnelProviderOptionsJse {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelProviderOptionsJse
		return ret
	}).(DeviceprofileGatewayTunnelProviderOptionsJseOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsJse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput) NumUsers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsJse) *int {
		if v == nil {
			return nil
		}
		return v.NumUsers
	}).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsZscaler struct {
	AupAcceptanceRequired *bool `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire *int `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy *bool `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps *int `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup *bool `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         *bool   `pulumi:"enableCaution"`
	EnforceAuthentication *bool   `pulumi:"enforceAuthentication"`
	Name                  *string `pulumi:"name"`
	// if `useXff`==`true`
	SubLocations []DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation `pulumi:"subLocations"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps *int `pulumi:"uploadMbps"`
	// location uses proxy chaining to forward traffic
	UseXff *bool `pulumi:"useXff"`
}

// DeviceprofileGatewayTunnelProviderOptionsZscalerInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsZscalerArgs and DeviceprofileGatewayTunnelProviderOptionsZscalerOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsZscalerInput` via:
//
//	DeviceprofileGatewayTunnelProviderOptionsZscalerArgs{...}
type DeviceprofileGatewayTunnelProviderOptionsZscalerInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsZscalerOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerOutput
	ToDeviceprofileGatewayTunnelProviderOptionsZscalerOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerOutput
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerArgs struct {
	AupAcceptanceRequired pulumi.BoolPtrInput `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire pulumi.IntPtrInput `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy pulumi.BoolPtrInput `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps pulumi.IntPtrInput `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup pulumi.BoolPtrInput `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         pulumi.BoolPtrInput   `pulumi:"enableCaution"`
	EnforceAuthentication pulumi.BoolPtrInput   `pulumi:"enforceAuthentication"`
	Name                  pulumi.StringPtrInput `pulumi:"name"`
	// if `useXff`==`true`
	SubLocations DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayInput `pulumi:"subLocations"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps pulumi.IntPtrInput `pulumi:"uploadMbps"`
	// location uses proxy chaining to forward traffic
	UseXff pulumi.BoolPtrInput `pulumi:"useXff"`
}

func (DeviceprofileGatewayTunnelProviderOptionsZscalerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerArgs) ToDeviceprofileGatewayTunnelProviderOptionsZscalerOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsZscalerOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerArgs) ToDeviceprofileGatewayTunnelProviderOptionsZscalerOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsZscalerOutput)
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerArgs) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerArgs) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsZscalerOutput).ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayTunnelProviderOptionsZscalerPtrInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsZscalerArgs, DeviceprofileGatewayTunnelProviderOptionsZscalerPtr and DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsZscalerPtrInput` via:
//
//	        DeviceprofileGatewayTunnelProviderOptionsZscalerArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayTunnelProviderOptionsZscalerPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput
	ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput
}

type deviceprofileGatewayTunnelProviderOptionsZscalerPtrType DeviceprofileGatewayTunnelProviderOptionsZscalerArgs

func DeviceprofileGatewayTunnelProviderOptionsZscalerPtr(v *DeviceprofileGatewayTunnelProviderOptionsZscalerArgs) DeviceprofileGatewayTunnelProviderOptionsZscalerPtrInput {
	return (*deviceprofileGatewayTunnelProviderOptionsZscalerPtrType)(v)
}

func (*deviceprofileGatewayTunnelProviderOptionsZscalerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (i *deviceprofileGatewayTunnelProviderOptionsZscalerPtrType) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayTunnelProviderOptionsZscalerPtrType) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return o.ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayTunnelProviderOptionsZscaler) *DeviceprofileGatewayTunnelProviderOptionsZscaler {
		return &v
	}).(DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) AupAcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool { return v.AupAcceptanceRequired }).(pulumi.BoolPtrOutput)
}

// days before AUP is requested again
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) AupExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *int { return v.AupExpire }).(pulumi.IntPtrOutput)
}

// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) AupSslProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool { return v.AupSslProxy }).(pulumi.BoolPtrOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) DownloadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *int { return v.DownloadMbps }).(pulumi.IntPtrOutput)
}

// if `useXff`==`true`, display Acceptable Use Policy (AUP)
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) EnableAup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool { return v.EnableAup }).(pulumi.BoolPtrOutput)
}

// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) EnableCaution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool { return v.EnableCaution }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) EnforceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool { return v.EnforceAuthentication }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// if `useXff`==`true`
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) SubLocations() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) []DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation {
		return v.SubLocations
	}).(DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) UploadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *int { return v.UploadMbps }).(pulumi.IntPtrOutput)
}

// location uses proxy chaining to forward traffic
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerOutput) UseXff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool { return v.UseXff }).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) Elem() DeviceprofileGatewayTunnelProviderOptionsZscalerOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) DeviceprofileGatewayTunnelProviderOptionsZscaler {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayTunnelProviderOptionsZscaler
		return ret
	}).(DeviceprofileGatewayTunnelProviderOptionsZscalerOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) AupAcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.AupAcceptanceRequired
	}).(pulumi.BoolPtrOutput)
}

// days before AUP is requested again
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) AupExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *int {
		if v == nil {
			return nil
		}
		return v.AupExpire
	}).(pulumi.IntPtrOutput)
}

// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) AupSslProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.AupSslProxy
	}).(pulumi.BoolPtrOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) DownloadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *int {
		if v == nil {
			return nil
		}
		return v.DownloadMbps
	}).(pulumi.IntPtrOutput)
}

// if `useXff`==`true`, display Acceptable Use Policy (AUP)
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) EnableAup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAup
	}).(pulumi.BoolPtrOutput)
}

// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) EnableCaution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCaution
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) EnforceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.EnforceAuthentication
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// if `useXff`==`true`
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) SubLocations() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) []DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation {
		if v == nil {
			return nil
		}
		return v.SubLocations
	}).(DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) UploadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *int {
		if v == nil {
			return nil
		}
		return v.UploadMbps
	}).(pulumi.IntPtrOutput)
}

// location uses proxy chaining to forward traffic
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput) UseXff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.UseXff
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation struct {
	AupAcceptanceRequired *bool `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire *int `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy *bool `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps *int `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup *bool `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         *bool    `pulumi:"enableCaution"`
	EnforceAuthentication *bool    `pulumi:"enforceAuthentication"`
	Subnets               []string `pulumi:"subnets"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps *int `pulumi:"uploadMbps"`
}

// DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs and DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationInput` via:
//
//	DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs{...}
type DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput
	ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs struct {
	AupAcceptanceRequired pulumi.BoolPtrInput `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire pulumi.IntPtrInput `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy pulumi.BoolPtrInput `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps pulumi.IntPtrInput `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup pulumi.BoolPtrInput `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         pulumi.BoolPtrInput     `pulumi:"enableCaution"`
	EnforceAuthentication pulumi.BoolPtrInput     `pulumi:"enforceAuthentication"`
	Subnets               pulumi.StringArrayInput `pulumi:"subnets"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps pulumi.IntPtrInput `pulumi:"uploadMbps"`
}

func (DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput)
}

// DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayInput is an input type that accepts DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArray and DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayInput` via:
//
//	DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArray{ DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs{...} }
type DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayInput interface {
	pulumi.Input

	ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput
	ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArray []DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationInput

func (DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArray) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return i.ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArray) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) AupAcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *bool {
		return v.AupAcceptanceRequired
	}).(pulumi.BoolPtrOutput)
}

// days before AUP is requested again
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) AupExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *int { return v.AupExpire }).(pulumi.IntPtrOutput)
}

// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) AupSslProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *bool { return v.AupSslProxy }).(pulumi.BoolPtrOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) DownloadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *int { return v.DownloadMbps }).(pulumi.IntPtrOutput)
}

// if `useXff`==`true`, display Acceptable Use Policy (AUP)
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) EnableAup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *bool { return v.EnableAup }).(pulumi.BoolPtrOutput)
}

// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) EnableCaution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *bool { return v.EnableCaution }).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) EnforceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *bool {
		return v.EnforceAuthentication
	}).(pulumi.BoolPtrOutput)
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput) UploadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation) *int { return v.UploadMbps }).(pulumi.IntPtrOutput)
}

type DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput() DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput) ToDeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(ctx context.Context) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o
}

func (o DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput) Index(i pulumi.IntInput) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation {
		return vs[0].([]DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation)[vs[1].(int)]
	}).(DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput)
}

type DeviceprofileGatewayVrfConfig struct {
	// whether to enable VRF (when supported on the device)
	Enabled *bool `pulumi:"enabled"`
}

// DeviceprofileGatewayVrfConfigInput is an input type that accepts DeviceprofileGatewayVrfConfigArgs and DeviceprofileGatewayVrfConfigOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayVrfConfigInput` via:
//
//	DeviceprofileGatewayVrfConfigArgs{...}
type DeviceprofileGatewayVrfConfigInput interface {
	pulumi.Input

	ToDeviceprofileGatewayVrfConfigOutput() DeviceprofileGatewayVrfConfigOutput
	ToDeviceprofileGatewayVrfConfigOutputWithContext(context.Context) DeviceprofileGatewayVrfConfigOutput
}

type DeviceprofileGatewayVrfConfigArgs struct {
	// whether to enable VRF (when supported on the device)
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DeviceprofileGatewayVrfConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayVrfConfig)(nil)).Elem()
}

func (i DeviceprofileGatewayVrfConfigArgs) ToDeviceprofileGatewayVrfConfigOutput() DeviceprofileGatewayVrfConfigOutput {
	return i.ToDeviceprofileGatewayVrfConfigOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayVrfConfigArgs) ToDeviceprofileGatewayVrfConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayVrfConfigOutput)
}

func (i DeviceprofileGatewayVrfConfigArgs) ToDeviceprofileGatewayVrfConfigPtrOutput() DeviceprofileGatewayVrfConfigPtrOutput {
	return i.ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayVrfConfigArgs) ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayVrfConfigOutput).ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(ctx)
}

// DeviceprofileGatewayVrfConfigPtrInput is an input type that accepts DeviceprofileGatewayVrfConfigArgs, DeviceprofileGatewayVrfConfigPtr and DeviceprofileGatewayVrfConfigPtrOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayVrfConfigPtrInput` via:
//
//	        DeviceprofileGatewayVrfConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceprofileGatewayVrfConfigPtrInput interface {
	pulumi.Input

	ToDeviceprofileGatewayVrfConfigPtrOutput() DeviceprofileGatewayVrfConfigPtrOutput
	ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(context.Context) DeviceprofileGatewayVrfConfigPtrOutput
}

type deviceprofileGatewayVrfConfigPtrType DeviceprofileGatewayVrfConfigArgs

func DeviceprofileGatewayVrfConfigPtr(v *DeviceprofileGatewayVrfConfigArgs) DeviceprofileGatewayVrfConfigPtrInput {
	return (*deviceprofileGatewayVrfConfigPtrType)(v)
}

func (*deviceprofileGatewayVrfConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayVrfConfig)(nil)).Elem()
}

func (i *deviceprofileGatewayVrfConfigPtrType) ToDeviceprofileGatewayVrfConfigPtrOutput() DeviceprofileGatewayVrfConfigPtrOutput {
	return i.ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(context.Background())
}

func (i *deviceprofileGatewayVrfConfigPtrType) ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayVrfConfigPtrOutput)
}

type DeviceprofileGatewayVrfConfigOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayVrfConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayVrfConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayVrfConfigOutput) ToDeviceprofileGatewayVrfConfigOutput() DeviceprofileGatewayVrfConfigOutput {
	return o
}

func (o DeviceprofileGatewayVrfConfigOutput) ToDeviceprofileGatewayVrfConfigOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfConfigOutput {
	return o
}

func (o DeviceprofileGatewayVrfConfigOutput) ToDeviceprofileGatewayVrfConfigPtrOutput() DeviceprofileGatewayVrfConfigPtrOutput {
	return o.ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(context.Background())
}

func (o DeviceprofileGatewayVrfConfigOutput) ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceprofileGatewayVrfConfig) *DeviceprofileGatewayVrfConfig {
		return &v
	}).(DeviceprofileGatewayVrfConfigPtrOutput)
}

// whether to enable VRF (when supported on the device)
func (o DeviceprofileGatewayVrfConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeviceprofileGatewayVrfConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayVrfConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayVrfConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceprofileGatewayVrfConfig)(nil)).Elem()
}

func (o DeviceprofileGatewayVrfConfigPtrOutput) ToDeviceprofileGatewayVrfConfigPtrOutput() DeviceprofileGatewayVrfConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayVrfConfigPtrOutput) ToDeviceprofileGatewayVrfConfigPtrOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfConfigPtrOutput {
	return o
}

func (o DeviceprofileGatewayVrfConfigPtrOutput) Elem() DeviceprofileGatewayVrfConfigOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayVrfConfig) DeviceprofileGatewayVrfConfig {
		if v != nil {
			return *v
		}
		var ret DeviceprofileGatewayVrfConfig
		return ret
	}).(DeviceprofileGatewayVrfConfigOutput)
}

// whether to enable VRF (when supported on the device)
func (o DeviceprofileGatewayVrfConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceprofileGatewayVrfConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DeviceprofileGatewayVrfInstances struct {
	Networks []string `pulumi:"networks"`
}

// DeviceprofileGatewayVrfInstancesInput is an input type that accepts DeviceprofileGatewayVrfInstancesArgs and DeviceprofileGatewayVrfInstancesOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayVrfInstancesInput` via:
//
//	DeviceprofileGatewayVrfInstancesArgs{...}
type DeviceprofileGatewayVrfInstancesInput interface {
	pulumi.Input

	ToDeviceprofileGatewayVrfInstancesOutput() DeviceprofileGatewayVrfInstancesOutput
	ToDeviceprofileGatewayVrfInstancesOutputWithContext(context.Context) DeviceprofileGatewayVrfInstancesOutput
}

type DeviceprofileGatewayVrfInstancesArgs struct {
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (DeviceprofileGatewayVrfInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayVrfInstances)(nil)).Elem()
}

func (i DeviceprofileGatewayVrfInstancesArgs) ToDeviceprofileGatewayVrfInstancesOutput() DeviceprofileGatewayVrfInstancesOutput {
	return i.ToDeviceprofileGatewayVrfInstancesOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayVrfInstancesArgs) ToDeviceprofileGatewayVrfInstancesOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayVrfInstancesOutput)
}

// DeviceprofileGatewayVrfInstancesMapInput is an input type that accepts DeviceprofileGatewayVrfInstancesMap and DeviceprofileGatewayVrfInstancesMapOutput values.
// You can construct a concrete instance of `DeviceprofileGatewayVrfInstancesMapInput` via:
//
//	DeviceprofileGatewayVrfInstancesMap{ "key": DeviceprofileGatewayVrfInstancesArgs{...} }
type DeviceprofileGatewayVrfInstancesMapInput interface {
	pulumi.Input

	ToDeviceprofileGatewayVrfInstancesMapOutput() DeviceprofileGatewayVrfInstancesMapOutput
	ToDeviceprofileGatewayVrfInstancesMapOutputWithContext(context.Context) DeviceprofileGatewayVrfInstancesMapOutput
}

type DeviceprofileGatewayVrfInstancesMap map[string]DeviceprofileGatewayVrfInstancesInput

func (DeviceprofileGatewayVrfInstancesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayVrfInstances)(nil)).Elem()
}

func (i DeviceprofileGatewayVrfInstancesMap) ToDeviceprofileGatewayVrfInstancesMapOutput() DeviceprofileGatewayVrfInstancesMapOutput {
	return i.ToDeviceprofileGatewayVrfInstancesMapOutputWithContext(context.Background())
}

func (i DeviceprofileGatewayVrfInstancesMap) ToDeviceprofileGatewayVrfInstancesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfInstancesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceprofileGatewayVrfInstancesMapOutput)
}

type DeviceprofileGatewayVrfInstancesOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayVrfInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceprofileGatewayVrfInstances)(nil)).Elem()
}

func (o DeviceprofileGatewayVrfInstancesOutput) ToDeviceprofileGatewayVrfInstancesOutput() DeviceprofileGatewayVrfInstancesOutput {
	return o
}

func (o DeviceprofileGatewayVrfInstancesOutput) ToDeviceprofileGatewayVrfInstancesOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfInstancesOutput {
	return o
}

func (o DeviceprofileGatewayVrfInstancesOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeviceprofileGatewayVrfInstances) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type DeviceprofileGatewayVrfInstancesMapOutput struct{ *pulumi.OutputState }

func (DeviceprofileGatewayVrfInstancesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DeviceprofileGatewayVrfInstances)(nil)).Elem()
}

func (o DeviceprofileGatewayVrfInstancesMapOutput) ToDeviceprofileGatewayVrfInstancesMapOutput() DeviceprofileGatewayVrfInstancesMapOutput {
	return o
}

func (o DeviceprofileGatewayVrfInstancesMapOutput) ToDeviceprofileGatewayVrfInstancesMapOutputWithContext(ctx context.Context) DeviceprofileGatewayVrfInstancesMapOutput {
	return o
}

func (o DeviceprofileGatewayVrfInstancesMapOutput) MapIndex(k pulumi.StringInput) DeviceprofileGatewayVrfInstancesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DeviceprofileGatewayVrfInstances {
		return vs[0].(map[string]DeviceprofileGatewayVrfInstances)[vs[1].(string)]
	}).(DeviceprofileGatewayVrfInstancesOutput)
}

type GatewaytemplateBgpConfig struct {
	AuthKey *string `pulumi:"authKey"`
	// when bfdMultiplier is configured alone. Default:
	//   * 1000 if `type`==`external`
	//   * 350 `type`==`internal`
	BfdMinimumInterval *int `pulumi:"bfdMinimumInterval"`
	// when bfdMinimumIntervalIsConfigured alone
	BfdMultiplier *int                                `pulumi:"bfdMultiplier"`
	Communities   []GatewaytemplateBgpConfigCommunity `pulumi:"communities"`
	// BFD provides faster path failure detection and is enabled by default
	DisableBfd *bool   `pulumi:"disableBfd"`
	Export     *string `pulumi:"export"`
	// default export policies if no per-neighbor policies defined
	ExportPolicy *string `pulumi:"exportPolicy"`
	// by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
	// for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
	ExtendedV4Nexthop *bool `pulumi:"extendedV4Nexthop"`
	// `0` means disable
	GracefulRestartTime *int    `pulumi:"gracefulRestartTime"`
	HoldTime            *int    `pulumi:"holdTime"`
	Import              *string `pulumi:"import"`
	// default import policies if no per-neighbor policies defined
	ImportPolicy *string `pulumi:"importPolicy"`
	LocalAs      *int    `pulumi:"localAs"`
	NeighborAs   *int    `pulumi:"neighborAs"`
	// if per-neighbor as is desired. Property key is the neighbor address
	Neighbors map[string]GatewaytemplateBgpConfigNeighbors `pulumi:"neighbors"`
	// if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
	Networks []string `pulumi:"networks"`
	// by default, we'll re-advertise all learned BGP routers toward overlay
	NoReadvertiseToOverlay *bool `pulumi:"noReadvertiseToOverlay"`
	// enum: `external`, `internal`
	Type *string `pulumi:"type"`
	// network name. enum: `lan`, `vpn`, `wan`
	Via     *string `pulumi:"via"`
	VpnName *string `pulumi:"vpnName"`
	// if `via`==`wan`
	WanName *string `pulumi:"wanName"`
}

// GatewaytemplateBgpConfigInput is an input type that accepts GatewaytemplateBgpConfigArgs and GatewaytemplateBgpConfigOutput values.
// You can construct a concrete instance of `GatewaytemplateBgpConfigInput` via:
//
//	GatewaytemplateBgpConfigArgs{...}
type GatewaytemplateBgpConfigInput interface {
	pulumi.Input

	ToGatewaytemplateBgpConfigOutput() GatewaytemplateBgpConfigOutput
	ToGatewaytemplateBgpConfigOutputWithContext(context.Context) GatewaytemplateBgpConfigOutput
}

type GatewaytemplateBgpConfigArgs struct {
	AuthKey pulumi.StringPtrInput `pulumi:"authKey"`
	// when bfdMultiplier is configured alone. Default:
	//   * 1000 if `type`==`external`
	//   * 350 `type`==`internal`
	BfdMinimumInterval pulumi.IntPtrInput `pulumi:"bfdMinimumInterval"`
	// when bfdMinimumIntervalIsConfigured alone
	BfdMultiplier pulumi.IntPtrInput                          `pulumi:"bfdMultiplier"`
	Communities   GatewaytemplateBgpConfigCommunityArrayInput `pulumi:"communities"`
	// BFD provides faster path failure detection and is enabled by default
	DisableBfd pulumi.BoolPtrInput   `pulumi:"disableBfd"`
	Export     pulumi.StringPtrInput `pulumi:"export"`
	// default export policies if no per-neighbor policies defined
	ExportPolicy pulumi.StringPtrInput `pulumi:"exportPolicy"`
	// by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
	// for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
	ExtendedV4Nexthop pulumi.BoolPtrInput `pulumi:"extendedV4Nexthop"`
	// `0` means disable
	GracefulRestartTime pulumi.IntPtrInput    `pulumi:"gracefulRestartTime"`
	HoldTime            pulumi.IntPtrInput    `pulumi:"holdTime"`
	Import              pulumi.StringPtrInput `pulumi:"import"`
	// default import policies if no per-neighbor policies defined
	ImportPolicy pulumi.StringPtrInput `pulumi:"importPolicy"`
	LocalAs      pulumi.IntPtrInput    `pulumi:"localAs"`
	NeighborAs   pulumi.IntPtrInput    `pulumi:"neighborAs"`
	// if per-neighbor as is desired. Property key is the neighbor address
	Neighbors GatewaytemplateBgpConfigNeighborsMapInput `pulumi:"neighbors"`
	// if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// by default, we'll re-advertise all learned BGP routers toward overlay
	NoReadvertiseToOverlay pulumi.BoolPtrInput `pulumi:"noReadvertiseToOverlay"`
	// enum: `external`, `internal`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// network name. enum: `lan`, `vpn`, `wan`
	Via     pulumi.StringPtrInput `pulumi:"via"`
	VpnName pulumi.StringPtrInput `pulumi:"vpnName"`
	// if `via`==`wan`
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (GatewaytemplateBgpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateBgpConfig)(nil)).Elem()
}

func (i GatewaytemplateBgpConfigArgs) ToGatewaytemplateBgpConfigOutput() GatewaytemplateBgpConfigOutput {
	return i.ToGatewaytemplateBgpConfigOutputWithContext(context.Background())
}

func (i GatewaytemplateBgpConfigArgs) ToGatewaytemplateBgpConfigOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateBgpConfigOutput)
}

// GatewaytemplateBgpConfigMapInput is an input type that accepts GatewaytemplateBgpConfigMap and GatewaytemplateBgpConfigMapOutput values.
// You can construct a concrete instance of `GatewaytemplateBgpConfigMapInput` via:
//
//	GatewaytemplateBgpConfigMap{ "key": GatewaytemplateBgpConfigArgs{...} }
type GatewaytemplateBgpConfigMapInput interface {
	pulumi.Input

	ToGatewaytemplateBgpConfigMapOutput() GatewaytemplateBgpConfigMapOutput
	ToGatewaytemplateBgpConfigMapOutputWithContext(context.Context) GatewaytemplateBgpConfigMapOutput
}

type GatewaytemplateBgpConfigMap map[string]GatewaytemplateBgpConfigInput

func (GatewaytemplateBgpConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateBgpConfig)(nil)).Elem()
}

func (i GatewaytemplateBgpConfigMap) ToGatewaytemplateBgpConfigMapOutput() GatewaytemplateBgpConfigMapOutput {
	return i.ToGatewaytemplateBgpConfigMapOutputWithContext(context.Background())
}

func (i GatewaytemplateBgpConfigMap) ToGatewaytemplateBgpConfigMapOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateBgpConfigMapOutput)
}

type GatewaytemplateBgpConfigOutput struct{ *pulumi.OutputState }

func (GatewaytemplateBgpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateBgpConfig)(nil)).Elem()
}

func (o GatewaytemplateBgpConfigOutput) ToGatewaytemplateBgpConfigOutput() GatewaytemplateBgpConfigOutput {
	return o
}

func (o GatewaytemplateBgpConfigOutput) ToGatewaytemplateBgpConfigOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigOutput {
	return o
}

func (o GatewaytemplateBgpConfigOutput) AuthKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.AuthKey }).(pulumi.StringPtrOutput)
}

// when bfdMultiplier is configured alone. Default:
//   - 1000 if `type`==`external`
//   - 350 `type`==`internal`
func (o GatewaytemplateBgpConfigOutput) BfdMinimumInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *int { return v.BfdMinimumInterval }).(pulumi.IntPtrOutput)
}

// when bfdMinimumIntervalIsConfigured alone
func (o GatewaytemplateBgpConfigOutput) BfdMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *int { return v.BfdMultiplier }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateBgpConfigOutput) Communities() GatewaytemplateBgpConfigCommunityArrayOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) []GatewaytemplateBgpConfigCommunity { return v.Communities }).(GatewaytemplateBgpConfigCommunityArrayOutput)
}

// BFD provides faster path failure detection and is enabled by default
func (o GatewaytemplateBgpConfigOutput) DisableBfd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *bool { return v.DisableBfd }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateBgpConfigOutput) Export() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.Export }).(pulumi.StringPtrOutput)
}

// default export policies if no per-neighbor policies defined
func (o GatewaytemplateBgpConfigOutput) ExportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.ExportPolicy }).(pulumi.StringPtrOutput)
}

// by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
// for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
func (o GatewaytemplateBgpConfigOutput) ExtendedV4Nexthop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *bool { return v.ExtendedV4Nexthop }).(pulumi.BoolPtrOutput)
}

// `0` means disable
func (o GatewaytemplateBgpConfigOutput) GracefulRestartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *int { return v.GracefulRestartTime }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateBgpConfigOutput) HoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *int { return v.HoldTime }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateBgpConfigOutput) Import() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.Import }).(pulumi.StringPtrOutput)
}

// default import policies if no per-neighbor policies defined
func (o GatewaytemplateBgpConfigOutput) ImportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.ImportPolicy }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateBgpConfigOutput) LocalAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *int { return v.LocalAs }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateBgpConfigOutput) NeighborAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *int { return v.NeighborAs }).(pulumi.IntPtrOutput)
}

// if per-neighbor as is desired. Property key is the neighbor address
func (o GatewaytemplateBgpConfigOutput) Neighbors() GatewaytemplateBgpConfigNeighborsMapOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) map[string]GatewaytemplateBgpConfigNeighbors { return v.Neighbors }).(GatewaytemplateBgpConfigNeighborsMapOutput)
}

// if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
func (o GatewaytemplateBgpConfigOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// by default, we'll re-advertise all learned BGP routers toward overlay
func (o GatewaytemplateBgpConfigOutput) NoReadvertiseToOverlay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *bool { return v.NoReadvertiseToOverlay }).(pulumi.BoolPtrOutput)
}

// enum: `external`, `internal`
func (o GatewaytemplateBgpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// network name. enum: `lan`, `vpn`, `wan`
func (o GatewaytemplateBgpConfigOutput) Via() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.Via }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateBgpConfigOutput) VpnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.VpnName }).(pulumi.StringPtrOutput)
}

// if `via`==`wan`
func (o GatewaytemplateBgpConfigOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfig) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type GatewaytemplateBgpConfigMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateBgpConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateBgpConfig)(nil)).Elem()
}

func (o GatewaytemplateBgpConfigMapOutput) ToGatewaytemplateBgpConfigMapOutput() GatewaytemplateBgpConfigMapOutput {
	return o
}

func (o GatewaytemplateBgpConfigMapOutput) ToGatewaytemplateBgpConfigMapOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigMapOutput {
	return o
}

func (o GatewaytemplateBgpConfigMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateBgpConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateBgpConfig {
		return vs[0].(map[string]GatewaytemplateBgpConfig)[vs[1].(string)]
	}).(GatewaytemplateBgpConfigOutput)
}

type GatewaytemplateBgpConfigCommunity struct {
	Id              *string `pulumi:"id"`
	LocalPreference *int    `pulumi:"localPreference"`
	VpnName         *string `pulumi:"vpnName"`
}

// GatewaytemplateBgpConfigCommunityInput is an input type that accepts GatewaytemplateBgpConfigCommunityArgs and GatewaytemplateBgpConfigCommunityOutput values.
// You can construct a concrete instance of `GatewaytemplateBgpConfigCommunityInput` via:
//
//	GatewaytemplateBgpConfigCommunityArgs{...}
type GatewaytemplateBgpConfigCommunityInput interface {
	pulumi.Input

	ToGatewaytemplateBgpConfigCommunityOutput() GatewaytemplateBgpConfigCommunityOutput
	ToGatewaytemplateBgpConfigCommunityOutputWithContext(context.Context) GatewaytemplateBgpConfigCommunityOutput
}

type GatewaytemplateBgpConfigCommunityArgs struct {
	Id              pulumi.StringPtrInput `pulumi:"id"`
	LocalPreference pulumi.IntPtrInput    `pulumi:"localPreference"`
	VpnName         pulumi.StringPtrInput `pulumi:"vpnName"`
}

func (GatewaytemplateBgpConfigCommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateBgpConfigCommunity)(nil)).Elem()
}

func (i GatewaytemplateBgpConfigCommunityArgs) ToGatewaytemplateBgpConfigCommunityOutput() GatewaytemplateBgpConfigCommunityOutput {
	return i.ToGatewaytemplateBgpConfigCommunityOutputWithContext(context.Background())
}

func (i GatewaytemplateBgpConfigCommunityArgs) ToGatewaytemplateBgpConfigCommunityOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigCommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateBgpConfigCommunityOutput)
}

// GatewaytemplateBgpConfigCommunityArrayInput is an input type that accepts GatewaytemplateBgpConfigCommunityArray and GatewaytemplateBgpConfigCommunityArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateBgpConfigCommunityArrayInput` via:
//
//	GatewaytemplateBgpConfigCommunityArray{ GatewaytemplateBgpConfigCommunityArgs{...} }
type GatewaytemplateBgpConfigCommunityArrayInput interface {
	pulumi.Input

	ToGatewaytemplateBgpConfigCommunityArrayOutput() GatewaytemplateBgpConfigCommunityArrayOutput
	ToGatewaytemplateBgpConfigCommunityArrayOutputWithContext(context.Context) GatewaytemplateBgpConfigCommunityArrayOutput
}

type GatewaytemplateBgpConfigCommunityArray []GatewaytemplateBgpConfigCommunityInput

func (GatewaytemplateBgpConfigCommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateBgpConfigCommunity)(nil)).Elem()
}

func (i GatewaytemplateBgpConfigCommunityArray) ToGatewaytemplateBgpConfigCommunityArrayOutput() GatewaytemplateBgpConfigCommunityArrayOutput {
	return i.ToGatewaytemplateBgpConfigCommunityArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateBgpConfigCommunityArray) ToGatewaytemplateBgpConfigCommunityArrayOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigCommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateBgpConfigCommunityArrayOutput)
}

type GatewaytemplateBgpConfigCommunityOutput struct{ *pulumi.OutputState }

func (GatewaytemplateBgpConfigCommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateBgpConfigCommunity)(nil)).Elem()
}

func (o GatewaytemplateBgpConfigCommunityOutput) ToGatewaytemplateBgpConfigCommunityOutput() GatewaytemplateBgpConfigCommunityOutput {
	return o
}

func (o GatewaytemplateBgpConfigCommunityOutput) ToGatewaytemplateBgpConfigCommunityOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigCommunityOutput {
	return o
}

func (o GatewaytemplateBgpConfigCommunityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigCommunity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateBgpConfigCommunityOutput) LocalPreference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigCommunity) *int { return v.LocalPreference }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateBgpConfigCommunityOutput) VpnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigCommunity) *string { return v.VpnName }).(pulumi.StringPtrOutput)
}

type GatewaytemplateBgpConfigCommunityArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateBgpConfigCommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateBgpConfigCommunity)(nil)).Elem()
}

func (o GatewaytemplateBgpConfigCommunityArrayOutput) ToGatewaytemplateBgpConfigCommunityArrayOutput() GatewaytemplateBgpConfigCommunityArrayOutput {
	return o
}

func (o GatewaytemplateBgpConfigCommunityArrayOutput) ToGatewaytemplateBgpConfigCommunityArrayOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigCommunityArrayOutput {
	return o
}

func (o GatewaytemplateBgpConfigCommunityArrayOutput) Index(i pulumi.IntInput) GatewaytemplateBgpConfigCommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateBgpConfigCommunity {
		return vs[0].([]GatewaytemplateBgpConfigCommunity)[vs[1].(int)]
	}).(GatewaytemplateBgpConfigCommunityOutput)
}

type GatewaytemplateBgpConfigNeighbors struct {
	// If true, the BGP session to this neighbor will be administratively disabled/shutdown
	Disabled     *bool   `pulumi:"disabled"`
	ExportPolicy *string `pulumi:"exportPolicy"`
	HoldTime     *int    `pulumi:"holdTime"`
	ImportPolicy *string `pulumi:"importPolicy"`
	// assuming BGP neighbor is directly connected
	MultihopTtl *int `pulumi:"multihopTtl"`
	NeighborAs  *int `pulumi:"neighborAs"`
}

// GatewaytemplateBgpConfigNeighborsInput is an input type that accepts GatewaytemplateBgpConfigNeighborsArgs and GatewaytemplateBgpConfigNeighborsOutput values.
// You can construct a concrete instance of `GatewaytemplateBgpConfigNeighborsInput` via:
//
//	GatewaytemplateBgpConfigNeighborsArgs{...}
type GatewaytemplateBgpConfigNeighborsInput interface {
	pulumi.Input

	ToGatewaytemplateBgpConfigNeighborsOutput() GatewaytemplateBgpConfigNeighborsOutput
	ToGatewaytemplateBgpConfigNeighborsOutputWithContext(context.Context) GatewaytemplateBgpConfigNeighborsOutput
}

type GatewaytemplateBgpConfigNeighborsArgs struct {
	// If true, the BGP session to this neighbor will be administratively disabled/shutdown
	Disabled     pulumi.BoolPtrInput   `pulumi:"disabled"`
	ExportPolicy pulumi.StringPtrInput `pulumi:"exportPolicy"`
	HoldTime     pulumi.IntPtrInput    `pulumi:"holdTime"`
	ImportPolicy pulumi.StringPtrInput `pulumi:"importPolicy"`
	// assuming BGP neighbor is directly connected
	MultihopTtl pulumi.IntPtrInput `pulumi:"multihopTtl"`
	NeighborAs  pulumi.IntPtrInput `pulumi:"neighborAs"`
}

func (GatewaytemplateBgpConfigNeighborsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateBgpConfigNeighbors)(nil)).Elem()
}

func (i GatewaytemplateBgpConfigNeighborsArgs) ToGatewaytemplateBgpConfigNeighborsOutput() GatewaytemplateBgpConfigNeighborsOutput {
	return i.ToGatewaytemplateBgpConfigNeighborsOutputWithContext(context.Background())
}

func (i GatewaytemplateBgpConfigNeighborsArgs) ToGatewaytemplateBgpConfigNeighborsOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigNeighborsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateBgpConfigNeighborsOutput)
}

// GatewaytemplateBgpConfigNeighborsMapInput is an input type that accepts GatewaytemplateBgpConfigNeighborsMap and GatewaytemplateBgpConfigNeighborsMapOutput values.
// You can construct a concrete instance of `GatewaytemplateBgpConfigNeighborsMapInput` via:
//
//	GatewaytemplateBgpConfigNeighborsMap{ "key": GatewaytemplateBgpConfigNeighborsArgs{...} }
type GatewaytemplateBgpConfigNeighborsMapInput interface {
	pulumi.Input

	ToGatewaytemplateBgpConfigNeighborsMapOutput() GatewaytemplateBgpConfigNeighborsMapOutput
	ToGatewaytemplateBgpConfigNeighborsMapOutputWithContext(context.Context) GatewaytemplateBgpConfigNeighborsMapOutput
}

type GatewaytemplateBgpConfigNeighborsMap map[string]GatewaytemplateBgpConfigNeighborsInput

func (GatewaytemplateBgpConfigNeighborsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateBgpConfigNeighbors)(nil)).Elem()
}

func (i GatewaytemplateBgpConfigNeighborsMap) ToGatewaytemplateBgpConfigNeighborsMapOutput() GatewaytemplateBgpConfigNeighborsMapOutput {
	return i.ToGatewaytemplateBgpConfigNeighborsMapOutputWithContext(context.Background())
}

func (i GatewaytemplateBgpConfigNeighborsMap) ToGatewaytemplateBgpConfigNeighborsMapOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigNeighborsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateBgpConfigNeighborsMapOutput)
}

type GatewaytemplateBgpConfigNeighborsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateBgpConfigNeighborsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateBgpConfigNeighbors)(nil)).Elem()
}

func (o GatewaytemplateBgpConfigNeighborsOutput) ToGatewaytemplateBgpConfigNeighborsOutput() GatewaytemplateBgpConfigNeighborsOutput {
	return o
}

func (o GatewaytemplateBgpConfigNeighborsOutput) ToGatewaytemplateBgpConfigNeighborsOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigNeighborsOutput {
	return o
}

// If true, the BGP session to this neighbor will be administratively disabled/shutdown
func (o GatewaytemplateBgpConfigNeighborsOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigNeighbors) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateBgpConfigNeighborsOutput) ExportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigNeighbors) *string { return v.ExportPolicy }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateBgpConfigNeighborsOutput) HoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigNeighbors) *int { return v.HoldTime }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateBgpConfigNeighborsOutput) ImportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigNeighbors) *string { return v.ImportPolicy }).(pulumi.StringPtrOutput)
}

// assuming BGP neighbor is directly connected
func (o GatewaytemplateBgpConfigNeighborsOutput) MultihopTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigNeighbors) *int { return v.MultihopTtl }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateBgpConfigNeighborsOutput) NeighborAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateBgpConfigNeighbors) *int { return v.NeighborAs }).(pulumi.IntPtrOutput)
}

type GatewaytemplateBgpConfigNeighborsMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateBgpConfigNeighborsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateBgpConfigNeighbors)(nil)).Elem()
}

func (o GatewaytemplateBgpConfigNeighborsMapOutput) ToGatewaytemplateBgpConfigNeighborsMapOutput() GatewaytemplateBgpConfigNeighborsMapOutput {
	return o
}

func (o GatewaytemplateBgpConfigNeighborsMapOutput) ToGatewaytemplateBgpConfigNeighborsMapOutputWithContext(ctx context.Context) GatewaytemplateBgpConfigNeighborsMapOutput {
	return o
}

func (o GatewaytemplateBgpConfigNeighborsMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateBgpConfigNeighborsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateBgpConfigNeighbors {
		return vs[0].(map[string]GatewaytemplateBgpConfigNeighbors)[vs[1].(string)]
	}).(GatewaytemplateBgpConfigNeighborsOutput)
}

type GatewaytemplateDhcpdConfig struct {
	Config map[string]GatewaytemplateDhcpdConfigConfig `pulumi:"config"`
	// if set to `true`, enable the DHCP server
	Enabled *bool `pulumi:"enabled"`
}

// GatewaytemplateDhcpdConfigInput is an input type that accepts GatewaytemplateDhcpdConfigArgs and GatewaytemplateDhcpdConfigOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigInput` via:
//
//	GatewaytemplateDhcpdConfigArgs{...}
type GatewaytemplateDhcpdConfigInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigOutput() GatewaytemplateDhcpdConfigOutput
	ToGatewaytemplateDhcpdConfigOutputWithContext(context.Context) GatewaytemplateDhcpdConfigOutput
}

type GatewaytemplateDhcpdConfigArgs struct {
	Config GatewaytemplateDhcpdConfigConfigMapInput `pulumi:"config"`
	// if set to `true`, enable the DHCP server
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GatewaytemplateDhcpdConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfig)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigArgs) ToGatewaytemplateDhcpdConfigOutput() GatewaytemplateDhcpdConfigOutput {
	return i.ToGatewaytemplateDhcpdConfigOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigArgs) ToGatewaytemplateDhcpdConfigOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigOutput)
}

func (i GatewaytemplateDhcpdConfigArgs) ToGatewaytemplateDhcpdConfigPtrOutput() GatewaytemplateDhcpdConfigPtrOutput {
	return i.ToGatewaytemplateDhcpdConfigPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigArgs) ToGatewaytemplateDhcpdConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigOutput).ToGatewaytemplateDhcpdConfigPtrOutputWithContext(ctx)
}

// GatewaytemplateDhcpdConfigPtrInput is an input type that accepts GatewaytemplateDhcpdConfigArgs, GatewaytemplateDhcpdConfigPtr and GatewaytemplateDhcpdConfigPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigPtrInput` via:
//
//	        GatewaytemplateDhcpdConfigArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateDhcpdConfigPtrInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigPtrOutput() GatewaytemplateDhcpdConfigPtrOutput
	ToGatewaytemplateDhcpdConfigPtrOutputWithContext(context.Context) GatewaytemplateDhcpdConfigPtrOutput
}

type gatewaytemplateDhcpdConfigPtrType GatewaytemplateDhcpdConfigArgs

func GatewaytemplateDhcpdConfigPtr(v *GatewaytemplateDhcpdConfigArgs) GatewaytemplateDhcpdConfigPtrInput {
	return (*gatewaytemplateDhcpdConfigPtrType)(v)
}

func (*gatewaytemplateDhcpdConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateDhcpdConfig)(nil)).Elem()
}

func (i *gatewaytemplateDhcpdConfigPtrType) ToGatewaytemplateDhcpdConfigPtrOutput() GatewaytemplateDhcpdConfigPtrOutput {
	return i.ToGatewaytemplateDhcpdConfigPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateDhcpdConfigPtrType) ToGatewaytemplateDhcpdConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigPtrOutput)
}

type GatewaytemplateDhcpdConfigOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfig)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigOutput) ToGatewaytemplateDhcpdConfigOutput() GatewaytemplateDhcpdConfigOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigOutput) ToGatewaytemplateDhcpdConfigOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigOutput) ToGatewaytemplateDhcpdConfigPtrOutput() GatewaytemplateDhcpdConfigPtrOutput {
	return o.ToGatewaytemplateDhcpdConfigPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateDhcpdConfigOutput) ToGatewaytemplateDhcpdConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateDhcpdConfig) *GatewaytemplateDhcpdConfig {
		return &v
	}).(GatewaytemplateDhcpdConfigPtrOutput)
}

func (o GatewaytemplateDhcpdConfigOutput) Config() GatewaytemplateDhcpdConfigConfigMapOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfig) map[string]GatewaytemplateDhcpdConfigConfig { return v.Config }).(GatewaytemplateDhcpdConfigConfigMapOutput)
}

// if set to `true`, enable the DHCP server
func (o GatewaytemplateDhcpdConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GatewaytemplateDhcpdConfigPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateDhcpdConfig)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigPtrOutput) ToGatewaytemplateDhcpdConfigPtrOutput() GatewaytemplateDhcpdConfigPtrOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigPtrOutput) ToGatewaytemplateDhcpdConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigPtrOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigPtrOutput) Elem() GatewaytemplateDhcpdConfigOutput {
	return o.ApplyT(func(v *GatewaytemplateDhcpdConfig) GatewaytemplateDhcpdConfig {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateDhcpdConfig
		return ret
	}).(GatewaytemplateDhcpdConfigOutput)
}

func (o GatewaytemplateDhcpdConfigPtrOutput) Config() GatewaytemplateDhcpdConfigConfigMapOutput {
	return o.ApplyT(func(v *GatewaytemplateDhcpdConfig) map[string]GatewaytemplateDhcpdConfigConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(GatewaytemplateDhcpdConfigConfigMapOutput)
}

// if set to `true`, enable the DHCP server
func (o GatewaytemplateDhcpdConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateDhcpdConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GatewaytemplateDhcpdConfigConfig struct {
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsServers []string `pulumi:"dnsServers"`
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsSuffixes []string `pulumi:"dnsSuffixes"`
	// Property key is the MAC Address
	FixedBindings map[string]GatewaytemplateDhcpdConfigConfigFixedBindings `pulumi:"fixedBindings"`
	// if `type`==`local` - optional, `ip` will be used if not provided
	Gateway *string `pulumi:"gateway"`
	// if `type`==`local`
	IpEnd *string `pulumi:"ipEnd"`
	// if `type6`==`local`
	IpEnd6 *string `pulumi:"ipEnd6"`
	// if `type`==`local`
	IpStart *string `pulumi:"ipStart"`
	// if `type6`==`local`
	IpStart6 *string `pulumi:"ipStart6"`
	// in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
	LeaseTime *int `pulumi:"leaseTime"`
	// Property key is the DHCP option number
	Options map[string]GatewaytemplateDhcpdConfigConfigOptions `pulumi:"options"`
	// `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients,
	// should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
	ServerIdOverride *bool `pulumi:"serverIdOverride"`
	// if `type`==`relay`
	Servers []string `pulumi:"servers"`
	// if `type6`==`relay`
	Servers6s []string `pulumi:"servers6s"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type *string `pulumi:"type"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type6 *string `pulumi:"type6"`
	// Property key is <enterprise number>:<sub option code>, with
	//   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
	//   * sub option code: 1-255, sub-option code'
	VendorEncapulated map[string]GatewaytemplateDhcpdConfigConfigVendorEncapulated `pulumi:"vendorEncapulated"`
}

// GatewaytemplateDhcpdConfigConfigInput is an input type that accepts GatewaytemplateDhcpdConfigConfigArgs and GatewaytemplateDhcpdConfigConfigOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigInput` via:
//
//	GatewaytemplateDhcpdConfigConfigArgs{...}
type GatewaytemplateDhcpdConfigConfigInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigOutput() GatewaytemplateDhcpdConfigConfigOutput
	ToGatewaytemplateDhcpdConfigConfigOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigOutput
}

type GatewaytemplateDhcpdConfigConfigArgs struct {
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// if `type`==`local` - optional, if not defined, system one will be used
	DnsSuffixes pulumi.StringArrayInput `pulumi:"dnsSuffixes"`
	// Property key is the MAC Address
	FixedBindings GatewaytemplateDhcpdConfigConfigFixedBindingsMapInput `pulumi:"fixedBindings"`
	// if `type`==`local` - optional, `ip` will be used if not provided
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// if `type`==`local`
	IpEnd pulumi.StringPtrInput `pulumi:"ipEnd"`
	// if `type6`==`local`
	IpEnd6 pulumi.StringPtrInput `pulumi:"ipEnd6"`
	// if `type`==`local`
	IpStart pulumi.StringPtrInput `pulumi:"ipStart"`
	// if `type6`==`local`
	IpStart6 pulumi.StringPtrInput `pulumi:"ipStart6"`
	// in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
	LeaseTime pulumi.IntPtrInput `pulumi:"leaseTime"`
	// Property key is the DHCP option number
	Options GatewaytemplateDhcpdConfigConfigOptionsMapInput `pulumi:"options"`
	// `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients,
	// should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
	ServerIdOverride pulumi.BoolPtrInput `pulumi:"serverIdOverride"`
	// if `type`==`relay`
	Servers pulumi.StringArrayInput `pulumi:"servers"`
	// if `type6`==`relay`
	Servers6s pulumi.StringArrayInput `pulumi:"servers6s"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type pulumi.StringPtrInput `pulumi:"type"`
	// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
	Type6 pulumi.StringPtrInput `pulumi:"type6"`
	// Property key is <enterprise number>:<sub option code>, with
	//   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
	//   * sub option code: 1-255, sub-option code'
	VendorEncapulated GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapInput `pulumi:"vendorEncapulated"`
}

func (GatewaytemplateDhcpdConfigConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfig)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigArgs) ToGatewaytemplateDhcpdConfigConfigOutput() GatewaytemplateDhcpdConfigConfigOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigArgs) ToGatewaytemplateDhcpdConfigConfigOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigOutput)
}

// GatewaytemplateDhcpdConfigConfigMapInput is an input type that accepts GatewaytemplateDhcpdConfigConfigMap and GatewaytemplateDhcpdConfigConfigMapOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigMapInput` via:
//
//	GatewaytemplateDhcpdConfigConfigMap{ "key": GatewaytemplateDhcpdConfigConfigArgs{...} }
type GatewaytemplateDhcpdConfigConfigMapInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigMapOutput() GatewaytemplateDhcpdConfigConfigMapOutput
	ToGatewaytemplateDhcpdConfigConfigMapOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigMapOutput
}

type GatewaytemplateDhcpdConfigConfigMap map[string]GatewaytemplateDhcpdConfigConfigInput

func (GatewaytemplateDhcpdConfigConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfig)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigMap) ToGatewaytemplateDhcpdConfigConfigMapOutput() GatewaytemplateDhcpdConfigConfigMapOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigMapOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigMap) ToGatewaytemplateDhcpdConfigConfigMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigMapOutput)
}

type GatewaytemplateDhcpdConfigConfigOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfig)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigOutput) ToGatewaytemplateDhcpdConfigConfigOutput() GatewaytemplateDhcpdConfigConfigOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigOutput) ToGatewaytemplateDhcpdConfigConfigOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigOutput {
	return o
}

// if `type`==`local` - optional, if not defined, system one will be used
func (o GatewaytemplateDhcpdConfigConfigOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// if `type`==`local` - optional, if not defined, system one will be used
func (o GatewaytemplateDhcpdConfigConfigOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) []string { return v.DnsSuffixes }).(pulumi.StringArrayOutput)
}

// Property key is the MAC Address
func (o GatewaytemplateDhcpdConfigConfigOutput) FixedBindings() GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) map[string]GatewaytemplateDhcpdConfigConfigFixedBindings {
		return v.FixedBindings
	}).(GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput)
}

// if `type`==`local` - optional, `ip` will be used if not provided
func (o GatewaytemplateDhcpdConfigConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// if `type`==`local`
func (o GatewaytemplateDhcpdConfigConfigOutput) IpEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *string { return v.IpEnd }).(pulumi.StringPtrOutput)
}

// if `type6`==`local`
func (o GatewaytemplateDhcpdConfigConfigOutput) IpEnd6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *string { return v.IpEnd6 }).(pulumi.StringPtrOutput)
}

// if `type`==`local`
func (o GatewaytemplateDhcpdConfigConfigOutput) IpStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *string { return v.IpStart }).(pulumi.StringPtrOutput)
}

// if `type6`==`local`
func (o GatewaytemplateDhcpdConfigConfigOutput) IpStart6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *string { return v.IpStart6 }).(pulumi.StringPtrOutput)
}

// in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
func (o GatewaytemplateDhcpdConfigConfigOutput) LeaseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *int { return v.LeaseTime }).(pulumi.IntPtrOutput)
}

// Property key is the DHCP option number
func (o GatewaytemplateDhcpdConfigConfigOutput) Options() GatewaytemplateDhcpdConfigConfigOptionsMapOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) map[string]GatewaytemplateDhcpdConfigConfigOptions {
		return v.Options
	}).(GatewaytemplateDhcpdConfigConfigOptionsMapOutput)
}

// `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients,
// should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
func (o GatewaytemplateDhcpdConfigConfigOutput) ServerIdOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *bool { return v.ServerIdOverride }).(pulumi.BoolPtrOutput)
}

// if `type`==`relay`
func (o GatewaytemplateDhcpdConfigConfigOutput) Servers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) []string { return v.Servers }).(pulumi.StringArrayOutput)
}

// if `type6`==`relay`
func (o GatewaytemplateDhcpdConfigConfigOutput) Servers6s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) []string { return v.Servers6s }).(pulumi.StringArrayOutput)
}

// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
func (o GatewaytemplateDhcpdConfigConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
func (o GatewaytemplateDhcpdConfigConfigOutput) Type6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) *string { return v.Type6 }).(pulumi.StringPtrOutput)
}

// Property key is <enterprise number>:<sub option code>, with
//   - enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
//   - sub option code: 1-255, sub-option code'
func (o GatewaytemplateDhcpdConfigConfigOutput) VendorEncapulated() GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfig) map[string]GatewaytemplateDhcpdConfigConfigVendorEncapulated {
		return v.VendorEncapulated
	}).(GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput)
}

type GatewaytemplateDhcpdConfigConfigMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfig)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigMapOutput) ToGatewaytemplateDhcpdConfigConfigMapOutput() GatewaytemplateDhcpdConfigConfigMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigMapOutput) ToGatewaytemplateDhcpdConfigConfigMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateDhcpdConfigConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateDhcpdConfigConfig {
		return vs[0].(map[string]GatewaytemplateDhcpdConfigConfig)[vs[1].(string)]
	}).(GatewaytemplateDhcpdConfigConfigOutput)
}

type GatewaytemplateDhcpdConfigConfigFixedBindings struct {
	Ip   string  `pulumi:"ip"`
	Name *string `pulumi:"name"`
}

// GatewaytemplateDhcpdConfigConfigFixedBindingsInput is an input type that accepts GatewaytemplateDhcpdConfigConfigFixedBindingsArgs and GatewaytemplateDhcpdConfigConfigFixedBindingsOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigFixedBindingsInput` via:
//
//	GatewaytemplateDhcpdConfigConfigFixedBindingsArgs{...}
type GatewaytemplateDhcpdConfigConfigFixedBindingsInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigFixedBindingsOutput() GatewaytemplateDhcpdConfigConfigFixedBindingsOutput
	ToGatewaytemplateDhcpdConfigConfigFixedBindingsOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigFixedBindingsOutput
}

type GatewaytemplateDhcpdConfigConfigFixedBindingsArgs struct {
	Ip   pulumi.StringInput    `pulumi:"ip"`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GatewaytemplateDhcpdConfigConfigFixedBindingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigFixedBindingsArgs) ToGatewaytemplateDhcpdConfigConfigFixedBindingsOutput() GatewaytemplateDhcpdConfigConfigFixedBindingsOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigFixedBindingsOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigFixedBindingsArgs) ToGatewaytemplateDhcpdConfigConfigFixedBindingsOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigFixedBindingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigFixedBindingsOutput)
}

// GatewaytemplateDhcpdConfigConfigFixedBindingsMapInput is an input type that accepts GatewaytemplateDhcpdConfigConfigFixedBindingsMap and GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigFixedBindingsMapInput` via:
//
//	GatewaytemplateDhcpdConfigConfigFixedBindingsMap{ "key": GatewaytemplateDhcpdConfigConfigFixedBindingsArgs{...} }
type GatewaytemplateDhcpdConfigConfigFixedBindingsMapInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput() GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput
	ToGatewaytemplateDhcpdConfigConfigFixedBindingsMapOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput
}

type GatewaytemplateDhcpdConfigConfigFixedBindingsMap map[string]GatewaytemplateDhcpdConfigConfigFixedBindingsInput

func (GatewaytemplateDhcpdConfigConfigFixedBindingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigFixedBindingsMap) ToGatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput() GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigFixedBindingsMapOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigFixedBindingsMap) ToGatewaytemplateDhcpdConfigConfigFixedBindingsMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput)
}

type GatewaytemplateDhcpdConfigConfigFixedBindingsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigFixedBindingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigFixedBindingsOutput) ToGatewaytemplateDhcpdConfigConfigFixedBindingsOutput() GatewaytemplateDhcpdConfigConfigFixedBindingsOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigFixedBindingsOutput) ToGatewaytemplateDhcpdConfigConfigFixedBindingsOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigFixedBindingsOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigFixedBindingsOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfigFixedBindings) string { return v.Ip }).(pulumi.StringOutput)
}

func (o GatewaytemplateDhcpdConfigConfigFixedBindingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfigFixedBindings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfigFixedBindings)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput) ToGatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput() GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput) ToGatewaytemplateDhcpdConfigConfigFixedBindingsMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateDhcpdConfigConfigFixedBindingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateDhcpdConfigConfigFixedBindings {
		return vs[0].(map[string]GatewaytemplateDhcpdConfigConfigFixedBindings)[vs[1].(string)]
	}).(GatewaytemplateDhcpdConfigConfigFixedBindingsOutput)
}

type GatewaytemplateDhcpdConfigConfigOptions struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// GatewaytemplateDhcpdConfigConfigOptionsInput is an input type that accepts GatewaytemplateDhcpdConfigConfigOptionsArgs and GatewaytemplateDhcpdConfigConfigOptionsOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigOptionsInput` via:
//
//	GatewaytemplateDhcpdConfigConfigOptionsArgs{...}
type GatewaytemplateDhcpdConfigConfigOptionsInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigOptionsOutput() GatewaytemplateDhcpdConfigConfigOptionsOutput
	ToGatewaytemplateDhcpdConfigConfigOptionsOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigOptionsOutput
}

type GatewaytemplateDhcpdConfigConfigOptionsArgs struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GatewaytemplateDhcpdConfigConfigOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigOptions)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigOptionsArgs) ToGatewaytemplateDhcpdConfigConfigOptionsOutput() GatewaytemplateDhcpdConfigConfigOptionsOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigOptionsOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigOptionsArgs) ToGatewaytemplateDhcpdConfigConfigOptionsOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigOptionsOutput)
}

// GatewaytemplateDhcpdConfigConfigOptionsMapInput is an input type that accepts GatewaytemplateDhcpdConfigConfigOptionsMap and GatewaytemplateDhcpdConfigConfigOptionsMapOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigOptionsMapInput` via:
//
//	GatewaytemplateDhcpdConfigConfigOptionsMap{ "key": GatewaytemplateDhcpdConfigConfigOptionsArgs{...} }
type GatewaytemplateDhcpdConfigConfigOptionsMapInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigOptionsMapOutput() GatewaytemplateDhcpdConfigConfigOptionsMapOutput
	ToGatewaytemplateDhcpdConfigConfigOptionsMapOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigOptionsMapOutput
}

type GatewaytemplateDhcpdConfigConfigOptionsMap map[string]GatewaytemplateDhcpdConfigConfigOptionsInput

func (GatewaytemplateDhcpdConfigConfigOptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfigOptions)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigOptionsMap) ToGatewaytemplateDhcpdConfigConfigOptionsMapOutput() GatewaytemplateDhcpdConfigConfigOptionsMapOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigOptionsMapOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigOptionsMap) ToGatewaytemplateDhcpdConfigConfigOptionsMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigOptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigOptionsMapOutput)
}

type GatewaytemplateDhcpdConfigConfigOptionsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigOptions)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigOptionsOutput) ToGatewaytemplateDhcpdConfigConfigOptionsOutput() GatewaytemplateDhcpdConfigConfigOptionsOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigOptionsOutput) ToGatewaytemplateDhcpdConfigConfigOptionsOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigOptionsOutput {
	return o
}

// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
func (o GatewaytemplateDhcpdConfigConfigOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfigOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateDhcpdConfigConfigOptionsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfigOptions) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GatewaytemplateDhcpdConfigConfigOptionsMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigOptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfigOptions)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigOptionsMapOutput) ToGatewaytemplateDhcpdConfigConfigOptionsMapOutput() GatewaytemplateDhcpdConfigConfigOptionsMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigOptionsMapOutput) ToGatewaytemplateDhcpdConfigConfigOptionsMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigOptionsMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigOptionsMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateDhcpdConfigConfigOptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateDhcpdConfigConfigOptions {
		return vs[0].(map[string]GatewaytemplateDhcpdConfigConfigOptions)[vs[1].(string)]
	}).(GatewaytemplateDhcpdConfigConfigOptionsOutput)
}

type GatewaytemplateDhcpdConfigConfigVendorEncapulated struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// GatewaytemplateDhcpdConfigConfigVendorEncapulatedInput is an input type that accepts GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs and GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigVendorEncapulatedInput` via:
//
//	GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs{...}
type GatewaytemplateDhcpdConfigConfigVendorEncapulatedInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput() GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput
	ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput
}

type GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs struct {
	// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput() GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput)
}

// GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapInput is an input type that accepts GatewaytemplateDhcpdConfigConfigVendorEncapulatedMap and GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput values.
// You can construct a concrete instance of `GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapInput` via:
//
//	GatewaytemplateDhcpdConfigConfigVendorEncapulatedMap{ "key": GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs{...} }
type GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapInput interface {
	pulumi.Input

	ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput() GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput
	ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(context.Context) GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput
}

type GatewaytemplateDhcpdConfigConfigVendorEncapulatedMap map[string]GatewaytemplateDhcpdConfigConfigVendorEncapulatedInput

func (GatewaytemplateDhcpdConfigConfigVendorEncapulatedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (i GatewaytemplateDhcpdConfigConfigVendorEncapulatedMap) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput() GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput {
	return i.ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(context.Background())
}

func (i GatewaytemplateDhcpdConfigConfigVendorEncapulatedMap) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput)
}

type GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput() GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput {
	return o
}

// enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
func (o GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfigVendorEncapulated) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateDhcpdConfigConfigVendorEncapulated) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateDhcpdConfigConfigVendorEncapulated)(nil)).Elem()
}

func (o GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput() GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput) ToGatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutputWithContext(ctx context.Context) GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput {
	return o
}

func (o GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateDhcpdConfigConfigVendorEncapulated {
		return vs[0].(map[string]GatewaytemplateDhcpdConfigConfigVendorEncapulated)[vs[1].(string)]
	}).(GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput)
}

type GatewaytemplateExtraRoutes6 struct {
	Via string `pulumi:"via"`
}

// GatewaytemplateExtraRoutes6Input is an input type that accepts GatewaytemplateExtraRoutes6Args and GatewaytemplateExtraRoutes6Output values.
// You can construct a concrete instance of `GatewaytemplateExtraRoutes6Input` via:
//
//	GatewaytemplateExtraRoutes6Args{...}
type GatewaytemplateExtraRoutes6Input interface {
	pulumi.Input

	ToGatewaytemplateExtraRoutes6Output() GatewaytemplateExtraRoutes6Output
	ToGatewaytemplateExtraRoutes6OutputWithContext(context.Context) GatewaytemplateExtraRoutes6Output
}

type GatewaytemplateExtraRoutes6Args struct {
	Via pulumi.StringInput `pulumi:"via"`
}

func (GatewaytemplateExtraRoutes6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateExtraRoutes6)(nil)).Elem()
}

func (i GatewaytemplateExtraRoutes6Args) ToGatewaytemplateExtraRoutes6Output() GatewaytemplateExtraRoutes6Output {
	return i.ToGatewaytemplateExtraRoutes6OutputWithContext(context.Background())
}

func (i GatewaytemplateExtraRoutes6Args) ToGatewaytemplateExtraRoutes6OutputWithContext(ctx context.Context) GatewaytemplateExtraRoutes6Output {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateExtraRoutes6Output)
}

// GatewaytemplateExtraRoutes6MapInput is an input type that accepts GatewaytemplateExtraRoutes6Map and GatewaytemplateExtraRoutes6MapOutput values.
// You can construct a concrete instance of `GatewaytemplateExtraRoutes6MapInput` via:
//
//	GatewaytemplateExtraRoutes6Map{ "key": GatewaytemplateExtraRoutes6Args{...} }
type GatewaytemplateExtraRoutes6MapInput interface {
	pulumi.Input

	ToGatewaytemplateExtraRoutes6MapOutput() GatewaytemplateExtraRoutes6MapOutput
	ToGatewaytemplateExtraRoutes6MapOutputWithContext(context.Context) GatewaytemplateExtraRoutes6MapOutput
}

type GatewaytemplateExtraRoutes6Map map[string]GatewaytemplateExtraRoutes6Input

func (GatewaytemplateExtraRoutes6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateExtraRoutes6)(nil)).Elem()
}

func (i GatewaytemplateExtraRoutes6Map) ToGatewaytemplateExtraRoutes6MapOutput() GatewaytemplateExtraRoutes6MapOutput {
	return i.ToGatewaytemplateExtraRoutes6MapOutputWithContext(context.Background())
}

func (i GatewaytemplateExtraRoutes6Map) ToGatewaytemplateExtraRoutes6MapOutputWithContext(ctx context.Context) GatewaytemplateExtraRoutes6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateExtraRoutes6MapOutput)
}

type GatewaytemplateExtraRoutes6Output struct{ *pulumi.OutputState }

func (GatewaytemplateExtraRoutes6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateExtraRoutes6)(nil)).Elem()
}

func (o GatewaytemplateExtraRoutes6Output) ToGatewaytemplateExtraRoutes6Output() GatewaytemplateExtraRoutes6Output {
	return o
}

func (o GatewaytemplateExtraRoutes6Output) ToGatewaytemplateExtraRoutes6OutputWithContext(ctx context.Context) GatewaytemplateExtraRoutes6Output {
	return o
}

func (o GatewaytemplateExtraRoutes6Output) Via() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplateExtraRoutes6) string { return v.Via }).(pulumi.StringOutput)
}

type GatewaytemplateExtraRoutes6MapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateExtraRoutes6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateExtraRoutes6)(nil)).Elem()
}

func (o GatewaytemplateExtraRoutes6MapOutput) ToGatewaytemplateExtraRoutes6MapOutput() GatewaytemplateExtraRoutes6MapOutput {
	return o
}

func (o GatewaytemplateExtraRoutes6MapOutput) ToGatewaytemplateExtraRoutes6MapOutputWithContext(ctx context.Context) GatewaytemplateExtraRoutes6MapOutput {
	return o
}

func (o GatewaytemplateExtraRoutes6MapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateExtraRoutes6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateExtraRoutes6 {
		return vs[0].(map[string]GatewaytemplateExtraRoutes6)[vs[1].(string)]
	}).(GatewaytemplateExtraRoutes6Output)
}

type GatewaytemplateExtraRoutes struct {
	Via string `pulumi:"via"`
}

// GatewaytemplateExtraRoutesInput is an input type that accepts GatewaytemplateExtraRoutesArgs and GatewaytemplateExtraRoutesOutput values.
// You can construct a concrete instance of `GatewaytemplateExtraRoutesInput` via:
//
//	GatewaytemplateExtraRoutesArgs{...}
type GatewaytemplateExtraRoutesInput interface {
	pulumi.Input

	ToGatewaytemplateExtraRoutesOutput() GatewaytemplateExtraRoutesOutput
	ToGatewaytemplateExtraRoutesOutputWithContext(context.Context) GatewaytemplateExtraRoutesOutput
}

type GatewaytemplateExtraRoutesArgs struct {
	Via pulumi.StringInput `pulumi:"via"`
}

func (GatewaytemplateExtraRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateExtraRoutes)(nil)).Elem()
}

func (i GatewaytemplateExtraRoutesArgs) ToGatewaytemplateExtraRoutesOutput() GatewaytemplateExtraRoutesOutput {
	return i.ToGatewaytemplateExtraRoutesOutputWithContext(context.Background())
}

func (i GatewaytemplateExtraRoutesArgs) ToGatewaytemplateExtraRoutesOutputWithContext(ctx context.Context) GatewaytemplateExtraRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateExtraRoutesOutput)
}

// GatewaytemplateExtraRoutesMapInput is an input type that accepts GatewaytemplateExtraRoutesMap and GatewaytemplateExtraRoutesMapOutput values.
// You can construct a concrete instance of `GatewaytemplateExtraRoutesMapInput` via:
//
//	GatewaytemplateExtraRoutesMap{ "key": GatewaytemplateExtraRoutesArgs{...} }
type GatewaytemplateExtraRoutesMapInput interface {
	pulumi.Input

	ToGatewaytemplateExtraRoutesMapOutput() GatewaytemplateExtraRoutesMapOutput
	ToGatewaytemplateExtraRoutesMapOutputWithContext(context.Context) GatewaytemplateExtraRoutesMapOutput
}

type GatewaytemplateExtraRoutesMap map[string]GatewaytemplateExtraRoutesInput

func (GatewaytemplateExtraRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateExtraRoutes)(nil)).Elem()
}

func (i GatewaytemplateExtraRoutesMap) ToGatewaytemplateExtraRoutesMapOutput() GatewaytemplateExtraRoutesMapOutput {
	return i.ToGatewaytemplateExtraRoutesMapOutputWithContext(context.Background())
}

func (i GatewaytemplateExtraRoutesMap) ToGatewaytemplateExtraRoutesMapOutputWithContext(ctx context.Context) GatewaytemplateExtraRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateExtraRoutesMapOutput)
}

type GatewaytemplateExtraRoutesOutput struct{ *pulumi.OutputState }

func (GatewaytemplateExtraRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateExtraRoutes)(nil)).Elem()
}

func (o GatewaytemplateExtraRoutesOutput) ToGatewaytemplateExtraRoutesOutput() GatewaytemplateExtraRoutesOutput {
	return o
}

func (o GatewaytemplateExtraRoutesOutput) ToGatewaytemplateExtraRoutesOutputWithContext(ctx context.Context) GatewaytemplateExtraRoutesOutput {
	return o
}

func (o GatewaytemplateExtraRoutesOutput) Via() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplateExtraRoutes) string { return v.Via }).(pulumi.StringOutput)
}

type GatewaytemplateExtraRoutesMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateExtraRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateExtraRoutes)(nil)).Elem()
}

func (o GatewaytemplateExtraRoutesMapOutput) ToGatewaytemplateExtraRoutesMapOutput() GatewaytemplateExtraRoutesMapOutput {
	return o
}

func (o GatewaytemplateExtraRoutesMapOutput) ToGatewaytemplateExtraRoutesMapOutputWithContext(ctx context.Context) GatewaytemplateExtraRoutesMapOutput {
	return o
}

func (o GatewaytemplateExtraRoutesMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateExtraRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateExtraRoutes {
		return vs[0].(map[string]GatewaytemplateExtraRoutes)[vs[1].(string)]
	}).(GatewaytemplateExtraRoutesOutput)
}

type GatewaytemplateIdpProfiles struct {
	// enum: `critical`, `standard`, `strict`
	BaseProfile *string                               `pulumi:"baseProfile"`
	Name        *string                               `pulumi:"name"`
	OrgId       *string                               `pulumi:"orgId"`
	Overwrites  []GatewaytemplateIdpProfilesOverwrite `pulumi:"overwrites"`
}

// GatewaytemplateIdpProfilesInput is an input type that accepts GatewaytemplateIdpProfilesArgs and GatewaytemplateIdpProfilesOutput values.
// You can construct a concrete instance of `GatewaytemplateIdpProfilesInput` via:
//
//	GatewaytemplateIdpProfilesArgs{...}
type GatewaytemplateIdpProfilesInput interface {
	pulumi.Input

	ToGatewaytemplateIdpProfilesOutput() GatewaytemplateIdpProfilesOutput
	ToGatewaytemplateIdpProfilesOutputWithContext(context.Context) GatewaytemplateIdpProfilesOutput
}

type GatewaytemplateIdpProfilesArgs struct {
	// enum: `critical`, `standard`, `strict`
	BaseProfile pulumi.StringPtrInput                         `pulumi:"baseProfile"`
	Name        pulumi.StringPtrInput                         `pulumi:"name"`
	OrgId       pulumi.StringPtrInput                         `pulumi:"orgId"`
	Overwrites  GatewaytemplateIdpProfilesOverwriteArrayInput `pulumi:"overwrites"`
}

func (GatewaytemplateIdpProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIdpProfiles)(nil)).Elem()
}

func (i GatewaytemplateIdpProfilesArgs) ToGatewaytemplateIdpProfilesOutput() GatewaytemplateIdpProfilesOutput {
	return i.ToGatewaytemplateIdpProfilesOutputWithContext(context.Background())
}

func (i GatewaytemplateIdpProfilesArgs) ToGatewaytemplateIdpProfilesOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIdpProfilesOutput)
}

// GatewaytemplateIdpProfilesMapInput is an input type that accepts GatewaytemplateIdpProfilesMap and GatewaytemplateIdpProfilesMapOutput values.
// You can construct a concrete instance of `GatewaytemplateIdpProfilesMapInput` via:
//
//	GatewaytemplateIdpProfilesMap{ "key": GatewaytemplateIdpProfilesArgs{...} }
type GatewaytemplateIdpProfilesMapInput interface {
	pulumi.Input

	ToGatewaytemplateIdpProfilesMapOutput() GatewaytemplateIdpProfilesMapOutput
	ToGatewaytemplateIdpProfilesMapOutputWithContext(context.Context) GatewaytemplateIdpProfilesMapOutput
}

type GatewaytemplateIdpProfilesMap map[string]GatewaytemplateIdpProfilesInput

func (GatewaytemplateIdpProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateIdpProfiles)(nil)).Elem()
}

func (i GatewaytemplateIdpProfilesMap) ToGatewaytemplateIdpProfilesMapOutput() GatewaytemplateIdpProfilesMapOutput {
	return i.ToGatewaytemplateIdpProfilesMapOutputWithContext(context.Background())
}

func (i GatewaytemplateIdpProfilesMap) ToGatewaytemplateIdpProfilesMapOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIdpProfilesMapOutput)
}

type GatewaytemplateIdpProfilesOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIdpProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIdpProfiles)(nil)).Elem()
}

func (o GatewaytemplateIdpProfilesOutput) ToGatewaytemplateIdpProfilesOutput() GatewaytemplateIdpProfilesOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOutput) ToGatewaytemplateIdpProfilesOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOutput {
	return o
}

// enum: `critical`, `standard`, `strict`
func (o GatewaytemplateIdpProfilesOutput) BaseProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfiles) *string { return v.BaseProfile }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateIdpProfilesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfiles) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateIdpProfilesOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfiles) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateIdpProfilesOutput) Overwrites() GatewaytemplateIdpProfilesOverwriteArrayOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfiles) []GatewaytemplateIdpProfilesOverwrite { return v.Overwrites }).(GatewaytemplateIdpProfilesOverwriteArrayOutput)
}

type GatewaytemplateIdpProfilesMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIdpProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateIdpProfiles)(nil)).Elem()
}

func (o GatewaytemplateIdpProfilesMapOutput) ToGatewaytemplateIdpProfilesMapOutput() GatewaytemplateIdpProfilesMapOutput {
	return o
}

func (o GatewaytemplateIdpProfilesMapOutput) ToGatewaytemplateIdpProfilesMapOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesMapOutput {
	return o
}

func (o GatewaytemplateIdpProfilesMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateIdpProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateIdpProfiles {
		return vs[0].(map[string]GatewaytemplateIdpProfiles)[vs[1].(string)]
	}).(GatewaytemplateIdpProfilesOutput)
}

type GatewaytemplateIdpProfilesOverwrite struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   *string                                      `pulumi:"action"`
	Matching *GatewaytemplateIdpProfilesOverwriteMatching `pulumi:"matching"`
	Name     *string                                      `pulumi:"name"`
}

// GatewaytemplateIdpProfilesOverwriteInput is an input type that accepts GatewaytemplateIdpProfilesOverwriteArgs and GatewaytemplateIdpProfilesOverwriteOutput values.
// You can construct a concrete instance of `GatewaytemplateIdpProfilesOverwriteInput` via:
//
//	GatewaytemplateIdpProfilesOverwriteArgs{...}
type GatewaytemplateIdpProfilesOverwriteInput interface {
	pulumi.Input

	ToGatewaytemplateIdpProfilesOverwriteOutput() GatewaytemplateIdpProfilesOverwriteOutput
	ToGatewaytemplateIdpProfilesOverwriteOutputWithContext(context.Context) GatewaytemplateIdpProfilesOverwriteOutput
}

type GatewaytemplateIdpProfilesOverwriteArgs struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   pulumi.StringPtrInput                               `pulumi:"action"`
	Matching GatewaytemplateIdpProfilesOverwriteMatchingPtrInput `pulumi:"matching"`
	Name     pulumi.StringPtrInput                               `pulumi:"name"`
}

func (GatewaytemplateIdpProfilesOverwriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIdpProfilesOverwrite)(nil)).Elem()
}

func (i GatewaytemplateIdpProfilesOverwriteArgs) ToGatewaytemplateIdpProfilesOverwriteOutput() GatewaytemplateIdpProfilesOverwriteOutput {
	return i.ToGatewaytemplateIdpProfilesOverwriteOutputWithContext(context.Background())
}

func (i GatewaytemplateIdpProfilesOverwriteArgs) ToGatewaytemplateIdpProfilesOverwriteOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIdpProfilesOverwriteOutput)
}

// GatewaytemplateIdpProfilesOverwriteArrayInput is an input type that accepts GatewaytemplateIdpProfilesOverwriteArray and GatewaytemplateIdpProfilesOverwriteArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateIdpProfilesOverwriteArrayInput` via:
//
//	GatewaytemplateIdpProfilesOverwriteArray{ GatewaytemplateIdpProfilesOverwriteArgs{...} }
type GatewaytemplateIdpProfilesOverwriteArrayInput interface {
	pulumi.Input

	ToGatewaytemplateIdpProfilesOverwriteArrayOutput() GatewaytemplateIdpProfilesOverwriteArrayOutput
	ToGatewaytemplateIdpProfilesOverwriteArrayOutputWithContext(context.Context) GatewaytemplateIdpProfilesOverwriteArrayOutput
}

type GatewaytemplateIdpProfilesOverwriteArray []GatewaytemplateIdpProfilesOverwriteInput

func (GatewaytemplateIdpProfilesOverwriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateIdpProfilesOverwrite)(nil)).Elem()
}

func (i GatewaytemplateIdpProfilesOverwriteArray) ToGatewaytemplateIdpProfilesOverwriteArrayOutput() GatewaytemplateIdpProfilesOverwriteArrayOutput {
	return i.ToGatewaytemplateIdpProfilesOverwriteArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateIdpProfilesOverwriteArray) ToGatewaytemplateIdpProfilesOverwriteArrayOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIdpProfilesOverwriteArrayOutput)
}

type GatewaytemplateIdpProfilesOverwriteOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIdpProfilesOverwriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIdpProfilesOverwrite)(nil)).Elem()
}

func (o GatewaytemplateIdpProfilesOverwriteOutput) ToGatewaytemplateIdpProfilesOverwriteOutput() GatewaytemplateIdpProfilesOverwriteOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOverwriteOutput) ToGatewaytemplateIdpProfilesOverwriteOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteOutput {
	return o
}

// enum:
//   - alert (default)
//   - drop: siliently dropping packets
//   - close: notify client/server to close connection
func (o GatewaytemplateIdpProfilesOverwriteOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfilesOverwrite) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteOutput) Matching() GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfilesOverwrite) *GatewaytemplateIdpProfilesOverwriteMatching {
		return v.Matching
	}).(GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfilesOverwrite) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GatewaytemplateIdpProfilesOverwriteArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIdpProfilesOverwriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateIdpProfilesOverwrite)(nil)).Elem()
}

func (o GatewaytemplateIdpProfilesOverwriteArrayOutput) ToGatewaytemplateIdpProfilesOverwriteArrayOutput() GatewaytemplateIdpProfilesOverwriteArrayOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOverwriteArrayOutput) ToGatewaytemplateIdpProfilesOverwriteArrayOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteArrayOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOverwriteArrayOutput) Index(i pulumi.IntInput) GatewaytemplateIdpProfilesOverwriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateIdpProfilesOverwrite {
		return vs[0].([]GatewaytemplateIdpProfilesOverwrite)[vs[1].(int)]
	}).(GatewaytemplateIdpProfilesOverwriteOutput)
}

type GatewaytemplateIdpProfilesOverwriteMatching struct {
	AttackNames []string `pulumi:"attackNames"`
	DstSubnets  []string `pulumi:"dstSubnets"`
	Severities  []string `pulumi:"severities"`
}

// GatewaytemplateIdpProfilesOverwriteMatchingInput is an input type that accepts GatewaytemplateIdpProfilesOverwriteMatchingArgs and GatewaytemplateIdpProfilesOverwriteMatchingOutput values.
// You can construct a concrete instance of `GatewaytemplateIdpProfilesOverwriteMatchingInput` via:
//
//	GatewaytemplateIdpProfilesOverwriteMatchingArgs{...}
type GatewaytemplateIdpProfilesOverwriteMatchingInput interface {
	pulumi.Input

	ToGatewaytemplateIdpProfilesOverwriteMatchingOutput() GatewaytemplateIdpProfilesOverwriteMatchingOutput
	ToGatewaytemplateIdpProfilesOverwriteMatchingOutputWithContext(context.Context) GatewaytemplateIdpProfilesOverwriteMatchingOutput
}

type GatewaytemplateIdpProfilesOverwriteMatchingArgs struct {
	AttackNames pulumi.StringArrayInput `pulumi:"attackNames"`
	DstSubnets  pulumi.StringArrayInput `pulumi:"dstSubnets"`
	Severities  pulumi.StringArrayInput `pulumi:"severities"`
}

func (GatewaytemplateIdpProfilesOverwriteMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (i GatewaytemplateIdpProfilesOverwriteMatchingArgs) ToGatewaytemplateIdpProfilesOverwriteMatchingOutput() GatewaytemplateIdpProfilesOverwriteMatchingOutput {
	return i.ToGatewaytemplateIdpProfilesOverwriteMatchingOutputWithContext(context.Background())
}

func (i GatewaytemplateIdpProfilesOverwriteMatchingArgs) ToGatewaytemplateIdpProfilesOverwriteMatchingOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIdpProfilesOverwriteMatchingOutput)
}

func (i GatewaytemplateIdpProfilesOverwriteMatchingArgs) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutput() GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return i.ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateIdpProfilesOverwriteMatchingArgs) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIdpProfilesOverwriteMatchingOutput).ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx)
}

// GatewaytemplateIdpProfilesOverwriteMatchingPtrInput is an input type that accepts GatewaytemplateIdpProfilesOverwriteMatchingArgs, GatewaytemplateIdpProfilesOverwriteMatchingPtr and GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateIdpProfilesOverwriteMatchingPtrInput` via:
//
//	        GatewaytemplateIdpProfilesOverwriteMatchingArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateIdpProfilesOverwriteMatchingPtrInput interface {
	pulumi.Input

	ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutput() GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput
	ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Context) GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput
}

type gatewaytemplateIdpProfilesOverwriteMatchingPtrType GatewaytemplateIdpProfilesOverwriteMatchingArgs

func GatewaytemplateIdpProfilesOverwriteMatchingPtr(v *GatewaytemplateIdpProfilesOverwriteMatchingArgs) GatewaytemplateIdpProfilesOverwriteMatchingPtrInput {
	return (*gatewaytemplateIdpProfilesOverwriteMatchingPtrType)(v)
}

func (*gatewaytemplateIdpProfilesOverwriteMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (i *gatewaytemplateIdpProfilesOverwriteMatchingPtrType) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutput() GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return i.ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateIdpProfilesOverwriteMatchingPtrType) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput)
}

type GatewaytemplateIdpProfilesOverwriteMatchingOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIdpProfilesOverwriteMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingOutput) ToGatewaytemplateIdpProfilesOverwriteMatchingOutput() GatewaytemplateIdpProfilesOverwriteMatchingOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingOutput) ToGatewaytemplateIdpProfilesOverwriteMatchingOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteMatchingOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingOutput) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutput() GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return o.ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingOutput) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateIdpProfilesOverwriteMatching) *GatewaytemplateIdpProfilesOverwriteMatching {
		return &v
	}).(GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingOutput) AttackNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfilesOverwriteMatching) []string { return v.AttackNames }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingOutput) DstSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfilesOverwriteMatching) []string { return v.DstSubnets }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateIdpProfilesOverwriteMatching) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

type GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateIdpProfilesOverwriteMatching)(nil)).Elem()
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutput() GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput) ToGatewaytemplateIdpProfilesOverwriteMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput {
	return o
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput) Elem() GatewaytemplateIdpProfilesOverwriteMatchingOutput {
	return o.ApplyT(func(v *GatewaytemplateIdpProfilesOverwriteMatching) GatewaytemplateIdpProfilesOverwriteMatching {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateIdpProfilesOverwriteMatching
		return ret
	}).(GatewaytemplateIdpProfilesOverwriteMatchingOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput) AttackNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateIdpProfilesOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.AttackNames
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput) DstSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateIdpProfilesOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.DstSubnets
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateIdpProfilesOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(pulumi.StringArrayOutput)
}

type GatewaytemplateIpConfigs struct {
	Ip      string `pulumi:"ip"`
	Netmask string `pulumi:"netmask"`
	// optional list of secondary IPs in CIDR format
	SecondaryIps []string `pulumi:"secondaryIps"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
}

// GatewaytemplateIpConfigsInput is an input type that accepts GatewaytemplateIpConfigsArgs and GatewaytemplateIpConfigsOutput values.
// You can construct a concrete instance of `GatewaytemplateIpConfigsInput` via:
//
//	GatewaytemplateIpConfigsArgs{...}
type GatewaytemplateIpConfigsInput interface {
	pulumi.Input

	ToGatewaytemplateIpConfigsOutput() GatewaytemplateIpConfigsOutput
	ToGatewaytemplateIpConfigsOutputWithContext(context.Context) GatewaytemplateIpConfigsOutput
}

type GatewaytemplateIpConfigsArgs struct {
	Ip      pulumi.StringInput `pulumi:"ip"`
	Netmask pulumi.StringInput `pulumi:"netmask"`
	// optional list of secondary IPs in CIDR format
	SecondaryIps pulumi.StringArrayInput `pulumi:"secondaryIps"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GatewaytemplateIpConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIpConfigs)(nil)).Elem()
}

func (i GatewaytemplateIpConfigsArgs) ToGatewaytemplateIpConfigsOutput() GatewaytemplateIpConfigsOutput {
	return i.ToGatewaytemplateIpConfigsOutputWithContext(context.Background())
}

func (i GatewaytemplateIpConfigsArgs) ToGatewaytemplateIpConfigsOutputWithContext(ctx context.Context) GatewaytemplateIpConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIpConfigsOutput)
}

// GatewaytemplateIpConfigsMapInput is an input type that accepts GatewaytemplateIpConfigsMap and GatewaytemplateIpConfigsMapOutput values.
// You can construct a concrete instance of `GatewaytemplateIpConfigsMapInput` via:
//
//	GatewaytemplateIpConfigsMap{ "key": GatewaytemplateIpConfigsArgs{...} }
type GatewaytemplateIpConfigsMapInput interface {
	pulumi.Input

	ToGatewaytemplateIpConfigsMapOutput() GatewaytemplateIpConfigsMapOutput
	ToGatewaytemplateIpConfigsMapOutputWithContext(context.Context) GatewaytemplateIpConfigsMapOutput
}

type GatewaytemplateIpConfigsMap map[string]GatewaytemplateIpConfigsInput

func (GatewaytemplateIpConfigsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateIpConfigs)(nil)).Elem()
}

func (i GatewaytemplateIpConfigsMap) ToGatewaytemplateIpConfigsMapOutput() GatewaytemplateIpConfigsMapOutput {
	return i.ToGatewaytemplateIpConfigsMapOutputWithContext(context.Background())
}

func (i GatewaytemplateIpConfigsMap) ToGatewaytemplateIpConfigsMapOutputWithContext(ctx context.Context) GatewaytemplateIpConfigsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateIpConfigsMapOutput)
}

type GatewaytemplateIpConfigsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIpConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateIpConfigs)(nil)).Elem()
}

func (o GatewaytemplateIpConfigsOutput) ToGatewaytemplateIpConfigsOutput() GatewaytemplateIpConfigsOutput {
	return o
}

func (o GatewaytemplateIpConfigsOutput) ToGatewaytemplateIpConfigsOutputWithContext(ctx context.Context) GatewaytemplateIpConfigsOutput {
	return o
}

func (o GatewaytemplateIpConfigsOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplateIpConfigs) string { return v.Ip }).(pulumi.StringOutput)
}

func (o GatewaytemplateIpConfigsOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplateIpConfigs) string { return v.Netmask }).(pulumi.StringOutput)
}

// optional list of secondary IPs in CIDR format
func (o GatewaytemplateIpConfigsOutput) SecondaryIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateIpConfigs) []string { return v.SecondaryIps }).(pulumi.StringArrayOutput)
}

// enum: `dhcp`, `static`
func (o GatewaytemplateIpConfigsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateIpConfigs) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GatewaytemplateIpConfigsMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateIpConfigsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateIpConfigs)(nil)).Elem()
}

func (o GatewaytemplateIpConfigsMapOutput) ToGatewaytemplateIpConfigsMapOutput() GatewaytemplateIpConfigsMapOutput {
	return o
}

func (o GatewaytemplateIpConfigsMapOutput) ToGatewaytemplateIpConfigsMapOutputWithContext(ctx context.Context) GatewaytemplateIpConfigsMapOutput {
	return o
}

func (o GatewaytemplateIpConfigsMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateIpConfigsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateIpConfigs {
		return vs[0].(map[string]GatewaytemplateIpConfigs)[vs[1].(string)]
	}).(GatewaytemplateIpConfigsOutput)
}

type GatewaytemplateNetwork struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices *bool                                 `pulumi:"disallowMistServices"`
	Gateway              *string                               `pulumi:"gateway"`
	Gateway6             *string                               `pulumi:"gateway6"`
	InternalAccess       *GatewaytemplateNetworkInternalAccess `pulumi:"internalAccess"`
	// whether this network has direct internet access
	InternetAccess *GatewaytemplateNetworkInternetAccess `pulumi:"internetAccess"`
	// whether to allow clients in the network to talk to each other
	Isolation *bool  `pulumi:"isolation"`
	Name      string `pulumi:"name"`
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks []string                                 `pulumi:"routedForNetworks"`
	Subnet            string                                   `pulumi:"subnet"`
	Subnet6           *string                                  `pulumi:"subnet6"`
	Tenants           map[string]GatewaytemplateNetworkTenants `pulumi:"tenants"`
	VlanId            *string                                  `pulumi:"vlanId"`
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess map[string]GatewaytemplateNetworkVpnAccess `pulumi:"vpnAccess"`
}

// GatewaytemplateNetworkInput is an input type that accepts GatewaytemplateNetworkArgs and GatewaytemplateNetworkOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInput` via:
//
//	GatewaytemplateNetworkArgs{...}
type GatewaytemplateNetworkInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkOutput() GatewaytemplateNetworkOutput
	ToGatewaytemplateNetworkOutputWithContext(context.Context) GatewaytemplateNetworkOutput
}

type GatewaytemplateNetworkArgs struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices pulumi.BoolPtrInput                          `pulumi:"disallowMistServices"`
	Gateway              pulumi.StringPtrInput                        `pulumi:"gateway"`
	Gateway6             pulumi.StringPtrInput                        `pulumi:"gateway6"`
	InternalAccess       GatewaytemplateNetworkInternalAccessPtrInput `pulumi:"internalAccess"`
	// whether this network has direct internet access
	InternetAccess GatewaytemplateNetworkInternetAccessPtrInput `pulumi:"internetAccess"`
	// whether to allow clients in the network to talk to each other
	Isolation pulumi.BoolPtrInput `pulumi:"isolation"`
	Name      pulumi.StringInput  `pulumi:"name"`
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks pulumi.StringArrayInput               `pulumi:"routedForNetworks"`
	Subnet            pulumi.StringInput                    `pulumi:"subnet"`
	Subnet6           pulumi.StringPtrInput                 `pulumi:"subnet6"`
	Tenants           GatewaytemplateNetworkTenantsMapInput `pulumi:"tenants"`
	VlanId            pulumi.StringPtrInput                 `pulumi:"vlanId"`
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess GatewaytemplateNetworkVpnAccessMapInput `pulumi:"vpnAccess"`
}

func (GatewaytemplateNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetwork)(nil)).Elem()
}

func (i GatewaytemplateNetworkArgs) ToGatewaytemplateNetworkOutput() GatewaytemplateNetworkOutput {
	return i.ToGatewaytemplateNetworkOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkArgs) ToGatewaytemplateNetworkOutputWithContext(ctx context.Context) GatewaytemplateNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkOutput)
}

// GatewaytemplateNetworkArrayInput is an input type that accepts GatewaytemplateNetworkArray and GatewaytemplateNetworkArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkArrayInput` via:
//
//	GatewaytemplateNetworkArray{ GatewaytemplateNetworkArgs{...} }
type GatewaytemplateNetworkArrayInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkArrayOutput() GatewaytemplateNetworkArrayOutput
	ToGatewaytemplateNetworkArrayOutputWithContext(context.Context) GatewaytemplateNetworkArrayOutput
}

type GatewaytemplateNetworkArray []GatewaytemplateNetworkInput

func (GatewaytemplateNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateNetwork)(nil)).Elem()
}

func (i GatewaytemplateNetworkArray) ToGatewaytemplateNetworkArrayOutput() GatewaytemplateNetworkArrayOutput {
	return i.ToGatewaytemplateNetworkArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkArray) ToGatewaytemplateNetworkArrayOutputWithContext(ctx context.Context) GatewaytemplateNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkArrayOutput)
}

type GatewaytemplateNetworkOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetwork)(nil)).Elem()
}

func (o GatewaytemplateNetworkOutput) ToGatewaytemplateNetworkOutput() GatewaytemplateNetworkOutput {
	return o
}

func (o GatewaytemplateNetworkOutput) ToGatewaytemplateNetworkOutputWithContext(ctx context.Context) GatewaytemplateNetworkOutput {
	return o
}

// whether to disallow Mist Devices in the network
func (o GatewaytemplateNetworkOutput) DisallowMistServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *bool { return v.DisallowMistServices }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateNetworkOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkOutput) Gateway6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *string { return v.Gateway6 }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkOutput) InternalAccess() GatewaytemplateNetworkInternalAccessPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *GatewaytemplateNetworkInternalAccess { return v.InternalAccess }).(GatewaytemplateNetworkInternalAccessPtrOutput)
}

// whether this network has direct internet access
func (o GatewaytemplateNetworkOutput) InternetAccess() GatewaytemplateNetworkInternetAccessPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *GatewaytemplateNetworkInternetAccess { return v.InternetAccess }).(GatewaytemplateNetworkInternetAccessPtrOutput)
}

// whether to allow clients in the network to talk to each other
func (o GatewaytemplateNetworkOutput) Isolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *bool { return v.Isolation }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) string { return v.Name }).(pulumi.StringOutput)
}

// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
func (o GatewaytemplateNetworkOutput) RoutedForNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) []string { return v.RoutedForNetworks }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateNetworkOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) string { return v.Subnet }).(pulumi.StringOutput)
}

func (o GatewaytemplateNetworkOutput) Subnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *string { return v.Subnet6 }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkOutput) Tenants() GatewaytemplateNetworkTenantsMapOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) map[string]GatewaytemplateNetworkTenants { return v.Tenants }).(GatewaytemplateNetworkTenantsMapOutput)
}

func (o GatewaytemplateNetworkOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

// Property key is the VPN name. Whether this network can be accessed from vpn
func (o GatewaytemplateNetworkOutput) VpnAccess() GatewaytemplateNetworkVpnAccessMapOutput {
	return o.ApplyT(func(v GatewaytemplateNetwork) map[string]GatewaytemplateNetworkVpnAccess { return v.VpnAccess }).(GatewaytemplateNetworkVpnAccessMapOutput)
}

type GatewaytemplateNetworkArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateNetwork)(nil)).Elem()
}

func (o GatewaytemplateNetworkArrayOutput) ToGatewaytemplateNetworkArrayOutput() GatewaytemplateNetworkArrayOutput {
	return o
}

func (o GatewaytemplateNetworkArrayOutput) ToGatewaytemplateNetworkArrayOutputWithContext(ctx context.Context) GatewaytemplateNetworkArrayOutput {
	return o
}

func (o GatewaytemplateNetworkArrayOutput) Index(i pulumi.IntInput) GatewaytemplateNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateNetwork {
		return vs[0].([]GatewaytemplateNetwork)[vs[1].(int)]
	}).(GatewaytemplateNetworkOutput)
}

type GatewaytemplateNetworkInternalAccess struct {
	Enabled *bool `pulumi:"enabled"`
}

// GatewaytemplateNetworkInternalAccessInput is an input type that accepts GatewaytemplateNetworkInternalAccessArgs and GatewaytemplateNetworkInternalAccessOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternalAccessInput` via:
//
//	GatewaytemplateNetworkInternalAccessArgs{...}
type GatewaytemplateNetworkInternalAccessInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternalAccessOutput() GatewaytemplateNetworkInternalAccessOutput
	ToGatewaytemplateNetworkInternalAccessOutputWithContext(context.Context) GatewaytemplateNetworkInternalAccessOutput
}

type GatewaytemplateNetworkInternalAccessArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GatewaytemplateNetworkInternalAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternalAccess)(nil)).Elem()
}

func (i GatewaytemplateNetworkInternalAccessArgs) ToGatewaytemplateNetworkInternalAccessOutput() GatewaytemplateNetworkInternalAccessOutput {
	return i.ToGatewaytemplateNetworkInternalAccessOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternalAccessArgs) ToGatewaytemplateNetworkInternalAccessOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternalAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternalAccessOutput)
}

func (i GatewaytemplateNetworkInternalAccessArgs) ToGatewaytemplateNetworkInternalAccessPtrOutput() GatewaytemplateNetworkInternalAccessPtrOutput {
	return i.ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternalAccessArgs) ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternalAccessOutput).ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(ctx)
}

// GatewaytemplateNetworkInternalAccessPtrInput is an input type that accepts GatewaytemplateNetworkInternalAccessArgs, GatewaytemplateNetworkInternalAccessPtr and GatewaytemplateNetworkInternalAccessPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternalAccessPtrInput` via:
//
//	        GatewaytemplateNetworkInternalAccessArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateNetworkInternalAccessPtrInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternalAccessPtrOutput() GatewaytemplateNetworkInternalAccessPtrOutput
	ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(context.Context) GatewaytemplateNetworkInternalAccessPtrOutput
}

type gatewaytemplateNetworkInternalAccessPtrType GatewaytemplateNetworkInternalAccessArgs

func GatewaytemplateNetworkInternalAccessPtr(v *GatewaytemplateNetworkInternalAccessArgs) GatewaytemplateNetworkInternalAccessPtrInput {
	return (*gatewaytemplateNetworkInternalAccessPtrType)(v)
}

func (*gatewaytemplateNetworkInternalAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateNetworkInternalAccess)(nil)).Elem()
}

func (i *gatewaytemplateNetworkInternalAccessPtrType) ToGatewaytemplateNetworkInternalAccessPtrOutput() GatewaytemplateNetworkInternalAccessPtrOutput {
	return i.ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateNetworkInternalAccessPtrType) ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternalAccessPtrOutput)
}

type GatewaytemplateNetworkInternalAccessOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternalAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternalAccess)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternalAccessOutput) ToGatewaytemplateNetworkInternalAccessOutput() GatewaytemplateNetworkInternalAccessOutput {
	return o
}

func (o GatewaytemplateNetworkInternalAccessOutput) ToGatewaytemplateNetworkInternalAccessOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternalAccessOutput {
	return o
}

func (o GatewaytemplateNetworkInternalAccessOutput) ToGatewaytemplateNetworkInternalAccessPtrOutput() GatewaytemplateNetworkInternalAccessPtrOutput {
	return o.ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateNetworkInternalAccessOutput) ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternalAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateNetworkInternalAccess) *GatewaytemplateNetworkInternalAccess {
		return &v
	}).(GatewaytemplateNetworkInternalAccessPtrOutput)
}

func (o GatewaytemplateNetworkInternalAccessOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternalAccess) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GatewaytemplateNetworkInternalAccessPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternalAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateNetworkInternalAccess)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternalAccessPtrOutput) ToGatewaytemplateNetworkInternalAccessPtrOutput() GatewaytemplateNetworkInternalAccessPtrOutput {
	return o
}

func (o GatewaytemplateNetworkInternalAccessPtrOutput) ToGatewaytemplateNetworkInternalAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternalAccessPtrOutput {
	return o
}

func (o GatewaytemplateNetworkInternalAccessPtrOutput) Elem() GatewaytemplateNetworkInternalAccessOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternalAccess) GatewaytemplateNetworkInternalAccess {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateNetworkInternalAccess
		return ret
	}).(GatewaytemplateNetworkInternalAccessOutput)
}

func (o GatewaytemplateNetworkInternalAccessPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternalAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GatewaytemplateNetworkInternetAccess struct {
	CreateSimpleServicePolicy *bool `pulumi:"createSimpleServicePolicy"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat map[string]GatewaytemplateNetworkInternetAccessDestinationNat `pulumi:"destinationNat"`
	Enabled        *bool                                                         `pulumi:"enabled"`
	// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
	Restricted *bool `pulumi:"restricted"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat map[string]GatewaytemplateNetworkInternetAccessStaticNat `pulumi:"staticNat"`
}

// GatewaytemplateNetworkInternetAccessInput is an input type that accepts GatewaytemplateNetworkInternetAccessArgs and GatewaytemplateNetworkInternetAccessOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternetAccessInput` via:
//
//	GatewaytemplateNetworkInternetAccessArgs{...}
type GatewaytemplateNetworkInternetAccessInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternetAccessOutput() GatewaytemplateNetworkInternetAccessOutput
	ToGatewaytemplateNetworkInternetAccessOutputWithContext(context.Context) GatewaytemplateNetworkInternetAccessOutput
}

type GatewaytemplateNetworkInternetAccessArgs struct {
	CreateSimpleServicePolicy pulumi.BoolPtrInput `pulumi:"createSimpleServicePolicy"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat GatewaytemplateNetworkInternetAccessDestinationNatMapInput `pulumi:"destinationNat"`
	Enabled        pulumi.BoolPtrInput                                        `pulumi:"enabled"`
	// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
	Restricted pulumi.BoolPtrInput `pulumi:"restricted"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat GatewaytemplateNetworkInternetAccessStaticNatMapInput `pulumi:"staticNat"`
}

func (GatewaytemplateNetworkInternetAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternetAccess)(nil)).Elem()
}

func (i GatewaytemplateNetworkInternetAccessArgs) ToGatewaytemplateNetworkInternetAccessOutput() GatewaytemplateNetworkInternetAccessOutput {
	return i.ToGatewaytemplateNetworkInternetAccessOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternetAccessArgs) ToGatewaytemplateNetworkInternetAccessOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternetAccessOutput)
}

func (i GatewaytemplateNetworkInternetAccessArgs) ToGatewaytemplateNetworkInternetAccessPtrOutput() GatewaytemplateNetworkInternetAccessPtrOutput {
	return i.ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternetAccessArgs) ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternetAccessOutput).ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(ctx)
}

// GatewaytemplateNetworkInternetAccessPtrInput is an input type that accepts GatewaytemplateNetworkInternetAccessArgs, GatewaytemplateNetworkInternetAccessPtr and GatewaytemplateNetworkInternetAccessPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternetAccessPtrInput` via:
//
//	        GatewaytemplateNetworkInternetAccessArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateNetworkInternetAccessPtrInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternetAccessPtrOutput() GatewaytemplateNetworkInternetAccessPtrOutput
	ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(context.Context) GatewaytemplateNetworkInternetAccessPtrOutput
}

type gatewaytemplateNetworkInternetAccessPtrType GatewaytemplateNetworkInternetAccessArgs

func GatewaytemplateNetworkInternetAccessPtr(v *GatewaytemplateNetworkInternetAccessArgs) GatewaytemplateNetworkInternetAccessPtrInput {
	return (*gatewaytemplateNetworkInternetAccessPtrType)(v)
}

func (*gatewaytemplateNetworkInternetAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateNetworkInternetAccess)(nil)).Elem()
}

func (i *gatewaytemplateNetworkInternetAccessPtrType) ToGatewaytemplateNetworkInternetAccessPtrOutput() GatewaytemplateNetworkInternetAccessPtrOutput {
	return i.ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateNetworkInternetAccessPtrType) ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternetAccessPtrOutput)
}

type GatewaytemplateNetworkInternetAccessOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternetAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternetAccess)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternetAccessOutput) ToGatewaytemplateNetworkInternetAccessOutput() GatewaytemplateNetworkInternetAccessOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessOutput) ToGatewaytemplateNetworkInternetAccessOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessOutput) ToGatewaytemplateNetworkInternetAccessPtrOutput() GatewaytemplateNetworkInternetAccessPtrOutput {
	return o.ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateNetworkInternetAccessOutput) ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateNetworkInternetAccess) *GatewaytemplateNetworkInternetAccess {
		return &v
	}).(GatewaytemplateNetworkInternetAccessPtrOutput)
}

func (o GatewaytemplateNetworkInternetAccessOutput) CreateSimpleServicePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccess) *bool { return v.CreateSimpleServicePolicy }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o GatewaytemplateNetworkInternetAccessOutput) DestinationNat() GatewaytemplateNetworkInternetAccessDestinationNatMapOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccess) map[string]GatewaytemplateNetworkInternetAccessDestinationNat {
		return v.DestinationNat
	}).(GatewaytemplateNetworkInternetAccessDestinationNatMapOutput)
}

func (o GatewaytemplateNetworkInternetAccessOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccess) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
func (o GatewaytemplateNetworkInternetAccessOutput) Restricted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccess) *bool { return v.Restricted }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o GatewaytemplateNetworkInternetAccessOutput) StaticNat() GatewaytemplateNetworkInternetAccessStaticNatMapOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccess) map[string]GatewaytemplateNetworkInternetAccessStaticNat {
		return v.StaticNat
	}).(GatewaytemplateNetworkInternetAccessStaticNatMapOutput)
}

type GatewaytemplateNetworkInternetAccessPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternetAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateNetworkInternetAccess)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternetAccessPtrOutput) ToGatewaytemplateNetworkInternetAccessPtrOutput() GatewaytemplateNetworkInternetAccessPtrOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessPtrOutput) ToGatewaytemplateNetworkInternetAccessPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessPtrOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessPtrOutput) Elem() GatewaytemplateNetworkInternetAccessOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternetAccess) GatewaytemplateNetworkInternetAccess {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateNetworkInternetAccess
		return ret
	}).(GatewaytemplateNetworkInternetAccessOutput)
}

func (o GatewaytemplateNetworkInternetAccessPtrOutput) CreateSimpleServicePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSimpleServicePolicy
	}).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o GatewaytemplateNetworkInternetAccessPtrOutput) DestinationNat() GatewaytemplateNetworkInternetAccessDestinationNatMapOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternetAccess) map[string]GatewaytemplateNetworkInternetAccessDestinationNat {
		if v == nil {
			return nil
		}
		return v.DestinationNat
	}).(GatewaytemplateNetworkInternetAccessDestinationNatMapOutput)
}

func (o GatewaytemplateNetworkInternetAccessPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
func (o GatewaytemplateNetworkInternetAccessPtrOutput) Restricted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Restricted
	}).(pulumi.BoolPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o GatewaytemplateNetworkInternetAccessPtrOutput) StaticNat() GatewaytemplateNetworkInternetAccessStaticNatMapOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkInternetAccess) map[string]GatewaytemplateNetworkInternetAccessStaticNat {
		if v == nil {
			return nil
		}
		return v.StaticNat
	}).(GatewaytemplateNetworkInternetAccessStaticNatMapOutput)
}

type GatewaytemplateNetworkInternetAccessDestinationNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	Port       *int    `pulumi:"port"`
}

// GatewaytemplateNetworkInternetAccessDestinationNatInput is an input type that accepts GatewaytemplateNetworkInternetAccessDestinationNatArgs and GatewaytemplateNetworkInternetAccessDestinationNatOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternetAccessDestinationNatInput` via:
//
//	GatewaytemplateNetworkInternetAccessDestinationNatArgs{...}
type GatewaytemplateNetworkInternetAccessDestinationNatInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternetAccessDestinationNatOutput() GatewaytemplateNetworkInternetAccessDestinationNatOutput
	ToGatewaytemplateNetworkInternetAccessDestinationNatOutputWithContext(context.Context) GatewaytemplateNetworkInternetAccessDestinationNatOutput
}

type GatewaytemplateNetworkInternetAccessDestinationNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
}

func (GatewaytemplateNetworkInternetAccessDestinationNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkInternetAccessDestinationNatArgs) ToGatewaytemplateNetworkInternetAccessDestinationNatOutput() GatewaytemplateNetworkInternetAccessDestinationNatOutput {
	return i.ToGatewaytemplateNetworkInternetAccessDestinationNatOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternetAccessDestinationNatArgs) ToGatewaytemplateNetworkInternetAccessDestinationNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessDestinationNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternetAccessDestinationNatOutput)
}

// GatewaytemplateNetworkInternetAccessDestinationNatMapInput is an input type that accepts GatewaytemplateNetworkInternetAccessDestinationNatMap and GatewaytemplateNetworkInternetAccessDestinationNatMapOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternetAccessDestinationNatMapInput` via:
//
//	GatewaytemplateNetworkInternetAccessDestinationNatMap{ "key": GatewaytemplateNetworkInternetAccessDestinationNatArgs{...} }
type GatewaytemplateNetworkInternetAccessDestinationNatMapInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternetAccessDestinationNatMapOutput() GatewaytemplateNetworkInternetAccessDestinationNatMapOutput
	ToGatewaytemplateNetworkInternetAccessDestinationNatMapOutputWithContext(context.Context) GatewaytemplateNetworkInternetAccessDestinationNatMapOutput
}

type GatewaytemplateNetworkInternetAccessDestinationNatMap map[string]GatewaytemplateNetworkInternetAccessDestinationNatInput

func (GatewaytemplateNetworkInternetAccessDestinationNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkInternetAccessDestinationNatMap) ToGatewaytemplateNetworkInternetAccessDestinationNatMapOutput() GatewaytemplateNetworkInternetAccessDestinationNatMapOutput {
	return i.ToGatewaytemplateNetworkInternetAccessDestinationNatMapOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternetAccessDestinationNatMap) ToGatewaytemplateNetworkInternetAccessDestinationNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessDestinationNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternetAccessDestinationNatMapOutput)
}

type GatewaytemplateNetworkInternetAccessDestinationNatOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternetAccessDestinationNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatOutput) ToGatewaytemplateNetworkInternetAccessDestinationNatOutput() GatewaytemplateNetworkInternetAccessDestinationNatOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatOutput) ToGatewaytemplateNetworkInternetAccessDestinationNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessDestinationNatOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccessDestinationNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccessDestinationNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccessDestinationNat) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GatewaytemplateNetworkInternetAccessDestinationNatMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternetAccessDestinationNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatMapOutput) ToGatewaytemplateNetworkInternetAccessDestinationNatMapOutput() GatewaytemplateNetworkInternetAccessDestinationNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatMapOutput) ToGatewaytemplateNetworkInternetAccessDestinationNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessDestinationNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessDestinationNatMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateNetworkInternetAccessDestinationNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateNetworkInternetAccessDestinationNat {
		return vs[0].(map[string]GatewaytemplateNetworkInternetAccessDestinationNat)[vs[1].(string)]
	}).(GatewaytemplateNetworkInternetAccessDestinationNatOutput)
}

type GatewaytemplateNetworkInternetAccessStaticNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName *string `pulumi:"wanName"`
}

// GatewaytemplateNetworkInternetAccessStaticNatInput is an input type that accepts GatewaytemplateNetworkInternetAccessStaticNatArgs and GatewaytemplateNetworkInternetAccessStaticNatOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternetAccessStaticNatInput` via:
//
//	GatewaytemplateNetworkInternetAccessStaticNatArgs{...}
type GatewaytemplateNetworkInternetAccessStaticNatInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternetAccessStaticNatOutput() GatewaytemplateNetworkInternetAccessStaticNatOutput
	ToGatewaytemplateNetworkInternetAccessStaticNatOutputWithContext(context.Context) GatewaytemplateNetworkInternetAccessStaticNatOutput
}

type GatewaytemplateNetworkInternetAccessStaticNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (GatewaytemplateNetworkInternetAccessStaticNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkInternetAccessStaticNatArgs) ToGatewaytemplateNetworkInternetAccessStaticNatOutput() GatewaytemplateNetworkInternetAccessStaticNatOutput {
	return i.ToGatewaytemplateNetworkInternetAccessStaticNatOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternetAccessStaticNatArgs) ToGatewaytemplateNetworkInternetAccessStaticNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessStaticNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternetAccessStaticNatOutput)
}

// GatewaytemplateNetworkInternetAccessStaticNatMapInput is an input type that accepts GatewaytemplateNetworkInternetAccessStaticNatMap and GatewaytemplateNetworkInternetAccessStaticNatMapOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkInternetAccessStaticNatMapInput` via:
//
//	GatewaytemplateNetworkInternetAccessStaticNatMap{ "key": GatewaytemplateNetworkInternetAccessStaticNatArgs{...} }
type GatewaytemplateNetworkInternetAccessStaticNatMapInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkInternetAccessStaticNatMapOutput() GatewaytemplateNetworkInternetAccessStaticNatMapOutput
	ToGatewaytemplateNetworkInternetAccessStaticNatMapOutputWithContext(context.Context) GatewaytemplateNetworkInternetAccessStaticNatMapOutput
}

type GatewaytemplateNetworkInternetAccessStaticNatMap map[string]GatewaytemplateNetworkInternetAccessStaticNatInput

func (GatewaytemplateNetworkInternetAccessStaticNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkInternetAccessStaticNatMap) ToGatewaytemplateNetworkInternetAccessStaticNatMapOutput() GatewaytemplateNetworkInternetAccessStaticNatMapOutput {
	return i.ToGatewaytemplateNetworkInternetAccessStaticNatMapOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkInternetAccessStaticNatMap) ToGatewaytemplateNetworkInternetAccessStaticNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessStaticNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkInternetAccessStaticNatMapOutput)
}

type GatewaytemplateNetworkInternetAccessStaticNatOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternetAccessStaticNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternetAccessStaticNatOutput) ToGatewaytemplateNetworkInternetAccessStaticNatOutput() GatewaytemplateNetworkInternetAccessStaticNatOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessStaticNatOutput) ToGatewaytemplateNetworkInternetAccessStaticNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessStaticNatOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessStaticNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccessStaticNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkInternetAccessStaticNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccessStaticNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not set, we configure the nat policies against all WAN ports for simplicity
func (o GatewaytemplateNetworkInternetAccessStaticNatOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkInternetAccessStaticNat) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type GatewaytemplateNetworkInternetAccessStaticNatMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkInternetAccessStaticNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkInternetAccessStaticNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkInternetAccessStaticNatMapOutput) ToGatewaytemplateNetworkInternetAccessStaticNatMapOutput() GatewaytemplateNetworkInternetAccessStaticNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessStaticNatMapOutput) ToGatewaytemplateNetworkInternetAccessStaticNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkInternetAccessStaticNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkInternetAccessStaticNatMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateNetworkInternetAccessStaticNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateNetworkInternetAccessStaticNat {
		return vs[0].(map[string]GatewaytemplateNetworkInternetAccessStaticNat)[vs[1].(string)]
	}).(GatewaytemplateNetworkInternetAccessStaticNatOutput)
}

type GatewaytemplateNetworkTenants struct {
	Addresses []string `pulumi:"addresses"`
}

// GatewaytemplateNetworkTenantsInput is an input type that accepts GatewaytemplateNetworkTenantsArgs and GatewaytemplateNetworkTenantsOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkTenantsInput` via:
//
//	GatewaytemplateNetworkTenantsArgs{...}
type GatewaytemplateNetworkTenantsInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkTenantsOutput() GatewaytemplateNetworkTenantsOutput
	ToGatewaytemplateNetworkTenantsOutputWithContext(context.Context) GatewaytemplateNetworkTenantsOutput
}

type GatewaytemplateNetworkTenantsArgs struct {
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
}

func (GatewaytemplateNetworkTenantsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkTenants)(nil)).Elem()
}

func (i GatewaytemplateNetworkTenantsArgs) ToGatewaytemplateNetworkTenantsOutput() GatewaytemplateNetworkTenantsOutput {
	return i.ToGatewaytemplateNetworkTenantsOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkTenantsArgs) ToGatewaytemplateNetworkTenantsOutputWithContext(ctx context.Context) GatewaytemplateNetworkTenantsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkTenantsOutput)
}

// GatewaytemplateNetworkTenantsMapInput is an input type that accepts GatewaytemplateNetworkTenantsMap and GatewaytemplateNetworkTenantsMapOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkTenantsMapInput` via:
//
//	GatewaytemplateNetworkTenantsMap{ "key": GatewaytemplateNetworkTenantsArgs{...} }
type GatewaytemplateNetworkTenantsMapInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkTenantsMapOutput() GatewaytemplateNetworkTenantsMapOutput
	ToGatewaytemplateNetworkTenantsMapOutputWithContext(context.Context) GatewaytemplateNetworkTenantsMapOutput
}

type GatewaytemplateNetworkTenantsMap map[string]GatewaytemplateNetworkTenantsInput

func (GatewaytemplateNetworkTenantsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkTenants)(nil)).Elem()
}

func (i GatewaytemplateNetworkTenantsMap) ToGatewaytemplateNetworkTenantsMapOutput() GatewaytemplateNetworkTenantsMapOutput {
	return i.ToGatewaytemplateNetworkTenantsMapOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkTenantsMap) ToGatewaytemplateNetworkTenantsMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkTenantsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkTenantsMapOutput)
}

type GatewaytemplateNetworkTenantsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkTenantsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkTenants)(nil)).Elem()
}

func (o GatewaytemplateNetworkTenantsOutput) ToGatewaytemplateNetworkTenantsOutput() GatewaytemplateNetworkTenantsOutput {
	return o
}

func (o GatewaytemplateNetworkTenantsOutput) ToGatewaytemplateNetworkTenantsOutputWithContext(ctx context.Context) GatewaytemplateNetworkTenantsOutput {
	return o
}

func (o GatewaytemplateNetworkTenantsOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkTenants) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

type GatewaytemplateNetworkTenantsMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkTenantsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkTenants)(nil)).Elem()
}

func (o GatewaytemplateNetworkTenantsMapOutput) ToGatewaytemplateNetworkTenantsMapOutput() GatewaytemplateNetworkTenantsMapOutput {
	return o
}

func (o GatewaytemplateNetworkTenantsMapOutput) ToGatewaytemplateNetworkTenantsMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkTenantsMapOutput {
	return o
}

func (o GatewaytemplateNetworkTenantsMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateNetworkTenantsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateNetworkTenants {
		return vs[0].(map[string]GatewaytemplateNetworkTenants)[vs[1].(string)]
	}).(GatewaytemplateNetworkTenantsOutput)
}

type GatewaytemplateNetworkVpnAccess struct {
	// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
	AdvertisedSubnet *string `pulumi:"advertisedSubnet"`
	// whether to allow ping from vpn into this routed network
	AllowPing *bool `pulumi:"allowPing"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat map[string]GatewaytemplateNetworkVpnAccessDestinationNat `pulumi:"destinationNat"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
	NatPool *string `pulumi:"natPool"`
	// toward LAN-side BGP peers
	NoReadvertiseToLanBgp *bool `pulumi:"noReadvertiseToLanBgp"`
	// toward LAN-side OSPF peers
	NoReadvertiseToLanOspf *bool `pulumi:"noReadvertiseToLanOspf"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	NoReadvertiseToOverlay *bool `pulumi:"noReadvertiseToOverlay"`
	// by default, the routes are only readvertised toward the same vrf on spoke
	// to allow it to be leaked to other vrfs
	OtherVrfs []string `pulumi:"otherVrfs"`
	// whether this network is routable
	Routed *bool `pulumi:"routed"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
	SourceNat *GatewaytemplateNetworkVpnAccessSourceNat `pulumi:"sourceNat"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat map[string]GatewaytemplateNetworkVpnAccessStaticNat `pulumi:"staticNat"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	SummarizedSubnet *string `pulumi:"summarizedSubnet"`
	// toward LAN-side BGP peers
	SummarizedSubnetToLanBgp *string `pulumi:"summarizedSubnetToLanBgp"`
	// toward LAN-side OSPF peers
	SummarizedSubnetToLanOspf *string `pulumi:"summarizedSubnetToLanOspf"`
}

// GatewaytemplateNetworkVpnAccessInput is an input type that accepts GatewaytemplateNetworkVpnAccessArgs and GatewaytemplateNetworkVpnAccessOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessInput` via:
//
//	GatewaytemplateNetworkVpnAccessArgs{...}
type GatewaytemplateNetworkVpnAccessInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessOutput() GatewaytemplateNetworkVpnAccessOutput
	ToGatewaytemplateNetworkVpnAccessOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessOutput
}

type GatewaytemplateNetworkVpnAccessArgs struct {
	// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
	AdvertisedSubnet pulumi.StringPtrInput `pulumi:"advertisedSubnet"`
	// whether to allow ping from vpn into this routed network
	AllowPing pulumi.BoolPtrInput `pulumi:"allowPing"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat GatewaytemplateNetworkVpnAccessDestinationNatMapInput `pulumi:"destinationNat"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
	NatPool pulumi.StringPtrInput `pulumi:"natPool"`
	// toward LAN-side BGP peers
	NoReadvertiseToLanBgp pulumi.BoolPtrInput `pulumi:"noReadvertiseToLanBgp"`
	// toward LAN-side OSPF peers
	NoReadvertiseToLanOspf pulumi.BoolPtrInput `pulumi:"noReadvertiseToLanOspf"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	NoReadvertiseToOverlay pulumi.BoolPtrInput `pulumi:"noReadvertiseToOverlay"`
	// by default, the routes are only readvertised toward the same vrf on spoke
	// to allow it to be leaked to other vrfs
	OtherVrfs pulumi.StringArrayInput `pulumi:"otherVrfs"`
	// whether this network is routable
	Routed pulumi.BoolPtrInput `pulumi:"routed"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
	SourceNat GatewaytemplateNetworkVpnAccessSourceNatPtrInput `pulumi:"sourceNat"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat GatewaytemplateNetworkVpnAccessStaticNatMapInput `pulumi:"staticNat"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	SummarizedSubnet pulumi.StringPtrInput `pulumi:"summarizedSubnet"`
	// toward LAN-side BGP peers
	SummarizedSubnetToLanBgp pulumi.StringPtrInput `pulumi:"summarizedSubnetToLanBgp"`
	// toward LAN-side OSPF peers
	SummarizedSubnetToLanOspf pulumi.StringPtrInput `pulumi:"summarizedSubnetToLanOspf"`
}

func (GatewaytemplateNetworkVpnAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccess)(nil)).Elem()
}

func (i GatewaytemplateNetworkVpnAccessArgs) ToGatewaytemplateNetworkVpnAccessOutput() GatewaytemplateNetworkVpnAccessOutput {
	return i.ToGatewaytemplateNetworkVpnAccessOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessArgs) ToGatewaytemplateNetworkVpnAccessOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessOutput)
}

// GatewaytemplateNetworkVpnAccessMapInput is an input type that accepts GatewaytemplateNetworkVpnAccessMap and GatewaytemplateNetworkVpnAccessMapOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessMapInput` via:
//
//	GatewaytemplateNetworkVpnAccessMap{ "key": GatewaytemplateNetworkVpnAccessArgs{...} }
type GatewaytemplateNetworkVpnAccessMapInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessMapOutput() GatewaytemplateNetworkVpnAccessMapOutput
	ToGatewaytemplateNetworkVpnAccessMapOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessMapOutput
}

type GatewaytemplateNetworkVpnAccessMap map[string]GatewaytemplateNetworkVpnAccessInput

func (GatewaytemplateNetworkVpnAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkVpnAccess)(nil)).Elem()
}

func (i GatewaytemplateNetworkVpnAccessMap) ToGatewaytemplateNetworkVpnAccessMapOutput() GatewaytemplateNetworkVpnAccessMapOutput {
	return i.ToGatewaytemplateNetworkVpnAccessMapOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessMap) ToGatewaytemplateNetworkVpnAccessMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessMapOutput)
}

type GatewaytemplateNetworkVpnAccessOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccess)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessOutput) ToGatewaytemplateNetworkVpnAccessOutput() GatewaytemplateNetworkVpnAccessOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessOutput) ToGatewaytemplateNetworkVpnAccessOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessOutput {
	return o
}

// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
func (o GatewaytemplateNetworkVpnAccessOutput) AdvertisedSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *string { return v.AdvertisedSubnet }).(pulumi.StringPtrOutput)
}

// whether to allow ping from vpn into this routed network
func (o GatewaytemplateNetworkVpnAccessOutput) AllowPing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *bool { return v.AllowPing }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o GatewaytemplateNetworkVpnAccessOutput) DestinationNat() GatewaytemplateNetworkVpnAccessDestinationNatMapOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) map[string]GatewaytemplateNetworkVpnAccessDestinationNat {
		return v.DestinationNat
	}).(GatewaytemplateNetworkVpnAccessDestinationNatMapOutput)
}

// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
func (o GatewaytemplateNetworkVpnAccessOutput) NatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *string { return v.NatPool }).(pulumi.StringPtrOutput)
}

// toward LAN-side BGP peers
func (o GatewaytemplateNetworkVpnAccessOutput) NoReadvertiseToLanBgp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *bool { return v.NoReadvertiseToLanBgp }).(pulumi.BoolPtrOutput)
}

// toward LAN-side OSPF peers
func (o GatewaytemplateNetworkVpnAccessOutput) NoReadvertiseToLanOspf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *bool { return v.NoReadvertiseToLanOspf }).(pulumi.BoolPtrOutput)
}

// toward overlay
// how HUB should deal with routes it received from Spokes
func (o GatewaytemplateNetworkVpnAccessOutput) NoReadvertiseToOverlay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *bool { return v.NoReadvertiseToOverlay }).(pulumi.BoolPtrOutput)
}

// by default, the routes are only readvertised toward the same vrf on spoke
// to allow it to be leaked to other vrfs
func (o GatewaytemplateNetworkVpnAccessOutput) OtherVrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) []string { return v.OtherVrfs }).(pulumi.StringArrayOutput)
}

// whether this network is routable
func (o GatewaytemplateNetworkVpnAccessOutput) Routed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *bool { return v.Routed }).(pulumi.BoolPtrOutput)
}

// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
func (o GatewaytemplateNetworkVpnAccessOutput) SourceNat() GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *GatewaytemplateNetworkVpnAccessSourceNat { return v.SourceNat }).(GatewaytemplateNetworkVpnAccessSourceNatPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o GatewaytemplateNetworkVpnAccessOutput) StaticNat() GatewaytemplateNetworkVpnAccessStaticNatMapOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) map[string]GatewaytemplateNetworkVpnAccessStaticNat {
		return v.StaticNat
	}).(GatewaytemplateNetworkVpnAccessStaticNatMapOutput)
}

// toward overlay
// how HUB should deal with routes it received from Spokes
func (o GatewaytemplateNetworkVpnAccessOutput) SummarizedSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *string { return v.SummarizedSubnet }).(pulumi.StringPtrOutput)
}

// toward LAN-side BGP peers
func (o GatewaytemplateNetworkVpnAccessOutput) SummarizedSubnetToLanBgp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *string { return v.SummarizedSubnetToLanBgp }).(pulumi.StringPtrOutput)
}

// toward LAN-side OSPF peers
func (o GatewaytemplateNetworkVpnAccessOutput) SummarizedSubnetToLanOspf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccess) *string { return v.SummarizedSubnetToLanOspf }).(pulumi.StringPtrOutput)
}

type GatewaytemplateNetworkVpnAccessMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkVpnAccess)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessMapOutput) ToGatewaytemplateNetworkVpnAccessMapOutput() GatewaytemplateNetworkVpnAccessMapOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessMapOutput) ToGatewaytemplateNetworkVpnAccessMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessMapOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateNetworkVpnAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateNetworkVpnAccess {
		return vs[0].(map[string]GatewaytemplateNetworkVpnAccess)[vs[1].(string)]
	}).(GatewaytemplateNetworkVpnAccessOutput)
}

type GatewaytemplateNetworkVpnAccessDestinationNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	Port       *int    `pulumi:"port"`
}

// GatewaytemplateNetworkVpnAccessDestinationNatInput is an input type that accepts GatewaytemplateNetworkVpnAccessDestinationNatArgs and GatewaytemplateNetworkVpnAccessDestinationNatOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessDestinationNatInput` via:
//
//	GatewaytemplateNetworkVpnAccessDestinationNatArgs{...}
type GatewaytemplateNetworkVpnAccessDestinationNatInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessDestinationNatOutput() GatewaytemplateNetworkVpnAccessDestinationNatOutput
	ToGatewaytemplateNetworkVpnAccessDestinationNatOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessDestinationNatOutput
}

type GatewaytemplateNetworkVpnAccessDestinationNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
}

func (GatewaytemplateNetworkVpnAccessDestinationNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkVpnAccessDestinationNatArgs) ToGatewaytemplateNetworkVpnAccessDestinationNatOutput() GatewaytemplateNetworkVpnAccessDestinationNatOutput {
	return i.ToGatewaytemplateNetworkVpnAccessDestinationNatOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessDestinationNatArgs) ToGatewaytemplateNetworkVpnAccessDestinationNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessDestinationNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessDestinationNatOutput)
}

// GatewaytemplateNetworkVpnAccessDestinationNatMapInput is an input type that accepts GatewaytemplateNetworkVpnAccessDestinationNatMap and GatewaytemplateNetworkVpnAccessDestinationNatMapOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessDestinationNatMapInput` via:
//
//	GatewaytemplateNetworkVpnAccessDestinationNatMap{ "key": GatewaytemplateNetworkVpnAccessDestinationNatArgs{...} }
type GatewaytemplateNetworkVpnAccessDestinationNatMapInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessDestinationNatMapOutput() GatewaytemplateNetworkVpnAccessDestinationNatMapOutput
	ToGatewaytemplateNetworkVpnAccessDestinationNatMapOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessDestinationNatMapOutput
}

type GatewaytemplateNetworkVpnAccessDestinationNatMap map[string]GatewaytemplateNetworkVpnAccessDestinationNatInput

func (GatewaytemplateNetworkVpnAccessDestinationNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkVpnAccessDestinationNatMap) ToGatewaytemplateNetworkVpnAccessDestinationNatMapOutput() GatewaytemplateNetworkVpnAccessDestinationNatMapOutput {
	return i.ToGatewaytemplateNetworkVpnAccessDestinationNatMapOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessDestinationNatMap) ToGatewaytemplateNetworkVpnAccessDestinationNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessDestinationNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessDestinationNatMapOutput)
}

type GatewaytemplateNetworkVpnAccessDestinationNatOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessDestinationNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatOutput) ToGatewaytemplateNetworkVpnAccessDestinationNatOutput() GatewaytemplateNetworkVpnAccessDestinationNatOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatOutput) ToGatewaytemplateNetworkVpnAccessDestinationNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessDestinationNatOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccessDestinationNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccessDestinationNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccessDestinationNat) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GatewaytemplateNetworkVpnAccessDestinationNatMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessDestinationNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatMapOutput) ToGatewaytemplateNetworkVpnAccessDestinationNatMapOutput() GatewaytemplateNetworkVpnAccessDestinationNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatMapOutput) ToGatewaytemplateNetworkVpnAccessDestinationNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessDestinationNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessDestinationNatMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateNetworkVpnAccessDestinationNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateNetworkVpnAccessDestinationNat {
		return vs[0].(map[string]GatewaytemplateNetworkVpnAccessDestinationNat)[vs[1].(string)]
	}).(GatewaytemplateNetworkVpnAccessDestinationNatOutput)
}

type GatewaytemplateNetworkVpnAccessSourceNat struct {
	ExternalIp *string `pulumi:"externalIp"`
}

// GatewaytemplateNetworkVpnAccessSourceNatInput is an input type that accepts GatewaytemplateNetworkVpnAccessSourceNatArgs and GatewaytemplateNetworkVpnAccessSourceNatOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessSourceNatInput` via:
//
//	GatewaytemplateNetworkVpnAccessSourceNatArgs{...}
type GatewaytemplateNetworkVpnAccessSourceNatInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessSourceNatOutput() GatewaytemplateNetworkVpnAccessSourceNatOutput
	ToGatewaytemplateNetworkVpnAccessSourceNatOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessSourceNatOutput
}

type GatewaytemplateNetworkVpnAccessSourceNatArgs struct {
	ExternalIp pulumi.StringPtrInput `pulumi:"externalIp"`
}

func (GatewaytemplateNetworkVpnAccessSourceNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkVpnAccessSourceNatArgs) ToGatewaytemplateNetworkVpnAccessSourceNatOutput() GatewaytemplateNetworkVpnAccessSourceNatOutput {
	return i.ToGatewaytemplateNetworkVpnAccessSourceNatOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessSourceNatArgs) ToGatewaytemplateNetworkVpnAccessSourceNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessSourceNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessSourceNatOutput)
}

func (i GatewaytemplateNetworkVpnAccessSourceNatArgs) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutput() GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return i.ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessSourceNatArgs) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessSourceNatOutput).ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(ctx)
}

// GatewaytemplateNetworkVpnAccessSourceNatPtrInput is an input type that accepts GatewaytemplateNetworkVpnAccessSourceNatArgs, GatewaytemplateNetworkVpnAccessSourceNatPtr and GatewaytemplateNetworkVpnAccessSourceNatPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessSourceNatPtrInput` via:
//
//	        GatewaytemplateNetworkVpnAccessSourceNatArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateNetworkVpnAccessSourceNatPtrInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutput() GatewaytemplateNetworkVpnAccessSourceNatPtrOutput
	ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessSourceNatPtrOutput
}

type gatewaytemplateNetworkVpnAccessSourceNatPtrType GatewaytemplateNetworkVpnAccessSourceNatArgs

func GatewaytemplateNetworkVpnAccessSourceNatPtr(v *GatewaytemplateNetworkVpnAccessSourceNatArgs) GatewaytemplateNetworkVpnAccessSourceNatPtrInput {
	return (*gatewaytemplateNetworkVpnAccessSourceNatPtrType)(v)
}

func (*gatewaytemplateNetworkVpnAccessSourceNatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (i *gatewaytemplateNetworkVpnAccessSourceNatPtrType) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutput() GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return i.ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateNetworkVpnAccessSourceNatPtrType) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessSourceNatPtrOutput)
}

type GatewaytemplateNetworkVpnAccessSourceNatOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessSourceNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessSourceNatOutput) ToGatewaytemplateNetworkVpnAccessSourceNatOutput() GatewaytemplateNetworkVpnAccessSourceNatOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessSourceNatOutput) ToGatewaytemplateNetworkVpnAccessSourceNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessSourceNatOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessSourceNatOutput) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutput() GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return o.ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateNetworkVpnAccessSourceNatOutput) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateNetworkVpnAccessSourceNat) *GatewaytemplateNetworkVpnAccessSourceNat {
		return &v
	}).(GatewaytemplateNetworkVpnAccessSourceNatPtrOutput)
}

func (o GatewaytemplateNetworkVpnAccessSourceNatOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccessSourceNat) *string { return v.ExternalIp }).(pulumi.StringPtrOutput)
}

type GatewaytemplateNetworkVpnAccessSourceNatPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessSourceNatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateNetworkVpnAccessSourceNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessSourceNatPtrOutput) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutput() GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessSourceNatPtrOutput) ToGatewaytemplateNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessSourceNatPtrOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessSourceNatPtrOutput) Elem() GatewaytemplateNetworkVpnAccessSourceNatOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkVpnAccessSourceNat) GatewaytemplateNetworkVpnAccessSourceNat {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateNetworkVpnAccessSourceNat
		return ret
	}).(GatewaytemplateNetworkVpnAccessSourceNatOutput)
}

func (o GatewaytemplateNetworkVpnAccessSourceNatPtrOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateNetworkVpnAccessSourceNat) *string {
		if v == nil {
			return nil
		}
		return v.ExternalIp
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplateNetworkVpnAccessStaticNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName *string `pulumi:"wanName"`
}

// GatewaytemplateNetworkVpnAccessStaticNatInput is an input type that accepts GatewaytemplateNetworkVpnAccessStaticNatArgs and GatewaytemplateNetworkVpnAccessStaticNatOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessStaticNatInput` via:
//
//	GatewaytemplateNetworkVpnAccessStaticNatArgs{...}
type GatewaytemplateNetworkVpnAccessStaticNatInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessStaticNatOutput() GatewaytemplateNetworkVpnAccessStaticNatOutput
	ToGatewaytemplateNetworkVpnAccessStaticNatOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessStaticNatOutput
}

type GatewaytemplateNetworkVpnAccessStaticNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (GatewaytemplateNetworkVpnAccessStaticNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkVpnAccessStaticNatArgs) ToGatewaytemplateNetworkVpnAccessStaticNatOutput() GatewaytemplateNetworkVpnAccessStaticNatOutput {
	return i.ToGatewaytemplateNetworkVpnAccessStaticNatOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessStaticNatArgs) ToGatewaytemplateNetworkVpnAccessStaticNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessStaticNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessStaticNatOutput)
}

// GatewaytemplateNetworkVpnAccessStaticNatMapInput is an input type that accepts GatewaytemplateNetworkVpnAccessStaticNatMap and GatewaytemplateNetworkVpnAccessStaticNatMapOutput values.
// You can construct a concrete instance of `GatewaytemplateNetworkVpnAccessStaticNatMapInput` via:
//
//	GatewaytemplateNetworkVpnAccessStaticNatMap{ "key": GatewaytemplateNetworkVpnAccessStaticNatArgs{...} }
type GatewaytemplateNetworkVpnAccessStaticNatMapInput interface {
	pulumi.Input

	ToGatewaytemplateNetworkVpnAccessStaticNatMapOutput() GatewaytemplateNetworkVpnAccessStaticNatMapOutput
	ToGatewaytemplateNetworkVpnAccessStaticNatMapOutputWithContext(context.Context) GatewaytemplateNetworkVpnAccessStaticNatMapOutput
}

type GatewaytemplateNetworkVpnAccessStaticNatMap map[string]GatewaytemplateNetworkVpnAccessStaticNatInput

func (GatewaytemplateNetworkVpnAccessStaticNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (i GatewaytemplateNetworkVpnAccessStaticNatMap) ToGatewaytemplateNetworkVpnAccessStaticNatMapOutput() GatewaytemplateNetworkVpnAccessStaticNatMapOutput {
	return i.ToGatewaytemplateNetworkVpnAccessStaticNatMapOutputWithContext(context.Background())
}

func (i GatewaytemplateNetworkVpnAccessStaticNatMap) ToGatewaytemplateNetworkVpnAccessStaticNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessStaticNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateNetworkVpnAccessStaticNatMapOutput)
}

type GatewaytemplateNetworkVpnAccessStaticNatOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessStaticNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessStaticNatOutput) ToGatewaytemplateNetworkVpnAccessStaticNatOutput() GatewaytemplateNetworkVpnAccessStaticNatOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessStaticNatOutput) ToGatewaytemplateNetworkVpnAccessStaticNatOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessStaticNatOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessStaticNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccessStaticNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateNetworkVpnAccessStaticNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccessStaticNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not set, we configure the nat policies against all WAN ports for simplicity
func (o GatewaytemplateNetworkVpnAccessStaticNatOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateNetworkVpnAccessStaticNat) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type GatewaytemplateNetworkVpnAccessStaticNatMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateNetworkVpnAccessStaticNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateNetworkVpnAccessStaticNat)(nil)).Elem()
}

func (o GatewaytemplateNetworkVpnAccessStaticNatMapOutput) ToGatewaytemplateNetworkVpnAccessStaticNatMapOutput() GatewaytemplateNetworkVpnAccessStaticNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessStaticNatMapOutput) ToGatewaytemplateNetworkVpnAccessStaticNatMapOutputWithContext(ctx context.Context) GatewaytemplateNetworkVpnAccessStaticNatMapOutput {
	return o
}

func (o GatewaytemplateNetworkVpnAccessStaticNatMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateNetworkVpnAccessStaticNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateNetworkVpnAccessStaticNat {
		return vs[0].(map[string]GatewaytemplateNetworkVpnAccessStaticNat)[vs[1].(string)]
	}).(GatewaytemplateNetworkVpnAccessStaticNatOutput)
}

type GatewaytemplateOobIpConfig struct {
	// if `type`==`static`
	Gateway *string `pulumi:"gateway"`
	// if `type`==`static`
	Ip *string `pulumi:"ip"`
	// if `type`==`static`
	Netmask *string `pulumi:"netmask"`
	// for HA Cluster, node1 can have different IP Config
	Node1 *GatewaytemplateOobIpConfigNode1 `pulumi:"node1"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf *bool `pulumi:"useMgmtVrf"`
	// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
	UseMgmtVrfForHostOut *bool   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               *string `pulumi:"vlanId"`
}

// GatewaytemplateOobIpConfigInput is an input type that accepts GatewaytemplateOobIpConfigArgs and GatewaytemplateOobIpConfigOutput values.
// You can construct a concrete instance of `GatewaytemplateOobIpConfigInput` via:
//
//	GatewaytemplateOobIpConfigArgs{...}
type GatewaytemplateOobIpConfigInput interface {
	pulumi.Input

	ToGatewaytemplateOobIpConfigOutput() GatewaytemplateOobIpConfigOutput
	ToGatewaytemplateOobIpConfigOutputWithContext(context.Context) GatewaytemplateOobIpConfigOutput
}

type GatewaytemplateOobIpConfigArgs struct {
	// if `type`==`static`
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// if `type`==`static`
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// if `type`==`static`
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
	// for HA Cluster, node1 can have different IP Config
	Node1 GatewaytemplateOobIpConfigNode1PtrInput `pulumi:"node1"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf pulumi.BoolPtrInput `pulumi:"useMgmtVrf"`
	// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
	UseMgmtVrfForHostOut pulumi.BoolPtrInput   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               pulumi.StringPtrInput `pulumi:"vlanId"`
}

func (GatewaytemplateOobIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateOobIpConfig)(nil)).Elem()
}

func (i GatewaytemplateOobIpConfigArgs) ToGatewaytemplateOobIpConfigOutput() GatewaytemplateOobIpConfigOutput {
	return i.ToGatewaytemplateOobIpConfigOutputWithContext(context.Background())
}

func (i GatewaytemplateOobIpConfigArgs) ToGatewaytemplateOobIpConfigOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateOobIpConfigOutput)
}

func (i GatewaytemplateOobIpConfigArgs) ToGatewaytemplateOobIpConfigPtrOutput() GatewaytemplateOobIpConfigPtrOutput {
	return i.ToGatewaytemplateOobIpConfigPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateOobIpConfigArgs) ToGatewaytemplateOobIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateOobIpConfigOutput).ToGatewaytemplateOobIpConfigPtrOutputWithContext(ctx)
}

// GatewaytemplateOobIpConfigPtrInput is an input type that accepts GatewaytemplateOobIpConfigArgs, GatewaytemplateOobIpConfigPtr and GatewaytemplateOobIpConfigPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateOobIpConfigPtrInput` via:
//
//	        GatewaytemplateOobIpConfigArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateOobIpConfigPtrInput interface {
	pulumi.Input

	ToGatewaytemplateOobIpConfigPtrOutput() GatewaytemplateOobIpConfigPtrOutput
	ToGatewaytemplateOobIpConfigPtrOutputWithContext(context.Context) GatewaytemplateOobIpConfigPtrOutput
}

type gatewaytemplateOobIpConfigPtrType GatewaytemplateOobIpConfigArgs

func GatewaytemplateOobIpConfigPtr(v *GatewaytemplateOobIpConfigArgs) GatewaytemplateOobIpConfigPtrInput {
	return (*gatewaytemplateOobIpConfigPtrType)(v)
}

func (*gatewaytemplateOobIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateOobIpConfig)(nil)).Elem()
}

func (i *gatewaytemplateOobIpConfigPtrType) ToGatewaytemplateOobIpConfigPtrOutput() GatewaytemplateOobIpConfigPtrOutput {
	return i.ToGatewaytemplateOobIpConfigPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateOobIpConfigPtrType) ToGatewaytemplateOobIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateOobIpConfigPtrOutput)
}

type GatewaytemplateOobIpConfigOutput struct{ *pulumi.OutputState }

func (GatewaytemplateOobIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateOobIpConfig)(nil)).Elem()
}

func (o GatewaytemplateOobIpConfigOutput) ToGatewaytemplateOobIpConfigOutput() GatewaytemplateOobIpConfigOutput {
	return o
}

func (o GatewaytemplateOobIpConfigOutput) ToGatewaytemplateOobIpConfigOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigOutput {
	return o
}

func (o GatewaytemplateOobIpConfigOutput) ToGatewaytemplateOobIpConfigPtrOutput() GatewaytemplateOobIpConfigPtrOutput {
	return o.ToGatewaytemplateOobIpConfigPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateOobIpConfigOutput) ToGatewaytemplateOobIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateOobIpConfig) *GatewaytemplateOobIpConfig {
		return &v
	}).(GatewaytemplateOobIpConfigPtrOutput)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

// for HA Cluster, node1 can have different IP Config
func (o GatewaytemplateOobIpConfigOutput) Node1() GatewaytemplateOobIpConfigNode1PtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *GatewaytemplateOobIpConfigNode1 { return v.Node1 }).(GatewaytemplateOobIpConfigNode1PtrOutput)
}

// enum: `dhcp`, `static`
func (o GatewaytemplateOobIpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o GatewaytemplateOobIpConfigOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *bool { return v.UseMgmtVrf }).(pulumi.BoolPtrOutput)
}

// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
func (o GatewaytemplateOobIpConfigOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *bool { return v.UseMgmtVrfForHostOut }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateOobIpConfigOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfig) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

type GatewaytemplateOobIpConfigPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateOobIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateOobIpConfig)(nil)).Elem()
}

func (o GatewaytemplateOobIpConfigPtrOutput) ToGatewaytemplateOobIpConfigPtrOutput() GatewaytemplateOobIpConfigPtrOutput {
	return o
}

func (o GatewaytemplateOobIpConfigPtrOutput) ToGatewaytemplateOobIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigPtrOutput {
	return o
}

func (o GatewaytemplateOobIpConfigPtrOutput) Elem() GatewaytemplateOobIpConfigOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) GatewaytemplateOobIpConfig {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateOobIpConfig
		return ret
	}).(GatewaytemplateOobIpConfigOutput)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigPtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

// for HA Cluster, node1 can have different IP Config
func (o GatewaytemplateOobIpConfigPtrOutput) Node1() GatewaytemplateOobIpConfigNode1PtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *GatewaytemplateOobIpConfigNode1 {
		if v == nil {
			return nil
		}
		return v.Node1
	}).(GatewaytemplateOobIpConfigNode1PtrOutput)
}

// enum: `dhcp`, `static`
func (o GatewaytemplateOobIpConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o GatewaytemplateOobIpConfigPtrOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrf
	}).(pulumi.BoolPtrOutput)
}

// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
func (o GatewaytemplateOobIpConfigPtrOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrfForHostOut
	}).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateOobIpConfigPtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplateOobIpConfigNode1 struct {
	// if `type`==`static`
	Gateway *string `pulumi:"gateway"`
	Ip      *string `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask *string `pulumi:"netmask"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf *bool `pulumi:"useMgmtVrf"`
	// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
	UseMgmtVrfForHostOut *bool   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               *string `pulumi:"vlanId"`
}

// GatewaytemplateOobIpConfigNode1Input is an input type that accepts GatewaytemplateOobIpConfigNode1Args and GatewaytemplateOobIpConfigNode1Output values.
// You can construct a concrete instance of `GatewaytemplateOobIpConfigNode1Input` via:
//
//	GatewaytemplateOobIpConfigNode1Args{...}
type GatewaytemplateOobIpConfigNode1Input interface {
	pulumi.Input

	ToGatewaytemplateOobIpConfigNode1Output() GatewaytemplateOobIpConfigNode1Output
	ToGatewaytemplateOobIpConfigNode1OutputWithContext(context.Context) GatewaytemplateOobIpConfigNode1Output
}

type GatewaytemplateOobIpConfigNode1Args struct {
	// if `type`==`static`
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	Ip      pulumi.StringPtrInput `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf pulumi.BoolPtrInput `pulumi:"useMgmtVrf"`
	// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
	UseMgmtVrfForHostOut pulumi.BoolPtrInput   `pulumi:"useMgmtVrfForHostOut"`
	VlanId               pulumi.StringPtrInput `pulumi:"vlanId"`
}

func (GatewaytemplateOobIpConfigNode1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateOobIpConfigNode1)(nil)).Elem()
}

func (i GatewaytemplateOobIpConfigNode1Args) ToGatewaytemplateOobIpConfigNode1Output() GatewaytemplateOobIpConfigNode1Output {
	return i.ToGatewaytemplateOobIpConfigNode1OutputWithContext(context.Background())
}

func (i GatewaytemplateOobIpConfigNode1Args) ToGatewaytemplateOobIpConfigNode1OutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigNode1Output {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateOobIpConfigNode1Output)
}

func (i GatewaytemplateOobIpConfigNode1Args) ToGatewaytemplateOobIpConfigNode1PtrOutput() GatewaytemplateOobIpConfigNode1PtrOutput {
	return i.ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(context.Background())
}

func (i GatewaytemplateOobIpConfigNode1Args) ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateOobIpConfigNode1Output).ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(ctx)
}

// GatewaytemplateOobIpConfigNode1PtrInput is an input type that accepts GatewaytemplateOobIpConfigNode1Args, GatewaytemplateOobIpConfigNode1Ptr and GatewaytemplateOobIpConfigNode1PtrOutput values.
// You can construct a concrete instance of `GatewaytemplateOobIpConfigNode1PtrInput` via:
//
//	        GatewaytemplateOobIpConfigNode1Args{...}
//
//	or:
//
//	        nil
type GatewaytemplateOobIpConfigNode1PtrInput interface {
	pulumi.Input

	ToGatewaytemplateOobIpConfigNode1PtrOutput() GatewaytemplateOobIpConfigNode1PtrOutput
	ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(context.Context) GatewaytemplateOobIpConfigNode1PtrOutput
}

type gatewaytemplateOobIpConfigNode1PtrType GatewaytemplateOobIpConfigNode1Args

func GatewaytemplateOobIpConfigNode1Ptr(v *GatewaytemplateOobIpConfigNode1Args) GatewaytemplateOobIpConfigNode1PtrInput {
	return (*gatewaytemplateOobIpConfigNode1PtrType)(v)
}

func (*gatewaytemplateOobIpConfigNode1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateOobIpConfigNode1)(nil)).Elem()
}

func (i *gatewaytemplateOobIpConfigNode1PtrType) ToGatewaytemplateOobIpConfigNode1PtrOutput() GatewaytemplateOobIpConfigNode1PtrOutput {
	return i.ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateOobIpConfigNode1PtrType) ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigNode1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateOobIpConfigNode1PtrOutput)
}

type GatewaytemplateOobIpConfigNode1Output struct{ *pulumi.OutputState }

func (GatewaytemplateOobIpConfigNode1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateOobIpConfigNode1)(nil)).Elem()
}

func (o GatewaytemplateOobIpConfigNode1Output) ToGatewaytemplateOobIpConfigNode1Output() GatewaytemplateOobIpConfigNode1Output {
	return o
}

func (o GatewaytemplateOobIpConfigNode1Output) ToGatewaytemplateOobIpConfigNode1OutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigNode1Output {
	return o
}

func (o GatewaytemplateOobIpConfigNode1Output) ToGatewaytemplateOobIpConfigNode1PtrOutput() GatewaytemplateOobIpConfigNode1PtrOutput {
	return o.ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(context.Background())
}

func (o GatewaytemplateOobIpConfigNode1Output) ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigNode1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateOobIpConfigNode1) *GatewaytemplateOobIpConfigNode1 {
		return &v
	}).(GatewaytemplateOobIpConfigNode1PtrOutput)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigNode1Output) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfigNode1) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateOobIpConfigNode1Output) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfigNode1) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o GatewaytemplateOobIpConfigNode1Output) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfigNode1) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o GatewaytemplateOobIpConfigNode1Output) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfigNode1) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o GatewaytemplateOobIpConfigNode1Output) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfigNode1) *bool { return v.UseMgmtVrf }).(pulumi.BoolPtrOutput)
}

// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
func (o GatewaytemplateOobIpConfigNode1Output) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfigNode1) *bool { return v.UseMgmtVrfForHostOut }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateOobIpConfigNode1Output) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateOobIpConfigNode1) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

type GatewaytemplateOobIpConfigNode1PtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateOobIpConfigNode1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateOobIpConfigNode1)(nil)).Elem()
}

func (o GatewaytemplateOobIpConfigNode1PtrOutput) ToGatewaytemplateOobIpConfigNode1PtrOutput() GatewaytemplateOobIpConfigNode1PtrOutput {
	return o
}

func (o GatewaytemplateOobIpConfigNode1PtrOutput) ToGatewaytemplateOobIpConfigNode1PtrOutputWithContext(ctx context.Context) GatewaytemplateOobIpConfigNode1PtrOutput {
	return o
}

func (o GatewaytemplateOobIpConfigNode1PtrOutput) Elem() GatewaytemplateOobIpConfigNode1Output {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) GatewaytemplateOobIpConfigNode1 {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateOobIpConfigNode1
		return ret
	}).(GatewaytemplateOobIpConfigNode1Output)
}

// if `type`==`static`
func (o GatewaytemplateOobIpConfigNode1PtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateOobIpConfigNode1PtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o GatewaytemplateOobIpConfigNode1PtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o GatewaytemplateOobIpConfigNode1PtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o GatewaytemplateOobIpConfigNode1PtrOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrf
	}).(pulumi.BoolPtrOutput)
}

// whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
func (o GatewaytemplateOobIpConfigNode1PtrOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrfForHostOut
	}).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateOobIpConfigNode1PtrOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateOobIpConfigNode1) *string {
		if v == nil {
			return nil
		}
		return v.VlanId
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplatePathPreferences struct {
	Paths []GatewaytemplatePathPreferencesPath `pulumi:"paths"`
	// enum: `ecmp`, `ordered`, `weighted`
	Strategy *string `pulumi:"strategy"`
}

// GatewaytemplatePathPreferencesInput is an input type that accepts GatewaytemplatePathPreferencesArgs and GatewaytemplatePathPreferencesOutput values.
// You can construct a concrete instance of `GatewaytemplatePathPreferencesInput` via:
//
//	GatewaytemplatePathPreferencesArgs{...}
type GatewaytemplatePathPreferencesInput interface {
	pulumi.Input

	ToGatewaytemplatePathPreferencesOutput() GatewaytemplatePathPreferencesOutput
	ToGatewaytemplatePathPreferencesOutputWithContext(context.Context) GatewaytemplatePathPreferencesOutput
}

type GatewaytemplatePathPreferencesArgs struct {
	Paths GatewaytemplatePathPreferencesPathArrayInput `pulumi:"paths"`
	// enum: `ecmp`, `ordered`, `weighted`
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (GatewaytemplatePathPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePathPreferences)(nil)).Elem()
}

func (i GatewaytemplatePathPreferencesArgs) ToGatewaytemplatePathPreferencesOutput() GatewaytemplatePathPreferencesOutput {
	return i.ToGatewaytemplatePathPreferencesOutputWithContext(context.Background())
}

func (i GatewaytemplatePathPreferencesArgs) ToGatewaytemplatePathPreferencesOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePathPreferencesOutput)
}

// GatewaytemplatePathPreferencesMapInput is an input type that accepts GatewaytemplatePathPreferencesMap and GatewaytemplatePathPreferencesMapOutput values.
// You can construct a concrete instance of `GatewaytemplatePathPreferencesMapInput` via:
//
//	GatewaytemplatePathPreferencesMap{ "key": GatewaytemplatePathPreferencesArgs{...} }
type GatewaytemplatePathPreferencesMapInput interface {
	pulumi.Input

	ToGatewaytemplatePathPreferencesMapOutput() GatewaytemplatePathPreferencesMapOutput
	ToGatewaytemplatePathPreferencesMapOutputWithContext(context.Context) GatewaytemplatePathPreferencesMapOutput
}

type GatewaytemplatePathPreferencesMap map[string]GatewaytemplatePathPreferencesInput

func (GatewaytemplatePathPreferencesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplatePathPreferences)(nil)).Elem()
}

func (i GatewaytemplatePathPreferencesMap) ToGatewaytemplatePathPreferencesMapOutput() GatewaytemplatePathPreferencesMapOutput {
	return i.ToGatewaytemplatePathPreferencesMapOutputWithContext(context.Background())
}

func (i GatewaytemplatePathPreferencesMap) ToGatewaytemplatePathPreferencesMapOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePathPreferencesMapOutput)
}

type GatewaytemplatePathPreferencesOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePathPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePathPreferences)(nil)).Elem()
}

func (o GatewaytemplatePathPreferencesOutput) ToGatewaytemplatePathPreferencesOutput() GatewaytemplatePathPreferencesOutput {
	return o
}

func (o GatewaytemplatePathPreferencesOutput) ToGatewaytemplatePathPreferencesOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesOutput {
	return o
}

func (o GatewaytemplatePathPreferencesOutput) Paths() GatewaytemplatePathPreferencesPathArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferences) []GatewaytemplatePathPreferencesPath { return v.Paths }).(GatewaytemplatePathPreferencesPathArrayOutput)
}

// enum: `ecmp`, `ordered`, `weighted`
func (o GatewaytemplatePathPreferencesOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferences) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type GatewaytemplatePathPreferencesMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePathPreferencesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplatePathPreferences)(nil)).Elem()
}

func (o GatewaytemplatePathPreferencesMapOutput) ToGatewaytemplatePathPreferencesMapOutput() GatewaytemplatePathPreferencesMapOutput {
	return o
}

func (o GatewaytemplatePathPreferencesMapOutput) ToGatewaytemplatePathPreferencesMapOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesMapOutput {
	return o
}

func (o GatewaytemplatePathPreferencesMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplatePathPreferencesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplatePathPreferences {
		return vs[0].(map[string]GatewaytemplatePathPreferences)[vs[1].(string)]
	}).(GatewaytemplatePathPreferencesOutput)
}

type GatewaytemplatePathPreferencesPath struct {
	Cost *int `pulumi:"cost"`
	// For SSR Only. `true`, if this specific path is undesired
	Disabled *bool `pulumi:"disabled"`
	// only if `type`==`local`, if a different gateway is desired
	GatewayIp *string `pulumi:"gatewayIp"`
	// only if `type`==`vpn`, if this vpn path can be used for internet
	InternetAccess *bool `pulumi:"internetAccess"`
	// required when
	//   * `type`==`vpn`: the name of the VPN Path to use
	//   * `type`==`wan`: the name of the WAN interface to use'
	Name *string `pulumi:"name"`
	// required when `type`==`local`
	Networks []string `pulumi:"networks"`
	// if `type`==`local`, if destination IP is to be replaced
	TargetIps []string `pulumi:"targetIps"`
	// enum: `local`, `tunnel`, `vpn`, `wan`
	Type *string `pulumi:"type"`
	// required when`type`==`tunnel`
	WanName *string `pulumi:"wanName"`
}

// GatewaytemplatePathPreferencesPathInput is an input type that accepts GatewaytemplatePathPreferencesPathArgs and GatewaytemplatePathPreferencesPathOutput values.
// You can construct a concrete instance of `GatewaytemplatePathPreferencesPathInput` via:
//
//	GatewaytemplatePathPreferencesPathArgs{...}
type GatewaytemplatePathPreferencesPathInput interface {
	pulumi.Input

	ToGatewaytemplatePathPreferencesPathOutput() GatewaytemplatePathPreferencesPathOutput
	ToGatewaytemplatePathPreferencesPathOutputWithContext(context.Context) GatewaytemplatePathPreferencesPathOutput
}

type GatewaytemplatePathPreferencesPathArgs struct {
	Cost pulumi.IntPtrInput `pulumi:"cost"`
	// For SSR Only. `true`, if this specific path is undesired
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// only if `type`==`local`, if a different gateway is desired
	GatewayIp pulumi.StringPtrInput `pulumi:"gatewayIp"`
	// only if `type`==`vpn`, if this vpn path can be used for internet
	InternetAccess pulumi.BoolPtrInput `pulumi:"internetAccess"`
	// required when
	//   * `type`==`vpn`: the name of the VPN Path to use
	//   * `type`==`wan`: the name of the WAN interface to use'
	Name pulumi.StringPtrInput `pulumi:"name"`
	// required when `type`==`local`
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// if `type`==`local`, if destination IP is to be replaced
	TargetIps pulumi.StringArrayInput `pulumi:"targetIps"`
	// enum: `local`, `tunnel`, `vpn`, `wan`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// required when`type`==`tunnel`
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (GatewaytemplatePathPreferencesPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePathPreferencesPath)(nil)).Elem()
}

func (i GatewaytemplatePathPreferencesPathArgs) ToGatewaytemplatePathPreferencesPathOutput() GatewaytemplatePathPreferencesPathOutput {
	return i.ToGatewaytemplatePathPreferencesPathOutputWithContext(context.Background())
}

func (i GatewaytemplatePathPreferencesPathArgs) ToGatewaytemplatePathPreferencesPathOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePathPreferencesPathOutput)
}

// GatewaytemplatePathPreferencesPathArrayInput is an input type that accepts GatewaytemplatePathPreferencesPathArray and GatewaytemplatePathPreferencesPathArrayOutput values.
// You can construct a concrete instance of `GatewaytemplatePathPreferencesPathArrayInput` via:
//
//	GatewaytemplatePathPreferencesPathArray{ GatewaytemplatePathPreferencesPathArgs{...} }
type GatewaytemplatePathPreferencesPathArrayInput interface {
	pulumi.Input

	ToGatewaytemplatePathPreferencesPathArrayOutput() GatewaytemplatePathPreferencesPathArrayOutput
	ToGatewaytemplatePathPreferencesPathArrayOutputWithContext(context.Context) GatewaytemplatePathPreferencesPathArrayOutput
}

type GatewaytemplatePathPreferencesPathArray []GatewaytemplatePathPreferencesPathInput

func (GatewaytemplatePathPreferencesPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplatePathPreferencesPath)(nil)).Elem()
}

func (i GatewaytemplatePathPreferencesPathArray) ToGatewaytemplatePathPreferencesPathArrayOutput() GatewaytemplatePathPreferencesPathArrayOutput {
	return i.ToGatewaytemplatePathPreferencesPathArrayOutputWithContext(context.Background())
}

func (i GatewaytemplatePathPreferencesPathArray) ToGatewaytemplatePathPreferencesPathArrayOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePathPreferencesPathArrayOutput)
}

type GatewaytemplatePathPreferencesPathOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePathPreferencesPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePathPreferencesPath)(nil)).Elem()
}

func (o GatewaytemplatePathPreferencesPathOutput) ToGatewaytemplatePathPreferencesPathOutput() GatewaytemplatePathPreferencesPathOutput {
	return o
}

func (o GatewaytemplatePathPreferencesPathOutput) ToGatewaytemplatePathPreferencesPathOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesPathOutput {
	return o
}

func (o GatewaytemplatePathPreferencesPathOutput) Cost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) *int { return v.Cost }).(pulumi.IntPtrOutput)
}

// For SSR Only. `true`, if this specific path is undesired
func (o GatewaytemplatePathPreferencesPathOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// only if `type`==`local`, if a different gateway is desired
func (o GatewaytemplatePathPreferencesPathOutput) GatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) *string { return v.GatewayIp }).(pulumi.StringPtrOutput)
}

// only if `type`==`vpn`, if this vpn path can be used for internet
func (o GatewaytemplatePathPreferencesPathOutput) InternetAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) *bool { return v.InternetAccess }).(pulumi.BoolPtrOutput)
}

// required when
//   - `type`==`vpn`: the name of the VPN Path to use
//   - `type`==`wan`: the name of the WAN interface to use'
func (o GatewaytemplatePathPreferencesPathOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// required when `type`==`local`
func (o GatewaytemplatePathPreferencesPathOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// if `type`==`local`, if destination IP is to be replaced
func (o GatewaytemplatePathPreferencesPathOutput) TargetIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) []string { return v.TargetIps }).(pulumi.StringArrayOutput)
}

// enum: `local`, `tunnel`, `vpn`, `wan`
func (o GatewaytemplatePathPreferencesPathOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// required when`type`==`tunnel`
func (o GatewaytemplatePathPreferencesPathOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePathPreferencesPath) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type GatewaytemplatePathPreferencesPathArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePathPreferencesPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplatePathPreferencesPath)(nil)).Elem()
}

func (o GatewaytemplatePathPreferencesPathArrayOutput) ToGatewaytemplatePathPreferencesPathArrayOutput() GatewaytemplatePathPreferencesPathArrayOutput {
	return o
}

func (o GatewaytemplatePathPreferencesPathArrayOutput) ToGatewaytemplatePathPreferencesPathArrayOutputWithContext(ctx context.Context) GatewaytemplatePathPreferencesPathArrayOutput {
	return o
}

func (o GatewaytemplatePathPreferencesPathArrayOutput) Index(i pulumi.IntInput) GatewaytemplatePathPreferencesPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplatePathPreferencesPath {
		return vs[0].([]GatewaytemplatePathPreferencesPath)[vs[1].(int)]
	}).(GatewaytemplatePathPreferencesPathOutput)
}

type GatewaytemplatePortConfig struct {
	Description    *string `pulumi:"description"`
	DisableAutoneg *bool   `pulumi:"disableAutoneg"`
	// port admin up (true) / down (false)
	Disabled *bool `pulumi:"disabled"`
	// if `wanType`==`lte`. enum: `adsl`, `vdsl`
	DslType *string `pulumi:"dslType"`
	// if `wanType`==`dsl`
	// 16 bit int
	DslVci *int `pulumi:"dslVci"`
	// if `wanType`==`dsl`
	// 8 bit int
	DslVpi *int `pulumi:"dslVpi"`
	// enum: `auto`, `full`, `half`
	Duplex *string `pulumi:"duplex"`
	// Junos IP Config
	IpConfig *GatewaytemplatePortConfigIpConfig `pulumi:"ipConfig"`
	// if `wanType`==`lte`
	LteApn *string `pulumi:"lteApn"`
	// if `wanType`==`lte`. enum: `chap`, `none`, `pap`
	LteAuth   *string `pulumi:"lteAuth"`
	LteBackup *bool   `pulumi:"lteBackup"`
	// if `wanType`==`lte`
	LtePassword *string `pulumi:"ltePassword"`
	// if `wanType`==`lte`
	LteUsername *string `pulumi:"lteUsername"`
	Mtu         *int    `pulumi:"mtu"`
	// name that we'll use to derive config
	Name *string `pulumi:"name"`
	// if `usage`==`lan`
	Networks []string `pulumi:"networks"`
	// for Q-in-Q
	OuterVlanId *int  `pulumi:"outerVlanId"`
	PoeDisabled *bool `pulumi:"poeDisabled"`
	// if `usage`==`lan`
	PortNetwork *string `pulumi:"portNetwork"`
	// whether to preserve dscp when sending traffic over VPN (SSR-only)
	PreserveDscp *bool `pulumi:"preserveDscp"`
	// if HA mode
	Redundant *bool `pulumi:"redundant"`
	// if HA mode
	RethIdx *int `pulumi:"rethIdx"`
	// if HA mode
	RethNode *string `pulumi:"rethNode"`
	// SSR only - supporting vlan-based redundancy (matching the size of `networks`)
	RethNodes []string `pulumi:"rethNodes"`
	Speed     *string  `pulumi:"speed"`
	// when SSR is running as VM, this is required on certain hosting platforms
	SsrNoVirtualMac *bool `pulumi:"ssrNoVirtualMac"`
	// for SSR only
	SvrPortRange   *string                                  `pulumi:"svrPortRange"`
	TrafficShaping *GatewaytemplatePortConfigTrafficShaping `pulumi:"trafficShaping"`
	// port usage name. enum: `haControl`, `haData`, `lan`, `wan`
	Usage string `pulumi:"usage"`
	// if WAN interface is on a VLAN
	VlanId   *int                                         `pulumi:"vlanId"`
	VpnPaths map[string]GatewaytemplatePortConfigVpnPaths `pulumi:"vpnPaths"`
	// when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
	WanArpPolicer *string `pulumi:"wanArpPolicer"`
	// optional, if spoke should reach this port by a different IP
	WanExtIp *string `pulumi:"wanExtIp"`
	// optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
	WanSourceNat *GatewaytemplatePortConfigWanSourceNat `pulumi:"wanSourceNat"`
	// if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
	WanType *string `pulumi:"wanType"`
}

// GatewaytemplatePortConfigInput is an input type that accepts GatewaytemplatePortConfigArgs and GatewaytemplatePortConfigOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigInput` via:
//
//	GatewaytemplatePortConfigArgs{...}
type GatewaytemplatePortConfigInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigOutput() GatewaytemplatePortConfigOutput
	ToGatewaytemplatePortConfigOutputWithContext(context.Context) GatewaytemplatePortConfigOutput
}

type GatewaytemplatePortConfigArgs struct {
	Description    pulumi.StringPtrInput `pulumi:"description"`
	DisableAutoneg pulumi.BoolPtrInput   `pulumi:"disableAutoneg"`
	// port admin up (true) / down (false)
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// if `wanType`==`lte`. enum: `adsl`, `vdsl`
	DslType pulumi.StringPtrInput `pulumi:"dslType"`
	// if `wanType`==`dsl`
	// 16 bit int
	DslVci pulumi.IntPtrInput `pulumi:"dslVci"`
	// if `wanType`==`dsl`
	// 8 bit int
	DslVpi pulumi.IntPtrInput `pulumi:"dslVpi"`
	// enum: `auto`, `full`, `half`
	Duplex pulumi.StringPtrInput `pulumi:"duplex"`
	// Junos IP Config
	IpConfig GatewaytemplatePortConfigIpConfigPtrInput `pulumi:"ipConfig"`
	// if `wanType`==`lte`
	LteApn pulumi.StringPtrInput `pulumi:"lteApn"`
	// if `wanType`==`lte`. enum: `chap`, `none`, `pap`
	LteAuth   pulumi.StringPtrInput `pulumi:"lteAuth"`
	LteBackup pulumi.BoolPtrInput   `pulumi:"lteBackup"`
	// if `wanType`==`lte`
	LtePassword pulumi.StringPtrInput `pulumi:"ltePassword"`
	// if `wanType`==`lte`
	LteUsername pulumi.StringPtrInput `pulumi:"lteUsername"`
	Mtu         pulumi.IntPtrInput    `pulumi:"mtu"`
	// name that we'll use to derive config
	Name pulumi.StringPtrInput `pulumi:"name"`
	// if `usage`==`lan`
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// for Q-in-Q
	OuterVlanId pulumi.IntPtrInput  `pulumi:"outerVlanId"`
	PoeDisabled pulumi.BoolPtrInput `pulumi:"poeDisabled"`
	// if `usage`==`lan`
	PortNetwork pulumi.StringPtrInput `pulumi:"portNetwork"`
	// whether to preserve dscp when sending traffic over VPN (SSR-only)
	PreserveDscp pulumi.BoolPtrInput `pulumi:"preserveDscp"`
	// if HA mode
	Redundant pulumi.BoolPtrInput `pulumi:"redundant"`
	// if HA mode
	RethIdx pulumi.IntPtrInput `pulumi:"rethIdx"`
	// if HA mode
	RethNode pulumi.StringPtrInput `pulumi:"rethNode"`
	// SSR only - supporting vlan-based redundancy (matching the size of `networks`)
	RethNodes pulumi.StringArrayInput `pulumi:"rethNodes"`
	Speed     pulumi.StringPtrInput   `pulumi:"speed"`
	// when SSR is running as VM, this is required on certain hosting platforms
	SsrNoVirtualMac pulumi.BoolPtrInput `pulumi:"ssrNoVirtualMac"`
	// for SSR only
	SvrPortRange   pulumi.StringPtrInput                           `pulumi:"svrPortRange"`
	TrafficShaping GatewaytemplatePortConfigTrafficShapingPtrInput `pulumi:"trafficShaping"`
	// port usage name. enum: `haControl`, `haData`, `lan`, `wan`
	Usage pulumi.StringInput `pulumi:"usage"`
	// if WAN interface is on a VLAN
	VlanId   pulumi.IntPtrInput                        `pulumi:"vlanId"`
	VpnPaths GatewaytemplatePortConfigVpnPathsMapInput `pulumi:"vpnPaths"`
	// when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
	WanArpPolicer pulumi.StringPtrInput `pulumi:"wanArpPolicer"`
	// optional, if spoke should reach this port by a different IP
	WanExtIp pulumi.StringPtrInput `pulumi:"wanExtIp"`
	// optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
	WanSourceNat GatewaytemplatePortConfigWanSourceNatPtrInput `pulumi:"wanSourceNat"`
	// if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
	WanType pulumi.StringPtrInput `pulumi:"wanType"`
}

func (GatewaytemplatePortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfig)(nil)).Elem()
}

func (i GatewaytemplatePortConfigArgs) ToGatewaytemplatePortConfigOutput() GatewaytemplatePortConfigOutput {
	return i.ToGatewaytemplatePortConfigOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigArgs) ToGatewaytemplatePortConfigOutputWithContext(ctx context.Context) GatewaytemplatePortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigOutput)
}

// GatewaytemplatePortConfigMapInput is an input type that accepts GatewaytemplatePortConfigMap and GatewaytemplatePortConfigMapOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigMapInput` via:
//
//	GatewaytemplatePortConfigMap{ "key": GatewaytemplatePortConfigArgs{...} }
type GatewaytemplatePortConfigMapInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigMapOutput() GatewaytemplatePortConfigMapOutput
	ToGatewaytemplatePortConfigMapOutputWithContext(context.Context) GatewaytemplatePortConfigMapOutput
}

type GatewaytemplatePortConfigMap map[string]GatewaytemplatePortConfigInput

func (GatewaytemplatePortConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplatePortConfig)(nil)).Elem()
}

func (i GatewaytemplatePortConfigMap) ToGatewaytemplatePortConfigMapOutput() GatewaytemplatePortConfigMapOutput {
	return i.ToGatewaytemplatePortConfigMapOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigMap) ToGatewaytemplatePortConfigMapOutputWithContext(ctx context.Context) GatewaytemplatePortConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigMapOutput)
}

type GatewaytemplatePortConfigOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfig)(nil)).Elem()
}

func (o GatewaytemplatePortConfigOutput) ToGatewaytemplatePortConfigOutput() GatewaytemplatePortConfigOutput {
	return o
}

func (o GatewaytemplatePortConfigOutput) ToGatewaytemplatePortConfigOutputWithContext(ctx context.Context) GatewaytemplatePortConfigOutput {
	return o
}

func (o GatewaytemplatePortConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplatePortConfigOutput) DisableAutoneg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *bool { return v.DisableAutoneg }).(pulumi.BoolPtrOutput)
}

// port admin up (true) / down (false)
func (o GatewaytemplatePortConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// if `wanType`==`lte`. enum: `adsl`, `vdsl`
func (o GatewaytemplatePortConfigOutput) DslType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.DslType }).(pulumi.StringPtrOutput)
}

// if `wanType`==`dsl`
// 16 bit int
func (o GatewaytemplatePortConfigOutput) DslVci() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *int { return v.DslVci }).(pulumi.IntPtrOutput)
}

// if `wanType`==`dsl`
// 8 bit int
func (o GatewaytemplatePortConfigOutput) DslVpi() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *int { return v.DslVpi }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `full`, `half`
func (o GatewaytemplatePortConfigOutput) Duplex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.Duplex }).(pulumi.StringPtrOutput)
}

// Junos IP Config
func (o GatewaytemplatePortConfigOutput) IpConfig() GatewaytemplatePortConfigIpConfigPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *GatewaytemplatePortConfigIpConfig { return v.IpConfig }).(GatewaytemplatePortConfigIpConfigPtrOutput)
}

// if `wanType`==`lte`
func (o GatewaytemplatePortConfigOutput) LteApn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.LteApn }).(pulumi.StringPtrOutput)
}

// if `wanType`==`lte`. enum: `chap`, `none`, `pap`
func (o GatewaytemplatePortConfigOutput) LteAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.LteAuth }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplatePortConfigOutput) LteBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *bool { return v.LteBackup }).(pulumi.BoolPtrOutput)
}

// if `wanType`==`lte`
func (o GatewaytemplatePortConfigOutput) LtePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.LtePassword }).(pulumi.StringPtrOutput)
}

// if `wanType`==`lte`
func (o GatewaytemplatePortConfigOutput) LteUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.LteUsername }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplatePortConfigOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// name that we'll use to derive config
func (o GatewaytemplatePortConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// if `usage`==`lan`
func (o GatewaytemplatePortConfigOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// for Q-in-Q
func (o GatewaytemplatePortConfigOutput) OuterVlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *int { return v.OuterVlanId }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplatePortConfigOutput) PoeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *bool { return v.PoeDisabled }).(pulumi.BoolPtrOutput)
}

// if `usage`==`lan`
func (o GatewaytemplatePortConfigOutput) PortNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.PortNetwork }).(pulumi.StringPtrOutput)
}

// whether to preserve dscp when sending traffic over VPN (SSR-only)
func (o GatewaytemplatePortConfigOutput) PreserveDscp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *bool { return v.PreserveDscp }).(pulumi.BoolPtrOutput)
}

// if HA mode
func (o GatewaytemplatePortConfigOutput) Redundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *bool { return v.Redundant }).(pulumi.BoolPtrOutput)
}

// if HA mode
func (o GatewaytemplatePortConfigOutput) RethIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *int { return v.RethIdx }).(pulumi.IntPtrOutput)
}

// if HA mode
func (o GatewaytemplatePortConfigOutput) RethNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.RethNode }).(pulumi.StringPtrOutput)
}

// SSR only - supporting vlan-based redundancy (matching the size of `networks`)
func (o GatewaytemplatePortConfigOutput) RethNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) []string { return v.RethNodes }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplatePortConfigOutput) Speed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.Speed }).(pulumi.StringPtrOutput)
}

// when SSR is running as VM, this is required on certain hosting platforms
func (o GatewaytemplatePortConfigOutput) SsrNoVirtualMac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *bool { return v.SsrNoVirtualMac }).(pulumi.BoolPtrOutput)
}

// for SSR only
func (o GatewaytemplatePortConfigOutput) SvrPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.SvrPortRange }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplatePortConfigOutput) TrafficShaping() GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *GatewaytemplatePortConfigTrafficShaping { return v.TrafficShaping }).(GatewaytemplatePortConfigTrafficShapingPtrOutput)
}

// port usage name. enum: `haControl`, `haData`, `lan`, `wan`
func (o GatewaytemplatePortConfigOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) string { return v.Usage }).(pulumi.StringOutput)
}

// if WAN interface is on a VLAN
func (o GatewaytemplatePortConfigOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplatePortConfigOutput) VpnPaths() GatewaytemplatePortConfigVpnPathsMapOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) map[string]GatewaytemplatePortConfigVpnPaths { return v.VpnPaths }).(GatewaytemplatePortConfigVpnPathsMapOutput)
}

// when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
func (o GatewaytemplatePortConfigOutput) WanArpPolicer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.WanArpPolicer }).(pulumi.StringPtrOutput)
}

// optional, if spoke should reach this port by a different IP
func (o GatewaytemplatePortConfigOutput) WanExtIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.WanExtIp }).(pulumi.StringPtrOutput)
}

// optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
func (o GatewaytemplatePortConfigOutput) WanSourceNat() GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *GatewaytemplatePortConfigWanSourceNat { return v.WanSourceNat }).(GatewaytemplatePortConfigWanSourceNatPtrOutput)
}

// if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
func (o GatewaytemplatePortConfigOutput) WanType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfig) *string { return v.WanType }).(pulumi.StringPtrOutput)
}

type GatewaytemplatePortConfigMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplatePortConfig)(nil)).Elem()
}

func (o GatewaytemplatePortConfigMapOutput) ToGatewaytemplatePortConfigMapOutput() GatewaytemplatePortConfigMapOutput {
	return o
}

func (o GatewaytemplatePortConfigMapOutput) ToGatewaytemplatePortConfigMapOutputWithContext(ctx context.Context) GatewaytemplatePortConfigMapOutput {
	return o
}

func (o GatewaytemplatePortConfigMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplatePortConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplatePortConfig {
		return vs[0].(map[string]GatewaytemplatePortConfig)[vs[1].(string)]
	}).(GatewaytemplatePortConfigOutput)
}

type GatewaytemplatePortConfigIpConfig struct {
	// except for out-of_band interface (vme/em0/fxp0)
	Dns []string `pulumi:"dns"`
	// except for out-of_band interface (vme/em0/fxp0)
	DnsSuffixes []string `pulumi:"dnsSuffixes"`
	// except for out-of_band interface (vme/em0/fxp0)
	Gateway *string `pulumi:"gateway"`
	Ip      *string `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask *string `pulumi:"netmask"`
	// optional, the network to be used for mgmt
	Network *string `pulumi:"network"`
	// if `type`==`pppoe`
	PoserPassword *string `pulumi:"poserPassword"`
	// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
	PppoeAuth *string `pulumi:"pppoeAuth"`
	// if `type`==`pppoe`
	PppoeUsername *string `pulumi:"pppoeUsername"`
	// enum: `dhcp`, `pppoe`, `static`
	Type *string `pulumi:"type"`
}

// GatewaytemplatePortConfigIpConfigInput is an input type that accepts GatewaytemplatePortConfigIpConfigArgs and GatewaytemplatePortConfigIpConfigOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigIpConfigInput` via:
//
//	GatewaytemplatePortConfigIpConfigArgs{...}
type GatewaytemplatePortConfigIpConfigInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigIpConfigOutput() GatewaytemplatePortConfigIpConfigOutput
	ToGatewaytemplatePortConfigIpConfigOutputWithContext(context.Context) GatewaytemplatePortConfigIpConfigOutput
}

type GatewaytemplatePortConfigIpConfigArgs struct {
	// except for out-of_band interface (vme/em0/fxp0)
	Dns pulumi.StringArrayInput `pulumi:"dns"`
	// except for out-of_band interface (vme/em0/fxp0)
	DnsSuffixes pulumi.StringArrayInput `pulumi:"dnsSuffixes"`
	// except for out-of_band interface (vme/em0/fxp0)
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	Ip      pulumi.StringPtrInput `pulumi:"ip"`
	// used only if `subnet` is not specified in `networks`
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
	// optional, the network to be used for mgmt
	Network pulumi.StringPtrInput `pulumi:"network"`
	// if `type`==`pppoe`
	PoserPassword pulumi.StringPtrInput `pulumi:"poserPassword"`
	// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
	PppoeAuth pulumi.StringPtrInput `pulumi:"pppoeAuth"`
	// if `type`==`pppoe`
	PppoeUsername pulumi.StringPtrInput `pulumi:"pppoeUsername"`
	// enum: `dhcp`, `pppoe`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GatewaytemplatePortConfigIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigIpConfig)(nil)).Elem()
}

func (i GatewaytemplatePortConfigIpConfigArgs) ToGatewaytemplatePortConfigIpConfigOutput() GatewaytemplatePortConfigIpConfigOutput {
	return i.ToGatewaytemplatePortConfigIpConfigOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigIpConfigArgs) ToGatewaytemplatePortConfigIpConfigOutputWithContext(ctx context.Context) GatewaytemplatePortConfigIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigIpConfigOutput)
}

func (i GatewaytemplatePortConfigIpConfigArgs) ToGatewaytemplatePortConfigIpConfigPtrOutput() GatewaytemplatePortConfigIpConfigPtrOutput {
	return i.ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigIpConfigArgs) ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigIpConfigOutput).ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(ctx)
}

// GatewaytemplatePortConfigIpConfigPtrInput is an input type that accepts GatewaytemplatePortConfigIpConfigArgs, GatewaytemplatePortConfigIpConfigPtr and GatewaytemplatePortConfigIpConfigPtrOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigIpConfigPtrInput` via:
//
//	        GatewaytemplatePortConfigIpConfigArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplatePortConfigIpConfigPtrInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigIpConfigPtrOutput() GatewaytemplatePortConfigIpConfigPtrOutput
	ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(context.Context) GatewaytemplatePortConfigIpConfigPtrOutput
}

type gatewaytemplatePortConfigIpConfigPtrType GatewaytemplatePortConfigIpConfigArgs

func GatewaytemplatePortConfigIpConfigPtr(v *GatewaytemplatePortConfigIpConfigArgs) GatewaytemplatePortConfigIpConfigPtrInput {
	return (*gatewaytemplatePortConfigIpConfigPtrType)(v)
}

func (*gatewaytemplatePortConfigIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigIpConfig)(nil)).Elem()
}

func (i *gatewaytemplatePortConfigIpConfigPtrType) ToGatewaytemplatePortConfigIpConfigPtrOutput() GatewaytemplatePortConfigIpConfigPtrOutput {
	return i.ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplatePortConfigIpConfigPtrType) ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigIpConfigPtrOutput)
}

type GatewaytemplatePortConfigIpConfigOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigIpConfig)(nil)).Elem()
}

func (o GatewaytemplatePortConfigIpConfigOutput) ToGatewaytemplatePortConfigIpConfigOutput() GatewaytemplatePortConfigIpConfigOutput {
	return o
}

func (o GatewaytemplatePortConfigIpConfigOutput) ToGatewaytemplatePortConfigIpConfigOutputWithContext(ctx context.Context) GatewaytemplatePortConfigIpConfigOutput {
	return o
}

func (o GatewaytemplatePortConfigIpConfigOutput) ToGatewaytemplatePortConfigIpConfigPtrOutput() GatewaytemplatePortConfigIpConfigPtrOutput {
	return o.ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(context.Background())
}

func (o GatewaytemplatePortConfigIpConfigOutput) ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplatePortConfigIpConfig) *GatewaytemplatePortConfigIpConfig {
		return &v
	}).(GatewaytemplatePortConfigIpConfigPtrOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o GatewaytemplatePortConfigIpConfigOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) []string { return v.Dns }).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o GatewaytemplatePortConfigIpConfigOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) []string { return v.DnsSuffixes }).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o GatewaytemplatePortConfigIpConfigOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplatePortConfigIpConfigOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o GatewaytemplatePortConfigIpConfigOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

// optional, the network to be used for mgmt
func (o GatewaytemplatePortConfigIpConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o GatewaytemplatePortConfigIpConfigOutput) PoserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.PoserPassword }).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
func (o GatewaytemplatePortConfigIpConfigOutput) PppoeAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.PppoeAuth }).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o GatewaytemplatePortConfigIpConfigOutput) PppoeUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.PppoeUsername }).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `pppoe`, `static`
func (o GatewaytemplatePortConfigIpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigIpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GatewaytemplatePortConfigIpConfigPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigIpConfig)(nil)).Elem()
}

func (o GatewaytemplatePortConfigIpConfigPtrOutput) ToGatewaytemplatePortConfigIpConfigPtrOutput() GatewaytemplatePortConfigIpConfigPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigIpConfigPtrOutput) ToGatewaytemplatePortConfigIpConfigPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigIpConfigPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigIpConfigPtrOutput) Elem() GatewaytemplatePortConfigIpConfigOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) GatewaytemplatePortConfigIpConfig {
		if v != nil {
			return *v
		}
		var ret GatewaytemplatePortConfigIpConfig
		return ret
	}).(GatewaytemplatePortConfigIpConfigOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o GatewaytemplatePortConfigIpConfigPtrOutput) Dns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) []string {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o GatewaytemplatePortConfigIpConfigPtrOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) []string {
		if v == nil {
			return nil
		}
		return v.DnsSuffixes
	}).(pulumi.StringArrayOutput)
}

// except for out-of_band interface (vme/em0/fxp0)
func (o GatewaytemplatePortConfigIpConfigPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

func (o GatewaytemplatePortConfigIpConfigPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// used only if `subnet` is not specified in `networks`
func (o GatewaytemplatePortConfigIpConfigPtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

// optional, the network to be used for mgmt
func (o GatewaytemplatePortConfigIpConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o GatewaytemplatePortConfigIpConfigPtrOutput) PoserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.PoserPassword
	}).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`. enum: `chap`, `none`, `pap`
func (o GatewaytemplatePortConfigIpConfigPtrOutput) PppoeAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.PppoeAuth
	}).(pulumi.StringPtrOutput)
}

// if `type`==`pppoe`
func (o GatewaytemplatePortConfigIpConfigPtrOutput) PppoeUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.PppoeUsername
	}).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `pppoe`, `static`
func (o GatewaytemplatePortConfigIpConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplatePortConfigTrafficShaping struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages []int `pulumi:"classPercentages"`
	Enabled          *bool `pulumi:"enabled"`
}

// GatewaytemplatePortConfigTrafficShapingInput is an input type that accepts GatewaytemplatePortConfigTrafficShapingArgs and GatewaytemplatePortConfigTrafficShapingOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigTrafficShapingInput` via:
//
//	GatewaytemplatePortConfigTrafficShapingArgs{...}
type GatewaytemplatePortConfigTrafficShapingInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigTrafficShapingOutput() GatewaytemplatePortConfigTrafficShapingOutput
	ToGatewaytemplatePortConfigTrafficShapingOutputWithContext(context.Context) GatewaytemplatePortConfigTrafficShapingOutput
}

type GatewaytemplatePortConfigTrafficShapingArgs struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages pulumi.IntArrayInput `pulumi:"classPercentages"`
	Enabled          pulumi.BoolPtrInput  `pulumi:"enabled"`
}

func (GatewaytemplatePortConfigTrafficShapingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigTrafficShaping)(nil)).Elem()
}

func (i GatewaytemplatePortConfigTrafficShapingArgs) ToGatewaytemplatePortConfigTrafficShapingOutput() GatewaytemplatePortConfigTrafficShapingOutput {
	return i.ToGatewaytemplatePortConfigTrafficShapingOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigTrafficShapingArgs) ToGatewaytemplatePortConfigTrafficShapingOutputWithContext(ctx context.Context) GatewaytemplatePortConfigTrafficShapingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigTrafficShapingOutput)
}

func (i GatewaytemplatePortConfigTrafficShapingArgs) ToGatewaytemplatePortConfigTrafficShapingPtrOutput() GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return i.ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigTrafficShapingArgs) ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigTrafficShapingOutput).ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(ctx)
}

// GatewaytemplatePortConfigTrafficShapingPtrInput is an input type that accepts GatewaytemplatePortConfigTrafficShapingArgs, GatewaytemplatePortConfigTrafficShapingPtr and GatewaytemplatePortConfigTrafficShapingPtrOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigTrafficShapingPtrInput` via:
//
//	        GatewaytemplatePortConfigTrafficShapingArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplatePortConfigTrafficShapingPtrInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigTrafficShapingPtrOutput() GatewaytemplatePortConfigTrafficShapingPtrOutput
	ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(context.Context) GatewaytemplatePortConfigTrafficShapingPtrOutput
}

type gatewaytemplatePortConfigTrafficShapingPtrType GatewaytemplatePortConfigTrafficShapingArgs

func GatewaytemplatePortConfigTrafficShapingPtr(v *GatewaytemplatePortConfigTrafficShapingArgs) GatewaytemplatePortConfigTrafficShapingPtrInput {
	return (*gatewaytemplatePortConfigTrafficShapingPtrType)(v)
}

func (*gatewaytemplatePortConfigTrafficShapingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigTrafficShaping)(nil)).Elem()
}

func (i *gatewaytemplatePortConfigTrafficShapingPtrType) ToGatewaytemplatePortConfigTrafficShapingPtrOutput() GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return i.ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplatePortConfigTrafficShapingPtrType) ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigTrafficShapingPtrOutput)
}

type GatewaytemplatePortConfigTrafficShapingOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigTrafficShapingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigTrafficShaping)(nil)).Elem()
}

func (o GatewaytemplatePortConfigTrafficShapingOutput) ToGatewaytemplatePortConfigTrafficShapingOutput() GatewaytemplatePortConfigTrafficShapingOutput {
	return o
}

func (o GatewaytemplatePortConfigTrafficShapingOutput) ToGatewaytemplatePortConfigTrafficShapingOutputWithContext(ctx context.Context) GatewaytemplatePortConfigTrafficShapingOutput {
	return o
}

func (o GatewaytemplatePortConfigTrafficShapingOutput) ToGatewaytemplatePortConfigTrafficShapingPtrOutput() GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return o.ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(context.Background())
}

func (o GatewaytemplatePortConfigTrafficShapingOutput) ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplatePortConfigTrafficShaping) *GatewaytemplatePortConfigTrafficShaping {
		return &v
	}).(GatewaytemplatePortConfigTrafficShapingPtrOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o GatewaytemplatePortConfigTrafficShapingOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigTrafficShaping) []int { return v.ClassPercentages }).(pulumi.IntArrayOutput)
}

func (o GatewaytemplatePortConfigTrafficShapingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigTrafficShaping) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GatewaytemplatePortConfigTrafficShapingPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigTrafficShapingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigTrafficShaping)(nil)).Elem()
}

func (o GatewaytemplatePortConfigTrafficShapingPtrOutput) ToGatewaytemplatePortConfigTrafficShapingPtrOutput() GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigTrafficShapingPtrOutput) ToGatewaytemplatePortConfigTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigTrafficShapingPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigTrafficShapingPtrOutput) Elem() GatewaytemplatePortConfigTrafficShapingOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigTrafficShaping) GatewaytemplatePortConfigTrafficShaping {
		if v != nil {
			return *v
		}
		var ret GatewaytemplatePortConfigTrafficShaping
		return ret
	}).(GatewaytemplatePortConfigTrafficShapingOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o GatewaytemplatePortConfigTrafficShapingPtrOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigTrafficShaping) []int {
		if v == nil {
			return nil
		}
		return v.ClassPercentages
	}).(pulumi.IntArrayOutput)
}

func (o GatewaytemplatePortConfigTrafficShapingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigTrafficShaping) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GatewaytemplatePortConfigVpnPaths struct {
	// enum: `broadband`, `lte`
	BfdProfile *string `pulumi:"bfdProfile"`
	// whether to use tunnel mode. SSR only
	BfdUseTunnelMode *bool `pulumi:"bfdUseTunnelMode"`
	// for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
	Preference *int `pulumi:"preference"`
	// enum: `hub`, `spoke`
	Role           *string                                          `pulumi:"role"`
	TrafficShaping *GatewaytemplatePortConfigVpnPathsTrafficShaping `pulumi:"trafficShaping"`
}

// GatewaytemplatePortConfigVpnPathsInput is an input type that accepts GatewaytemplatePortConfigVpnPathsArgs and GatewaytemplatePortConfigVpnPathsOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigVpnPathsInput` via:
//
//	GatewaytemplatePortConfigVpnPathsArgs{...}
type GatewaytemplatePortConfigVpnPathsInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigVpnPathsOutput() GatewaytemplatePortConfigVpnPathsOutput
	ToGatewaytemplatePortConfigVpnPathsOutputWithContext(context.Context) GatewaytemplatePortConfigVpnPathsOutput
}

type GatewaytemplatePortConfigVpnPathsArgs struct {
	// enum: `broadband`, `lte`
	BfdProfile pulumi.StringPtrInput `pulumi:"bfdProfile"`
	// whether to use tunnel mode. SSR only
	BfdUseTunnelMode pulumi.BoolPtrInput `pulumi:"bfdUseTunnelMode"`
	// for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
	Preference pulumi.IntPtrInput `pulumi:"preference"`
	// enum: `hub`, `spoke`
	Role           pulumi.StringPtrInput                                   `pulumi:"role"`
	TrafficShaping GatewaytemplatePortConfigVpnPathsTrafficShapingPtrInput `pulumi:"trafficShaping"`
}

func (GatewaytemplatePortConfigVpnPathsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigVpnPaths)(nil)).Elem()
}

func (i GatewaytemplatePortConfigVpnPathsArgs) ToGatewaytemplatePortConfigVpnPathsOutput() GatewaytemplatePortConfigVpnPathsOutput {
	return i.ToGatewaytemplatePortConfigVpnPathsOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigVpnPathsArgs) ToGatewaytemplatePortConfigVpnPathsOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigVpnPathsOutput)
}

// GatewaytemplatePortConfigVpnPathsMapInput is an input type that accepts GatewaytemplatePortConfigVpnPathsMap and GatewaytemplatePortConfigVpnPathsMapOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigVpnPathsMapInput` via:
//
//	GatewaytemplatePortConfigVpnPathsMap{ "key": GatewaytemplatePortConfigVpnPathsArgs{...} }
type GatewaytemplatePortConfigVpnPathsMapInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigVpnPathsMapOutput() GatewaytemplatePortConfigVpnPathsMapOutput
	ToGatewaytemplatePortConfigVpnPathsMapOutputWithContext(context.Context) GatewaytemplatePortConfigVpnPathsMapOutput
}

type GatewaytemplatePortConfigVpnPathsMap map[string]GatewaytemplatePortConfigVpnPathsInput

func (GatewaytemplatePortConfigVpnPathsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplatePortConfigVpnPaths)(nil)).Elem()
}

func (i GatewaytemplatePortConfigVpnPathsMap) ToGatewaytemplatePortConfigVpnPathsMapOutput() GatewaytemplatePortConfigVpnPathsMapOutput {
	return i.ToGatewaytemplatePortConfigVpnPathsMapOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigVpnPathsMap) ToGatewaytemplatePortConfigVpnPathsMapOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigVpnPathsMapOutput)
}

type GatewaytemplatePortConfigVpnPathsOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigVpnPathsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigVpnPaths)(nil)).Elem()
}

func (o GatewaytemplatePortConfigVpnPathsOutput) ToGatewaytemplatePortConfigVpnPathsOutput() GatewaytemplatePortConfigVpnPathsOutput {
	return o
}

func (o GatewaytemplatePortConfigVpnPathsOutput) ToGatewaytemplatePortConfigVpnPathsOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsOutput {
	return o
}

// enum: `broadband`, `lte`
func (o GatewaytemplatePortConfigVpnPathsOutput) BfdProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigVpnPaths) *string { return v.BfdProfile }).(pulumi.StringPtrOutput)
}

// whether to use tunnel mode. SSR only
func (o GatewaytemplatePortConfigVpnPathsOutput) BfdUseTunnelMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigVpnPaths) *bool { return v.BfdUseTunnelMode }).(pulumi.BoolPtrOutput)
}

// for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
func (o GatewaytemplatePortConfigVpnPathsOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigVpnPaths) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// enum: `hub`, `spoke`
func (o GatewaytemplatePortConfigVpnPathsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigVpnPaths) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplatePortConfigVpnPathsOutput) TrafficShaping() GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigVpnPaths) *GatewaytemplatePortConfigVpnPathsTrafficShaping {
		return v.TrafficShaping
	}).(GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput)
}

type GatewaytemplatePortConfigVpnPathsMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigVpnPathsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplatePortConfigVpnPaths)(nil)).Elem()
}

func (o GatewaytemplatePortConfigVpnPathsMapOutput) ToGatewaytemplatePortConfigVpnPathsMapOutput() GatewaytemplatePortConfigVpnPathsMapOutput {
	return o
}

func (o GatewaytemplatePortConfigVpnPathsMapOutput) ToGatewaytemplatePortConfigVpnPathsMapOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsMapOutput {
	return o
}

func (o GatewaytemplatePortConfigVpnPathsMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplatePortConfigVpnPathsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplatePortConfigVpnPaths {
		return vs[0].(map[string]GatewaytemplatePortConfigVpnPaths)[vs[1].(string)]
	}).(GatewaytemplatePortConfigVpnPathsOutput)
}

type GatewaytemplatePortConfigVpnPathsTrafficShaping struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages []int `pulumi:"classPercentages"`
	Enabled          *bool `pulumi:"enabled"`
}

// GatewaytemplatePortConfigVpnPathsTrafficShapingInput is an input type that accepts GatewaytemplatePortConfigVpnPathsTrafficShapingArgs and GatewaytemplatePortConfigVpnPathsTrafficShapingOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigVpnPathsTrafficShapingInput` via:
//
//	GatewaytemplatePortConfigVpnPathsTrafficShapingArgs{...}
type GatewaytemplatePortConfigVpnPathsTrafficShapingInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigVpnPathsTrafficShapingOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingOutput
	ToGatewaytemplatePortConfigVpnPathsTrafficShapingOutputWithContext(context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingOutput
}

type GatewaytemplatePortConfigVpnPathsTrafficShapingArgs struct {
	// percentages for differet class of traffic: high / medium / low / best-effort
	// sum must be equal to 100
	ClassPercentages pulumi.IntArrayInput `pulumi:"classPercentages"`
	Enabled          pulumi.BoolPtrInput  `pulumi:"enabled"`
}

func (GatewaytemplatePortConfigVpnPathsTrafficShapingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (i GatewaytemplatePortConfigVpnPathsTrafficShapingArgs) ToGatewaytemplatePortConfigVpnPathsTrafficShapingOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingOutput {
	return i.ToGatewaytemplatePortConfigVpnPathsTrafficShapingOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigVpnPathsTrafficShapingArgs) ToGatewaytemplatePortConfigVpnPathsTrafficShapingOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigVpnPathsTrafficShapingOutput)
}

func (i GatewaytemplatePortConfigVpnPathsTrafficShapingArgs) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return i.ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigVpnPathsTrafficShapingArgs) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigVpnPathsTrafficShapingOutput).ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx)
}

// GatewaytemplatePortConfigVpnPathsTrafficShapingPtrInput is an input type that accepts GatewaytemplatePortConfigVpnPathsTrafficShapingArgs, GatewaytemplatePortConfigVpnPathsTrafficShapingPtr and GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigVpnPathsTrafficShapingPtrInput` via:
//
//	        GatewaytemplatePortConfigVpnPathsTrafficShapingArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplatePortConfigVpnPathsTrafficShapingPtrInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput
	ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput
}

type gatewaytemplatePortConfigVpnPathsTrafficShapingPtrType GatewaytemplatePortConfigVpnPathsTrafficShapingArgs

func GatewaytemplatePortConfigVpnPathsTrafficShapingPtr(v *GatewaytemplatePortConfigVpnPathsTrafficShapingArgs) GatewaytemplatePortConfigVpnPathsTrafficShapingPtrInput {
	return (*gatewaytemplatePortConfigVpnPathsTrafficShapingPtrType)(v)
}

func (*gatewaytemplatePortConfigVpnPathsTrafficShapingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (i *gatewaytemplatePortConfigVpnPathsTrafficShapingPtrType) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return i.ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplatePortConfigVpnPathsTrafficShapingPtrType) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput)
}

type GatewaytemplatePortConfigVpnPathsTrafficShapingOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigVpnPathsTrafficShapingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingOutput) ToGatewaytemplatePortConfigVpnPathsTrafficShapingOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingOutput {
	return o
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingOutput) ToGatewaytemplatePortConfigVpnPathsTrafficShapingOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingOutput {
	return o
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingOutput) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return o.ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(context.Background())
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingOutput) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplatePortConfigVpnPathsTrafficShaping) *GatewaytemplatePortConfigVpnPathsTrafficShaping {
		return &v
	}).(GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o GatewaytemplatePortConfigVpnPathsTrafficShapingOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigVpnPathsTrafficShaping) []int { return v.ClassPercentages }).(pulumi.IntArrayOutput)
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigVpnPathsTrafficShaping) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigVpnPathsTrafficShaping)(nil)).Elem()
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput() GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput) ToGatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput) Elem() GatewaytemplatePortConfigVpnPathsTrafficShapingOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigVpnPathsTrafficShaping) GatewaytemplatePortConfigVpnPathsTrafficShaping {
		if v != nil {
			return *v
		}
		var ret GatewaytemplatePortConfigVpnPathsTrafficShaping
		return ret
	}).(GatewaytemplatePortConfigVpnPathsTrafficShapingOutput)
}

// percentages for differet class of traffic: high / medium / low / best-effort
// sum must be equal to 100
func (o GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput) ClassPercentages() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigVpnPathsTrafficShaping) []int {
		if v == nil {
			return nil
		}
		return v.ClassPercentages
	}).(pulumi.IntArrayOutput)
}

func (o GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigVpnPathsTrafficShaping) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GatewaytemplatePortConfigWanSourceNat struct {
	// or to disable the source-nat
	Disabled *bool `pulumi:"disabled"`
	// if alternative natPool is desired
	NatPool *string `pulumi:"natPool"`
}

// GatewaytemplatePortConfigWanSourceNatInput is an input type that accepts GatewaytemplatePortConfigWanSourceNatArgs and GatewaytemplatePortConfigWanSourceNatOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigWanSourceNatInput` via:
//
//	GatewaytemplatePortConfigWanSourceNatArgs{...}
type GatewaytemplatePortConfigWanSourceNatInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigWanSourceNatOutput() GatewaytemplatePortConfigWanSourceNatOutput
	ToGatewaytemplatePortConfigWanSourceNatOutputWithContext(context.Context) GatewaytemplatePortConfigWanSourceNatOutput
}

type GatewaytemplatePortConfigWanSourceNatArgs struct {
	// or to disable the source-nat
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// if alternative natPool is desired
	NatPool pulumi.StringPtrInput `pulumi:"natPool"`
}

func (GatewaytemplatePortConfigWanSourceNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigWanSourceNat)(nil)).Elem()
}

func (i GatewaytemplatePortConfigWanSourceNatArgs) ToGatewaytemplatePortConfigWanSourceNatOutput() GatewaytemplatePortConfigWanSourceNatOutput {
	return i.ToGatewaytemplatePortConfigWanSourceNatOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigWanSourceNatArgs) ToGatewaytemplatePortConfigWanSourceNatOutputWithContext(ctx context.Context) GatewaytemplatePortConfigWanSourceNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigWanSourceNatOutput)
}

func (i GatewaytemplatePortConfigWanSourceNatArgs) ToGatewaytemplatePortConfigWanSourceNatPtrOutput() GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return i.ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(context.Background())
}

func (i GatewaytemplatePortConfigWanSourceNatArgs) ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigWanSourceNatOutput).ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(ctx)
}

// GatewaytemplatePortConfigWanSourceNatPtrInput is an input type that accepts GatewaytemplatePortConfigWanSourceNatArgs, GatewaytemplatePortConfigWanSourceNatPtr and GatewaytemplatePortConfigWanSourceNatPtrOutput values.
// You can construct a concrete instance of `GatewaytemplatePortConfigWanSourceNatPtrInput` via:
//
//	        GatewaytemplatePortConfigWanSourceNatArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplatePortConfigWanSourceNatPtrInput interface {
	pulumi.Input

	ToGatewaytemplatePortConfigWanSourceNatPtrOutput() GatewaytemplatePortConfigWanSourceNatPtrOutput
	ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(context.Context) GatewaytemplatePortConfigWanSourceNatPtrOutput
}

type gatewaytemplatePortConfigWanSourceNatPtrType GatewaytemplatePortConfigWanSourceNatArgs

func GatewaytemplatePortConfigWanSourceNatPtr(v *GatewaytemplatePortConfigWanSourceNatArgs) GatewaytemplatePortConfigWanSourceNatPtrInput {
	return (*gatewaytemplatePortConfigWanSourceNatPtrType)(v)
}

func (*gatewaytemplatePortConfigWanSourceNatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigWanSourceNat)(nil)).Elem()
}

func (i *gatewaytemplatePortConfigWanSourceNatPtrType) ToGatewaytemplatePortConfigWanSourceNatPtrOutput() GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return i.ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplatePortConfigWanSourceNatPtrType) ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplatePortConfigWanSourceNatPtrOutput)
}

type GatewaytemplatePortConfigWanSourceNatOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigWanSourceNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplatePortConfigWanSourceNat)(nil)).Elem()
}

func (o GatewaytemplatePortConfigWanSourceNatOutput) ToGatewaytemplatePortConfigWanSourceNatOutput() GatewaytemplatePortConfigWanSourceNatOutput {
	return o
}

func (o GatewaytemplatePortConfigWanSourceNatOutput) ToGatewaytemplatePortConfigWanSourceNatOutputWithContext(ctx context.Context) GatewaytemplatePortConfigWanSourceNatOutput {
	return o
}

func (o GatewaytemplatePortConfigWanSourceNatOutput) ToGatewaytemplatePortConfigWanSourceNatPtrOutput() GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return o.ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(context.Background())
}

func (o GatewaytemplatePortConfigWanSourceNatOutput) ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplatePortConfigWanSourceNat) *GatewaytemplatePortConfigWanSourceNat {
		return &v
	}).(GatewaytemplatePortConfigWanSourceNatPtrOutput)
}

// or to disable the source-nat
func (o GatewaytemplatePortConfigWanSourceNatOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigWanSourceNat) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// if alternative natPool is desired
func (o GatewaytemplatePortConfigWanSourceNatOutput) NatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplatePortConfigWanSourceNat) *string { return v.NatPool }).(pulumi.StringPtrOutput)
}

type GatewaytemplatePortConfigWanSourceNatPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplatePortConfigWanSourceNatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplatePortConfigWanSourceNat)(nil)).Elem()
}

func (o GatewaytemplatePortConfigWanSourceNatPtrOutput) ToGatewaytemplatePortConfigWanSourceNatPtrOutput() GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigWanSourceNatPtrOutput) ToGatewaytemplatePortConfigWanSourceNatPtrOutputWithContext(ctx context.Context) GatewaytemplatePortConfigWanSourceNatPtrOutput {
	return o
}

func (o GatewaytemplatePortConfigWanSourceNatPtrOutput) Elem() GatewaytemplatePortConfigWanSourceNatOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigWanSourceNat) GatewaytemplatePortConfigWanSourceNat {
		if v != nil {
			return *v
		}
		var ret GatewaytemplatePortConfigWanSourceNat
		return ret
	}).(GatewaytemplatePortConfigWanSourceNatOutput)
}

// or to disable the source-nat
func (o GatewaytemplatePortConfigWanSourceNatPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigWanSourceNat) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// if alternative natPool is desired
func (o GatewaytemplatePortConfigWanSourceNatPtrOutput) NatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplatePortConfigWanSourceNat) *string {
		if v == nil {
			return nil
		}
		return v.NatPool
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplateRoutingPolicies struct {
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Terms []GatewaytemplateRoutingPoliciesTerm `pulumi:"terms"`
}

// GatewaytemplateRoutingPoliciesInput is an input type that accepts GatewaytemplateRoutingPoliciesArgs and GatewaytemplateRoutingPoliciesOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesInput` via:
//
//	GatewaytemplateRoutingPoliciesArgs{...}
type GatewaytemplateRoutingPoliciesInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesOutput() GatewaytemplateRoutingPoliciesOutput
	ToGatewaytemplateRoutingPoliciesOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesOutput
}

type GatewaytemplateRoutingPoliciesArgs struct {
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Terms GatewaytemplateRoutingPoliciesTermArrayInput `pulumi:"terms"`
}

func (GatewaytemplateRoutingPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPolicies)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesArgs) ToGatewaytemplateRoutingPoliciesOutput() GatewaytemplateRoutingPoliciesOutput {
	return i.ToGatewaytemplateRoutingPoliciesOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesArgs) ToGatewaytemplateRoutingPoliciesOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesOutput)
}

// GatewaytemplateRoutingPoliciesMapInput is an input type that accepts GatewaytemplateRoutingPoliciesMap and GatewaytemplateRoutingPoliciesMapOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesMapInput` via:
//
//	GatewaytemplateRoutingPoliciesMap{ "key": GatewaytemplateRoutingPoliciesArgs{...} }
type GatewaytemplateRoutingPoliciesMapInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesMapOutput() GatewaytemplateRoutingPoliciesMapOutput
	ToGatewaytemplateRoutingPoliciesMapOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesMapOutput
}

type GatewaytemplateRoutingPoliciesMap map[string]GatewaytemplateRoutingPoliciesInput

func (GatewaytemplateRoutingPoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateRoutingPolicies)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesMap) ToGatewaytemplateRoutingPoliciesMapOutput() GatewaytemplateRoutingPoliciesMapOutput {
	return i.ToGatewaytemplateRoutingPoliciesMapOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesMap) ToGatewaytemplateRoutingPoliciesMapOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesMapOutput)
}

type GatewaytemplateRoutingPoliciesOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPolicies)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesOutput) ToGatewaytemplateRoutingPoliciesOutput() GatewaytemplateRoutingPoliciesOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesOutput) ToGatewaytemplateRoutingPoliciesOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesOutput {
	return o
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o GatewaytemplateRoutingPoliciesOutput) Terms() GatewaytemplateRoutingPoliciesTermArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPolicies) []GatewaytemplateRoutingPoliciesTerm { return v.Terms }).(GatewaytemplateRoutingPoliciesTermArrayOutput)
}

type GatewaytemplateRoutingPoliciesMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateRoutingPolicies)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesMapOutput) ToGatewaytemplateRoutingPoliciesMapOutput() GatewaytemplateRoutingPoliciesMapOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesMapOutput) ToGatewaytemplateRoutingPoliciesMapOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesMapOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateRoutingPoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateRoutingPolicies {
		return vs[0].(map[string]GatewaytemplateRoutingPolicies)[vs[1].(string)]
	}).(GatewaytemplateRoutingPoliciesOutput)
}

type GatewaytemplateRoutingPoliciesTerm struct {
	// when used as import policy
	Action *GatewaytemplateRoutingPoliciesTermAction `pulumi:"action"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Matching *GatewaytemplateRoutingPoliciesTermMatching `pulumi:"matching"`
}

// GatewaytemplateRoutingPoliciesTermInput is an input type that accepts GatewaytemplateRoutingPoliciesTermArgs and GatewaytemplateRoutingPoliciesTermOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermInput` via:
//
//	GatewaytemplateRoutingPoliciesTermArgs{...}
type GatewaytemplateRoutingPoliciesTermInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermOutput() GatewaytemplateRoutingPoliciesTermOutput
	ToGatewaytemplateRoutingPoliciesTermOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermOutput
}

type GatewaytemplateRoutingPoliciesTermArgs struct {
	// when used as import policy
	Action GatewaytemplateRoutingPoliciesTermActionPtrInput `pulumi:"action"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Matching GatewaytemplateRoutingPoliciesTermMatchingPtrInput `pulumi:"matching"`
}

func (GatewaytemplateRoutingPoliciesTermArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTerm)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesTermArgs) ToGatewaytemplateRoutingPoliciesTermOutput() GatewaytemplateRoutingPoliciesTermOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermArgs) ToGatewaytemplateRoutingPoliciesTermOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermOutput)
}

// GatewaytemplateRoutingPoliciesTermArrayInput is an input type that accepts GatewaytemplateRoutingPoliciesTermArray and GatewaytemplateRoutingPoliciesTermArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermArrayInput` via:
//
//	GatewaytemplateRoutingPoliciesTermArray{ GatewaytemplateRoutingPoliciesTermArgs{...} }
type GatewaytemplateRoutingPoliciesTermArrayInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermArrayOutput() GatewaytemplateRoutingPoliciesTermArrayOutput
	ToGatewaytemplateRoutingPoliciesTermArrayOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermArrayOutput
}

type GatewaytemplateRoutingPoliciesTermArray []GatewaytemplateRoutingPoliciesTermInput

func (GatewaytemplateRoutingPoliciesTermArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateRoutingPoliciesTerm)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesTermArray) ToGatewaytemplateRoutingPoliciesTermArrayOutput() GatewaytemplateRoutingPoliciesTermArrayOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermArray) ToGatewaytemplateRoutingPoliciesTermArrayOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermArrayOutput)
}

type GatewaytemplateRoutingPoliciesTermOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTerm)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermOutput) ToGatewaytemplateRoutingPoliciesTermOutput() GatewaytemplateRoutingPoliciesTermOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermOutput) ToGatewaytemplateRoutingPoliciesTermOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermOutput {
	return o
}

// when used as import policy
func (o GatewaytemplateRoutingPoliciesTermOutput) Action() GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTerm) *GatewaytemplateRoutingPoliciesTermAction { return v.Action }).(GatewaytemplateRoutingPoliciesTermActionPtrOutput)
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o GatewaytemplateRoutingPoliciesTermOutput) Matching() GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTerm) *GatewaytemplateRoutingPoliciesTermMatching {
		return v.Matching
	}).(GatewaytemplateRoutingPoliciesTermMatchingPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateRoutingPoliciesTerm)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermArrayOutput) ToGatewaytemplateRoutingPoliciesTermArrayOutput() GatewaytemplateRoutingPoliciesTermArrayOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermArrayOutput) ToGatewaytemplateRoutingPoliciesTermArrayOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermArrayOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermArrayOutput) Index(i pulumi.IntInput) GatewaytemplateRoutingPoliciesTermOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateRoutingPoliciesTerm {
		return vs[0].([]GatewaytemplateRoutingPoliciesTerm)[vs[1].(int)]
	}).(GatewaytemplateRoutingPoliciesTermOutput)
}

type GatewaytemplateRoutingPoliciesTermAction struct {
	Accept         *bool    `pulumi:"accept"`
	AddCommunities []string `pulumi:"addCommunities"`
	// for SSR, hub decides how VRF routes are leaked on spoke
	AddTargetVrfs []string `pulumi:"addTargetVrfs"`
	// when used as export policy, optional
	Communities []string `pulumi:"communities"`
	// when used as export policy, optional. To exclude certain AS
	ExcludeAsPaths     []string `pulumi:"excludeAsPaths"`
	ExcludeCommunities []string `pulumi:"excludeCommunities"`
	// when used as export policy, optional
	ExportCommunitites []string `pulumi:"exportCommunitites"`
	// optional, for an import policy, localPreference can be changed
	LocalPreference *string `pulumi:"localPreference"`
	// when used as export policy, optional. By default, the local AS will be prepended, to change it
	PrependAsPaths []string `pulumi:"prependAsPaths"`
}

// GatewaytemplateRoutingPoliciesTermActionInput is an input type that accepts GatewaytemplateRoutingPoliciesTermActionArgs and GatewaytemplateRoutingPoliciesTermActionOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermActionInput` via:
//
//	GatewaytemplateRoutingPoliciesTermActionArgs{...}
type GatewaytemplateRoutingPoliciesTermActionInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermActionOutput() GatewaytemplateRoutingPoliciesTermActionOutput
	ToGatewaytemplateRoutingPoliciesTermActionOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermActionOutput
}

type GatewaytemplateRoutingPoliciesTermActionArgs struct {
	Accept         pulumi.BoolPtrInput     `pulumi:"accept"`
	AddCommunities pulumi.StringArrayInput `pulumi:"addCommunities"`
	// for SSR, hub decides how VRF routes are leaked on spoke
	AddTargetVrfs pulumi.StringArrayInput `pulumi:"addTargetVrfs"`
	// when used as export policy, optional
	Communities pulumi.StringArrayInput `pulumi:"communities"`
	// when used as export policy, optional. To exclude certain AS
	ExcludeAsPaths     pulumi.StringArrayInput `pulumi:"excludeAsPaths"`
	ExcludeCommunities pulumi.StringArrayInput `pulumi:"excludeCommunities"`
	// when used as export policy, optional
	ExportCommunitites pulumi.StringArrayInput `pulumi:"exportCommunitites"`
	// optional, for an import policy, localPreference can be changed
	LocalPreference pulumi.StringPtrInput `pulumi:"localPreference"`
	// when used as export policy, optional. By default, the local AS will be prepended, to change it
	PrependAsPaths pulumi.StringArrayInput `pulumi:"prependAsPaths"`
}

func (GatewaytemplateRoutingPoliciesTermActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermAction)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesTermActionArgs) ToGatewaytemplateRoutingPoliciesTermActionOutput() GatewaytemplateRoutingPoliciesTermActionOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermActionOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermActionArgs) ToGatewaytemplateRoutingPoliciesTermActionOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermActionOutput)
}

func (i GatewaytemplateRoutingPoliciesTermActionArgs) ToGatewaytemplateRoutingPoliciesTermActionPtrOutput() GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermActionArgs) ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermActionOutput).ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(ctx)
}

// GatewaytemplateRoutingPoliciesTermActionPtrInput is an input type that accepts GatewaytemplateRoutingPoliciesTermActionArgs, GatewaytemplateRoutingPoliciesTermActionPtr and GatewaytemplateRoutingPoliciesTermActionPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermActionPtrInput` via:
//
//	        GatewaytemplateRoutingPoliciesTermActionArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateRoutingPoliciesTermActionPtrInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermActionPtrOutput() GatewaytemplateRoutingPoliciesTermActionPtrOutput
	ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermActionPtrOutput
}

type gatewaytemplateRoutingPoliciesTermActionPtrType GatewaytemplateRoutingPoliciesTermActionArgs

func GatewaytemplateRoutingPoliciesTermActionPtr(v *GatewaytemplateRoutingPoliciesTermActionArgs) GatewaytemplateRoutingPoliciesTermActionPtrInput {
	return (*gatewaytemplateRoutingPoliciesTermActionPtrType)(v)
}

func (*gatewaytemplateRoutingPoliciesTermActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermAction)(nil)).Elem()
}

func (i *gatewaytemplateRoutingPoliciesTermActionPtrType) ToGatewaytemplateRoutingPoliciesTermActionPtrOutput() GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateRoutingPoliciesTermActionPtrType) ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermActionPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermActionOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermAction)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermActionOutput) ToGatewaytemplateRoutingPoliciesTermActionOutput() GatewaytemplateRoutingPoliciesTermActionOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermActionOutput) ToGatewaytemplateRoutingPoliciesTermActionOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermActionOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermActionOutput) ToGatewaytemplateRoutingPoliciesTermActionPtrOutput() GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return o.ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateRoutingPoliciesTermActionOutput) ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateRoutingPoliciesTermAction) *GatewaytemplateRoutingPoliciesTermAction {
		return &v
	}).(GatewaytemplateRoutingPoliciesTermActionPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermActionOutput) Accept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) *bool { return v.Accept }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermActionOutput) AddCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) []string { return v.AddCommunities }).(pulumi.StringArrayOutput)
}

// for SSR, hub decides how VRF routes are leaked on spoke
func (o GatewaytemplateRoutingPoliciesTermActionOutput) AddTargetVrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) []string { return v.AddTargetVrfs }).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o GatewaytemplateRoutingPoliciesTermActionOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

// when used as export policy, optional. To exclude certain AS
func (o GatewaytemplateRoutingPoliciesTermActionOutput) ExcludeAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) []string { return v.ExcludeAsPaths }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermActionOutput) ExcludeCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) []string { return v.ExcludeCommunities }).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o GatewaytemplateRoutingPoliciesTermActionOutput) ExportCommunitites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) []string { return v.ExportCommunitites }).(pulumi.StringArrayOutput)
}

// optional, for an import policy, localPreference can be changed
func (o GatewaytemplateRoutingPoliciesTermActionOutput) LocalPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) *string { return v.LocalPreference }).(pulumi.StringPtrOutput)
}

// when used as export policy, optional. By default, the local AS will be prepended, to change it
func (o GatewaytemplateRoutingPoliciesTermActionOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermAction) []string { return v.PrependAsPaths }).(pulumi.StringArrayOutput)
}

type GatewaytemplateRoutingPoliciesTermActionPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermAction)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) ToGatewaytemplateRoutingPoliciesTermActionPtrOutput() GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) ToGatewaytemplateRoutingPoliciesTermActionPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermActionPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) Elem() GatewaytemplateRoutingPoliciesTermActionOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) GatewaytemplateRoutingPoliciesTermAction {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateRoutingPoliciesTermAction
		return ret
	}).(GatewaytemplateRoutingPoliciesTermActionOutput)
}

func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) Accept() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) *bool {
		if v == nil {
			return nil
		}
		return v.Accept
	}).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) AddCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.AddCommunities
	}).(pulumi.StringArrayOutput)
}

// for SSR, hub decides how VRF routes are leaked on spoke
func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) AddTargetVrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.AddTargetVrfs
	}).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.Communities
	}).(pulumi.StringArrayOutput)
}

// when used as export policy, optional. To exclude certain AS
func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) ExcludeAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeAsPaths
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) ExcludeCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeCommunities
	}).(pulumi.StringArrayOutput)
}

// when used as export policy, optional
func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) ExportCommunitites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.ExportCommunitites
	}).(pulumi.StringArrayOutput)
}

// optional, for an import policy, localPreference can be changed
func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) LocalPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) *string {
		if v == nil {
			return nil
		}
		return v.LocalPreference
	}).(pulumi.StringPtrOutput)
}

// when used as export policy, optional. By default, the local AS will be prepended, to change it
func (o GatewaytemplateRoutingPoliciesTermActionPtrOutput) PrependAsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermAction) []string {
		if v == nil {
			return nil
		}
		return v.PrependAsPaths
	}).(pulumi.StringArrayOutput)
}

type GatewaytemplateRoutingPoliciesTermMatching struct {
	// takes regular expression
	AsPaths     []string `pulumi:"asPaths"`
	Communities []string `pulumi:"communities"`
	Networks    []string `pulumi:"networks"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Prefixes []string `pulumi:"prefixes"`
	// `direct`, `bgp`, `osp`, ...
	Protocols   []string                                               `pulumi:"protocols"`
	RouteExists *GatewaytemplateRoutingPoliciesTermMatchingRouteExists `pulumi:"routeExists"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	VpnNeighborMacs []string                                              `pulumi:"vpnNeighborMacs"`
	VpnPathSla      *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla `pulumi:"vpnPathSla"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	// ordered-
	VpnPaths []string `pulumi:"vpnPaths"`
}

// GatewaytemplateRoutingPoliciesTermMatchingInput is an input type that accepts GatewaytemplateRoutingPoliciesTermMatchingArgs and GatewaytemplateRoutingPoliciesTermMatchingOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermMatchingInput` via:
//
//	GatewaytemplateRoutingPoliciesTermMatchingArgs{...}
type GatewaytemplateRoutingPoliciesTermMatchingInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermMatchingOutput() GatewaytemplateRoutingPoliciesTermMatchingOutput
	ToGatewaytemplateRoutingPoliciesTermMatchingOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermMatchingOutput
}

type GatewaytemplateRoutingPoliciesTermMatchingArgs struct {
	// takes regular expression
	AsPaths     pulumi.StringArrayInput `pulumi:"asPaths"`
	Communities pulumi.StringArrayInput `pulumi:"communities"`
	Networks    pulumi.StringArrayInput `pulumi:"networks"`
	// zero or more criteria/filter can be specified to match the term, all criteria have to be met
	Prefixes pulumi.StringArrayInput `pulumi:"prefixes"`
	// `direct`, `bgp`, `osp`, ...
	Protocols   pulumi.StringArrayInput                                       `pulumi:"protocols"`
	RouteExists GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrInput `pulumi:"routeExists"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	VpnNeighborMacs pulumi.StringArrayInput                                      `pulumi:"vpnNeighborMacs"`
	VpnPathSla      GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrInput `pulumi:"vpnPathSla"`
	// overlay-facing criteria (used for bgpConfig where via=vpn)
	// ordered-
	VpnPaths pulumi.StringArrayInput `pulumi:"vpnPaths"`
}

func (GatewaytemplateRoutingPoliciesTermMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatching)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesTermMatchingArgs) ToGatewaytemplateRoutingPoliciesTermMatchingOutput() GatewaytemplateRoutingPoliciesTermMatchingOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermMatchingArgs) ToGatewaytemplateRoutingPoliciesTermMatchingOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingOutput)
}

func (i GatewaytemplateRoutingPoliciesTermMatchingArgs) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermMatchingArgs) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingOutput).ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(ctx)
}

// GatewaytemplateRoutingPoliciesTermMatchingPtrInput is an input type that accepts GatewaytemplateRoutingPoliciesTermMatchingArgs, GatewaytemplateRoutingPoliciesTermMatchingPtr and GatewaytemplateRoutingPoliciesTermMatchingPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermMatchingPtrInput` via:
//
//	        GatewaytemplateRoutingPoliciesTermMatchingArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateRoutingPoliciesTermMatchingPtrInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingPtrOutput
	ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermMatchingPtrOutput
}

type gatewaytemplateRoutingPoliciesTermMatchingPtrType GatewaytemplateRoutingPoliciesTermMatchingArgs

func GatewaytemplateRoutingPoliciesTermMatchingPtr(v *GatewaytemplateRoutingPoliciesTermMatchingArgs) GatewaytemplateRoutingPoliciesTermMatchingPtrInput {
	return (*gatewaytemplateRoutingPoliciesTermMatchingPtrType)(v)
}

func (*gatewaytemplateRoutingPoliciesTermMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermMatching)(nil)).Elem()
}

func (i *gatewaytemplateRoutingPoliciesTermMatchingPtrType) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateRoutingPoliciesTermMatchingPtrType) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatching)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) ToGatewaytemplateRoutingPoliciesTermMatchingOutput() GatewaytemplateRoutingPoliciesTermMatchingOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) ToGatewaytemplateRoutingPoliciesTermMatchingOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return o.ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateRoutingPoliciesTermMatching) *GatewaytemplateRoutingPoliciesTermMatching {
		return &v
	}).(GatewaytemplateRoutingPoliciesTermMatchingPtrOutput)
}

// takes regular expression
func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) AsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) []string { return v.AsPaths }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) []string { return v.Prefixes }).(pulumi.StringArrayOutput)
}

// `direct`, `bgp`, `osp`, ...
func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) []string { return v.Protocols }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) RouteExists() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) *GatewaytemplateRoutingPoliciesTermMatchingRouteExists {
		return v.RouteExists
	}).(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) VpnNeighborMacs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) []string { return v.VpnNeighborMacs }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) VpnPathSla() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla {
		return v.VpnPathSla
	}).(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
// ordered-
func (o GatewaytemplateRoutingPoliciesTermMatchingOutput) VpnPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatching) []string { return v.VpnPaths }).(pulumi.StringArrayOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermMatching)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) ToGatewaytemplateRoutingPoliciesTermMatchingPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) Elem() GatewaytemplateRoutingPoliciesTermMatchingOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) GatewaytemplateRoutingPoliciesTermMatching {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateRoutingPoliciesTermMatching
		return ret
	}).(GatewaytemplateRoutingPoliciesTermMatchingOutput)
}

// takes regular expression
func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) AsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.AsPaths
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Communities
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(pulumi.StringArrayOutput)
}

// zero or more criteria/filter can be specified to match the term, all criteria have to be met
func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Prefixes
	}).(pulumi.StringArrayOutput)
}

// `direct`, `bgp`, `osp`, ...
func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.Protocols
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) RouteExists() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) *GatewaytemplateRoutingPoliciesTermMatchingRouteExists {
		if v == nil {
			return nil
		}
		return v.RouteExists
	}).(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) VpnNeighborMacs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.VpnNeighborMacs
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) VpnPathSla() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla {
		if v == nil {
			return nil
		}
		return v.VpnPathSla
	}).(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

// overlay-facing criteria (used for bgpConfig where via=vpn)
// ordered-
func (o GatewaytemplateRoutingPoliciesTermMatchingPtrOutput) VpnPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatching) []string {
		if v == nil {
			return nil
		}
		return v.VpnPaths
	}).(pulumi.StringArrayOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingRouteExists struct {
	Route *string `pulumi:"route"`
	// name of the vrf instance
	// it can also be the name of the VPN or wan if they
	VrfName *string `pulumi:"vrfName"`
}

// GatewaytemplateRoutingPoliciesTermMatchingRouteExistsInput is an input type that accepts GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs and GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermMatchingRouteExistsInput` via:
//
//	GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs{...}
type GatewaytemplateRoutingPoliciesTermMatchingRouteExistsInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput
	ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput
}

type GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs struct {
	Route pulumi.StringPtrInput `pulumi:"route"`
	// name of the vrf instance
	// it can also be the name of the VPN or wan if they
	VrfName pulumi.StringPtrInput `pulumi:"vrfName"`
}

func (GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput)
}

func (i GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput).ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx)
}

// GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrInput is an input type that accepts GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs, GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtr and GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrInput` via:
//
//	        GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput
	ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput
}

type gatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrType GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs

func GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtr(v *GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrInput {
	return (*gatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrType)(v)
}

func (*gatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (i *gatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrType) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrType) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateRoutingPoliciesTermMatchingRouteExists) *GatewaytemplateRoutingPoliciesTermMatchingRouteExists {
		return &v
	}).(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatchingRouteExists) *string { return v.Route }).(pulumi.StringPtrOutput)
}

// name of the vrf instance
// it can also be the name of the VPN or wan if they
func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput) VrfName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatchingRouteExists) *string { return v.VrfName }).(pulumi.StringPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermMatchingRouteExists)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput) ToGatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput) Elem() GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatchingRouteExists) GatewaytemplateRoutingPoliciesTermMatchingRouteExists {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateRoutingPoliciesTermMatchingRouteExists
		return ret
	}).(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatchingRouteExists) *string {
		if v == nil {
			return nil
		}
		return v.Route
	}).(pulumi.StringPtrOutput)
}

// name of the vrf instance
// it can also be the name of the VPN or wan if they
func (o GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput) VrfName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatchingRouteExists) *string {
		if v == nil {
			return nil
		}
		return v.VrfName
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla struct {
	MaxJitter  *int `pulumi:"maxJitter"`
	MaxLatency *int `pulumi:"maxLatency"`
	MaxLoss    *int `pulumi:"maxLoss"`
}

// GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaInput is an input type that accepts GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs and GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaInput` via:
//
//	GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs{...}
type GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput
	ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput
}

type GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs struct {
	MaxJitter  pulumi.IntPtrInput `pulumi:"maxJitter"`
	MaxLatency pulumi.IntPtrInput `pulumi:"maxLatency"`
	MaxLoss    pulumi.IntPtrInput `pulumi:"maxLoss"`
}

func (GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (i GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput)
}

func (i GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput).ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx)
}

// GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrInput is an input type that accepts GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs, GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtr and GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrInput` via:
//
//	        GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrInput interface {
	pulumi.Input

	ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput
	ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput
}

type gatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrType GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs

func GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtr(v *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrInput {
	return (*gatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrType)(v)
}

func (*gatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (i *gatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrType) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return i.ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrType) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla {
		return &v
	}).(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) MaxJitter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) *int { return v.MaxJitter }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) *int { return v.MaxLatency }).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput) MaxLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) *int { return v.MaxLoss }).(pulumi.IntPtrOutput)
}

type GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla)(nil)).Elem()
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) ToGatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutputWithContext(ctx context.Context) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput {
	return o
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) Elem() GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla
		return ret
	}).(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) MaxJitter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) *int {
		if v == nil {
			return nil
		}
		return v.MaxJitter
	}).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) MaxLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) *int {
		if v == nil {
			return nil
		}
		return v.MaxLatency
	}).(pulumi.IntPtrOutput)
}

func (o GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput) MaxLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla) *int {
		if v == nil {
			return nil
		}
		return v.MaxLoss
	}).(pulumi.IntPtrOutput)
}

type GatewaytemplateServicePolicy struct {
	// enum: `allow`, `deny`
	Action *string `pulumi:"action"`
	// For SRX Only
	Appqoe *GatewaytemplateServicePolicyAppqoe `pulumi:"appqoe"`
	Ewfs   []GatewaytemplateServicePolicyEwf   `pulumi:"ewfs"`
	Idp    *GatewaytemplateServicePolicyIdp    `pulumi:"idp"`
	// access within the same VRF
	LocalRouting *bool   `pulumi:"localRouting"`
	Name         *string `pulumi:"name"`
	// by default, we derive all paths available and use them
	// optionally, you can customize by using `pathPreference`
	PathPreference *string `pulumi:"pathPreference"`
	// used to link servicepolicy defined at org level and overwrite some attributes
	ServicepolicyId *string  `pulumi:"servicepolicyId"`
	Services        []string `pulumi:"services"`
	Tenants         []string `pulumi:"tenants"`
}

// GatewaytemplateServicePolicyInput is an input type that accepts GatewaytemplateServicePolicyArgs and GatewaytemplateServicePolicyOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyInput` via:
//
//	GatewaytemplateServicePolicyArgs{...}
type GatewaytemplateServicePolicyInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyOutput() GatewaytemplateServicePolicyOutput
	ToGatewaytemplateServicePolicyOutputWithContext(context.Context) GatewaytemplateServicePolicyOutput
}

type GatewaytemplateServicePolicyArgs struct {
	// enum: `allow`, `deny`
	Action pulumi.StringPtrInput `pulumi:"action"`
	// For SRX Only
	Appqoe GatewaytemplateServicePolicyAppqoePtrInput `pulumi:"appqoe"`
	Ewfs   GatewaytemplateServicePolicyEwfArrayInput  `pulumi:"ewfs"`
	Idp    GatewaytemplateServicePolicyIdpPtrInput    `pulumi:"idp"`
	// access within the same VRF
	LocalRouting pulumi.BoolPtrInput   `pulumi:"localRouting"`
	Name         pulumi.StringPtrInput `pulumi:"name"`
	// by default, we derive all paths available and use them
	// optionally, you can customize by using `pathPreference`
	PathPreference pulumi.StringPtrInput `pulumi:"pathPreference"`
	// used to link servicepolicy defined at org level and overwrite some attributes
	ServicepolicyId pulumi.StringPtrInput   `pulumi:"servicepolicyId"`
	Services        pulumi.StringArrayInput `pulumi:"services"`
	Tenants         pulumi.StringArrayInput `pulumi:"tenants"`
}

func (GatewaytemplateServicePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicy)(nil)).Elem()
}

func (i GatewaytemplateServicePolicyArgs) ToGatewaytemplateServicePolicyOutput() GatewaytemplateServicePolicyOutput {
	return i.ToGatewaytemplateServicePolicyOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyArgs) ToGatewaytemplateServicePolicyOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyOutput)
}

// GatewaytemplateServicePolicyArrayInput is an input type that accepts GatewaytemplateServicePolicyArray and GatewaytemplateServicePolicyArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyArrayInput` via:
//
//	GatewaytemplateServicePolicyArray{ GatewaytemplateServicePolicyArgs{...} }
type GatewaytemplateServicePolicyArrayInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyArrayOutput() GatewaytemplateServicePolicyArrayOutput
	ToGatewaytemplateServicePolicyArrayOutputWithContext(context.Context) GatewaytemplateServicePolicyArrayOutput
}

type GatewaytemplateServicePolicyArray []GatewaytemplateServicePolicyInput

func (GatewaytemplateServicePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateServicePolicy)(nil)).Elem()
}

func (i GatewaytemplateServicePolicyArray) ToGatewaytemplateServicePolicyArrayOutput() GatewaytemplateServicePolicyArrayOutput {
	return i.ToGatewaytemplateServicePolicyArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyArray) ToGatewaytemplateServicePolicyArrayOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyArrayOutput)
}

type GatewaytemplateServicePolicyOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicy)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyOutput) ToGatewaytemplateServicePolicyOutput() GatewaytemplateServicePolicyOutput {
	return o
}

func (o GatewaytemplateServicePolicyOutput) ToGatewaytemplateServicePolicyOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyOutput {
	return o
}

// enum: `allow`, `deny`
func (o GatewaytemplateServicePolicyOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// For SRX Only
func (o GatewaytemplateServicePolicyOutput) Appqoe() GatewaytemplateServicePolicyAppqoePtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) *GatewaytemplateServicePolicyAppqoe { return v.Appqoe }).(GatewaytemplateServicePolicyAppqoePtrOutput)
}

func (o GatewaytemplateServicePolicyOutput) Ewfs() GatewaytemplateServicePolicyEwfArrayOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) []GatewaytemplateServicePolicyEwf { return v.Ewfs }).(GatewaytemplateServicePolicyEwfArrayOutput)
}

func (o GatewaytemplateServicePolicyOutput) Idp() GatewaytemplateServicePolicyIdpPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) *GatewaytemplateServicePolicyIdp { return v.Idp }).(GatewaytemplateServicePolicyIdpPtrOutput)
}

// access within the same VRF
func (o GatewaytemplateServicePolicyOutput) LocalRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) *bool { return v.LocalRouting }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateServicePolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// by default, we derive all paths available and use them
// optionally, you can customize by using `pathPreference`
func (o GatewaytemplateServicePolicyOutput) PathPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) *string { return v.PathPreference }).(pulumi.StringPtrOutput)
}

// used to link servicepolicy defined at org level and overwrite some attributes
func (o GatewaytemplateServicePolicyOutput) ServicepolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) *string { return v.ServicepolicyId }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateServicePolicyOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) []string { return v.Services }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateServicePolicyOutput) Tenants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicy) []string { return v.Tenants }).(pulumi.StringArrayOutput)
}

type GatewaytemplateServicePolicyArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateServicePolicy)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyArrayOutput) ToGatewaytemplateServicePolicyArrayOutput() GatewaytemplateServicePolicyArrayOutput {
	return o
}

func (o GatewaytemplateServicePolicyArrayOutput) ToGatewaytemplateServicePolicyArrayOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyArrayOutput {
	return o
}

func (o GatewaytemplateServicePolicyArrayOutput) Index(i pulumi.IntInput) GatewaytemplateServicePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateServicePolicy {
		return vs[0].([]GatewaytemplateServicePolicy)[vs[1].(int)]
	}).(GatewaytemplateServicePolicyOutput)
}

type GatewaytemplateServicePolicyAppqoe struct {
	Enabled *bool `pulumi:"enabled"`
}

// GatewaytemplateServicePolicyAppqoeInput is an input type that accepts GatewaytemplateServicePolicyAppqoeArgs and GatewaytemplateServicePolicyAppqoeOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyAppqoeInput` via:
//
//	GatewaytemplateServicePolicyAppqoeArgs{...}
type GatewaytemplateServicePolicyAppqoeInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyAppqoeOutput() GatewaytemplateServicePolicyAppqoeOutput
	ToGatewaytemplateServicePolicyAppqoeOutputWithContext(context.Context) GatewaytemplateServicePolicyAppqoeOutput
}

type GatewaytemplateServicePolicyAppqoeArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GatewaytemplateServicePolicyAppqoeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicyAppqoe)(nil)).Elem()
}

func (i GatewaytemplateServicePolicyAppqoeArgs) ToGatewaytemplateServicePolicyAppqoeOutput() GatewaytemplateServicePolicyAppqoeOutput {
	return i.ToGatewaytemplateServicePolicyAppqoeOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyAppqoeArgs) ToGatewaytemplateServicePolicyAppqoeOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyAppqoeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyAppqoeOutput)
}

func (i GatewaytemplateServicePolicyAppqoeArgs) ToGatewaytemplateServicePolicyAppqoePtrOutput() GatewaytemplateServicePolicyAppqoePtrOutput {
	return i.ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyAppqoeArgs) ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyAppqoePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyAppqoeOutput).ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(ctx)
}

// GatewaytemplateServicePolicyAppqoePtrInput is an input type that accepts GatewaytemplateServicePolicyAppqoeArgs, GatewaytemplateServicePolicyAppqoePtr and GatewaytemplateServicePolicyAppqoePtrOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyAppqoePtrInput` via:
//
//	        GatewaytemplateServicePolicyAppqoeArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateServicePolicyAppqoePtrInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyAppqoePtrOutput() GatewaytemplateServicePolicyAppqoePtrOutput
	ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(context.Context) GatewaytemplateServicePolicyAppqoePtrOutput
}

type gatewaytemplateServicePolicyAppqoePtrType GatewaytemplateServicePolicyAppqoeArgs

func GatewaytemplateServicePolicyAppqoePtr(v *GatewaytemplateServicePolicyAppqoeArgs) GatewaytemplateServicePolicyAppqoePtrInput {
	return (*gatewaytemplateServicePolicyAppqoePtrType)(v)
}

func (*gatewaytemplateServicePolicyAppqoePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateServicePolicyAppqoe)(nil)).Elem()
}

func (i *gatewaytemplateServicePolicyAppqoePtrType) ToGatewaytemplateServicePolicyAppqoePtrOutput() GatewaytemplateServicePolicyAppqoePtrOutput {
	return i.ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateServicePolicyAppqoePtrType) ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyAppqoePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyAppqoePtrOutput)
}

type GatewaytemplateServicePolicyAppqoeOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyAppqoeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicyAppqoe)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyAppqoeOutput) ToGatewaytemplateServicePolicyAppqoeOutput() GatewaytemplateServicePolicyAppqoeOutput {
	return o
}

func (o GatewaytemplateServicePolicyAppqoeOutput) ToGatewaytemplateServicePolicyAppqoeOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyAppqoeOutput {
	return o
}

func (o GatewaytemplateServicePolicyAppqoeOutput) ToGatewaytemplateServicePolicyAppqoePtrOutput() GatewaytemplateServicePolicyAppqoePtrOutput {
	return o.ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(context.Background())
}

func (o GatewaytemplateServicePolicyAppqoeOutput) ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyAppqoePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateServicePolicyAppqoe) *GatewaytemplateServicePolicyAppqoe {
		return &v
	}).(GatewaytemplateServicePolicyAppqoePtrOutput)
}

func (o GatewaytemplateServicePolicyAppqoeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyAppqoe) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GatewaytemplateServicePolicyAppqoePtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyAppqoePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateServicePolicyAppqoe)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyAppqoePtrOutput) ToGatewaytemplateServicePolicyAppqoePtrOutput() GatewaytemplateServicePolicyAppqoePtrOutput {
	return o
}

func (o GatewaytemplateServicePolicyAppqoePtrOutput) ToGatewaytemplateServicePolicyAppqoePtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyAppqoePtrOutput {
	return o
}

func (o GatewaytemplateServicePolicyAppqoePtrOutput) Elem() GatewaytemplateServicePolicyAppqoeOutput {
	return o.ApplyT(func(v *GatewaytemplateServicePolicyAppqoe) GatewaytemplateServicePolicyAppqoe {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateServicePolicyAppqoe
		return ret
	}).(GatewaytemplateServicePolicyAppqoeOutput)
}

func (o GatewaytemplateServicePolicyAppqoePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateServicePolicyAppqoe) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GatewaytemplateServicePolicyEwf struct {
	AlertOnly    *bool   `pulumi:"alertOnly"`
	BlockMessage *string `pulumi:"blockMessage"`
	Enabled      *bool   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile *string `pulumi:"profile"`
}

// GatewaytemplateServicePolicyEwfInput is an input type that accepts GatewaytemplateServicePolicyEwfArgs and GatewaytemplateServicePolicyEwfOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyEwfInput` via:
//
//	GatewaytemplateServicePolicyEwfArgs{...}
type GatewaytemplateServicePolicyEwfInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyEwfOutput() GatewaytemplateServicePolicyEwfOutput
	ToGatewaytemplateServicePolicyEwfOutputWithContext(context.Context) GatewaytemplateServicePolicyEwfOutput
}

type GatewaytemplateServicePolicyEwfArgs struct {
	AlertOnly    pulumi.BoolPtrInput   `pulumi:"alertOnly"`
	BlockMessage pulumi.StringPtrInput `pulumi:"blockMessage"`
	Enabled      pulumi.BoolPtrInput   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (GatewaytemplateServicePolicyEwfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicyEwf)(nil)).Elem()
}

func (i GatewaytemplateServicePolicyEwfArgs) ToGatewaytemplateServicePolicyEwfOutput() GatewaytemplateServicePolicyEwfOutput {
	return i.ToGatewaytemplateServicePolicyEwfOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyEwfArgs) ToGatewaytemplateServicePolicyEwfOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyEwfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyEwfOutput)
}

// GatewaytemplateServicePolicyEwfArrayInput is an input type that accepts GatewaytemplateServicePolicyEwfArray and GatewaytemplateServicePolicyEwfArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyEwfArrayInput` via:
//
//	GatewaytemplateServicePolicyEwfArray{ GatewaytemplateServicePolicyEwfArgs{...} }
type GatewaytemplateServicePolicyEwfArrayInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyEwfArrayOutput() GatewaytemplateServicePolicyEwfArrayOutput
	ToGatewaytemplateServicePolicyEwfArrayOutputWithContext(context.Context) GatewaytemplateServicePolicyEwfArrayOutput
}

type GatewaytemplateServicePolicyEwfArray []GatewaytemplateServicePolicyEwfInput

func (GatewaytemplateServicePolicyEwfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateServicePolicyEwf)(nil)).Elem()
}

func (i GatewaytemplateServicePolicyEwfArray) ToGatewaytemplateServicePolicyEwfArrayOutput() GatewaytemplateServicePolicyEwfArrayOutput {
	return i.ToGatewaytemplateServicePolicyEwfArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyEwfArray) ToGatewaytemplateServicePolicyEwfArrayOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyEwfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyEwfArrayOutput)
}

type GatewaytemplateServicePolicyEwfOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyEwfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicyEwf)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyEwfOutput) ToGatewaytemplateServicePolicyEwfOutput() GatewaytemplateServicePolicyEwfOutput {
	return o
}

func (o GatewaytemplateServicePolicyEwfOutput) ToGatewaytemplateServicePolicyEwfOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyEwfOutput {
	return o
}

func (o GatewaytemplateServicePolicyEwfOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyEwf) *bool { return v.AlertOnly }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateServicePolicyEwfOutput) BlockMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyEwf) *string { return v.BlockMessage }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateServicePolicyEwfOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyEwf) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// enum: `critical`, `standard`, `strict`
func (o GatewaytemplateServicePolicyEwfOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyEwf) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type GatewaytemplateServicePolicyEwfArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyEwfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateServicePolicyEwf)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyEwfArrayOutput) ToGatewaytemplateServicePolicyEwfArrayOutput() GatewaytemplateServicePolicyEwfArrayOutput {
	return o
}

func (o GatewaytemplateServicePolicyEwfArrayOutput) ToGatewaytemplateServicePolicyEwfArrayOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyEwfArrayOutput {
	return o
}

func (o GatewaytemplateServicePolicyEwfArrayOutput) Index(i pulumi.IntInput) GatewaytemplateServicePolicyEwfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateServicePolicyEwf {
		return vs[0].([]GatewaytemplateServicePolicyEwf)[vs[1].(int)]
	}).(GatewaytemplateServicePolicyEwfOutput)
}

type GatewaytemplateServicePolicyIdp struct {
	AlertOnly *bool `pulumi:"alertOnly"`
	Enabled   *bool `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId *string `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile *string `pulumi:"profile"`
}

// GatewaytemplateServicePolicyIdpInput is an input type that accepts GatewaytemplateServicePolicyIdpArgs and GatewaytemplateServicePolicyIdpOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyIdpInput` via:
//
//	GatewaytemplateServicePolicyIdpArgs{...}
type GatewaytemplateServicePolicyIdpInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyIdpOutput() GatewaytemplateServicePolicyIdpOutput
	ToGatewaytemplateServicePolicyIdpOutputWithContext(context.Context) GatewaytemplateServicePolicyIdpOutput
}

type GatewaytemplateServicePolicyIdpArgs struct {
	AlertOnly pulumi.BoolPtrInput `pulumi:"alertOnly"`
	Enabled   pulumi.BoolPtrInput `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId pulumi.StringPtrInput `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (GatewaytemplateServicePolicyIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicyIdp)(nil)).Elem()
}

func (i GatewaytemplateServicePolicyIdpArgs) ToGatewaytemplateServicePolicyIdpOutput() GatewaytemplateServicePolicyIdpOutput {
	return i.ToGatewaytemplateServicePolicyIdpOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyIdpArgs) ToGatewaytemplateServicePolicyIdpOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyIdpOutput)
}

func (i GatewaytemplateServicePolicyIdpArgs) ToGatewaytemplateServicePolicyIdpPtrOutput() GatewaytemplateServicePolicyIdpPtrOutput {
	return i.ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateServicePolicyIdpArgs) ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyIdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyIdpOutput).ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(ctx)
}

// GatewaytemplateServicePolicyIdpPtrInput is an input type that accepts GatewaytemplateServicePolicyIdpArgs, GatewaytemplateServicePolicyIdpPtr and GatewaytemplateServicePolicyIdpPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateServicePolicyIdpPtrInput` via:
//
//	        GatewaytemplateServicePolicyIdpArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateServicePolicyIdpPtrInput interface {
	pulumi.Input

	ToGatewaytemplateServicePolicyIdpPtrOutput() GatewaytemplateServicePolicyIdpPtrOutput
	ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(context.Context) GatewaytemplateServicePolicyIdpPtrOutput
}

type gatewaytemplateServicePolicyIdpPtrType GatewaytemplateServicePolicyIdpArgs

func GatewaytemplateServicePolicyIdpPtr(v *GatewaytemplateServicePolicyIdpArgs) GatewaytemplateServicePolicyIdpPtrInput {
	return (*gatewaytemplateServicePolicyIdpPtrType)(v)
}

func (*gatewaytemplateServicePolicyIdpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateServicePolicyIdp)(nil)).Elem()
}

func (i *gatewaytemplateServicePolicyIdpPtrType) ToGatewaytemplateServicePolicyIdpPtrOutput() GatewaytemplateServicePolicyIdpPtrOutput {
	return i.ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateServicePolicyIdpPtrType) ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyIdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateServicePolicyIdpPtrOutput)
}

type GatewaytemplateServicePolicyIdpOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateServicePolicyIdp)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyIdpOutput) ToGatewaytemplateServicePolicyIdpOutput() GatewaytemplateServicePolicyIdpOutput {
	return o
}

func (o GatewaytemplateServicePolicyIdpOutput) ToGatewaytemplateServicePolicyIdpOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyIdpOutput {
	return o
}

func (o GatewaytemplateServicePolicyIdpOutput) ToGatewaytemplateServicePolicyIdpPtrOutput() GatewaytemplateServicePolicyIdpPtrOutput {
	return o.ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateServicePolicyIdpOutput) ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyIdpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateServicePolicyIdp) *GatewaytemplateServicePolicyIdp {
		return &v
	}).(GatewaytemplateServicePolicyIdpPtrOutput)
}

func (o GatewaytemplateServicePolicyIdpOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyIdp) *bool { return v.AlertOnly }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateServicePolicyIdpOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyIdp) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// org_level IDP Profile can be used, this takes precedence over `profile`
func (o GatewaytemplateServicePolicyIdpOutput) IdpprofileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyIdp) *string { return v.IdpprofileId }).(pulumi.StringPtrOutput)
}

// `strict` (default) / `standard` / or keys from from idp_profiles
func (o GatewaytemplateServicePolicyIdpOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateServicePolicyIdp) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type GatewaytemplateServicePolicyIdpPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateServicePolicyIdpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateServicePolicyIdp)(nil)).Elem()
}

func (o GatewaytemplateServicePolicyIdpPtrOutput) ToGatewaytemplateServicePolicyIdpPtrOutput() GatewaytemplateServicePolicyIdpPtrOutput {
	return o
}

func (o GatewaytemplateServicePolicyIdpPtrOutput) ToGatewaytemplateServicePolicyIdpPtrOutputWithContext(ctx context.Context) GatewaytemplateServicePolicyIdpPtrOutput {
	return o
}

func (o GatewaytemplateServicePolicyIdpPtrOutput) Elem() GatewaytemplateServicePolicyIdpOutput {
	return o.ApplyT(func(v *GatewaytemplateServicePolicyIdp) GatewaytemplateServicePolicyIdp {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateServicePolicyIdp
		return ret
	}).(GatewaytemplateServicePolicyIdpOutput)
}

func (o GatewaytemplateServicePolicyIdpPtrOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateServicePolicyIdp) *bool {
		if v == nil {
			return nil
		}
		return v.AlertOnly
	}).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateServicePolicyIdpPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateServicePolicyIdp) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// org_level IDP Profile can be used, this takes precedence over `profile`
func (o GatewaytemplateServicePolicyIdpPtrOutput) IdpprofileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateServicePolicyIdp) *string {
		if v == nil {
			return nil
		}
		return v.IdpprofileId
	}).(pulumi.StringPtrOutput)
}

// `strict` (default) / `standard` / or keys from from idp_profiles
func (o GatewaytemplateServicePolicyIdpPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateServicePolicyIdp) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplateTunnelConfigs struct {
	AutoProvision *GatewaytemplateTunnelConfigsAutoProvision `pulumi:"autoProvision"`
	// Only if `provider`== `custom-ipsec`
	IkeLifetime *int `pulumi:"ikeLifetime"`
	// Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
	IkeMode *string `pulumi:"ikeMode"`
	// if `provider`== `custom-ipsec`
	IkeProposals []GatewaytemplateTunnelConfigsIkeProposal `pulumi:"ikeProposals"`
	// if `provider`== `custom-ipsec`
	IpsecLifetime *int `pulumi:"ipsecLifetime"`
	// Only if  `provider`== `custom-ipsec`
	IpsecProposals []GatewaytemplateTunnelConfigsIpsecProposal `pulumi:"ipsecProposals"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	LocalId *string `pulumi:"localId"`
	// enum: `active-active`, `active-standby`
	Mode    *string                              `pulumi:"mode"`
	Primary *GatewaytemplateTunnelConfigsPrimary `pulumi:"primary"`
	// Only if `provider`== `custom-ipsec`
	Probe *GatewaytemplateTunnelConfigsProbe `pulumi:"probe"`
	// Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
	Protocol *string `pulumi:"protocol"`
	// enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
	Provider *string `pulumi:"provider"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	Psk       *string                                `pulumi:"psk"`
	Secondary *GatewaytemplateTunnelConfigsSecondary `pulumi:"secondary"`
	// Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
	Version *string `pulumi:"version"`
}

// GatewaytemplateTunnelConfigsInput is an input type that accepts GatewaytemplateTunnelConfigsArgs and GatewaytemplateTunnelConfigsOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsInput` via:
//
//	GatewaytemplateTunnelConfigsArgs{...}
type GatewaytemplateTunnelConfigsInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsOutput() GatewaytemplateTunnelConfigsOutput
	ToGatewaytemplateTunnelConfigsOutputWithContext(context.Context) GatewaytemplateTunnelConfigsOutput
}

type GatewaytemplateTunnelConfigsArgs struct {
	AutoProvision GatewaytemplateTunnelConfigsAutoProvisionPtrInput `pulumi:"autoProvision"`
	// Only if `provider`== `custom-ipsec`
	IkeLifetime pulumi.IntPtrInput `pulumi:"ikeLifetime"`
	// Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
	IkeMode pulumi.StringPtrInput `pulumi:"ikeMode"`
	// if `provider`== `custom-ipsec`
	IkeProposals GatewaytemplateTunnelConfigsIkeProposalArrayInput `pulumi:"ikeProposals"`
	// if `provider`== `custom-ipsec`
	IpsecLifetime pulumi.IntPtrInput `pulumi:"ipsecLifetime"`
	// Only if  `provider`== `custom-ipsec`
	IpsecProposals GatewaytemplateTunnelConfigsIpsecProposalArrayInput `pulumi:"ipsecProposals"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	LocalId pulumi.StringPtrInput `pulumi:"localId"`
	// enum: `active-active`, `active-standby`
	Mode    pulumi.StringPtrInput                       `pulumi:"mode"`
	Primary GatewaytemplateTunnelConfigsPrimaryPtrInput `pulumi:"primary"`
	// Only if `provider`== `custom-ipsec`
	Probe GatewaytemplateTunnelConfigsProbePtrInput `pulumi:"probe"`
	// Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// Only if:
	//   * `provider`== `zscaler-ipsec`
	//   * `provider`==`jse-ipsec`
	//   * `provider`== `custom-ipsec`
	Psk       pulumi.StringPtrInput                         `pulumi:"psk"`
	Secondary GatewaytemplateTunnelConfigsSecondaryPtrInput `pulumi:"secondary"`
	// Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GatewaytemplateTunnelConfigsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigs)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsArgs) ToGatewaytemplateTunnelConfigsOutput() GatewaytemplateTunnelConfigsOutput {
	return i.ToGatewaytemplateTunnelConfigsOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsArgs) ToGatewaytemplateTunnelConfigsOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsOutput)
}

// GatewaytemplateTunnelConfigsMapInput is an input type that accepts GatewaytemplateTunnelConfigsMap and GatewaytemplateTunnelConfigsMapOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsMapInput` via:
//
//	GatewaytemplateTunnelConfigsMap{ "key": GatewaytemplateTunnelConfigsArgs{...} }
type GatewaytemplateTunnelConfigsMapInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsMapOutput() GatewaytemplateTunnelConfigsMapOutput
	ToGatewaytemplateTunnelConfigsMapOutputWithContext(context.Context) GatewaytemplateTunnelConfigsMapOutput
}

type GatewaytemplateTunnelConfigsMap map[string]GatewaytemplateTunnelConfigsInput

func (GatewaytemplateTunnelConfigsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateTunnelConfigs)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsMap) ToGatewaytemplateTunnelConfigsMapOutput() GatewaytemplateTunnelConfigsMapOutput {
	return i.ToGatewaytemplateTunnelConfigsMapOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsMap) ToGatewaytemplateTunnelConfigsMapOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsMapOutput)
}

type GatewaytemplateTunnelConfigsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigs)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsOutput) ToGatewaytemplateTunnelConfigsOutput() GatewaytemplateTunnelConfigsOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsOutput) ToGatewaytemplateTunnelConfigsOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsOutput) AutoProvision() GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *GatewaytemplateTunnelConfigsAutoProvision {
		return v.AutoProvision
	}).(GatewaytemplateTunnelConfigsAutoProvisionPtrOutput)
}

// Only if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) IkeLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *int { return v.IkeLifetime }).(pulumi.IntPtrOutput)
}

// Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
func (o GatewaytemplateTunnelConfigsOutput) IkeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *string { return v.IkeMode }).(pulumi.StringPtrOutput)
}

// if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) IkeProposals() GatewaytemplateTunnelConfigsIkeProposalArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) []GatewaytemplateTunnelConfigsIkeProposal { return v.IkeProposals }).(GatewaytemplateTunnelConfigsIkeProposalArrayOutput)
}

// if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) IpsecLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *int { return v.IpsecLifetime }).(pulumi.IntPtrOutput)
}

// Only if  `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) IpsecProposals() GatewaytemplateTunnelConfigsIpsecProposalArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) []GatewaytemplateTunnelConfigsIpsecProposal {
		return v.IpsecProposals
	}).(GatewaytemplateTunnelConfigsIpsecProposalArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-ipsec`
//   - `provider`==`jse-ipsec`
//   - `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) LocalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *string { return v.LocalId }).(pulumi.StringPtrOutput)
}

// enum: `active-active`, `active-standby`
func (o GatewaytemplateTunnelConfigsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateTunnelConfigsOutput) Primary() GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *GatewaytemplateTunnelConfigsPrimary { return v.Primary }).(GatewaytemplateTunnelConfigsPrimaryPtrOutput)
}

// Only if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) Probe() GatewaytemplateTunnelConfigsProbePtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *GatewaytemplateTunnelConfigsProbe { return v.Probe }).(GatewaytemplateTunnelConfigsProbePtrOutput)
}

// Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
func (o GatewaytemplateTunnelConfigsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// Only if:
//   - `provider`== `zscaler-ipsec`
//   - `provider`==`jse-ipsec`
//   - `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *string { return v.Psk }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateTunnelConfigsOutput) Secondary() GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *GatewaytemplateTunnelConfigsSecondary { return v.Secondary }).(GatewaytemplateTunnelConfigsSecondaryPtrOutput)
}

// Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
func (o GatewaytemplateTunnelConfigsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigs) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GatewaytemplateTunnelConfigsMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateTunnelConfigs)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsMapOutput) ToGatewaytemplateTunnelConfigsMapOutput() GatewaytemplateTunnelConfigsMapOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsMapOutput) ToGatewaytemplateTunnelConfigsMapOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsMapOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateTunnelConfigsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateTunnelConfigs {
		return vs[0].(map[string]GatewaytemplateTunnelConfigs)[vs[1].(string)]
	}).(GatewaytemplateTunnelConfigsOutput)
}

type GatewaytemplateTunnelConfigsAutoProvision struct {
	Enable  *bool                                             `pulumi:"enable"`
	Latlng  *GatewaytemplateTunnelConfigsAutoProvisionLatlng  `pulumi:"latlng"`
	Primary *GatewaytemplateTunnelConfigsAutoProvisionPrimary `pulumi:"primary"`
	// enum: `APAC`, `Americas`, `EMEA`, `auto`
	Region    *string                                             `pulumi:"region"`
	Secondary *GatewaytemplateTunnelConfigsAutoProvisionSecondary `pulumi:"secondary"`
}

// GatewaytemplateTunnelConfigsAutoProvisionInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionArgs and GatewaytemplateTunnelConfigsAutoProvisionOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionInput` via:
//
//	GatewaytemplateTunnelConfigsAutoProvisionArgs{...}
type GatewaytemplateTunnelConfigsAutoProvisionInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionOutput() GatewaytemplateTunnelConfigsAutoProvisionOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionOutput
}

type GatewaytemplateTunnelConfigsAutoProvisionArgs struct {
	Enable  pulumi.BoolPtrInput                                      `pulumi:"enable"`
	Latlng  GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrInput  `pulumi:"latlng"`
	Primary GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrInput `pulumi:"primary"`
	// enum: `APAC`, `Americas`, `EMEA`, `auto`
	Region    pulumi.StringPtrInput                                      `pulumi:"region"`
	Secondary GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrInput `pulumi:"secondary"`
}

func (GatewaytemplateTunnelConfigsAutoProvisionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvision)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsAutoProvisionArgs) ToGatewaytemplateTunnelConfigsAutoProvisionOutput() GatewaytemplateTunnelConfigsAutoProvisionOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionArgs) ToGatewaytemplateTunnelConfigsAutoProvisionOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionOutput)
}

func (i GatewaytemplateTunnelConfigsAutoProvisionArgs) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionArgs) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionOutput).ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelConfigsAutoProvisionPtrInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionArgs, GatewaytemplateTunnelConfigsAutoProvisionPtr and GatewaytemplateTunnelConfigsAutoProvisionPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionPtrInput` via:
//
//	        GatewaytemplateTunnelConfigsAutoProvisionArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelConfigsAutoProvisionPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPtrOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionPtrOutput
}

type gatewaytemplateTunnelConfigsAutoProvisionPtrType GatewaytemplateTunnelConfigsAutoProvisionArgs

func GatewaytemplateTunnelConfigsAutoProvisionPtr(v *GatewaytemplateTunnelConfigsAutoProvisionArgs) GatewaytemplateTunnelConfigsAutoProvisionPtrInput {
	return (*gatewaytemplateTunnelConfigsAutoProvisionPtrType)(v)
}

func (*gatewaytemplateTunnelConfigsAutoProvisionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvision)(nil)).Elem()
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionPtrOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvision)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) ToGatewaytemplateTunnelConfigsAutoProvisionOutput() GatewaytemplateTunnelConfigsAutoProvisionOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) ToGatewaytemplateTunnelConfigsAutoProvisionOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return o.ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelConfigsAutoProvision) *GatewaytemplateTunnelConfigsAutoProvision {
		return &v
	}).(GatewaytemplateTunnelConfigsAutoProvisionPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvision) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) Latlng() GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvision) *GatewaytemplateTunnelConfigsAutoProvisionLatlng {
		return v.Latlng
	}).(GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) Primary() GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvision) *GatewaytemplateTunnelConfigsAutoProvisionPrimary {
		return v.Primary
	}).(GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

// enum: `APAC`, `Americas`, `EMEA`, `auto`
func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvision) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionOutput) Secondary() GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvision) *GatewaytemplateTunnelConfigsAutoProvisionSecondary {
		return v.Secondary
	}).(GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvision)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) Elem() GatewaytemplateTunnelConfigsAutoProvisionOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvision) GatewaytemplateTunnelConfigsAutoProvision {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelConfigsAutoProvision
		return ret
	}).(GatewaytemplateTunnelConfigsAutoProvisionOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvision) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) Latlng() GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvision) *GatewaytemplateTunnelConfigsAutoProvisionLatlng {
		if v == nil {
			return nil
		}
		return v.Latlng
	}).(GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) Primary() GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvision) *GatewaytemplateTunnelConfigsAutoProvisionPrimary {
		if v == nil {
			return nil
		}
		return v.Primary
	}).(GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

// enum: `APAC`, `Americas`, `EMEA`, `auto`
func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvision) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPtrOutput) Secondary() GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvision) *GatewaytemplateTunnelConfigsAutoProvisionSecondary {
		if v == nil {
			return nil
		}
		return v.Secondary
	}).(GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionLatlng struct {
	Lat float64 `pulumi:"lat"`
	Lng float64 `pulumi:"lng"`
}

// GatewaytemplateTunnelConfigsAutoProvisionLatlngInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs and GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionLatlngInput` via:
//
//	GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs{...}
type GatewaytemplateTunnelConfigsAutoProvisionLatlngInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionLatlngOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionLatlngOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput
}

type GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs struct {
	Lat pulumi.Float64Input `pulumi:"lat"`
	Lng pulumi.Float64Input `pulumi:"lng"`
}

func (GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionLatlngOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput)
}

func (i GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput).ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs, GatewaytemplateTunnelConfigsAutoProvisionLatlngPtr and GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrInput` via:
//
//	        GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput
}

type gatewaytemplateTunnelConfigsAutoProvisionLatlngPtrType GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs

func GatewaytemplateTunnelConfigsAutoProvisionLatlngPtr(v *GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs) GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrInput {
	return (*gatewaytemplateTunnelConfigsAutoProvisionLatlngPtrType)(v)
}

func (*gatewaytemplateTunnelConfigsAutoProvisionLatlngPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionLatlngPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionLatlngPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelConfigsAutoProvisionLatlng) *GatewaytemplateTunnelConfigsAutoProvisionLatlng {
		return &v
	}).(GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput) Lat() pulumi.Float64Output {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvisionLatlng) float64 { return v.Lat }).(pulumi.Float64Output)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput) Lng() pulumi.Float64Output {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvisionLatlng) float64 { return v.Lng }).(pulumi.Float64Output)
}

type GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvisionLatlng)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput) Elem() GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionLatlng) GatewaytemplateTunnelConfigsAutoProvisionLatlng {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelConfigsAutoProvisionLatlng
		return ret
	}).(GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput) Lat() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionLatlng) *float64 {
		if v == nil {
			return nil
		}
		return &v.Lat
	}).(pulumi.Float64PtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput) Lng() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionLatlng) *float64 {
		if v == nil {
			return nil
		}
		return &v.Lng
	}).(pulumi.Float64PtrOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionPrimary struct {
	NumHosts *string `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames []string `pulumi:"wanNames"`
}

// GatewaytemplateTunnelConfigsAutoProvisionPrimaryInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs and GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionPrimaryInput` via:
//
//	GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs{...}
type GatewaytemplateTunnelConfigsAutoProvisionPrimaryInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput
}

type GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs struct {
	NumHosts pulumi.StringPtrInput `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput)
}

func (i GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput).ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs, GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtr and GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrInput` via:
//
//	        GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput
}

type gatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrType GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs

func GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtr(v *GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs) GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrInput {
	return (*gatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrType)(v)
}

func (*gatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelConfigsAutoProvisionPrimary) *GatewaytemplateTunnelConfigsAutoProvisionPrimary {
		return &v
	}).(GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvisionPrimary) *string { return v.NumHosts }).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvisionPrimary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvisionPrimary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput) Elem() GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionPrimary) GatewaytemplateTunnelConfigsAutoProvisionPrimary {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelConfigsAutoProvisionPrimary
		return ret
	}).(GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionPrimary) *string {
		if v == nil {
			return nil
		}
		return v.NumHosts
	}).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionPrimary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionSecondary struct {
	NumHosts *string `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames []string `pulumi:"wanNames"`
}

// GatewaytemplateTunnelConfigsAutoProvisionSecondaryInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs and GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionSecondaryInput` via:
//
//	GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs{...}
type GatewaytemplateTunnelConfigsAutoProvisionSecondaryInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput
}

type GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs struct {
	NumHosts pulumi.StringPtrInput `pulumi:"numHosts"`
	// optional, only needed if `varsOnly`==`false`
	WanNames pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput)
}

func (i GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput).ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrInput is an input type that accepts GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs, GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtr and GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrInput` via:
//
//	        GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput
	ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput
}

type gatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrType GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs

func GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtr(v *GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs) GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrInput {
	return (*gatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrType)(v)
}

func (*gatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrType) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelConfigsAutoProvisionSecondary) *GatewaytemplateTunnelConfigsAutoProvisionSecondary {
		return &v
	}).(GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvisionSecondary) *string { return v.NumHosts }).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsAutoProvisionSecondary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsAutoProvisionSecondary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput() GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput) ToGatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput) Elem() GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionSecondary) GatewaytemplateTunnelConfigsAutoProvisionSecondary {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelConfigsAutoProvisionSecondary
		return ret
	}).(GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput)
}

func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput) NumHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionSecondary) *string {
		if v == nil {
			return nil
		}
		return v.NumHosts
	}).(pulumi.StringPtrOutput)
}

// optional, only needed if `varsOnly`==`false`
func (o GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsAutoProvisionSecondary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelConfigsIkeProposal struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo *string `pulumi:"authAlgo"`
	// enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup *string `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo *string `pulumi:"encAlgo"`
}

// GatewaytemplateTunnelConfigsIkeProposalInput is an input type that accepts GatewaytemplateTunnelConfigsIkeProposalArgs and GatewaytemplateTunnelConfigsIkeProposalOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsIkeProposalInput` via:
//
//	GatewaytemplateTunnelConfigsIkeProposalArgs{...}
type GatewaytemplateTunnelConfigsIkeProposalInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsIkeProposalOutput() GatewaytemplateTunnelConfigsIkeProposalOutput
	ToGatewaytemplateTunnelConfigsIkeProposalOutputWithContext(context.Context) GatewaytemplateTunnelConfigsIkeProposalOutput
}

type GatewaytemplateTunnelConfigsIkeProposalArgs struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo pulumi.StringPtrInput `pulumi:"authAlgo"`
	// enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup pulumi.StringPtrInput `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo pulumi.StringPtrInput `pulumi:"encAlgo"`
}

func (GatewaytemplateTunnelConfigsIkeProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsIkeProposal)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsIkeProposalArgs) ToGatewaytemplateTunnelConfigsIkeProposalOutput() GatewaytemplateTunnelConfigsIkeProposalOutput {
	return i.ToGatewaytemplateTunnelConfigsIkeProposalOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsIkeProposalArgs) ToGatewaytemplateTunnelConfigsIkeProposalOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIkeProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsIkeProposalOutput)
}

// GatewaytemplateTunnelConfigsIkeProposalArrayInput is an input type that accepts GatewaytemplateTunnelConfigsIkeProposalArray and GatewaytemplateTunnelConfigsIkeProposalArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsIkeProposalArrayInput` via:
//
//	GatewaytemplateTunnelConfigsIkeProposalArray{ GatewaytemplateTunnelConfigsIkeProposalArgs{...} }
type GatewaytemplateTunnelConfigsIkeProposalArrayInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsIkeProposalArrayOutput() GatewaytemplateTunnelConfigsIkeProposalArrayOutput
	ToGatewaytemplateTunnelConfigsIkeProposalArrayOutputWithContext(context.Context) GatewaytemplateTunnelConfigsIkeProposalArrayOutput
}

type GatewaytemplateTunnelConfigsIkeProposalArray []GatewaytemplateTunnelConfigsIkeProposalInput

func (GatewaytemplateTunnelConfigsIkeProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateTunnelConfigsIkeProposal)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsIkeProposalArray) ToGatewaytemplateTunnelConfigsIkeProposalArrayOutput() GatewaytemplateTunnelConfigsIkeProposalArrayOutput {
	return i.ToGatewaytemplateTunnelConfigsIkeProposalArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsIkeProposalArray) ToGatewaytemplateTunnelConfigsIkeProposalArrayOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIkeProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsIkeProposalArrayOutput)
}

type GatewaytemplateTunnelConfigsIkeProposalOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsIkeProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsIkeProposal)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsIkeProposalOutput) ToGatewaytemplateTunnelConfigsIkeProposalOutput() GatewaytemplateTunnelConfigsIkeProposalOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsIkeProposalOutput) ToGatewaytemplateTunnelConfigsIkeProposalOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIkeProposalOutput {
	return o
}

// enum: `md5`, `sha1`, `sha2`
func (o GatewaytemplateTunnelConfigsIkeProposalOutput) AuthAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsIkeProposal) *string { return v.AuthAlgo }).(pulumi.StringPtrOutput)
}

// enum:
//   - 1
//   - 2 (1024-bit)
//   - 5
//   - 14 (default, 2048-bit)
//   - 15 (3072-bit)
//   - 16 (4096-bit)
//   - 19 (256-bit ECP)
//   - 20 (384-bit ECP)
//   - 21 (521-bit ECP)
//   - 24 (2048-bit ECP)
func (o GatewaytemplateTunnelConfigsIkeProposalOutput) DhGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsIkeProposal) *string { return v.DhGroup }).(pulumi.StringPtrOutput)
}

// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
func (o GatewaytemplateTunnelConfigsIkeProposalOutput) EncAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsIkeProposal) *string { return v.EncAlgo }).(pulumi.StringPtrOutput)
}

type GatewaytemplateTunnelConfigsIkeProposalArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsIkeProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateTunnelConfigsIkeProposal)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsIkeProposalArrayOutput) ToGatewaytemplateTunnelConfigsIkeProposalArrayOutput() GatewaytemplateTunnelConfigsIkeProposalArrayOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsIkeProposalArrayOutput) ToGatewaytemplateTunnelConfigsIkeProposalArrayOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIkeProposalArrayOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsIkeProposalArrayOutput) Index(i pulumi.IntInput) GatewaytemplateTunnelConfigsIkeProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateTunnelConfigsIkeProposal {
		return vs[0].([]GatewaytemplateTunnelConfigsIkeProposal)[vs[1].(int)]
	}).(GatewaytemplateTunnelConfigsIkeProposalOutput)
}

type GatewaytemplateTunnelConfigsIpsecProposal struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo *string `pulumi:"authAlgo"`
	// Only if `provider`== `custom-ipsec`. enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup *string `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo *string `pulumi:"encAlgo"`
}

// GatewaytemplateTunnelConfigsIpsecProposalInput is an input type that accepts GatewaytemplateTunnelConfigsIpsecProposalArgs and GatewaytemplateTunnelConfigsIpsecProposalOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsIpsecProposalInput` via:
//
//	GatewaytemplateTunnelConfigsIpsecProposalArgs{...}
type GatewaytemplateTunnelConfigsIpsecProposalInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsIpsecProposalOutput() GatewaytemplateTunnelConfigsIpsecProposalOutput
	ToGatewaytemplateTunnelConfigsIpsecProposalOutputWithContext(context.Context) GatewaytemplateTunnelConfigsIpsecProposalOutput
}

type GatewaytemplateTunnelConfigsIpsecProposalArgs struct {
	// enum: `md5`, `sha1`, `sha2`
	AuthAlgo pulumi.StringPtrInput `pulumi:"authAlgo"`
	// Only if `provider`== `custom-ipsec`. enum:
	//   * 1
	//   * 2 (1024-bit)
	//   * 5
	//   * 14 (default, 2048-bit)
	//   * 15 (3072-bit)
	//   * 16 (4096-bit)
	//   * 19 (256-bit ECP)
	//   * 20 (384-bit ECP)
	//   * 21 (521-bit ECP)
	//   * 24 (2048-bit ECP)
	DhGroup pulumi.StringPtrInput `pulumi:"dhGroup"`
	// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
	EncAlgo pulumi.StringPtrInput `pulumi:"encAlgo"`
}

func (GatewaytemplateTunnelConfigsIpsecProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsIpsecProposalArgs) ToGatewaytemplateTunnelConfigsIpsecProposalOutput() GatewaytemplateTunnelConfigsIpsecProposalOutput {
	return i.ToGatewaytemplateTunnelConfigsIpsecProposalOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsIpsecProposalArgs) ToGatewaytemplateTunnelConfigsIpsecProposalOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIpsecProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsIpsecProposalOutput)
}

// GatewaytemplateTunnelConfigsIpsecProposalArrayInput is an input type that accepts GatewaytemplateTunnelConfigsIpsecProposalArray and GatewaytemplateTunnelConfigsIpsecProposalArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsIpsecProposalArrayInput` via:
//
//	GatewaytemplateTunnelConfigsIpsecProposalArray{ GatewaytemplateTunnelConfigsIpsecProposalArgs{...} }
type GatewaytemplateTunnelConfigsIpsecProposalArrayInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsIpsecProposalArrayOutput() GatewaytemplateTunnelConfigsIpsecProposalArrayOutput
	ToGatewaytemplateTunnelConfigsIpsecProposalArrayOutputWithContext(context.Context) GatewaytemplateTunnelConfigsIpsecProposalArrayOutput
}

type GatewaytemplateTunnelConfigsIpsecProposalArray []GatewaytemplateTunnelConfigsIpsecProposalInput

func (GatewaytemplateTunnelConfigsIpsecProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsIpsecProposalArray) ToGatewaytemplateTunnelConfigsIpsecProposalArrayOutput() GatewaytemplateTunnelConfigsIpsecProposalArrayOutput {
	return i.ToGatewaytemplateTunnelConfigsIpsecProposalArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsIpsecProposalArray) ToGatewaytemplateTunnelConfigsIpsecProposalArrayOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIpsecProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsIpsecProposalArrayOutput)
}

type GatewaytemplateTunnelConfigsIpsecProposalOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsIpsecProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsIpsecProposalOutput) ToGatewaytemplateTunnelConfigsIpsecProposalOutput() GatewaytemplateTunnelConfigsIpsecProposalOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsIpsecProposalOutput) ToGatewaytemplateTunnelConfigsIpsecProposalOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIpsecProposalOutput {
	return o
}

// enum: `md5`, `sha1`, `sha2`
func (o GatewaytemplateTunnelConfigsIpsecProposalOutput) AuthAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsIpsecProposal) *string { return v.AuthAlgo }).(pulumi.StringPtrOutput)
}

// Only if `provider`== `custom-ipsec`. enum:
//   - 1
//   - 2 (1024-bit)
//   - 5
//   - 14 (default, 2048-bit)
//   - 15 (3072-bit)
//   - 16 (4096-bit)
//   - 19 (256-bit ECP)
//   - 20 (384-bit ECP)
//   - 21 (521-bit ECP)
//   - 24 (2048-bit ECP)
func (o GatewaytemplateTunnelConfigsIpsecProposalOutput) DhGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsIpsecProposal) *string { return v.DhGroup }).(pulumi.StringPtrOutput)
}

// enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
func (o GatewaytemplateTunnelConfigsIpsecProposalOutput) EncAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsIpsecProposal) *string { return v.EncAlgo }).(pulumi.StringPtrOutput)
}

type GatewaytemplateTunnelConfigsIpsecProposalArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsIpsecProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateTunnelConfigsIpsecProposal)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsIpsecProposalArrayOutput) ToGatewaytemplateTunnelConfigsIpsecProposalArrayOutput() GatewaytemplateTunnelConfigsIpsecProposalArrayOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsIpsecProposalArrayOutput) ToGatewaytemplateTunnelConfigsIpsecProposalArrayOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsIpsecProposalArrayOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsIpsecProposalArrayOutput) Index(i pulumi.IntInput) GatewaytemplateTunnelConfigsIpsecProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateTunnelConfigsIpsecProposal {
		return vs[0].([]GatewaytemplateTunnelConfigsIpsecProposal)[vs[1].(int)]
	}).(GatewaytemplateTunnelConfigsIpsecProposalOutput)
}

type GatewaytemplateTunnelConfigsPrimary struct {
	Hosts []string `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps []string `pulumi:"internalIps"`
	ProbeIps    []string `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds []string `pulumi:"remoteIds"`
	WanNames  []string `pulumi:"wanNames"`
}

// GatewaytemplateTunnelConfigsPrimaryInput is an input type that accepts GatewaytemplateTunnelConfigsPrimaryArgs and GatewaytemplateTunnelConfigsPrimaryOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsPrimaryInput` via:
//
//	GatewaytemplateTunnelConfigsPrimaryArgs{...}
type GatewaytemplateTunnelConfigsPrimaryInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsPrimaryOutput() GatewaytemplateTunnelConfigsPrimaryOutput
	ToGatewaytemplateTunnelConfigsPrimaryOutputWithContext(context.Context) GatewaytemplateTunnelConfigsPrimaryOutput
}

type GatewaytemplateTunnelConfigsPrimaryArgs struct {
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps pulumi.StringArrayInput `pulumi:"internalIps"`
	ProbeIps    pulumi.StringArrayInput `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds pulumi.StringArrayInput `pulumi:"remoteIds"`
	WanNames  pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (GatewaytemplateTunnelConfigsPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsPrimary)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsPrimaryArgs) ToGatewaytemplateTunnelConfigsPrimaryOutput() GatewaytemplateTunnelConfigsPrimaryOutput {
	return i.ToGatewaytemplateTunnelConfigsPrimaryOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsPrimaryArgs) ToGatewaytemplateTunnelConfigsPrimaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsPrimaryOutput)
}

func (i GatewaytemplateTunnelConfigsPrimaryArgs) ToGatewaytemplateTunnelConfigsPrimaryPtrOutput() GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsPrimaryArgs) ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsPrimaryOutput).ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelConfigsPrimaryPtrInput is an input type that accepts GatewaytemplateTunnelConfigsPrimaryArgs, GatewaytemplateTunnelConfigsPrimaryPtr and GatewaytemplateTunnelConfigsPrimaryPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsPrimaryPtrInput` via:
//
//	        GatewaytemplateTunnelConfigsPrimaryArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelConfigsPrimaryPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsPrimaryPtrOutput() GatewaytemplateTunnelConfigsPrimaryPtrOutput
	ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(context.Context) GatewaytemplateTunnelConfigsPrimaryPtrOutput
}

type gatewaytemplateTunnelConfigsPrimaryPtrType GatewaytemplateTunnelConfigsPrimaryArgs

func GatewaytemplateTunnelConfigsPrimaryPtr(v *GatewaytemplateTunnelConfigsPrimaryArgs) GatewaytemplateTunnelConfigsPrimaryPtrInput {
	return (*gatewaytemplateTunnelConfigsPrimaryPtrType)(v)
}

func (*gatewaytemplateTunnelConfigsPrimaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsPrimary)(nil)).Elem()
}

func (i *gatewaytemplateTunnelConfigsPrimaryPtrType) ToGatewaytemplateTunnelConfigsPrimaryPtrOutput() GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelConfigsPrimaryPtrType) ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsPrimaryPtrOutput)
}

type GatewaytemplateTunnelConfigsPrimaryOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsPrimary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsPrimaryOutput) ToGatewaytemplateTunnelConfigsPrimaryOutput() GatewaytemplateTunnelConfigsPrimaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsPrimaryOutput) ToGatewaytemplateTunnelConfigsPrimaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsPrimaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsPrimaryOutput) ToGatewaytemplateTunnelConfigsPrimaryPtrOutput() GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return o.ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelConfigsPrimaryOutput) ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelConfigsPrimary) *GatewaytemplateTunnelConfigsPrimary {
		return &v
	}).(GatewaytemplateTunnelConfigsPrimaryPtrOutput)
}

func (o GatewaytemplateTunnelConfigsPrimaryOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsPrimary) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o GatewaytemplateTunnelConfigsPrimaryOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsPrimary) []string { return v.InternalIps }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsPrimaryOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsPrimary) []string { return v.ProbeIps }).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsPrimaryOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsPrimary) []string { return v.RemoteIds }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsPrimaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsPrimary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelConfigsPrimaryPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsPrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsPrimary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) ToGatewaytemplateTunnelConfigsPrimaryPtrOutput() GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) ToGatewaytemplateTunnelConfigsPrimaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsPrimaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) Elem() GatewaytemplateTunnelConfigsPrimaryOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsPrimary) GatewaytemplateTunnelConfigsPrimary {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelConfigsPrimary
		return ret
	}).(GatewaytemplateTunnelConfigsPrimaryOutput)
}

func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.InternalIps
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.ProbeIps
	}).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.RemoteIds
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsPrimaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsPrimary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelConfigsProbe struct {
	// how often to trigger the probe
	Interval *int `pulumi:"interval"`
	// number of consecutive misses before declaring the tunnel down
	Threshold *int `pulumi:"threshold"`
	// time within which to complete the connectivity check
	Timeout *int `pulumi:"timeout"`
	// enum: `http`, `icmp`
	Type *string `pulumi:"type"`
}

// GatewaytemplateTunnelConfigsProbeInput is an input type that accepts GatewaytemplateTunnelConfigsProbeArgs and GatewaytemplateTunnelConfigsProbeOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsProbeInput` via:
//
//	GatewaytemplateTunnelConfigsProbeArgs{...}
type GatewaytemplateTunnelConfigsProbeInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsProbeOutput() GatewaytemplateTunnelConfigsProbeOutput
	ToGatewaytemplateTunnelConfigsProbeOutputWithContext(context.Context) GatewaytemplateTunnelConfigsProbeOutput
}

type GatewaytemplateTunnelConfigsProbeArgs struct {
	// how often to trigger the probe
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// number of consecutive misses before declaring the tunnel down
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	// time within which to complete the connectivity check
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// enum: `http`, `icmp`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GatewaytemplateTunnelConfigsProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsProbe)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsProbeArgs) ToGatewaytemplateTunnelConfigsProbeOutput() GatewaytemplateTunnelConfigsProbeOutput {
	return i.ToGatewaytemplateTunnelConfigsProbeOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsProbeArgs) ToGatewaytemplateTunnelConfigsProbeOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsProbeOutput)
}

func (i GatewaytemplateTunnelConfigsProbeArgs) ToGatewaytemplateTunnelConfigsProbePtrOutput() GatewaytemplateTunnelConfigsProbePtrOutput {
	return i.ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsProbeArgs) ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsProbeOutput).ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelConfigsProbePtrInput is an input type that accepts GatewaytemplateTunnelConfigsProbeArgs, GatewaytemplateTunnelConfigsProbePtr and GatewaytemplateTunnelConfigsProbePtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsProbePtrInput` via:
//
//	        GatewaytemplateTunnelConfigsProbeArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelConfigsProbePtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsProbePtrOutput() GatewaytemplateTunnelConfigsProbePtrOutput
	ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(context.Context) GatewaytemplateTunnelConfigsProbePtrOutput
}

type gatewaytemplateTunnelConfigsProbePtrType GatewaytemplateTunnelConfigsProbeArgs

func GatewaytemplateTunnelConfigsProbePtr(v *GatewaytemplateTunnelConfigsProbeArgs) GatewaytemplateTunnelConfigsProbePtrInput {
	return (*gatewaytemplateTunnelConfigsProbePtrType)(v)
}

func (*gatewaytemplateTunnelConfigsProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsProbe)(nil)).Elem()
}

func (i *gatewaytemplateTunnelConfigsProbePtrType) ToGatewaytemplateTunnelConfigsProbePtrOutput() GatewaytemplateTunnelConfigsProbePtrOutput {
	return i.ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelConfigsProbePtrType) ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsProbePtrOutput)
}

type GatewaytemplateTunnelConfigsProbeOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsProbe)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsProbeOutput) ToGatewaytemplateTunnelConfigsProbeOutput() GatewaytemplateTunnelConfigsProbeOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsProbeOutput) ToGatewaytemplateTunnelConfigsProbeOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsProbeOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsProbeOutput) ToGatewaytemplateTunnelConfigsProbePtrOutput() GatewaytemplateTunnelConfigsProbePtrOutput {
	return o.ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelConfigsProbeOutput) ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelConfigsProbe) *GatewaytemplateTunnelConfigsProbe {
		return &v
	}).(GatewaytemplateTunnelConfigsProbePtrOutput)
}

// how often to trigger the probe
func (o GatewaytemplateTunnelConfigsProbeOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsProbe) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// number of consecutive misses before declaring the tunnel down
func (o GatewaytemplateTunnelConfigsProbeOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsProbe) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

// time within which to complete the connectivity check
func (o GatewaytemplateTunnelConfigsProbeOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsProbe) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// enum: `http`, `icmp`
func (o GatewaytemplateTunnelConfigsProbeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsProbe) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GatewaytemplateTunnelConfigsProbePtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsProbe)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsProbePtrOutput) ToGatewaytemplateTunnelConfigsProbePtrOutput() GatewaytemplateTunnelConfigsProbePtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsProbePtrOutput) ToGatewaytemplateTunnelConfigsProbePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsProbePtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsProbePtrOutput) Elem() GatewaytemplateTunnelConfigsProbeOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsProbe) GatewaytemplateTunnelConfigsProbe {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelConfigsProbe
		return ret
	}).(GatewaytemplateTunnelConfigsProbeOutput)
}

// how often to trigger the probe
func (o GatewaytemplateTunnelConfigsProbePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsProbe) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// number of consecutive misses before declaring the tunnel down
func (o GatewaytemplateTunnelConfigsProbePtrOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsProbe) *int {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.IntPtrOutput)
}

// time within which to complete the connectivity check
func (o GatewaytemplateTunnelConfigsProbePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsProbe) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// enum: `http`, `icmp`
func (o GatewaytemplateTunnelConfigsProbePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsProbe) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type GatewaytemplateTunnelConfigsSecondary struct {
	Hosts []string `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps []string `pulumi:"internalIps"`
	ProbeIps    []string `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds []string `pulumi:"remoteIds"`
	WanNames  []string `pulumi:"wanNames"`
}

// GatewaytemplateTunnelConfigsSecondaryInput is an input type that accepts GatewaytemplateTunnelConfigsSecondaryArgs and GatewaytemplateTunnelConfigsSecondaryOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsSecondaryInput` via:
//
//	GatewaytemplateTunnelConfigsSecondaryArgs{...}
type GatewaytemplateTunnelConfigsSecondaryInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsSecondaryOutput() GatewaytemplateTunnelConfigsSecondaryOutput
	ToGatewaytemplateTunnelConfigsSecondaryOutputWithContext(context.Context) GatewaytemplateTunnelConfigsSecondaryOutput
}

type GatewaytemplateTunnelConfigsSecondaryArgs struct {
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Only if:
	//   * `provider`== `zscaler-gre`
	//   * `provider`== `custom-gre`
	InternalIps pulumi.StringArrayInput `pulumi:"internalIps"`
	ProbeIps    pulumi.StringArrayInput `pulumi:"probeIps"`
	// Only if `provider`== `custom-ipsec`
	RemoteIds pulumi.StringArrayInput `pulumi:"remoteIds"`
	WanNames  pulumi.StringArrayInput `pulumi:"wanNames"`
}

func (GatewaytemplateTunnelConfigsSecondaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsSecondary)(nil)).Elem()
}

func (i GatewaytemplateTunnelConfigsSecondaryArgs) ToGatewaytemplateTunnelConfigsSecondaryOutput() GatewaytemplateTunnelConfigsSecondaryOutput {
	return i.ToGatewaytemplateTunnelConfigsSecondaryOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsSecondaryArgs) ToGatewaytemplateTunnelConfigsSecondaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsSecondaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsSecondaryOutput)
}

func (i GatewaytemplateTunnelConfigsSecondaryArgs) ToGatewaytemplateTunnelConfigsSecondaryPtrOutput() GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelConfigsSecondaryArgs) ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsSecondaryOutput).ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelConfigsSecondaryPtrInput is an input type that accepts GatewaytemplateTunnelConfigsSecondaryArgs, GatewaytemplateTunnelConfigsSecondaryPtr and GatewaytemplateTunnelConfigsSecondaryPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelConfigsSecondaryPtrInput` via:
//
//	        GatewaytemplateTunnelConfigsSecondaryArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelConfigsSecondaryPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelConfigsSecondaryPtrOutput() GatewaytemplateTunnelConfigsSecondaryPtrOutput
	ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(context.Context) GatewaytemplateTunnelConfigsSecondaryPtrOutput
}

type gatewaytemplateTunnelConfigsSecondaryPtrType GatewaytemplateTunnelConfigsSecondaryArgs

func GatewaytemplateTunnelConfigsSecondaryPtr(v *GatewaytemplateTunnelConfigsSecondaryArgs) GatewaytemplateTunnelConfigsSecondaryPtrInput {
	return (*gatewaytemplateTunnelConfigsSecondaryPtrType)(v)
}

func (*gatewaytemplateTunnelConfigsSecondaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsSecondary)(nil)).Elem()
}

func (i *gatewaytemplateTunnelConfigsSecondaryPtrType) ToGatewaytemplateTunnelConfigsSecondaryPtrOutput() GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return i.ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelConfigsSecondaryPtrType) ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelConfigsSecondaryPtrOutput)
}

type GatewaytemplateTunnelConfigsSecondaryOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsSecondaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelConfigsSecondary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsSecondaryOutput) ToGatewaytemplateTunnelConfigsSecondaryOutput() GatewaytemplateTunnelConfigsSecondaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsSecondaryOutput) ToGatewaytemplateTunnelConfigsSecondaryOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsSecondaryOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsSecondaryOutput) ToGatewaytemplateTunnelConfigsSecondaryPtrOutput() GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return o.ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelConfigsSecondaryOutput) ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelConfigsSecondary) *GatewaytemplateTunnelConfigsSecondary {
		return &v
	}).(GatewaytemplateTunnelConfigsSecondaryPtrOutput)
}

func (o GatewaytemplateTunnelConfigsSecondaryOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsSecondary) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o GatewaytemplateTunnelConfigsSecondaryOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsSecondary) []string { return v.InternalIps }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsSecondaryOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsSecondary) []string { return v.ProbeIps }).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsSecondaryOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsSecondary) []string { return v.RemoteIds }).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsSecondaryOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelConfigsSecondary) []string { return v.WanNames }).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelConfigsSecondaryPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelConfigsSecondaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelConfigsSecondary)(nil)).Elem()
}

func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) ToGatewaytemplateTunnelConfigsSecondaryPtrOutput() GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) ToGatewaytemplateTunnelConfigsSecondaryPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelConfigsSecondaryPtrOutput {
	return o
}

func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) Elem() GatewaytemplateTunnelConfigsSecondaryOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsSecondary) GatewaytemplateTunnelConfigsSecondary {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelConfigsSecondary
		return ret
	}).(GatewaytemplateTunnelConfigsSecondaryOutput)
}

func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Only if:
//   - `provider`== `zscaler-gre`
//   - `provider`== `custom-gre`
func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) InternalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.InternalIps
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) ProbeIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.ProbeIps
	}).(pulumi.StringArrayOutput)
}

// Only if `provider`== `custom-ipsec`
func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) RemoteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.RemoteIds
	}).(pulumi.StringArrayOutput)
}

func (o GatewaytemplateTunnelConfigsSecondaryPtrOutput) WanNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelConfigsSecondary) []string {
		if v == nil {
			return nil
		}
		return v.WanNames
	}).(pulumi.StringArrayOutput)
}

type GatewaytemplateTunnelProviderOptions struct {
	// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
	Jse *GatewaytemplateTunnelProviderOptionsJse `pulumi:"jse"`
	// for zscaler-ipsec and zscaler-gre
	Zscaler *GatewaytemplateTunnelProviderOptionsZscaler `pulumi:"zscaler"`
}

// GatewaytemplateTunnelProviderOptionsInput is an input type that accepts GatewaytemplateTunnelProviderOptionsArgs and GatewaytemplateTunnelProviderOptionsOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsInput` via:
//
//	GatewaytemplateTunnelProviderOptionsArgs{...}
type GatewaytemplateTunnelProviderOptionsInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsOutput() GatewaytemplateTunnelProviderOptionsOutput
	ToGatewaytemplateTunnelProviderOptionsOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsOutput
}

type GatewaytemplateTunnelProviderOptionsArgs struct {
	// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
	Jse GatewaytemplateTunnelProviderOptionsJsePtrInput `pulumi:"jse"`
	// for zscaler-ipsec and zscaler-gre
	Zscaler GatewaytemplateTunnelProviderOptionsZscalerPtrInput `pulumi:"zscaler"`
}

func (GatewaytemplateTunnelProviderOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptions)(nil)).Elem()
}

func (i GatewaytemplateTunnelProviderOptionsArgs) ToGatewaytemplateTunnelProviderOptionsOutput() GatewaytemplateTunnelProviderOptionsOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsArgs) ToGatewaytemplateTunnelProviderOptionsOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsOutput)
}

func (i GatewaytemplateTunnelProviderOptionsArgs) ToGatewaytemplateTunnelProviderOptionsPtrOutput() GatewaytemplateTunnelProviderOptionsPtrOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsArgs) ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsOutput).ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelProviderOptionsPtrInput is an input type that accepts GatewaytemplateTunnelProviderOptionsArgs, GatewaytemplateTunnelProviderOptionsPtr and GatewaytemplateTunnelProviderOptionsPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsPtrInput` via:
//
//	        GatewaytemplateTunnelProviderOptionsArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelProviderOptionsPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsPtrOutput() GatewaytemplateTunnelProviderOptionsPtrOutput
	ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsPtrOutput
}

type gatewaytemplateTunnelProviderOptionsPtrType GatewaytemplateTunnelProviderOptionsArgs

func GatewaytemplateTunnelProviderOptionsPtr(v *GatewaytemplateTunnelProviderOptionsArgs) GatewaytemplateTunnelProviderOptionsPtrInput {
	return (*gatewaytemplateTunnelProviderOptionsPtrType)(v)
}

func (*gatewaytemplateTunnelProviderOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelProviderOptions)(nil)).Elem()
}

func (i *gatewaytemplateTunnelProviderOptionsPtrType) ToGatewaytemplateTunnelProviderOptionsPtrOutput() GatewaytemplateTunnelProviderOptionsPtrOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelProviderOptionsPtrType) ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptions)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsOutput) ToGatewaytemplateTunnelProviderOptionsOutput() GatewaytemplateTunnelProviderOptionsOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsOutput) ToGatewaytemplateTunnelProviderOptionsOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsOutput) ToGatewaytemplateTunnelProviderOptionsPtrOutput() GatewaytemplateTunnelProviderOptionsPtrOutput {
	return o.ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelProviderOptionsOutput) ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelProviderOptions) *GatewaytemplateTunnelProviderOptions {
		return &v
	}).(GatewaytemplateTunnelProviderOptionsPtrOutput)
}

// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
func (o GatewaytemplateTunnelProviderOptionsOutput) Jse() GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptions) *GatewaytemplateTunnelProviderOptionsJse { return v.Jse }).(GatewaytemplateTunnelProviderOptionsJsePtrOutput)
}

// for zscaler-ipsec and zscaler-gre
func (o GatewaytemplateTunnelProviderOptionsOutput) Zscaler() GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptions) *GatewaytemplateTunnelProviderOptionsZscaler {
		return v.Zscaler
	}).(GatewaytemplateTunnelProviderOptionsZscalerPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelProviderOptions)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsPtrOutput) ToGatewaytemplateTunnelProviderOptionsPtrOutput() GatewaytemplateTunnelProviderOptionsPtrOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsPtrOutput) ToGatewaytemplateTunnelProviderOptionsPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsPtrOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsPtrOutput) Elem() GatewaytemplateTunnelProviderOptionsOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptions) GatewaytemplateTunnelProviderOptions {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelProviderOptions
		return ret
	}).(GatewaytemplateTunnelProviderOptionsOutput)
}

// for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
func (o GatewaytemplateTunnelProviderOptionsPtrOutput) Jse() GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptions) *GatewaytemplateTunnelProviderOptionsJse {
		if v == nil {
			return nil
		}
		return v.Jse
	}).(GatewaytemplateTunnelProviderOptionsJsePtrOutput)
}

// for zscaler-ipsec and zscaler-gre
func (o GatewaytemplateTunnelProviderOptionsPtrOutput) Zscaler() GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptions) *GatewaytemplateTunnelProviderOptionsZscaler {
		if v == nil {
			return nil
		}
		return v.Zscaler
	}).(GatewaytemplateTunnelProviderOptionsZscalerPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsJse struct {
	Name     *string `pulumi:"name"`
	NumUsers *int    `pulumi:"numUsers"`
}

// GatewaytemplateTunnelProviderOptionsJseInput is an input type that accepts GatewaytemplateTunnelProviderOptionsJseArgs and GatewaytemplateTunnelProviderOptionsJseOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsJseInput` via:
//
//	GatewaytemplateTunnelProviderOptionsJseArgs{...}
type GatewaytemplateTunnelProviderOptionsJseInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsJseOutput() GatewaytemplateTunnelProviderOptionsJseOutput
	ToGatewaytemplateTunnelProviderOptionsJseOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsJseOutput
}

type GatewaytemplateTunnelProviderOptionsJseArgs struct {
	Name     pulumi.StringPtrInput `pulumi:"name"`
	NumUsers pulumi.IntPtrInput    `pulumi:"numUsers"`
}

func (GatewaytemplateTunnelProviderOptionsJseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsJse)(nil)).Elem()
}

func (i GatewaytemplateTunnelProviderOptionsJseArgs) ToGatewaytemplateTunnelProviderOptionsJseOutput() GatewaytemplateTunnelProviderOptionsJseOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsJseOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsJseArgs) ToGatewaytemplateTunnelProviderOptionsJseOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsJseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsJseOutput)
}

func (i GatewaytemplateTunnelProviderOptionsJseArgs) ToGatewaytemplateTunnelProviderOptionsJsePtrOutput() GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsJseArgs) ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsJseOutput).ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelProviderOptionsJsePtrInput is an input type that accepts GatewaytemplateTunnelProviderOptionsJseArgs, GatewaytemplateTunnelProviderOptionsJsePtr and GatewaytemplateTunnelProviderOptionsJsePtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsJsePtrInput` via:
//
//	        GatewaytemplateTunnelProviderOptionsJseArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelProviderOptionsJsePtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsJsePtrOutput() GatewaytemplateTunnelProviderOptionsJsePtrOutput
	ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsJsePtrOutput
}

type gatewaytemplateTunnelProviderOptionsJsePtrType GatewaytemplateTunnelProviderOptionsJseArgs

func GatewaytemplateTunnelProviderOptionsJsePtr(v *GatewaytemplateTunnelProviderOptionsJseArgs) GatewaytemplateTunnelProviderOptionsJsePtrInput {
	return (*gatewaytemplateTunnelProviderOptionsJsePtrType)(v)
}

func (*gatewaytemplateTunnelProviderOptionsJsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelProviderOptionsJse)(nil)).Elem()
}

func (i *gatewaytemplateTunnelProviderOptionsJsePtrType) ToGatewaytemplateTunnelProviderOptionsJsePtrOutput() GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelProviderOptionsJsePtrType) ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsJsePtrOutput)
}

type GatewaytemplateTunnelProviderOptionsJseOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsJseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsJse)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsJseOutput) ToGatewaytemplateTunnelProviderOptionsJseOutput() GatewaytemplateTunnelProviderOptionsJseOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsJseOutput) ToGatewaytemplateTunnelProviderOptionsJseOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsJseOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsJseOutput) ToGatewaytemplateTunnelProviderOptionsJsePtrOutput() GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return o.ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelProviderOptionsJseOutput) ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelProviderOptionsJse) *GatewaytemplateTunnelProviderOptionsJse {
		return &v
	}).(GatewaytemplateTunnelProviderOptionsJsePtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsJseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsJse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsJseOutput) NumUsers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsJse) *int { return v.NumUsers }).(pulumi.IntPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsJsePtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsJsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelProviderOptionsJse)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsJsePtrOutput) ToGatewaytemplateTunnelProviderOptionsJsePtrOutput() GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsJsePtrOutput) ToGatewaytemplateTunnelProviderOptionsJsePtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsJsePtrOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsJsePtrOutput) Elem() GatewaytemplateTunnelProviderOptionsJseOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsJse) GatewaytemplateTunnelProviderOptionsJse {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelProviderOptionsJse
		return ret
	}).(GatewaytemplateTunnelProviderOptionsJseOutput)
}

func (o GatewaytemplateTunnelProviderOptionsJsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsJse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsJsePtrOutput) NumUsers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsJse) *int {
		if v == nil {
			return nil
		}
		return v.NumUsers
	}).(pulumi.IntPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsZscaler struct {
	AupAcceptanceRequired *bool `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire *int `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy *bool `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps *int `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup *bool `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         *bool   `pulumi:"enableCaution"`
	EnforceAuthentication *bool   `pulumi:"enforceAuthentication"`
	Name                  *string `pulumi:"name"`
	// if `useXff`==`true`
	SubLocations []GatewaytemplateTunnelProviderOptionsZscalerSubLocation `pulumi:"subLocations"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps *int `pulumi:"uploadMbps"`
	// location uses proxy chaining to forward traffic
	UseXff *bool `pulumi:"useXff"`
}

// GatewaytemplateTunnelProviderOptionsZscalerInput is an input type that accepts GatewaytemplateTunnelProviderOptionsZscalerArgs and GatewaytemplateTunnelProviderOptionsZscalerOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsZscalerInput` via:
//
//	GatewaytemplateTunnelProviderOptionsZscalerArgs{...}
type GatewaytemplateTunnelProviderOptionsZscalerInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsZscalerOutput() GatewaytemplateTunnelProviderOptionsZscalerOutput
	ToGatewaytemplateTunnelProviderOptionsZscalerOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsZscalerOutput
}

type GatewaytemplateTunnelProviderOptionsZscalerArgs struct {
	AupAcceptanceRequired pulumi.BoolPtrInput `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire pulumi.IntPtrInput `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy pulumi.BoolPtrInput `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps pulumi.IntPtrInput `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup pulumi.BoolPtrInput `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         pulumi.BoolPtrInput   `pulumi:"enableCaution"`
	EnforceAuthentication pulumi.BoolPtrInput   `pulumi:"enforceAuthentication"`
	Name                  pulumi.StringPtrInput `pulumi:"name"`
	// if `useXff`==`true`
	SubLocations GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayInput `pulumi:"subLocations"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps pulumi.IntPtrInput `pulumi:"uploadMbps"`
	// location uses proxy chaining to forward traffic
	UseXff pulumi.BoolPtrInput `pulumi:"useXff"`
}

func (GatewaytemplateTunnelProviderOptionsZscalerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (i GatewaytemplateTunnelProviderOptionsZscalerArgs) ToGatewaytemplateTunnelProviderOptionsZscalerOutput() GatewaytemplateTunnelProviderOptionsZscalerOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsZscalerOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsZscalerArgs) ToGatewaytemplateTunnelProviderOptionsZscalerOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsZscalerOutput)
}

func (i GatewaytemplateTunnelProviderOptionsZscalerArgs) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutput() GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsZscalerArgs) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsZscalerOutput).ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(ctx)
}

// GatewaytemplateTunnelProviderOptionsZscalerPtrInput is an input type that accepts GatewaytemplateTunnelProviderOptionsZscalerArgs, GatewaytemplateTunnelProviderOptionsZscalerPtr and GatewaytemplateTunnelProviderOptionsZscalerPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsZscalerPtrInput` via:
//
//	        GatewaytemplateTunnelProviderOptionsZscalerArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateTunnelProviderOptionsZscalerPtrInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutput() GatewaytemplateTunnelProviderOptionsZscalerPtrOutput
	ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsZscalerPtrOutput
}

type gatewaytemplateTunnelProviderOptionsZscalerPtrType GatewaytemplateTunnelProviderOptionsZscalerArgs

func GatewaytemplateTunnelProviderOptionsZscalerPtr(v *GatewaytemplateTunnelProviderOptionsZscalerArgs) GatewaytemplateTunnelProviderOptionsZscalerPtrInput {
	return (*gatewaytemplateTunnelProviderOptionsZscalerPtrType)(v)
}

func (*gatewaytemplateTunnelProviderOptionsZscalerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (i *gatewaytemplateTunnelProviderOptionsZscalerPtrType) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutput() GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateTunnelProviderOptionsZscalerPtrType) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsZscalerPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsZscalerOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsZscalerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) ToGatewaytemplateTunnelProviderOptionsZscalerOutput() GatewaytemplateTunnelProviderOptionsZscalerOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) ToGatewaytemplateTunnelProviderOptionsZscalerOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutput() GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return o.ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateTunnelProviderOptionsZscaler) *GatewaytemplateTunnelProviderOptionsZscaler {
		return &v
	}).(GatewaytemplateTunnelProviderOptionsZscalerPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) AupAcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *bool { return v.AupAcceptanceRequired }).(pulumi.BoolPtrOutput)
}

// days before AUP is requested again
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) AupExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *int { return v.AupExpire }).(pulumi.IntPtrOutput)
}

// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) AupSslProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *bool { return v.AupSslProxy }).(pulumi.BoolPtrOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) DownloadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *int { return v.DownloadMbps }).(pulumi.IntPtrOutput)
}

// if `useXff`==`true`, display Acceptable Use Policy (AUP)
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) EnableAup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *bool { return v.EnableAup }).(pulumi.BoolPtrOutput)
}

// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) EnableCaution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *bool { return v.EnableCaution }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) EnforceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *bool { return v.EnforceAuthentication }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// if `useXff`==`true`
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) SubLocations() GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) []GatewaytemplateTunnelProviderOptionsZscalerSubLocation {
		return v.SubLocations
	}).(GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) UploadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *int { return v.UploadMbps }).(pulumi.IntPtrOutput)
}

// location uses proxy chaining to forward traffic
func (o GatewaytemplateTunnelProviderOptionsZscalerOutput) UseXff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscaler) *bool { return v.UseXff }).(pulumi.BoolPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsZscalerPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateTunnelProviderOptionsZscaler)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutput() GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) ToGatewaytemplateTunnelProviderOptionsZscalerPtrOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerPtrOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) Elem() GatewaytemplateTunnelProviderOptionsZscalerOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) GatewaytemplateTunnelProviderOptionsZscaler {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateTunnelProviderOptionsZscaler
		return ret
	}).(GatewaytemplateTunnelProviderOptionsZscalerOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) AupAcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.AupAcceptanceRequired
	}).(pulumi.BoolPtrOutput)
}

// days before AUP is requested again
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) AupExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *int {
		if v == nil {
			return nil
		}
		return v.AupExpire
	}).(pulumi.IntPtrOutput)
}

// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) AupSslProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.AupSslProxy
	}).(pulumi.BoolPtrOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) DownloadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *int {
		if v == nil {
			return nil
		}
		return v.DownloadMbps
	}).(pulumi.IntPtrOutput)
}

// if `useXff`==`true`, display Acceptable Use Policy (AUP)
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) EnableAup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAup
	}).(pulumi.BoolPtrOutput)
}

// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) EnableCaution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCaution
	}).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) EnforceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.EnforceAuthentication
	}).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// if `useXff`==`true`
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) SubLocations() GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) []GatewaytemplateTunnelProviderOptionsZscalerSubLocation {
		if v == nil {
			return nil
		}
		return v.SubLocations
	}).(GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) UploadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *int {
		if v == nil {
			return nil
		}
		return v.UploadMbps
	}).(pulumi.IntPtrOutput)
}

// location uses proxy chaining to forward traffic
func (o GatewaytemplateTunnelProviderOptionsZscalerPtrOutput) UseXff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateTunnelProviderOptionsZscaler) *bool {
		if v == nil {
			return nil
		}
		return v.UseXff
	}).(pulumi.BoolPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsZscalerSubLocation struct {
	AupAcceptanceRequired *bool `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire *int `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy *bool `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps *int `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup *bool `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         *bool    `pulumi:"enableCaution"`
	EnforceAuthentication *bool    `pulumi:"enforceAuthentication"`
	Subnets               []string `pulumi:"subnets"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps *int `pulumi:"uploadMbps"`
}

// GatewaytemplateTunnelProviderOptionsZscalerSubLocationInput is an input type that accepts GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs and GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsZscalerSubLocationInput` via:
//
//	GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs{...}
type GatewaytemplateTunnelProviderOptionsZscalerSubLocationInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput() GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput
	ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput
}

type GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs struct {
	AupAcceptanceRequired pulumi.BoolPtrInput `pulumi:"aupAcceptanceRequired"`
	// days before AUP is requested again
	AupExpire pulumi.IntPtrInput `pulumi:"aupExpire"`
	// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
	AupSslProxy pulumi.BoolPtrInput `pulumi:"aupSslProxy"`
	// the download bandwidth cap of the link, in Mbps
	DownloadMbps pulumi.IntPtrInput `pulumi:"downloadMbps"`
	// if `useXff`==`true`, display Acceptable Use Policy (AUP)
	EnableAup pulumi.BoolPtrInput `pulumi:"enableAup"`
	// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
	EnableCaution         pulumi.BoolPtrInput     `pulumi:"enableCaution"`
	EnforceAuthentication pulumi.BoolPtrInput     `pulumi:"enforceAuthentication"`
	Subnets               pulumi.StringArrayInput `pulumi:"subnets"`
	// the download bandwidth cap of the link, in Mbps
	UploadMbps pulumi.IntPtrInput `pulumi:"uploadMbps"`
}

func (GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (i GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput() GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput)
}

// GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayInput is an input type that accepts GatewaytemplateTunnelProviderOptionsZscalerSubLocationArray and GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput values.
// You can construct a concrete instance of `GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayInput` via:
//
//	GatewaytemplateTunnelProviderOptionsZscalerSubLocationArray{ GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs{...} }
type GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayInput interface {
	pulumi.Input

	ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput() GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput
	ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(context.Context) GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput
}

type GatewaytemplateTunnelProviderOptionsZscalerSubLocationArray []GatewaytemplateTunnelProviderOptionsZscalerSubLocationInput

func (GatewaytemplateTunnelProviderOptionsZscalerSubLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (i GatewaytemplateTunnelProviderOptionsZscalerSubLocationArray) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput() GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return i.ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(context.Background())
}

func (i GatewaytemplateTunnelProviderOptionsZscalerSubLocationArray) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput)
}

type GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput() GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) AupAcceptanceRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *bool { return v.AupAcceptanceRequired }).(pulumi.BoolPtrOutput)
}

// days before AUP is requested again
func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) AupExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *int { return v.AupExpire }).(pulumi.IntPtrOutput)
}

// proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) AupSslProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *bool { return v.AupSslProxy }).(pulumi.BoolPtrOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) DownloadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *int { return v.DownloadMbps }).(pulumi.IntPtrOutput)
}

// if `useXff`==`true`, display Acceptable Use Policy (AUP)
func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) EnableAup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *bool { return v.EnableAup }).(pulumi.BoolPtrOutput)
}

// when `enforceAuthentication`==`false`, display caution notification for non-authenticated users
func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) EnableCaution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *bool { return v.EnableCaution }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) EnforceAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *bool { return v.EnforceAuthentication }).(pulumi.BoolPtrOutput)
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// the download bandwidth cap of the link, in Mbps
func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput) UploadMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaytemplateTunnelProviderOptionsZscalerSubLocation) *int { return v.UploadMbps }).(pulumi.IntPtrOutput)
}

type GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput struct{ *pulumi.OutputState }

func (GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaytemplateTunnelProviderOptionsZscalerSubLocation)(nil)).Elem()
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput() GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput) ToGatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutputWithContext(ctx context.Context) GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput {
	return o
}

func (o GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput) Index(i pulumi.IntInput) GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaytemplateTunnelProviderOptionsZscalerSubLocation {
		return vs[0].([]GatewaytemplateTunnelProviderOptionsZscalerSubLocation)[vs[1].(int)]
	}).(GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput)
}

type GatewaytemplateVrfConfig struct {
	// whether to enable VRF (when supported on the device)
	Enabled *bool `pulumi:"enabled"`
}

// GatewaytemplateVrfConfigInput is an input type that accepts GatewaytemplateVrfConfigArgs and GatewaytemplateVrfConfigOutput values.
// You can construct a concrete instance of `GatewaytemplateVrfConfigInput` via:
//
//	GatewaytemplateVrfConfigArgs{...}
type GatewaytemplateVrfConfigInput interface {
	pulumi.Input

	ToGatewaytemplateVrfConfigOutput() GatewaytemplateVrfConfigOutput
	ToGatewaytemplateVrfConfigOutputWithContext(context.Context) GatewaytemplateVrfConfigOutput
}

type GatewaytemplateVrfConfigArgs struct {
	// whether to enable VRF (when supported on the device)
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GatewaytemplateVrfConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateVrfConfig)(nil)).Elem()
}

func (i GatewaytemplateVrfConfigArgs) ToGatewaytemplateVrfConfigOutput() GatewaytemplateVrfConfigOutput {
	return i.ToGatewaytemplateVrfConfigOutputWithContext(context.Background())
}

func (i GatewaytemplateVrfConfigArgs) ToGatewaytemplateVrfConfigOutputWithContext(ctx context.Context) GatewaytemplateVrfConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateVrfConfigOutput)
}

func (i GatewaytemplateVrfConfigArgs) ToGatewaytemplateVrfConfigPtrOutput() GatewaytemplateVrfConfigPtrOutput {
	return i.ToGatewaytemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (i GatewaytemplateVrfConfigArgs) ToGatewaytemplateVrfConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateVrfConfigOutput).ToGatewaytemplateVrfConfigPtrOutputWithContext(ctx)
}

// GatewaytemplateVrfConfigPtrInput is an input type that accepts GatewaytemplateVrfConfigArgs, GatewaytemplateVrfConfigPtr and GatewaytemplateVrfConfigPtrOutput values.
// You can construct a concrete instance of `GatewaytemplateVrfConfigPtrInput` via:
//
//	        GatewaytemplateVrfConfigArgs{...}
//
//	or:
//
//	        nil
type GatewaytemplateVrfConfigPtrInput interface {
	pulumi.Input

	ToGatewaytemplateVrfConfigPtrOutput() GatewaytemplateVrfConfigPtrOutput
	ToGatewaytemplateVrfConfigPtrOutputWithContext(context.Context) GatewaytemplateVrfConfigPtrOutput
}

type gatewaytemplateVrfConfigPtrType GatewaytemplateVrfConfigArgs

func GatewaytemplateVrfConfigPtr(v *GatewaytemplateVrfConfigArgs) GatewaytemplateVrfConfigPtrInput {
	return (*gatewaytemplateVrfConfigPtrType)(v)
}

func (*gatewaytemplateVrfConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateVrfConfig)(nil)).Elem()
}

func (i *gatewaytemplateVrfConfigPtrType) ToGatewaytemplateVrfConfigPtrOutput() GatewaytemplateVrfConfigPtrOutput {
	return i.ToGatewaytemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (i *gatewaytemplateVrfConfigPtrType) ToGatewaytemplateVrfConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateVrfConfigPtrOutput)
}

type GatewaytemplateVrfConfigOutput struct{ *pulumi.OutputState }

func (GatewaytemplateVrfConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateVrfConfig)(nil)).Elem()
}

func (o GatewaytemplateVrfConfigOutput) ToGatewaytemplateVrfConfigOutput() GatewaytemplateVrfConfigOutput {
	return o
}

func (o GatewaytemplateVrfConfigOutput) ToGatewaytemplateVrfConfigOutputWithContext(ctx context.Context) GatewaytemplateVrfConfigOutput {
	return o
}

func (o GatewaytemplateVrfConfigOutput) ToGatewaytemplateVrfConfigPtrOutput() GatewaytemplateVrfConfigPtrOutput {
	return o.ToGatewaytemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (o GatewaytemplateVrfConfigOutput) ToGatewaytemplateVrfConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateVrfConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaytemplateVrfConfig) *GatewaytemplateVrfConfig {
		return &v
	}).(GatewaytemplateVrfConfigPtrOutput)
}

// whether to enable VRF (when supported on the device)
func (o GatewaytemplateVrfConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaytemplateVrfConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GatewaytemplateVrfConfigPtrOutput struct{ *pulumi.OutputState }

func (GatewaytemplateVrfConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaytemplateVrfConfig)(nil)).Elem()
}

func (o GatewaytemplateVrfConfigPtrOutput) ToGatewaytemplateVrfConfigPtrOutput() GatewaytemplateVrfConfigPtrOutput {
	return o
}

func (o GatewaytemplateVrfConfigPtrOutput) ToGatewaytemplateVrfConfigPtrOutputWithContext(ctx context.Context) GatewaytemplateVrfConfigPtrOutput {
	return o
}

func (o GatewaytemplateVrfConfigPtrOutput) Elem() GatewaytemplateVrfConfigOutput {
	return o.ApplyT(func(v *GatewaytemplateVrfConfig) GatewaytemplateVrfConfig {
		if v != nil {
			return *v
		}
		var ret GatewaytemplateVrfConfig
		return ret
	}).(GatewaytemplateVrfConfigOutput)
}

// whether to enable VRF (when supported on the device)
func (o GatewaytemplateVrfConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaytemplateVrfConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type GatewaytemplateVrfInstances struct {
	Networks []string `pulumi:"networks"`
}

// GatewaytemplateVrfInstancesInput is an input type that accepts GatewaytemplateVrfInstancesArgs and GatewaytemplateVrfInstancesOutput values.
// You can construct a concrete instance of `GatewaytemplateVrfInstancesInput` via:
//
//	GatewaytemplateVrfInstancesArgs{...}
type GatewaytemplateVrfInstancesInput interface {
	pulumi.Input

	ToGatewaytemplateVrfInstancesOutput() GatewaytemplateVrfInstancesOutput
	ToGatewaytemplateVrfInstancesOutputWithContext(context.Context) GatewaytemplateVrfInstancesOutput
}

type GatewaytemplateVrfInstancesArgs struct {
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (GatewaytemplateVrfInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateVrfInstances)(nil)).Elem()
}

func (i GatewaytemplateVrfInstancesArgs) ToGatewaytemplateVrfInstancesOutput() GatewaytemplateVrfInstancesOutput {
	return i.ToGatewaytemplateVrfInstancesOutputWithContext(context.Background())
}

func (i GatewaytemplateVrfInstancesArgs) ToGatewaytemplateVrfInstancesOutputWithContext(ctx context.Context) GatewaytemplateVrfInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateVrfInstancesOutput)
}

// GatewaytemplateVrfInstancesMapInput is an input type that accepts GatewaytemplateVrfInstancesMap and GatewaytemplateVrfInstancesMapOutput values.
// You can construct a concrete instance of `GatewaytemplateVrfInstancesMapInput` via:
//
//	GatewaytemplateVrfInstancesMap{ "key": GatewaytemplateVrfInstancesArgs{...} }
type GatewaytemplateVrfInstancesMapInput interface {
	pulumi.Input

	ToGatewaytemplateVrfInstancesMapOutput() GatewaytemplateVrfInstancesMapOutput
	ToGatewaytemplateVrfInstancesMapOutputWithContext(context.Context) GatewaytemplateVrfInstancesMapOutput
}

type GatewaytemplateVrfInstancesMap map[string]GatewaytemplateVrfInstancesInput

func (GatewaytemplateVrfInstancesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateVrfInstances)(nil)).Elem()
}

func (i GatewaytemplateVrfInstancesMap) ToGatewaytemplateVrfInstancesMapOutput() GatewaytemplateVrfInstancesMapOutput {
	return i.ToGatewaytemplateVrfInstancesMapOutputWithContext(context.Background())
}

func (i GatewaytemplateVrfInstancesMap) ToGatewaytemplateVrfInstancesMapOutputWithContext(ctx context.Context) GatewaytemplateVrfInstancesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaytemplateVrfInstancesMapOutput)
}

type GatewaytemplateVrfInstancesOutput struct{ *pulumi.OutputState }

func (GatewaytemplateVrfInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaytemplateVrfInstances)(nil)).Elem()
}

func (o GatewaytemplateVrfInstancesOutput) ToGatewaytemplateVrfInstancesOutput() GatewaytemplateVrfInstancesOutput {
	return o
}

func (o GatewaytemplateVrfInstancesOutput) ToGatewaytemplateVrfInstancesOutputWithContext(ctx context.Context) GatewaytemplateVrfInstancesOutput {
	return o
}

func (o GatewaytemplateVrfInstancesOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaytemplateVrfInstances) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type GatewaytemplateVrfInstancesMapOutput struct{ *pulumi.OutputState }

func (GatewaytemplateVrfInstancesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GatewaytemplateVrfInstances)(nil)).Elem()
}

func (o GatewaytemplateVrfInstancesMapOutput) ToGatewaytemplateVrfInstancesMapOutput() GatewaytemplateVrfInstancesMapOutput {
	return o
}

func (o GatewaytemplateVrfInstancesMapOutput) ToGatewaytemplateVrfInstancesMapOutputWithContext(ctx context.Context) GatewaytemplateVrfInstancesMapOutput {
	return o
}

func (o GatewaytemplateVrfInstancesMapOutput) MapIndex(k pulumi.StringInput) GatewaytemplateVrfInstancesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GatewaytemplateVrfInstances {
		return vs[0].(map[string]GatewaytemplateVrfInstances)[vs[1].(string)]
	}).(GatewaytemplateVrfInstancesOutput)
}

type IdpprofileOverwrite struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   *string                      `pulumi:"action"`
	Matching *IdpprofileOverwriteMatching `pulumi:"matching"`
	Name     string                       `pulumi:"name"`
}

// IdpprofileOverwriteInput is an input type that accepts IdpprofileOverwriteArgs and IdpprofileOverwriteOutput values.
// You can construct a concrete instance of `IdpprofileOverwriteInput` via:
//
//	IdpprofileOverwriteArgs{...}
type IdpprofileOverwriteInput interface {
	pulumi.Input

	ToIdpprofileOverwriteOutput() IdpprofileOverwriteOutput
	ToIdpprofileOverwriteOutputWithContext(context.Context) IdpprofileOverwriteOutput
}

type IdpprofileOverwriteArgs struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   pulumi.StringPtrInput               `pulumi:"action"`
	Matching IdpprofileOverwriteMatchingPtrInput `pulumi:"matching"`
	Name     pulumi.StringInput                  `pulumi:"name"`
}

func (IdpprofileOverwriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdpprofileOverwrite)(nil)).Elem()
}

func (i IdpprofileOverwriteArgs) ToIdpprofileOverwriteOutput() IdpprofileOverwriteOutput {
	return i.ToIdpprofileOverwriteOutputWithContext(context.Background())
}

func (i IdpprofileOverwriteArgs) ToIdpprofileOverwriteOutputWithContext(ctx context.Context) IdpprofileOverwriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpprofileOverwriteOutput)
}

// IdpprofileOverwriteArrayInput is an input type that accepts IdpprofileOverwriteArray and IdpprofileOverwriteArrayOutput values.
// You can construct a concrete instance of `IdpprofileOverwriteArrayInput` via:
//
//	IdpprofileOverwriteArray{ IdpprofileOverwriteArgs{...} }
type IdpprofileOverwriteArrayInput interface {
	pulumi.Input

	ToIdpprofileOverwriteArrayOutput() IdpprofileOverwriteArrayOutput
	ToIdpprofileOverwriteArrayOutputWithContext(context.Context) IdpprofileOverwriteArrayOutput
}

type IdpprofileOverwriteArray []IdpprofileOverwriteInput

func (IdpprofileOverwriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdpprofileOverwrite)(nil)).Elem()
}

func (i IdpprofileOverwriteArray) ToIdpprofileOverwriteArrayOutput() IdpprofileOverwriteArrayOutput {
	return i.ToIdpprofileOverwriteArrayOutputWithContext(context.Background())
}

func (i IdpprofileOverwriteArray) ToIdpprofileOverwriteArrayOutputWithContext(ctx context.Context) IdpprofileOverwriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpprofileOverwriteArrayOutput)
}

type IdpprofileOverwriteOutput struct{ *pulumi.OutputState }

func (IdpprofileOverwriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdpprofileOverwrite)(nil)).Elem()
}

func (o IdpprofileOverwriteOutput) ToIdpprofileOverwriteOutput() IdpprofileOverwriteOutput {
	return o
}

func (o IdpprofileOverwriteOutput) ToIdpprofileOverwriteOutputWithContext(ctx context.Context) IdpprofileOverwriteOutput {
	return o
}

// enum:
//   - alert (default)
//   - drop: siliently dropping packets
//   - close: notify client/server to close connection
func (o IdpprofileOverwriteOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdpprofileOverwrite) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o IdpprofileOverwriteOutput) Matching() IdpprofileOverwriteMatchingPtrOutput {
	return o.ApplyT(func(v IdpprofileOverwrite) *IdpprofileOverwriteMatching { return v.Matching }).(IdpprofileOverwriteMatchingPtrOutput)
}

func (o IdpprofileOverwriteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IdpprofileOverwrite) string { return v.Name }).(pulumi.StringOutput)
}

type IdpprofileOverwriteArrayOutput struct{ *pulumi.OutputState }

func (IdpprofileOverwriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdpprofileOverwrite)(nil)).Elem()
}

func (o IdpprofileOverwriteArrayOutput) ToIdpprofileOverwriteArrayOutput() IdpprofileOverwriteArrayOutput {
	return o
}

func (o IdpprofileOverwriteArrayOutput) ToIdpprofileOverwriteArrayOutputWithContext(ctx context.Context) IdpprofileOverwriteArrayOutput {
	return o
}

func (o IdpprofileOverwriteArrayOutput) Index(i pulumi.IntInput) IdpprofileOverwriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdpprofileOverwrite {
		return vs[0].([]IdpprofileOverwrite)[vs[1].(int)]
	}).(IdpprofileOverwriteOutput)
}

type IdpprofileOverwriteMatching struct {
	AttackNames []string `pulumi:"attackNames"`
	DstSubnets  []string `pulumi:"dstSubnets"`
	Severities  []string `pulumi:"severities"`
}

// IdpprofileOverwriteMatchingInput is an input type that accepts IdpprofileOverwriteMatchingArgs and IdpprofileOverwriteMatchingOutput values.
// You can construct a concrete instance of `IdpprofileOverwriteMatchingInput` via:
//
//	IdpprofileOverwriteMatchingArgs{...}
type IdpprofileOverwriteMatchingInput interface {
	pulumi.Input

	ToIdpprofileOverwriteMatchingOutput() IdpprofileOverwriteMatchingOutput
	ToIdpprofileOverwriteMatchingOutputWithContext(context.Context) IdpprofileOverwriteMatchingOutput
}

type IdpprofileOverwriteMatchingArgs struct {
	AttackNames pulumi.StringArrayInput `pulumi:"attackNames"`
	DstSubnets  pulumi.StringArrayInput `pulumi:"dstSubnets"`
	Severities  pulumi.StringArrayInput `pulumi:"severities"`
}

func (IdpprofileOverwriteMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdpprofileOverwriteMatching)(nil)).Elem()
}

func (i IdpprofileOverwriteMatchingArgs) ToIdpprofileOverwriteMatchingOutput() IdpprofileOverwriteMatchingOutput {
	return i.ToIdpprofileOverwriteMatchingOutputWithContext(context.Background())
}

func (i IdpprofileOverwriteMatchingArgs) ToIdpprofileOverwriteMatchingOutputWithContext(ctx context.Context) IdpprofileOverwriteMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpprofileOverwriteMatchingOutput)
}

func (i IdpprofileOverwriteMatchingArgs) ToIdpprofileOverwriteMatchingPtrOutput() IdpprofileOverwriteMatchingPtrOutput {
	return i.ToIdpprofileOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (i IdpprofileOverwriteMatchingArgs) ToIdpprofileOverwriteMatchingPtrOutputWithContext(ctx context.Context) IdpprofileOverwriteMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpprofileOverwriteMatchingOutput).ToIdpprofileOverwriteMatchingPtrOutputWithContext(ctx)
}

// IdpprofileOverwriteMatchingPtrInput is an input type that accepts IdpprofileOverwriteMatchingArgs, IdpprofileOverwriteMatchingPtr and IdpprofileOverwriteMatchingPtrOutput values.
// You can construct a concrete instance of `IdpprofileOverwriteMatchingPtrInput` via:
//
//	        IdpprofileOverwriteMatchingArgs{...}
//
//	or:
//
//	        nil
type IdpprofileOverwriteMatchingPtrInput interface {
	pulumi.Input

	ToIdpprofileOverwriteMatchingPtrOutput() IdpprofileOverwriteMatchingPtrOutput
	ToIdpprofileOverwriteMatchingPtrOutputWithContext(context.Context) IdpprofileOverwriteMatchingPtrOutput
}

type idpprofileOverwriteMatchingPtrType IdpprofileOverwriteMatchingArgs

func IdpprofileOverwriteMatchingPtr(v *IdpprofileOverwriteMatchingArgs) IdpprofileOverwriteMatchingPtrInput {
	return (*idpprofileOverwriteMatchingPtrType)(v)
}

func (*idpprofileOverwriteMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpprofileOverwriteMatching)(nil)).Elem()
}

func (i *idpprofileOverwriteMatchingPtrType) ToIdpprofileOverwriteMatchingPtrOutput() IdpprofileOverwriteMatchingPtrOutput {
	return i.ToIdpprofileOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (i *idpprofileOverwriteMatchingPtrType) ToIdpprofileOverwriteMatchingPtrOutputWithContext(ctx context.Context) IdpprofileOverwriteMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpprofileOverwriteMatchingPtrOutput)
}

type IdpprofileOverwriteMatchingOutput struct{ *pulumi.OutputState }

func (IdpprofileOverwriteMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdpprofileOverwriteMatching)(nil)).Elem()
}

func (o IdpprofileOverwriteMatchingOutput) ToIdpprofileOverwriteMatchingOutput() IdpprofileOverwriteMatchingOutput {
	return o
}

func (o IdpprofileOverwriteMatchingOutput) ToIdpprofileOverwriteMatchingOutputWithContext(ctx context.Context) IdpprofileOverwriteMatchingOutput {
	return o
}

func (o IdpprofileOverwriteMatchingOutput) ToIdpprofileOverwriteMatchingPtrOutput() IdpprofileOverwriteMatchingPtrOutput {
	return o.ToIdpprofileOverwriteMatchingPtrOutputWithContext(context.Background())
}

func (o IdpprofileOverwriteMatchingOutput) ToIdpprofileOverwriteMatchingPtrOutputWithContext(ctx context.Context) IdpprofileOverwriteMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdpprofileOverwriteMatching) *IdpprofileOverwriteMatching {
		return &v
	}).(IdpprofileOverwriteMatchingPtrOutput)
}

func (o IdpprofileOverwriteMatchingOutput) AttackNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IdpprofileOverwriteMatching) []string { return v.AttackNames }).(pulumi.StringArrayOutput)
}

func (o IdpprofileOverwriteMatchingOutput) DstSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IdpprofileOverwriteMatching) []string { return v.DstSubnets }).(pulumi.StringArrayOutput)
}

func (o IdpprofileOverwriteMatchingOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IdpprofileOverwriteMatching) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

type IdpprofileOverwriteMatchingPtrOutput struct{ *pulumi.OutputState }

func (IdpprofileOverwriteMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpprofileOverwriteMatching)(nil)).Elem()
}

func (o IdpprofileOverwriteMatchingPtrOutput) ToIdpprofileOverwriteMatchingPtrOutput() IdpprofileOverwriteMatchingPtrOutput {
	return o
}

func (o IdpprofileOverwriteMatchingPtrOutput) ToIdpprofileOverwriteMatchingPtrOutputWithContext(ctx context.Context) IdpprofileOverwriteMatchingPtrOutput {
	return o
}

func (o IdpprofileOverwriteMatchingPtrOutput) Elem() IdpprofileOverwriteMatchingOutput {
	return o.ApplyT(func(v *IdpprofileOverwriteMatching) IdpprofileOverwriteMatching {
		if v != nil {
			return *v
		}
		var ret IdpprofileOverwriteMatching
		return ret
	}).(IdpprofileOverwriteMatchingOutput)
}

func (o IdpprofileOverwriteMatchingPtrOutput) AttackNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdpprofileOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.AttackNames
	}).(pulumi.StringArrayOutput)
}

func (o IdpprofileOverwriteMatchingPtrOutput) DstSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdpprofileOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.DstSubnets
	}).(pulumi.StringArrayOutput)
}

func (o IdpprofileOverwriteMatchingPtrOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdpprofileOverwriteMatching) []string {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(pulumi.StringArrayOutput)
}

type InventoryDevice struct {
	ClaimCode string `pulumi:"claimCode"`
	// Device Hostname
	Hostname *string `pulumi:"hostname"`
	// Mist Device ID
	Id *string `pulumi:"id"`
	// MAC address
	Mac *string `pulumi:"mac"`
	// device model
	Model *string `pulumi:"model"`
	OrgId *string `pulumi:"orgId"`
	// device serial
	Serial *string `pulumi:"serial"`
	// site id if assigned, null if not assigned
	SiteId *string `pulumi:"siteId"`
	Type   *string `pulumi:"type"`
	// Virtual Chassis MAC Address
	VcMac *string `pulumi:"vcMac"`
}

// InventoryDeviceInput is an input type that accepts InventoryDeviceArgs and InventoryDeviceOutput values.
// You can construct a concrete instance of `InventoryDeviceInput` via:
//
//	InventoryDeviceArgs{...}
type InventoryDeviceInput interface {
	pulumi.Input

	ToInventoryDeviceOutput() InventoryDeviceOutput
	ToInventoryDeviceOutputWithContext(context.Context) InventoryDeviceOutput
}

type InventoryDeviceArgs struct {
	ClaimCode pulumi.StringInput `pulumi:"claimCode"`
	// Device Hostname
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Mist Device ID
	Id pulumi.StringPtrInput `pulumi:"id"`
	// MAC address
	Mac pulumi.StringPtrInput `pulumi:"mac"`
	// device model
	Model pulumi.StringPtrInput `pulumi:"model"`
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// device serial
	Serial pulumi.StringPtrInput `pulumi:"serial"`
	// site id if assigned, null if not assigned
	SiteId pulumi.StringPtrInput `pulumi:"siteId"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
	// Virtual Chassis MAC Address
	VcMac pulumi.StringPtrInput `pulumi:"vcMac"`
}

func (InventoryDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDevice)(nil)).Elem()
}

func (i InventoryDeviceArgs) ToInventoryDeviceOutput() InventoryDeviceOutput {
	return i.ToInventoryDeviceOutputWithContext(context.Background())
}

func (i InventoryDeviceArgs) ToInventoryDeviceOutputWithContext(ctx context.Context) InventoryDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryDeviceOutput)
}

// InventoryDeviceArrayInput is an input type that accepts InventoryDeviceArray and InventoryDeviceArrayOutput values.
// You can construct a concrete instance of `InventoryDeviceArrayInput` via:
//
//	InventoryDeviceArray{ InventoryDeviceArgs{...} }
type InventoryDeviceArrayInput interface {
	pulumi.Input

	ToInventoryDeviceArrayOutput() InventoryDeviceArrayOutput
	ToInventoryDeviceArrayOutputWithContext(context.Context) InventoryDeviceArrayOutput
}

type InventoryDeviceArray []InventoryDeviceInput

func (InventoryDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InventoryDevice)(nil)).Elem()
}

func (i InventoryDeviceArray) ToInventoryDeviceArrayOutput() InventoryDeviceArrayOutput {
	return i.ToInventoryDeviceArrayOutputWithContext(context.Background())
}

func (i InventoryDeviceArray) ToInventoryDeviceArrayOutputWithContext(ctx context.Context) InventoryDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryDeviceArrayOutput)
}

type InventoryDeviceOutput struct{ *pulumi.OutputState }

func (InventoryDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryDevice)(nil)).Elem()
}

func (o InventoryDeviceOutput) ToInventoryDeviceOutput() InventoryDeviceOutput {
	return o
}

func (o InventoryDeviceOutput) ToInventoryDeviceOutputWithContext(ctx context.Context) InventoryDeviceOutput {
	return o
}

func (o InventoryDeviceOutput) ClaimCode() pulumi.StringOutput {
	return o.ApplyT(func(v InventoryDevice) string { return v.ClaimCode }).(pulumi.StringOutput)
}

// Device Hostname
func (o InventoryDeviceOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Mist Device ID
func (o InventoryDeviceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// MAC address
func (o InventoryDeviceOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// device model
func (o InventoryDeviceOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.Model }).(pulumi.StringPtrOutput)
}

func (o InventoryDeviceOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// device serial
func (o InventoryDeviceOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.Serial }).(pulumi.StringPtrOutput)
}

// site id if assigned, null if not assigned
func (o InventoryDeviceOutput) SiteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.SiteId }).(pulumi.StringPtrOutput)
}

func (o InventoryDeviceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Virtual Chassis MAC Address
func (o InventoryDeviceOutput) VcMac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InventoryDevice) *string { return v.VcMac }).(pulumi.StringPtrOutput)
}

type InventoryDeviceArrayOutput struct{ *pulumi.OutputState }

func (InventoryDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InventoryDevice)(nil)).Elem()
}

func (o InventoryDeviceArrayOutput) ToInventoryDeviceArrayOutput() InventoryDeviceArrayOutput {
	return o
}

func (o InventoryDeviceArrayOutput) ToInventoryDeviceArrayOutputWithContext(ctx context.Context) InventoryDeviceArrayOutput {
	return o
}

func (o InventoryDeviceArrayOutput) Index(i pulumi.IntInput) InventoryDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InventoryDevice {
		return vs[0].([]InventoryDevice)[vs[1].(int)]
	}).(InventoryDeviceOutput)
}

type NacruleMatching struct {
	// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
	AuthType  *string  `pulumi:"authType"`
	Nactags   []string `pulumi:"nactags"`
	PortTypes []string `pulumi:"portTypes"`
	// list of site ids to match
	SiteIds []string `pulumi:"siteIds"`
	// list of sitegroup ids to match
	SitegroupIds []string `pulumi:"sitegroupIds"`
	// list of vendors to match
	Vendors []string `pulumi:"vendors"`
}

// NacruleMatchingInput is an input type that accepts NacruleMatchingArgs and NacruleMatchingOutput values.
// You can construct a concrete instance of `NacruleMatchingInput` via:
//
//	NacruleMatchingArgs{...}
type NacruleMatchingInput interface {
	pulumi.Input

	ToNacruleMatchingOutput() NacruleMatchingOutput
	ToNacruleMatchingOutputWithContext(context.Context) NacruleMatchingOutput
}

type NacruleMatchingArgs struct {
	// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
	AuthType  pulumi.StringPtrInput   `pulumi:"authType"`
	Nactags   pulumi.StringArrayInput `pulumi:"nactags"`
	PortTypes pulumi.StringArrayInput `pulumi:"portTypes"`
	// list of site ids to match
	SiteIds pulumi.StringArrayInput `pulumi:"siteIds"`
	// list of sitegroup ids to match
	SitegroupIds pulumi.StringArrayInput `pulumi:"sitegroupIds"`
	// list of vendors to match
	Vendors pulumi.StringArrayInput `pulumi:"vendors"`
}

func (NacruleMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NacruleMatching)(nil)).Elem()
}

func (i NacruleMatchingArgs) ToNacruleMatchingOutput() NacruleMatchingOutput {
	return i.ToNacruleMatchingOutputWithContext(context.Background())
}

func (i NacruleMatchingArgs) ToNacruleMatchingOutputWithContext(ctx context.Context) NacruleMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacruleMatchingOutput)
}

func (i NacruleMatchingArgs) ToNacruleMatchingPtrOutput() NacruleMatchingPtrOutput {
	return i.ToNacruleMatchingPtrOutputWithContext(context.Background())
}

func (i NacruleMatchingArgs) ToNacruleMatchingPtrOutputWithContext(ctx context.Context) NacruleMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacruleMatchingOutput).ToNacruleMatchingPtrOutputWithContext(ctx)
}

// NacruleMatchingPtrInput is an input type that accepts NacruleMatchingArgs, NacruleMatchingPtr and NacruleMatchingPtrOutput values.
// You can construct a concrete instance of `NacruleMatchingPtrInput` via:
//
//	        NacruleMatchingArgs{...}
//
//	or:
//
//	        nil
type NacruleMatchingPtrInput interface {
	pulumi.Input

	ToNacruleMatchingPtrOutput() NacruleMatchingPtrOutput
	ToNacruleMatchingPtrOutputWithContext(context.Context) NacruleMatchingPtrOutput
}

type nacruleMatchingPtrType NacruleMatchingArgs

func NacruleMatchingPtr(v *NacruleMatchingArgs) NacruleMatchingPtrInput {
	return (*nacruleMatchingPtrType)(v)
}

func (*nacruleMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NacruleMatching)(nil)).Elem()
}

func (i *nacruleMatchingPtrType) ToNacruleMatchingPtrOutput() NacruleMatchingPtrOutput {
	return i.ToNacruleMatchingPtrOutputWithContext(context.Background())
}

func (i *nacruleMatchingPtrType) ToNacruleMatchingPtrOutputWithContext(ctx context.Context) NacruleMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacruleMatchingPtrOutput)
}

type NacruleMatchingOutput struct{ *pulumi.OutputState }

func (NacruleMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NacruleMatching)(nil)).Elem()
}

func (o NacruleMatchingOutput) ToNacruleMatchingOutput() NacruleMatchingOutput {
	return o
}

func (o NacruleMatchingOutput) ToNacruleMatchingOutputWithContext(ctx context.Context) NacruleMatchingOutput {
	return o
}

func (o NacruleMatchingOutput) ToNacruleMatchingPtrOutput() NacruleMatchingPtrOutput {
	return o.ToNacruleMatchingPtrOutputWithContext(context.Background())
}

func (o NacruleMatchingOutput) ToNacruleMatchingPtrOutputWithContext(ctx context.Context) NacruleMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NacruleMatching) *NacruleMatching {
		return &v
	}).(NacruleMatchingPtrOutput)
}

// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
func (o NacruleMatchingOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NacruleMatching) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

func (o NacruleMatchingOutput) Nactags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleMatching) []string { return v.Nactags }).(pulumi.StringArrayOutput)
}

func (o NacruleMatchingOutput) PortTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleMatching) []string { return v.PortTypes }).(pulumi.StringArrayOutput)
}

// list of site ids to match
func (o NacruleMatchingOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleMatching) []string { return v.SiteIds }).(pulumi.StringArrayOutput)
}

// list of sitegroup ids to match
func (o NacruleMatchingOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleMatching) []string { return v.SitegroupIds }).(pulumi.StringArrayOutput)
}

// list of vendors to match
func (o NacruleMatchingOutput) Vendors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleMatching) []string { return v.Vendors }).(pulumi.StringArrayOutput)
}

type NacruleMatchingPtrOutput struct{ *pulumi.OutputState }

func (NacruleMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NacruleMatching)(nil)).Elem()
}

func (o NacruleMatchingPtrOutput) ToNacruleMatchingPtrOutput() NacruleMatchingPtrOutput {
	return o
}

func (o NacruleMatchingPtrOutput) ToNacruleMatchingPtrOutputWithContext(ctx context.Context) NacruleMatchingPtrOutput {
	return o
}

func (o NacruleMatchingPtrOutput) Elem() NacruleMatchingOutput {
	return o.ApplyT(func(v *NacruleMatching) NacruleMatching {
		if v != nil {
			return *v
		}
		var ret NacruleMatching
		return ret
	}).(NacruleMatchingOutput)
}

// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
func (o NacruleMatchingPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NacruleMatching) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

func (o NacruleMatchingPtrOutput) Nactags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleMatching) []string {
		if v == nil {
			return nil
		}
		return v.Nactags
	}).(pulumi.StringArrayOutput)
}

func (o NacruleMatchingPtrOutput) PortTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleMatching) []string {
		if v == nil {
			return nil
		}
		return v.PortTypes
	}).(pulumi.StringArrayOutput)
}

// list of site ids to match
func (o NacruleMatchingPtrOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleMatching) []string {
		if v == nil {
			return nil
		}
		return v.SiteIds
	}).(pulumi.StringArrayOutput)
}

// list of sitegroup ids to match
func (o NacruleMatchingPtrOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleMatching) []string {
		if v == nil {
			return nil
		}
		return v.SitegroupIds
	}).(pulumi.StringArrayOutput)
}

// list of vendors to match
func (o NacruleMatchingPtrOutput) Vendors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleMatching) []string {
		if v == nil {
			return nil
		}
		return v.Vendors
	}).(pulumi.StringArrayOutput)
}

type NacruleNotMatching struct {
	// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
	AuthType  *string  `pulumi:"authType"`
	Nactags   []string `pulumi:"nactags"`
	PortTypes []string `pulumi:"portTypes"`
	// list of site ids to match
	SiteIds []string `pulumi:"siteIds"`
	// list of sitegroup ids to match
	SitegroupIds []string `pulumi:"sitegroupIds"`
	// list of vendors to match
	Vendors []string `pulumi:"vendors"`
}

// NacruleNotMatchingInput is an input type that accepts NacruleNotMatchingArgs and NacruleNotMatchingOutput values.
// You can construct a concrete instance of `NacruleNotMatchingInput` via:
//
//	NacruleNotMatchingArgs{...}
type NacruleNotMatchingInput interface {
	pulumi.Input

	ToNacruleNotMatchingOutput() NacruleNotMatchingOutput
	ToNacruleNotMatchingOutputWithContext(context.Context) NacruleNotMatchingOutput
}

type NacruleNotMatchingArgs struct {
	// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
	AuthType  pulumi.StringPtrInput   `pulumi:"authType"`
	Nactags   pulumi.StringArrayInput `pulumi:"nactags"`
	PortTypes pulumi.StringArrayInput `pulumi:"portTypes"`
	// list of site ids to match
	SiteIds pulumi.StringArrayInput `pulumi:"siteIds"`
	// list of sitegroup ids to match
	SitegroupIds pulumi.StringArrayInput `pulumi:"sitegroupIds"`
	// list of vendors to match
	Vendors pulumi.StringArrayInput `pulumi:"vendors"`
}

func (NacruleNotMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NacruleNotMatching)(nil)).Elem()
}

func (i NacruleNotMatchingArgs) ToNacruleNotMatchingOutput() NacruleNotMatchingOutput {
	return i.ToNacruleNotMatchingOutputWithContext(context.Background())
}

func (i NacruleNotMatchingArgs) ToNacruleNotMatchingOutputWithContext(ctx context.Context) NacruleNotMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacruleNotMatchingOutput)
}

func (i NacruleNotMatchingArgs) ToNacruleNotMatchingPtrOutput() NacruleNotMatchingPtrOutput {
	return i.ToNacruleNotMatchingPtrOutputWithContext(context.Background())
}

func (i NacruleNotMatchingArgs) ToNacruleNotMatchingPtrOutputWithContext(ctx context.Context) NacruleNotMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacruleNotMatchingOutput).ToNacruleNotMatchingPtrOutputWithContext(ctx)
}

// NacruleNotMatchingPtrInput is an input type that accepts NacruleNotMatchingArgs, NacruleNotMatchingPtr and NacruleNotMatchingPtrOutput values.
// You can construct a concrete instance of `NacruleNotMatchingPtrInput` via:
//
//	        NacruleNotMatchingArgs{...}
//
//	or:
//
//	        nil
type NacruleNotMatchingPtrInput interface {
	pulumi.Input

	ToNacruleNotMatchingPtrOutput() NacruleNotMatchingPtrOutput
	ToNacruleNotMatchingPtrOutputWithContext(context.Context) NacruleNotMatchingPtrOutput
}

type nacruleNotMatchingPtrType NacruleNotMatchingArgs

func NacruleNotMatchingPtr(v *NacruleNotMatchingArgs) NacruleNotMatchingPtrInput {
	return (*nacruleNotMatchingPtrType)(v)
}

func (*nacruleNotMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NacruleNotMatching)(nil)).Elem()
}

func (i *nacruleNotMatchingPtrType) ToNacruleNotMatchingPtrOutput() NacruleNotMatchingPtrOutput {
	return i.ToNacruleNotMatchingPtrOutputWithContext(context.Background())
}

func (i *nacruleNotMatchingPtrType) ToNacruleNotMatchingPtrOutputWithContext(ctx context.Context) NacruleNotMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacruleNotMatchingPtrOutput)
}

type NacruleNotMatchingOutput struct{ *pulumi.OutputState }

func (NacruleNotMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NacruleNotMatching)(nil)).Elem()
}

func (o NacruleNotMatchingOutput) ToNacruleNotMatchingOutput() NacruleNotMatchingOutput {
	return o
}

func (o NacruleNotMatchingOutput) ToNacruleNotMatchingOutputWithContext(ctx context.Context) NacruleNotMatchingOutput {
	return o
}

func (o NacruleNotMatchingOutput) ToNacruleNotMatchingPtrOutput() NacruleNotMatchingPtrOutput {
	return o.ToNacruleNotMatchingPtrOutputWithContext(context.Background())
}

func (o NacruleNotMatchingOutput) ToNacruleNotMatchingPtrOutputWithContext(ctx context.Context) NacruleNotMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NacruleNotMatching) *NacruleNotMatching {
		return &v
	}).(NacruleNotMatchingPtrOutput)
}

// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
func (o NacruleNotMatchingOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NacruleNotMatching) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

func (o NacruleNotMatchingOutput) Nactags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleNotMatching) []string { return v.Nactags }).(pulumi.StringArrayOutput)
}

func (o NacruleNotMatchingOutput) PortTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleNotMatching) []string { return v.PortTypes }).(pulumi.StringArrayOutput)
}

// list of site ids to match
func (o NacruleNotMatchingOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleNotMatching) []string { return v.SiteIds }).(pulumi.StringArrayOutput)
}

// list of sitegroup ids to match
func (o NacruleNotMatchingOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleNotMatching) []string { return v.SitegroupIds }).(pulumi.StringArrayOutput)
}

// list of vendors to match
func (o NacruleNotMatchingOutput) Vendors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NacruleNotMatching) []string { return v.Vendors }).(pulumi.StringArrayOutput)
}

type NacruleNotMatchingPtrOutput struct{ *pulumi.OutputState }

func (NacruleNotMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NacruleNotMatching)(nil)).Elem()
}

func (o NacruleNotMatchingPtrOutput) ToNacruleNotMatchingPtrOutput() NacruleNotMatchingPtrOutput {
	return o
}

func (o NacruleNotMatchingPtrOutput) ToNacruleNotMatchingPtrOutputWithContext(ctx context.Context) NacruleNotMatchingPtrOutput {
	return o
}

func (o NacruleNotMatchingPtrOutput) Elem() NacruleNotMatchingOutput {
	return o.ApplyT(func(v *NacruleNotMatching) NacruleNotMatching {
		if v != nil {
			return *v
		}
		var ret NacruleNotMatching
		return ret
	}).(NacruleNotMatchingOutput)
}

// enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
func (o NacruleNotMatchingPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NacruleNotMatching) *string {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(pulumi.StringPtrOutput)
}

func (o NacruleNotMatchingPtrOutput) Nactags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleNotMatching) []string {
		if v == nil {
			return nil
		}
		return v.Nactags
	}).(pulumi.StringArrayOutput)
}

func (o NacruleNotMatchingPtrOutput) PortTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleNotMatching) []string {
		if v == nil {
			return nil
		}
		return v.PortTypes
	}).(pulumi.StringArrayOutput)
}

// list of site ids to match
func (o NacruleNotMatchingPtrOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleNotMatching) []string {
		if v == nil {
			return nil
		}
		return v.SiteIds
	}).(pulumi.StringArrayOutput)
}

// list of sitegroup ids to match
func (o NacruleNotMatchingPtrOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleNotMatching) []string {
		if v == nil {
			return nil
		}
		return v.SitegroupIds
	}).(pulumi.StringArrayOutput)
}

// list of vendors to match
func (o NacruleNotMatchingPtrOutput) Vendors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacruleNotMatching) []string {
		if v == nil {
			return nil
		}
		return v.Vendors
	}).(pulumi.StringArrayOutput)
}

type NetworkInternalAccess struct {
	Enabled *bool `pulumi:"enabled"`
}

// NetworkInternalAccessInput is an input type that accepts NetworkInternalAccessArgs and NetworkInternalAccessOutput values.
// You can construct a concrete instance of `NetworkInternalAccessInput` via:
//
//	NetworkInternalAccessArgs{...}
type NetworkInternalAccessInput interface {
	pulumi.Input

	ToNetworkInternalAccessOutput() NetworkInternalAccessOutput
	ToNetworkInternalAccessOutputWithContext(context.Context) NetworkInternalAccessOutput
}

type NetworkInternalAccessArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (NetworkInternalAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternalAccess)(nil)).Elem()
}

func (i NetworkInternalAccessArgs) ToNetworkInternalAccessOutput() NetworkInternalAccessOutput {
	return i.ToNetworkInternalAccessOutputWithContext(context.Background())
}

func (i NetworkInternalAccessArgs) ToNetworkInternalAccessOutputWithContext(ctx context.Context) NetworkInternalAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternalAccessOutput)
}

func (i NetworkInternalAccessArgs) ToNetworkInternalAccessPtrOutput() NetworkInternalAccessPtrOutput {
	return i.ToNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (i NetworkInternalAccessArgs) ToNetworkInternalAccessPtrOutputWithContext(ctx context.Context) NetworkInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternalAccessOutput).ToNetworkInternalAccessPtrOutputWithContext(ctx)
}

// NetworkInternalAccessPtrInput is an input type that accepts NetworkInternalAccessArgs, NetworkInternalAccessPtr and NetworkInternalAccessPtrOutput values.
// You can construct a concrete instance of `NetworkInternalAccessPtrInput` via:
//
//	        NetworkInternalAccessArgs{...}
//
//	or:
//
//	        nil
type NetworkInternalAccessPtrInput interface {
	pulumi.Input

	ToNetworkInternalAccessPtrOutput() NetworkInternalAccessPtrOutput
	ToNetworkInternalAccessPtrOutputWithContext(context.Context) NetworkInternalAccessPtrOutput
}

type networkInternalAccessPtrType NetworkInternalAccessArgs

func NetworkInternalAccessPtr(v *NetworkInternalAccessArgs) NetworkInternalAccessPtrInput {
	return (*networkInternalAccessPtrType)(v)
}

func (*networkInternalAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInternalAccess)(nil)).Elem()
}

func (i *networkInternalAccessPtrType) ToNetworkInternalAccessPtrOutput() NetworkInternalAccessPtrOutput {
	return i.ToNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (i *networkInternalAccessPtrType) ToNetworkInternalAccessPtrOutputWithContext(ctx context.Context) NetworkInternalAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternalAccessPtrOutput)
}

type NetworkInternalAccessOutput struct{ *pulumi.OutputState }

func (NetworkInternalAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternalAccess)(nil)).Elem()
}

func (o NetworkInternalAccessOutput) ToNetworkInternalAccessOutput() NetworkInternalAccessOutput {
	return o
}

func (o NetworkInternalAccessOutput) ToNetworkInternalAccessOutputWithContext(ctx context.Context) NetworkInternalAccessOutput {
	return o
}

func (o NetworkInternalAccessOutput) ToNetworkInternalAccessPtrOutput() NetworkInternalAccessPtrOutput {
	return o.ToNetworkInternalAccessPtrOutputWithContext(context.Background())
}

func (o NetworkInternalAccessOutput) ToNetworkInternalAccessPtrOutputWithContext(ctx context.Context) NetworkInternalAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkInternalAccess) *NetworkInternalAccess {
		return &v
	}).(NetworkInternalAccessPtrOutput)
}

func (o NetworkInternalAccessOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkInternalAccess) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type NetworkInternalAccessPtrOutput struct{ *pulumi.OutputState }

func (NetworkInternalAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInternalAccess)(nil)).Elem()
}

func (o NetworkInternalAccessPtrOutput) ToNetworkInternalAccessPtrOutput() NetworkInternalAccessPtrOutput {
	return o
}

func (o NetworkInternalAccessPtrOutput) ToNetworkInternalAccessPtrOutputWithContext(ctx context.Context) NetworkInternalAccessPtrOutput {
	return o
}

func (o NetworkInternalAccessPtrOutput) Elem() NetworkInternalAccessOutput {
	return o.ApplyT(func(v *NetworkInternalAccess) NetworkInternalAccess {
		if v != nil {
			return *v
		}
		var ret NetworkInternalAccess
		return ret
	}).(NetworkInternalAccessOutput)
}

func (o NetworkInternalAccessPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkInternalAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type NetworkInternetAccess struct {
	CreateSimpleServicePolicy *bool `pulumi:"createSimpleServicePolicy"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat map[string]NetworkInternetAccessDestinationNat `pulumi:"destinationNat"`
	Enabled        *bool                                          `pulumi:"enabled"`
	// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
	Restricted *bool `pulumi:"restricted"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat map[string]NetworkInternetAccessStaticNat `pulumi:"staticNat"`
}

// NetworkInternetAccessInput is an input type that accepts NetworkInternetAccessArgs and NetworkInternetAccessOutput values.
// You can construct a concrete instance of `NetworkInternetAccessInput` via:
//
//	NetworkInternetAccessArgs{...}
type NetworkInternetAccessInput interface {
	pulumi.Input

	ToNetworkInternetAccessOutput() NetworkInternetAccessOutput
	ToNetworkInternetAccessOutputWithContext(context.Context) NetworkInternetAccessOutput
}

type NetworkInternetAccessArgs struct {
	CreateSimpleServicePolicy pulumi.BoolPtrInput `pulumi:"createSimpleServicePolicy"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat NetworkInternetAccessDestinationNatMapInput `pulumi:"destinationNat"`
	Enabled        pulumi.BoolPtrInput                         `pulumi:"enabled"`
	// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
	Restricted pulumi.BoolPtrInput `pulumi:"restricted"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat NetworkInternetAccessStaticNatMapInput `pulumi:"staticNat"`
}

func (NetworkInternetAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternetAccess)(nil)).Elem()
}

func (i NetworkInternetAccessArgs) ToNetworkInternetAccessOutput() NetworkInternetAccessOutput {
	return i.ToNetworkInternetAccessOutputWithContext(context.Background())
}

func (i NetworkInternetAccessArgs) ToNetworkInternetAccessOutputWithContext(ctx context.Context) NetworkInternetAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternetAccessOutput)
}

func (i NetworkInternetAccessArgs) ToNetworkInternetAccessPtrOutput() NetworkInternetAccessPtrOutput {
	return i.ToNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (i NetworkInternetAccessArgs) ToNetworkInternetAccessPtrOutputWithContext(ctx context.Context) NetworkInternetAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternetAccessOutput).ToNetworkInternetAccessPtrOutputWithContext(ctx)
}

// NetworkInternetAccessPtrInput is an input type that accepts NetworkInternetAccessArgs, NetworkInternetAccessPtr and NetworkInternetAccessPtrOutput values.
// You can construct a concrete instance of `NetworkInternetAccessPtrInput` via:
//
//	        NetworkInternetAccessArgs{...}
//
//	or:
//
//	        nil
type NetworkInternetAccessPtrInput interface {
	pulumi.Input

	ToNetworkInternetAccessPtrOutput() NetworkInternetAccessPtrOutput
	ToNetworkInternetAccessPtrOutputWithContext(context.Context) NetworkInternetAccessPtrOutput
}

type networkInternetAccessPtrType NetworkInternetAccessArgs

func NetworkInternetAccessPtr(v *NetworkInternetAccessArgs) NetworkInternetAccessPtrInput {
	return (*networkInternetAccessPtrType)(v)
}

func (*networkInternetAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInternetAccess)(nil)).Elem()
}

func (i *networkInternetAccessPtrType) ToNetworkInternetAccessPtrOutput() NetworkInternetAccessPtrOutput {
	return i.ToNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (i *networkInternetAccessPtrType) ToNetworkInternetAccessPtrOutputWithContext(ctx context.Context) NetworkInternetAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternetAccessPtrOutput)
}

type NetworkInternetAccessOutput struct{ *pulumi.OutputState }

func (NetworkInternetAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternetAccess)(nil)).Elem()
}

func (o NetworkInternetAccessOutput) ToNetworkInternetAccessOutput() NetworkInternetAccessOutput {
	return o
}

func (o NetworkInternetAccessOutput) ToNetworkInternetAccessOutputWithContext(ctx context.Context) NetworkInternetAccessOutput {
	return o
}

func (o NetworkInternetAccessOutput) ToNetworkInternetAccessPtrOutput() NetworkInternetAccessPtrOutput {
	return o.ToNetworkInternetAccessPtrOutputWithContext(context.Background())
}

func (o NetworkInternetAccessOutput) ToNetworkInternetAccessPtrOutputWithContext(ctx context.Context) NetworkInternetAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkInternetAccess) *NetworkInternetAccess {
		return &v
	}).(NetworkInternetAccessPtrOutput)
}

func (o NetworkInternetAccessOutput) CreateSimpleServicePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccess) *bool { return v.CreateSimpleServicePolicy }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o NetworkInternetAccessOutput) DestinationNat() NetworkInternetAccessDestinationNatMapOutput {
	return o.ApplyT(func(v NetworkInternetAccess) map[string]NetworkInternetAccessDestinationNat { return v.DestinationNat }).(NetworkInternetAccessDestinationNatMapOutput)
}

func (o NetworkInternetAccessOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccess) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
func (o NetworkInternetAccessOutput) Restricted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccess) *bool { return v.Restricted }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o NetworkInternetAccessOutput) StaticNat() NetworkInternetAccessStaticNatMapOutput {
	return o.ApplyT(func(v NetworkInternetAccess) map[string]NetworkInternetAccessStaticNat { return v.StaticNat }).(NetworkInternetAccessStaticNatMapOutput)
}

type NetworkInternetAccessPtrOutput struct{ *pulumi.OutputState }

func (NetworkInternetAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInternetAccess)(nil)).Elem()
}

func (o NetworkInternetAccessPtrOutput) ToNetworkInternetAccessPtrOutput() NetworkInternetAccessPtrOutput {
	return o
}

func (o NetworkInternetAccessPtrOutput) ToNetworkInternetAccessPtrOutputWithContext(ctx context.Context) NetworkInternetAccessPtrOutput {
	return o
}

func (o NetworkInternetAccessPtrOutput) Elem() NetworkInternetAccessOutput {
	return o.ApplyT(func(v *NetworkInternetAccess) NetworkInternetAccess {
		if v != nil {
			return *v
		}
		var ret NetworkInternetAccess
		return ret
	}).(NetworkInternetAccessOutput)
}

func (o NetworkInternetAccessPtrOutput) CreateSimpleServicePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSimpleServicePolicy
	}).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o NetworkInternetAccessPtrOutput) DestinationNat() NetworkInternetAccessDestinationNatMapOutput {
	return o.ApplyT(func(v *NetworkInternetAccess) map[string]NetworkInternetAccessDestinationNat {
		if v == nil {
			return nil
		}
		return v.DestinationNat
	}).(NetworkInternetAccessDestinationNatMapOutput)
}

func (o NetworkInternetAccessPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
func (o NetworkInternetAccessPtrOutput) Restricted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkInternetAccess) *bool {
		if v == nil {
			return nil
		}
		return v.Restricted
	}).(pulumi.BoolPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o NetworkInternetAccessPtrOutput) StaticNat() NetworkInternetAccessStaticNatMapOutput {
	return o.ApplyT(func(v *NetworkInternetAccess) map[string]NetworkInternetAccessStaticNat {
		if v == nil {
			return nil
		}
		return v.StaticNat
	}).(NetworkInternetAccessStaticNatMapOutput)
}

type NetworkInternetAccessDestinationNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	Port       *int    `pulumi:"port"`
}

// NetworkInternetAccessDestinationNatInput is an input type that accepts NetworkInternetAccessDestinationNatArgs and NetworkInternetAccessDestinationNatOutput values.
// You can construct a concrete instance of `NetworkInternetAccessDestinationNatInput` via:
//
//	NetworkInternetAccessDestinationNatArgs{...}
type NetworkInternetAccessDestinationNatInput interface {
	pulumi.Input

	ToNetworkInternetAccessDestinationNatOutput() NetworkInternetAccessDestinationNatOutput
	ToNetworkInternetAccessDestinationNatOutputWithContext(context.Context) NetworkInternetAccessDestinationNatOutput
}

type NetworkInternetAccessDestinationNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
}

func (NetworkInternetAccessDestinationNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (i NetworkInternetAccessDestinationNatArgs) ToNetworkInternetAccessDestinationNatOutput() NetworkInternetAccessDestinationNatOutput {
	return i.ToNetworkInternetAccessDestinationNatOutputWithContext(context.Background())
}

func (i NetworkInternetAccessDestinationNatArgs) ToNetworkInternetAccessDestinationNatOutputWithContext(ctx context.Context) NetworkInternetAccessDestinationNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternetAccessDestinationNatOutput)
}

// NetworkInternetAccessDestinationNatMapInput is an input type that accepts NetworkInternetAccessDestinationNatMap and NetworkInternetAccessDestinationNatMapOutput values.
// You can construct a concrete instance of `NetworkInternetAccessDestinationNatMapInput` via:
//
//	NetworkInternetAccessDestinationNatMap{ "key": NetworkInternetAccessDestinationNatArgs{...} }
type NetworkInternetAccessDestinationNatMapInput interface {
	pulumi.Input

	ToNetworkInternetAccessDestinationNatMapOutput() NetworkInternetAccessDestinationNatMapOutput
	ToNetworkInternetAccessDestinationNatMapOutputWithContext(context.Context) NetworkInternetAccessDestinationNatMapOutput
}

type NetworkInternetAccessDestinationNatMap map[string]NetworkInternetAccessDestinationNatInput

func (NetworkInternetAccessDestinationNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (i NetworkInternetAccessDestinationNatMap) ToNetworkInternetAccessDestinationNatMapOutput() NetworkInternetAccessDestinationNatMapOutput {
	return i.ToNetworkInternetAccessDestinationNatMapOutputWithContext(context.Background())
}

func (i NetworkInternetAccessDestinationNatMap) ToNetworkInternetAccessDestinationNatMapOutputWithContext(ctx context.Context) NetworkInternetAccessDestinationNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternetAccessDestinationNatMapOutput)
}

type NetworkInternetAccessDestinationNatOutput struct{ *pulumi.OutputState }

func (NetworkInternetAccessDestinationNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (o NetworkInternetAccessDestinationNatOutput) ToNetworkInternetAccessDestinationNatOutput() NetworkInternetAccessDestinationNatOutput {
	return o
}

func (o NetworkInternetAccessDestinationNatOutput) ToNetworkInternetAccessDestinationNatOutputWithContext(ctx context.Context) NetworkInternetAccessDestinationNatOutput {
	return o
}

func (o NetworkInternetAccessDestinationNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccessDestinationNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o NetworkInternetAccessDestinationNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccessDestinationNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o NetworkInternetAccessDestinationNatOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccessDestinationNat) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type NetworkInternetAccessDestinationNatMapOutput struct{ *pulumi.OutputState }

func (NetworkInternetAccessDestinationNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkInternetAccessDestinationNat)(nil)).Elem()
}

func (o NetworkInternetAccessDestinationNatMapOutput) ToNetworkInternetAccessDestinationNatMapOutput() NetworkInternetAccessDestinationNatMapOutput {
	return o
}

func (o NetworkInternetAccessDestinationNatMapOutput) ToNetworkInternetAccessDestinationNatMapOutputWithContext(ctx context.Context) NetworkInternetAccessDestinationNatMapOutput {
	return o
}

func (o NetworkInternetAccessDestinationNatMapOutput) MapIndex(k pulumi.StringInput) NetworkInternetAccessDestinationNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkInternetAccessDestinationNat {
		return vs[0].(map[string]NetworkInternetAccessDestinationNat)[vs[1].(string)]
	}).(NetworkInternetAccessDestinationNatOutput)
}

type NetworkInternetAccessStaticNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName *string `pulumi:"wanName"`
}

// NetworkInternetAccessStaticNatInput is an input type that accepts NetworkInternetAccessStaticNatArgs and NetworkInternetAccessStaticNatOutput values.
// You can construct a concrete instance of `NetworkInternetAccessStaticNatInput` via:
//
//	NetworkInternetAccessStaticNatArgs{...}
type NetworkInternetAccessStaticNatInput interface {
	pulumi.Input

	ToNetworkInternetAccessStaticNatOutput() NetworkInternetAccessStaticNatOutput
	ToNetworkInternetAccessStaticNatOutputWithContext(context.Context) NetworkInternetAccessStaticNatOutput
}

type NetworkInternetAccessStaticNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (NetworkInternetAccessStaticNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternetAccessStaticNat)(nil)).Elem()
}

func (i NetworkInternetAccessStaticNatArgs) ToNetworkInternetAccessStaticNatOutput() NetworkInternetAccessStaticNatOutput {
	return i.ToNetworkInternetAccessStaticNatOutputWithContext(context.Background())
}

func (i NetworkInternetAccessStaticNatArgs) ToNetworkInternetAccessStaticNatOutputWithContext(ctx context.Context) NetworkInternetAccessStaticNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternetAccessStaticNatOutput)
}

// NetworkInternetAccessStaticNatMapInput is an input type that accepts NetworkInternetAccessStaticNatMap and NetworkInternetAccessStaticNatMapOutput values.
// You can construct a concrete instance of `NetworkInternetAccessStaticNatMapInput` via:
//
//	NetworkInternetAccessStaticNatMap{ "key": NetworkInternetAccessStaticNatArgs{...} }
type NetworkInternetAccessStaticNatMapInput interface {
	pulumi.Input

	ToNetworkInternetAccessStaticNatMapOutput() NetworkInternetAccessStaticNatMapOutput
	ToNetworkInternetAccessStaticNatMapOutputWithContext(context.Context) NetworkInternetAccessStaticNatMapOutput
}

type NetworkInternetAccessStaticNatMap map[string]NetworkInternetAccessStaticNatInput

func (NetworkInternetAccessStaticNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkInternetAccessStaticNat)(nil)).Elem()
}

func (i NetworkInternetAccessStaticNatMap) ToNetworkInternetAccessStaticNatMapOutput() NetworkInternetAccessStaticNatMapOutput {
	return i.ToNetworkInternetAccessStaticNatMapOutputWithContext(context.Background())
}

func (i NetworkInternetAccessStaticNatMap) ToNetworkInternetAccessStaticNatMapOutputWithContext(ctx context.Context) NetworkInternetAccessStaticNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInternetAccessStaticNatMapOutput)
}

type NetworkInternetAccessStaticNatOutput struct{ *pulumi.OutputState }

func (NetworkInternetAccessStaticNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInternetAccessStaticNat)(nil)).Elem()
}

func (o NetworkInternetAccessStaticNatOutput) ToNetworkInternetAccessStaticNatOutput() NetworkInternetAccessStaticNatOutput {
	return o
}

func (o NetworkInternetAccessStaticNatOutput) ToNetworkInternetAccessStaticNatOutputWithContext(ctx context.Context) NetworkInternetAccessStaticNatOutput {
	return o
}

func (o NetworkInternetAccessStaticNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccessStaticNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o NetworkInternetAccessStaticNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccessStaticNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not set, we configure the nat policies against all WAN ports for simplicity
func (o NetworkInternetAccessStaticNatOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInternetAccessStaticNat) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type NetworkInternetAccessStaticNatMapOutput struct{ *pulumi.OutputState }

func (NetworkInternetAccessStaticNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkInternetAccessStaticNat)(nil)).Elem()
}

func (o NetworkInternetAccessStaticNatMapOutput) ToNetworkInternetAccessStaticNatMapOutput() NetworkInternetAccessStaticNatMapOutput {
	return o
}

func (o NetworkInternetAccessStaticNatMapOutput) ToNetworkInternetAccessStaticNatMapOutputWithContext(ctx context.Context) NetworkInternetAccessStaticNatMapOutput {
	return o
}

func (o NetworkInternetAccessStaticNatMapOutput) MapIndex(k pulumi.StringInput) NetworkInternetAccessStaticNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkInternetAccessStaticNat {
		return vs[0].(map[string]NetworkInternetAccessStaticNat)[vs[1].(string)]
	}).(NetworkInternetAccessStaticNatOutput)
}

type NetworkTenants struct {
	Addresses []string `pulumi:"addresses"`
}

// NetworkTenantsInput is an input type that accepts NetworkTenantsArgs and NetworkTenantsOutput values.
// You can construct a concrete instance of `NetworkTenantsInput` via:
//
//	NetworkTenantsArgs{...}
type NetworkTenantsInput interface {
	pulumi.Input

	ToNetworkTenantsOutput() NetworkTenantsOutput
	ToNetworkTenantsOutputWithContext(context.Context) NetworkTenantsOutput
}

type NetworkTenantsArgs struct {
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
}

func (NetworkTenantsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTenants)(nil)).Elem()
}

func (i NetworkTenantsArgs) ToNetworkTenantsOutput() NetworkTenantsOutput {
	return i.ToNetworkTenantsOutputWithContext(context.Background())
}

func (i NetworkTenantsArgs) ToNetworkTenantsOutputWithContext(ctx context.Context) NetworkTenantsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTenantsOutput)
}

// NetworkTenantsMapInput is an input type that accepts NetworkTenantsMap and NetworkTenantsMapOutput values.
// You can construct a concrete instance of `NetworkTenantsMapInput` via:
//
//	NetworkTenantsMap{ "key": NetworkTenantsArgs{...} }
type NetworkTenantsMapInput interface {
	pulumi.Input

	ToNetworkTenantsMapOutput() NetworkTenantsMapOutput
	ToNetworkTenantsMapOutputWithContext(context.Context) NetworkTenantsMapOutput
}

type NetworkTenantsMap map[string]NetworkTenantsInput

func (NetworkTenantsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkTenants)(nil)).Elem()
}

func (i NetworkTenantsMap) ToNetworkTenantsMapOutput() NetworkTenantsMapOutput {
	return i.ToNetworkTenantsMapOutputWithContext(context.Background())
}

func (i NetworkTenantsMap) ToNetworkTenantsMapOutputWithContext(ctx context.Context) NetworkTenantsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTenantsMapOutput)
}

type NetworkTenantsOutput struct{ *pulumi.OutputState }

func (NetworkTenantsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTenants)(nil)).Elem()
}

func (o NetworkTenantsOutput) ToNetworkTenantsOutput() NetworkTenantsOutput {
	return o
}

func (o NetworkTenantsOutput) ToNetworkTenantsOutputWithContext(ctx context.Context) NetworkTenantsOutput {
	return o
}

func (o NetworkTenantsOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkTenants) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

type NetworkTenantsMapOutput struct{ *pulumi.OutputState }

func (NetworkTenantsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkTenants)(nil)).Elem()
}

func (o NetworkTenantsMapOutput) ToNetworkTenantsMapOutput() NetworkTenantsMapOutput {
	return o
}

func (o NetworkTenantsMapOutput) ToNetworkTenantsMapOutputWithContext(ctx context.Context) NetworkTenantsMapOutput {
	return o
}

func (o NetworkTenantsMapOutput) MapIndex(k pulumi.StringInput) NetworkTenantsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkTenants {
		return vs[0].(map[string]NetworkTenants)[vs[1].(string)]
	}).(NetworkTenantsOutput)
}

type NetworkVpnAccess struct {
	// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
	AdvertisedSubnet *string `pulumi:"advertisedSubnet"`
	// whether to allow ping from vpn into this routed network
	AllowPing *bool `pulumi:"allowPing"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat map[string]NetworkVpnAccessDestinationNat `pulumi:"destinationNat"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
	NatPool *string `pulumi:"natPool"`
	// toward LAN-side BGP peers
	NoReadvertiseToLanBgp *bool `pulumi:"noReadvertiseToLanBgp"`
	// toward LAN-side OSPF peers
	NoReadvertiseToLanOspf *bool `pulumi:"noReadvertiseToLanOspf"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	NoReadvertiseToOverlay *bool `pulumi:"noReadvertiseToOverlay"`
	// by default, the routes are only readvertised toward the same vrf on spoke
	// to allow it to be leaked to other vrfs
	OtherVrfs []string `pulumi:"otherVrfs"`
	// whether this network is routable
	Routed *bool `pulumi:"routed"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
	SourceNat *NetworkVpnAccessSourceNat `pulumi:"sourceNat"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat map[string]NetworkVpnAccessStaticNat `pulumi:"staticNat"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	SummarizedSubnet *string `pulumi:"summarizedSubnet"`
	// toward LAN-side BGP peers
	SummarizedSubnetToLanBgp *string `pulumi:"summarizedSubnetToLanBgp"`
	// toward LAN-side OSPF peers
	SummarizedSubnetToLanOspf *string `pulumi:"summarizedSubnetToLanOspf"`
}

// NetworkVpnAccessInput is an input type that accepts NetworkVpnAccessArgs and NetworkVpnAccessOutput values.
// You can construct a concrete instance of `NetworkVpnAccessInput` via:
//
//	NetworkVpnAccessArgs{...}
type NetworkVpnAccessInput interface {
	pulumi.Input

	ToNetworkVpnAccessOutput() NetworkVpnAccessOutput
	ToNetworkVpnAccessOutputWithContext(context.Context) NetworkVpnAccessOutput
}

type NetworkVpnAccessArgs struct {
	// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
	AdvertisedSubnet pulumi.StringPtrInput `pulumi:"advertisedSubnet"`
	// whether to allow ping from vpn into this routed network
	AllowPing pulumi.BoolPtrInput `pulumi:"allowPing"`
	// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
	DestinationNat NetworkVpnAccessDestinationNatMapInput `pulumi:"destinationNat"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
	NatPool pulumi.StringPtrInput `pulumi:"natPool"`
	// toward LAN-side BGP peers
	NoReadvertiseToLanBgp pulumi.BoolPtrInput `pulumi:"noReadvertiseToLanBgp"`
	// toward LAN-side OSPF peers
	NoReadvertiseToLanOspf pulumi.BoolPtrInput `pulumi:"noReadvertiseToLanOspf"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	NoReadvertiseToOverlay pulumi.BoolPtrInput `pulumi:"noReadvertiseToOverlay"`
	// by default, the routes are only readvertised toward the same vrf on spoke
	// to allow it to be leaked to other vrfs
	OtherVrfs pulumi.StringArrayInput `pulumi:"otherVrfs"`
	// whether this network is routable
	Routed pulumi.BoolPtrInput `pulumi:"routed"`
	// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
	SourceNat NetworkVpnAccessSourceNatPtrInput `pulumi:"sourceNat"`
	// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
	StaticNat NetworkVpnAccessStaticNatMapInput `pulumi:"staticNat"`
	// toward overlay
	// how HUB should deal with routes it received from Spokes
	SummarizedSubnet pulumi.StringPtrInput `pulumi:"summarizedSubnet"`
	// toward LAN-side BGP peers
	SummarizedSubnetToLanBgp pulumi.StringPtrInput `pulumi:"summarizedSubnetToLanBgp"`
	// toward LAN-side OSPF peers
	SummarizedSubnetToLanOspf pulumi.StringPtrInput `pulumi:"summarizedSubnetToLanOspf"`
}

func (NetworkVpnAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccess)(nil)).Elem()
}

func (i NetworkVpnAccessArgs) ToNetworkVpnAccessOutput() NetworkVpnAccessOutput {
	return i.ToNetworkVpnAccessOutputWithContext(context.Background())
}

func (i NetworkVpnAccessArgs) ToNetworkVpnAccessOutputWithContext(ctx context.Context) NetworkVpnAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessOutput)
}

// NetworkVpnAccessMapInput is an input type that accepts NetworkVpnAccessMap and NetworkVpnAccessMapOutput values.
// You can construct a concrete instance of `NetworkVpnAccessMapInput` via:
//
//	NetworkVpnAccessMap{ "key": NetworkVpnAccessArgs{...} }
type NetworkVpnAccessMapInput interface {
	pulumi.Input

	ToNetworkVpnAccessMapOutput() NetworkVpnAccessMapOutput
	ToNetworkVpnAccessMapOutputWithContext(context.Context) NetworkVpnAccessMapOutput
}

type NetworkVpnAccessMap map[string]NetworkVpnAccessInput

func (NetworkVpnAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkVpnAccess)(nil)).Elem()
}

func (i NetworkVpnAccessMap) ToNetworkVpnAccessMapOutput() NetworkVpnAccessMapOutput {
	return i.ToNetworkVpnAccessMapOutputWithContext(context.Background())
}

func (i NetworkVpnAccessMap) ToNetworkVpnAccessMapOutputWithContext(ctx context.Context) NetworkVpnAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessMapOutput)
}

type NetworkVpnAccessOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccess)(nil)).Elem()
}

func (o NetworkVpnAccessOutput) ToNetworkVpnAccessOutput() NetworkVpnAccessOutput {
	return o
}

func (o NetworkVpnAccessOutput) ToNetworkVpnAccessOutputWithContext(ctx context.Context) NetworkVpnAccessOutput {
	return o
}

// if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
func (o NetworkVpnAccessOutput) AdvertisedSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *string { return v.AdvertisedSubnet }).(pulumi.StringPtrOutput)
}

// whether to allow ping from vpn into this routed network
func (o NetworkVpnAccessOutput) AllowPing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *bool { return v.AllowPing }).(pulumi.BoolPtrOutput)
}

// Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
func (o NetworkVpnAccessOutput) DestinationNat() NetworkVpnAccessDestinationNatMapOutput {
	return o.ApplyT(func(v NetworkVpnAccess) map[string]NetworkVpnAccessDestinationNat { return v.DestinationNat }).(NetworkVpnAccessDestinationNatMapOutput)
}

// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
func (o NetworkVpnAccessOutput) NatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *string { return v.NatPool }).(pulumi.StringPtrOutput)
}

// toward LAN-side BGP peers
func (o NetworkVpnAccessOutput) NoReadvertiseToLanBgp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *bool { return v.NoReadvertiseToLanBgp }).(pulumi.BoolPtrOutput)
}

// toward LAN-side OSPF peers
func (o NetworkVpnAccessOutput) NoReadvertiseToLanOspf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *bool { return v.NoReadvertiseToLanOspf }).(pulumi.BoolPtrOutput)
}

// toward overlay
// how HUB should deal with routes it received from Spokes
func (o NetworkVpnAccessOutput) NoReadvertiseToOverlay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *bool { return v.NoReadvertiseToOverlay }).(pulumi.BoolPtrOutput)
}

// by default, the routes are only readvertised toward the same vrf on spoke
// to allow it to be leaked to other vrfs
func (o NetworkVpnAccessOutput) OtherVrfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkVpnAccess) []string { return v.OtherVrfs }).(pulumi.StringArrayOutput)
}

// whether this network is routable
func (o NetworkVpnAccessOutput) Routed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *bool { return v.Routed }).(pulumi.BoolPtrOutput)
}

// if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
func (o NetworkVpnAccessOutput) SourceNat() NetworkVpnAccessSourceNatPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *NetworkVpnAccessSourceNat { return v.SourceNat }).(NetworkVpnAccessSourceNatPtrOutput)
}

// Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
func (o NetworkVpnAccessOutput) StaticNat() NetworkVpnAccessStaticNatMapOutput {
	return o.ApplyT(func(v NetworkVpnAccess) map[string]NetworkVpnAccessStaticNat { return v.StaticNat }).(NetworkVpnAccessStaticNatMapOutput)
}

// toward overlay
// how HUB should deal with routes it received from Spokes
func (o NetworkVpnAccessOutput) SummarizedSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *string { return v.SummarizedSubnet }).(pulumi.StringPtrOutput)
}

// toward LAN-side BGP peers
func (o NetworkVpnAccessOutput) SummarizedSubnetToLanBgp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *string { return v.SummarizedSubnetToLanBgp }).(pulumi.StringPtrOutput)
}

// toward LAN-side OSPF peers
func (o NetworkVpnAccessOutput) SummarizedSubnetToLanOspf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccess) *string { return v.SummarizedSubnetToLanOspf }).(pulumi.StringPtrOutput)
}

type NetworkVpnAccessMapOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkVpnAccess)(nil)).Elem()
}

func (o NetworkVpnAccessMapOutput) ToNetworkVpnAccessMapOutput() NetworkVpnAccessMapOutput {
	return o
}

func (o NetworkVpnAccessMapOutput) ToNetworkVpnAccessMapOutputWithContext(ctx context.Context) NetworkVpnAccessMapOutput {
	return o
}

func (o NetworkVpnAccessMapOutput) MapIndex(k pulumi.StringInput) NetworkVpnAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkVpnAccess {
		return vs[0].(map[string]NetworkVpnAccess)[vs[1].(string)]
	}).(NetworkVpnAccessOutput)
}

type NetworkVpnAccessDestinationNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	Port       *int    `pulumi:"port"`
}

// NetworkVpnAccessDestinationNatInput is an input type that accepts NetworkVpnAccessDestinationNatArgs and NetworkVpnAccessDestinationNatOutput values.
// You can construct a concrete instance of `NetworkVpnAccessDestinationNatInput` via:
//
//	NetworkVpnAccessDestinationNatArgs{...}
type NetworkVpnAccessDestinationNatInput interface {
	pulumi.Input

	ToNetworkVpnAccessDestinationNatOutput() NetworkVpnAccessDestinationNatOutput
	ToNetworkVpnAccessDestinationNatOutputWithContext(context.Context) NetworkVpnAccessDestinationNatOutput
}

type NetworkVpnAccessDestinationNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
}

func (NetworkVpnAccessDestinationNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (i NetworkVpnAccessDestinationNatArgs) ToNetworkVpnAccessDestinationNatOutput() NetworkVpnAccessDestinationNatOutput {
	return i.ToNetworkVpnAccessDestinationNatOutputWithContext(context.Background())
}

func (i NetworkVpnAccessDestinationNatArgs) ToNetworkVpnAccessDestinationNatOutputWithContext(ctx context.Context) NetworkVpnAccessDestinationNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessDestinationNatOutput)
}

// NetworkVpnAccessDestinationNatMapInput is an input type that accepts NetworkVpnAccessDestinationNatMap and NetworkVpnAccessDestinationNatMapOutput values.
// You can construct a concrete instance of `NetworkVpnAccessDestinationNatMapInput` via:
//
//	NetworkVpnAccessDestinationNatMap{ "key": NetworkVpnAccessDestinationNatArgs{...} }
type NetworkVpnAccessDestinationNatMapInput interface {
	pulumi.Input

	ToNetworkVpnAccessDestinationNatMapOutput() NetworkVpnAccessDestinationNatMapOutput
	ToNetworkVpnAccessDestinationNatMapOutputWithContext(context.Context) NetworkVpnAccessDestinationNatMapOutput
}

type NetworkVpnAccessDestinationNatMap map[string]NetworkVpnAccessDestinationNatInput

func (NetworkVpnAccessDestinationNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (i NetworkVpnAccessDestinationNatMap) ToNetworkVpnAccessDestinationNatMapOutput() NetworkVpnAccessDestinationNatMapOutput {
	return i.ToNetworkVpnAccessDestinationNatMapOutputWithContext(context.Background())
}

func (i NetworkVpnAccessDestinationNatMap) ToNetworkVpnAccessDestinationNatMapOutputWithContext(ctx context.Context) NetworkVpnAccessDestinationNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessDestinationNatMapOutput)
}

type NetworkVpnAccessDestinationNatOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessDestinationNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (o NetworkVpnAccessDestinationNatOutput) ToNetworkVpnAccessDestinationNatOutput() NetworkVpnAccessDestinationNatOutput {
	return o
}

func (o NetworkVpnAccessDestinationNatOutput) ToNetworkVpnAccessDestinationNatOutputWithContext(ctx context.Context) NetworkVpnAccessDestinationNatOutput {
	return o
}

func (o NetworkVpnAccessDestinationNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccessDestinationNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o NetworkVpnAccessDestinationNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccessDestinationNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o NetworkVpnAccessDestinationNatOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccessDestinationNat) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type NetworkVpnAccessDestinationNatMapOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessDestinationNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkVpnAccessDestinationNat)(nil)).Elem()
}

func (o NetworkVpnAccessDestinationNatMapOutput) ToNetworkVpnAccessDestinationNatMapOutput() NetworkVpnAccessDestinationNatMapOutput {
	return o
}

func (o NetworkVpnAccessDestinationNatMapOutput) ToNetworkVpnAccessDestinationNatMapOutputWithContext(ctx context.Context) NetworkVpnAccessDestinationNatMapOutput {
	return o
}

func (o NetworkVpnAccessDestinationNatMapOutput) MapIndex(k pulumi.StringInput) NetworkVpnAccessDestinationNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkVpnAccessDestinationNat {
		return vs[0].(map[string]NetworkVpnAccessDestinationNat)[vs[1].(string)]
	}).(NetworkVpnAccessDestinationNatOutput)
}

type NetworkVpnAccessSourceNat struct {
	ExternalIp *string `pulumi:"externalIp"`
}

// NetworkVpnAccessSourceNatInput is an input type that accepts NetworkVpnAccessSourceNatArgs and NetworkVpnAccessSourceNatOutput values.
// You can construct a concrete instance of `NetworkVpnAccessSourceNatInput` via:
//
//	NetworkVpnAccessSourceNatArgs{...}
type NetworkVpnAccessSourceNatInput interface {
	pulumi.Input

	ToNetworkVpnAccessSourceNatOutput() NetworkVpnAccessSourceNatOutput
	ToNetworkVpnAccessSourceNatOutputWithContext(context.Context) NetworkVpnAccessSourceNatOutput
}

type NetworkVpnAccessSourceNatArgs struct {
	ExternalIp pulumi.StringPtrInput `pulumi:"externalIp"`
}

func (NetworkVpnAccessSourceNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccessSourceNat)(nil)).Elem()
}

func (i NetworkVpnAccessSourceNatArgs) ToNetworkVpnAccessSourceNatOutput() NetworkVpnAccessSourceNatOutput {
	return i.ToNetworkVpnAccessSourceNatOutputWithContext(context.Background())
}

func (i NetworkVpnAccessSourceNatArgs) ToNetworkVpnAccessSourceNatOutputWithContext(ctx context.Context) NetworkVpnAccessSourceNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessSourceNatOutput)
}

func (i NetworkVpnAccessSourceNatArgs) ToNetworkVpnAccessSourceNatPtrOutput() NetworkVpnAccessSourceNatPtrOutput {
	return i.ToNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (i NetworkVpnAccessSourceNatArgs) ToNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) NetworkVpnAccessSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessSourceNatOutput).ToNetworkVpnAccessSourceNatPtrOutputWithContext(ctx)
}

// NetworkVpnAccessSourceNatPtrInput is an input type that accepts NetworkVpnAccessSourceNatArgs, NetworkVpnAccessSourceNatPtr and NetworkVpnAccessSourceNatPtrOutput values.
// You can construct a concrete instance of `NetworkVpnAccessSourceNatPtrInput` via:
//
//	        NetworkVpnAccessSourceNatArgs{...}
//
//	or:
//
//	        nil
type NetworkVpnAccessSourceNatPtrInput interface {
	pulumi.Input

	ToNetworkVpnAccessSourceNatPtrOutput() NetworkVpnAccessSourceNatPtrOutput
	ToNetworkVpnAccessSourceNatPtrOutputWithContext(context.Context) NetworkVpnAccessSourceNatPtrOutput
}

type networkVpnAccessSourceNatPtrType NetworkVpnAccessSourceNatArgs

func NetworkVpnAccessSourceNatPtr(v *NetworkVpnAccessSourceNatArgs) NetworkVpnAccessSourceNatPtrInput {
	return (*networkVpnAccessSourceNatPtrType)(v)
}

func (*networkVpnAccessSourceNatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkVpnAccessSourceNat)(nil)).Elem()
}

func (i *networkVpnAccessSourceNatPtrType) ToNetworkVpnAccessSourceNatPtrOutput() NetworkVpnAccessSourceNatPtrOutput {
	return i.ToNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (i *networkVpnAccessSourceNatPtrType) ToNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) NetworkVpnAccessSourceNatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessSourceNatPtrOutput)
}

type NetworkVpnAccessSourceNatOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessSourceNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccessSourceNat)(nil)).Elem()
}

func (o NetworkVpnAccessSourceNatOutput) ToNetworkVpnAccessSourceNatOutput() NetworkVpnAccessSourceNatOutput {
	return o
}

func (o NetworkVpnAccessSourceNatOutput) ToNetworkVpnAccessSourceNatOutputWithContext(ctx context.Context) NetworkVpnAccessSourceNatOutput {
	return o
}

func (o NetworkVpnAccessSourceNatOutput) ToNetworkVpnAccessSourceNatPtrOutput() NetworkVpnAccessSourceNatPtrOutput {
	return o.ToNetworkVpnAccessSourceNatPtrOutputWithContext(context.Background())
}

func (o NetworkVpnAccessSourceNatOutput) ToNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) NetworkVpnAccessSourceNatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkVpnAccessSourceNat) *NetworkVpnAccessSourceNat {
		return &v
	}).(NetworkVpnAccessSourceNatPtrOutput)
}

func (o NetworkVpnAccessSourceNatOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccessSourceNat) *string { return v.ExternalIp }).(pulumi.StringPtrOutput)
}

type NetworkVpnAccessSourceNatPtrOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessSourceNatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkVpnAccessSourceNat)(nil)).Elem()
}

func (o NetworkVpnAccessSourceNatPtrOutput) ToNetworkVpnAccessSourceNatPtrOutput() NetworkVpnAccessSourceNatPtrOutput {
	return o
}

func (o NetworkVpnAccessSourceNatPtrOutput) ToNetworkVpnAccessSourceNatPtrOutputWithContext(ctx context.Context) NetworkVpnAccessSourceNatPtrOutput {
	return o
}

func (o NetworkVpnAccessSourceNatPtrOutput) Elem() NetworkVpnAccessSourceNatOutput {
	return o.ApplyT(func(v *NetworkVpnAccessSourceNat) NetworkVpnAccessSourceNat {
		if v != nil {
			return *v
		}
		var ret NetworkVpnAccessSourceNat
		return ret
	}).(NetworkVpnAccessSourceNatOutput)
}

func (o NetworkVpnAccessSourceNatPtrOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkVpnAccessSourceNat) *string {
		if v == nil {
			return nil
		}
		return v.ExternalIp
	}).(pulumi.StringPtrOutput)
}

type NetworkVpnAccessStaticNat struct {
	InternalIp *string `pulumi:"internalIp"`
	Name       *string `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName *string `pulumi:"wanName"`
}

// NetworkVpnAccessStaticNatInput is an input type that accepts NetworkVpnAccessStaticNatArgs and NetworkVpnAccessStaticNatOutput values.
// You can construct a concrete instance of `NetworkVpnAccessStaticNatInput` via:
//
//	NetworkVpnAccessStaticNatArgs{...}
type NetworkVpnAccessStaticNatInput interface {
	pulumi.Input

	ToNetworkVpnAccessStaticNatOutput() NetworkVpnAccessStaticNatOutput
	ToNetworkVpnAccessStaticNatOutputWithContext(context.Context) NetworkVpnAccessStaticNatOutput
}

type NetworkVpnAccessStaticNatArgs struct {
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// If not set, we configure the nat policies against all WAN ports for simplicity
	WanName pulumi.StringPtrInput `pulumi:"wanName"`
}

func (NetworkVpnAccessStaticNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccessStaticNat)(nil)).Elem()
}

func (i NetworkVpnAccessStaticNatArgs) ToNetworkVpnAccessStaticNatOutput() NetworkVpnAccessStaticNatOutput {
	return i.ToNetworkVpnAccessStaticNatOutputWithContext(context.Background())
}

func (i NetworkVpnAccessStaticNatArgs) ToNetworkVpnAccessStaticNatOutputWithContext(ctx context.Context) NetworkVpnAccessStaticNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessStaticNatOutput)
}

// NetworkVpnAccessStaticNatMapInput is an input type that accepts NetworkVpnAccessStaticNatMap and NetworkVpnAccessStaticNatMapOutput values.
// You can construct a concrete instance of `NetworkVpnAccessStaticNatMapInput` via:
//
//	NetworkVpnAccessStaticNatMap{ "key": NetworkVpnAccessStaticNatArgs{...} }
type NetworkVpnAccessStaticNatMapInput interface {
	pulumi.Input

	ToNetworkVpnAccessStaticNatMapOutput() NetworkVpnAccessStaticNatMapOutput
	ToNetworkVpnAccessStaticNatMapOutputWithContext(context.Context) NetworkVpnAccessStaticNatMapOutput
}

type NetworkVpnAccessStaticNatMap map[string]NetworkVpnAccessStaticNatInput

func (NetworkVpnAccessStaticNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkVpnAccessStaticNat)(nil)).Elem()
}

func (i NetworkVpnAccessStaticNatMap) ToNetworkVpnAccessStaticNatMapOutput() NetworkVpnAccessStaticNatMapOutput {
	return i.ToNetworkVpnAccessStaticNatMapOutputWithContext(context.Background())
}

func (i NetworkVpnAccessStaticNatMap) ToNetworkVpnAccessStaticNatMapOutputWithContext(ctx context.Context) NetworkVpnAccessStaticNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkVpnAccessStaticNatMapOutput)
}

type NetworkVpnAccessStaticNatOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessStaticNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkVpnAccessStaticNat)(nil)).Elem()
}

func (o NetworkVpnAccessStaticNatOutput) ToNetworkVpnAccessStaticNatOutput() NetworkVpnAccessStaticNatOutput {
	return o
}

func (o NetworkVpnAccessStaticNatOutput) ToNetworkVpnAccessStaticNatOutputWithContext(ctx context.Context) NetworkVpnAccessStaticNatOutput {
	return o
}

func (o NetworkVpnAccessStaticNatOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccessStaticNat) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

func (o NetworkVpnAccessStaticNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccessStaticNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not set, we configure the nat policies against all WAN ports for simplicity
func (o NetworkVpnAccessStaticNatOutput) WanName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkVpnAccessStaticNat) *string { return v.WanName }).(pulumi.StringPtrOutput)
}

type NetworkVpnAccessStaticNatMapOutput struct{ *pulumi.OutputState }

func (NetworkVpnAccessStaticNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkVpnAccessStaticNat)(nil)).Elem()
}

func (o NetworkVpnAccessStaticNatMapOutput) ToNetworkVpnAccessStaticNatMapOutput() NetworkVpnAccessStaticNatMapOutput {
	return o
}

func (o NetworkVpnAccessStaticNatMapOutput) ToNetworkVpnAccessStaticNatMapOutputWithContext(ctx context.Context) NetworkVpnAccessStaticNatMapOutput {
	return o
}

func (o NetworkVpnAccessStaticNatMapOutput) MapIndex(k pulumi.StringInput) NetworkVpnAccessStaticNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkVpnAccessStaticNat {
		return vs[0].(map[string]NetworkVpnAccessStaticNat)[vs[1].(string)]
	}).(NetworkVpnAccessStaticNatOutput)
}

type NetworktemplateAclPolicy struct {
	// - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	// - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	Actions []NetworktemplateAclPolicyAction `pulumi:"actions"`
	Name    *string                          `pulumi:"name"`
	// - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	// - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	SrcTags []string `pulumi:"srcTags"`
}

// NetworktemplateAclPolicyInput is an input type that accepts NetworktemplateAclPolicyArgs and NetworktemplateAclPolicyOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyInput` via:
//
//	NetworktemplateAclPolicyArgs{...}
type NetworktemplateAclPolicyInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyOutput() NetworktemplateAclPolicyOutput
	ToNetworktemplateAclPolicyOutputWithContext(context.Context) NetworktemplateAclPolicyOutput
}

type NetworktemplateAclPolicyArgs struct {
	// - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	// - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	Actions NetworktemplateAclPolicyActionArrayInput `pulumi:"actions"`
	Name    pulumi.StringPtrInput                    `pulumi:"name"`
	// - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	// - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	SrcTags pulumi.StringArrayInput `pulumi:"srcTags"`
}

func (NetworktemplateAclPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicy)(nil)).Elem()
}

func (i NetworktemplateAclPolicyArgs) ToNetworktemplateAclPolicyOutput() NetworktemplateAclPolicyOutput {
	return i.ToNetworktemplateAclPolicyOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyArgs) ToNetworktemplateAclPolicyOutputWithContext(ctx context.Context) NetworktemplateAclPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyOutput)
}

// NetworktemplateAclPolicyArrayInput is an input type that accepts NetworktemplateAclPolicyArray and NetworktemplateAclPolicyArrayOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyArrayInput` via:
//
//	NetworktemplateAclPolicyArray{ NetworktemplateAclPolicyArgs{...} }
type NetworktemplateAclPolicyArrayInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyArrayOutput() NetworktemplateAclPolicyArrayOutput
	ToNetworktemplateAclPolicyArrayOutputWithContext(context.Context) NetworktemplateAclPolicyArrayOutput
}

type NetworktemplateAclPolicyArray []NetworktemplateAclPolicyInput

func (NetworktemplateAclPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicy)(nil)).Elem()
}

func (i NetworktemplateAclPolicyArray) ToNetworktemplateAclPolicyArrayOutput() NetworktemplateAclPolicyArrayOutput {
	return i.ToNetworktemplateAclPolicyArrayOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyArray) ToNetworktemplateAclPolicyArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyArrayOutput)
}

type NetworktemplateAclPolicyOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicy)(nil)).Elem()
}

func (o NetworktemplateAclPolicyOutput) ToNetworktemplateAclPolicyOutput() NetworktemplateAclPolicyOutput {
	return o
}

func (o NetworktemplateAclPolicyOutput) ToNetworktemplateAclPolicyOutputWithContext(ctx context.Context) NetworktemplateAclPolicyOutput {
	return o
}

// - for GBP-based policy, all srcTags and dstTags have to be gbp-based
// - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
func (o NetworktemplateAclPolicyOutput) Actions() NetworktemplateAclPolicyActionArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicy) []NetworktemplateAclPolicyAction { return v.Actions }).(NetworktemplateAclPolicyActionArrayOutput)
}

func (o NetworktemplateAclPolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// - for GBP-based policy, all srcTags and dstTags have to be gbp-based
// - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
func (o NetworktemplateAclPolicyOutput) SrcTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicy) []string { return v.SrcTags }).(pulumi.StringArrayOutput)
}

type NetworktemplateAclPolicyArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicy)(nil)).Elem()
}

func (o NetworktemplateAclPolicyArrayOutput) ToNetworktemplateAclPolicyArrayOutput() NetworktemplateAclPolicyArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyArrayOutput) ToNetworktemplateAclPolicyArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyArrayOutput) Index(i pulumi.IntInput) NetworktemplateAclPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateAclPolicy {
		return vs[0].([]NetworktemplateAclPolicy)[vs[1].(int)]
	}).(NetworktemplateAclPolicyOutput)
}

type NetworktemplateAclPolicyAction struct {
	// enum: `allow`, `deny`
	Action *string `pulumi:"action"`
	DstTag *string `pulumi:"dstTag"`
}

// NetworktemplateAclPolicyActionInput is an input type that accepts NetworktemplateAclPolicyActionArgs and NetworktemplateAclPolicyActionOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyActionInput` via:
//
//	NetworktemplateAclPolicyActionArgs{...}
type NetworktemplateAclPolicyActionInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyActionOutput() NetworktemplateAclPolicyActionOutput
	ToNetworktemplateAclPolicyActionOutputWithContext(context.Context) NetworktemplateAclPolicyActionOutput
}

type NetworktemplateAclPolicyActionArgs struct {
	// enum: `allow`, `deny`
	Action pulumi.StringPtrInput `pulumi:"action"`
	DstTag pulumi.StringPtrInput `pulumi:"dstTag"`
}

func (NetworktemplateAclPolicyActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (i NetworktemplateAclPolicyActionArgs) ToNetworktemplateAclPolicyActionOutput() NetworktemplateAclPolicyActionOutput {
	return i.ToNetworktemplateAclPolicyActionOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyActionArgs) ToNetworktemplateAclPolicyActionOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyActionOutput)
}

// NetworktemplateAclPolicyActionArrayInput is an input type that accepts NetworktemplateAclPolicyActionArray and NetworktemplateAclPolicyActionArrayOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyActionArrayInput` via:
//
//	NetworktemplateAclPolicyActionArray{ NetworktemplateAclPolicyActionArgs{...} }
type NetworktemplateAclPolicyActionArrayInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyActionArrayOutput() NetworktemplateAclPolicyActionArrayOutput
	ToNetworktemplateAclPolicyActionArrayOutputWithContext(context.Context) NetworktemplateAclPolicyActionArrayOutput
}

type NetworktemplateAclPolicyActionArray []NetworktemplateAclPolicyActionInput

func (NetworktemplateAclPolicyActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (i NetworktemplateAclPolicyActionArray) ToNetworktemplateAclPolicyActionArrayOutput() NetworktemplateAclPolicyActionArrayOutput {
	return i.ToNetworktemplateAclPolicyActionArrayOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyActionArray) ToNetworktemplateAclPolicyActionArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyActionArrayOutput)
}

type NetworktemplateAclPolicyActionOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (o NetworktemplateAclPolicyActionOutput) ToNetworktemplateAclPolicyActionOutput() NetworktemplateAclPolicyActionOutput {
	return o
}

func (o NetworktemplateAclPolicyActionOutput) ToNetworktemplateAclPolicyActionOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionOutput {
	return o
}

// enum: `allow`, `deny`
func (o NetworktemplateAclPolicyActionOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicyAction) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateAclPolicyActionOutput) DstTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicyAction) *string { return v.DstTag }).(pulumi.StringPtrOutput)
}

type NetworktemplateAclPolicyActionArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (o NetworktemplateAclPolicyActionArrayOutput) ToNetworktemplateAclPolicyActionArrayOutput() NetworktemplateAclPolicyActionArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyActionArrayOutput) ToNetworktemplateAclPolicyActionArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyActionArrayOutput) Index(i pulumi.IntInput) NetworktemplateAclPolicyActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateAclPolicyAction {
		return vs[0].([]NetworktemplateAclPolicyAction)[vs[1].(int)]
	}).(NetworktemplateAclPolicyActionOutput)
}

type NetworktemplateAclTags struct {
	// required if
	// - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
	// - `type`==`staticGbp` (applying gbp tag against matching conditions)
	GbpTag *int `pulumi:"gbpTag"`
	// required if
	// - `type`==`mac`
	// - `type`==`staticGbp` if from matching mac
	Macs []string `pulumi:"macs"`
	// if:
	//   * `type`==`mac` (optional. default is `any`)
	//   * `type`==`subnet` (optional. default is `any`)
	//   * `type`==`network`
	//   * `type`==`resource` (optional. default is `any`)
	//   * `type`==`staticGbp` if from matching network (vlan)'
	Network *string `pulumi:"network"`
	// required if:
	//   * `type`==`radiusGroup`
	//   * `type`==`staticGbp`
	//     if from matching radius_group
	RadiusGroup *string `pulumi:"radiusGroup"`
	// if `type`==`resource`
	// empty means unrestricted, i.e. any
	Specs []NetworktemplateAclTagsSpec `pulumi:"specs"`
	// if
	// - `type`==`subnet`
	// - `type`==`resource` (optional. default is `any`)
	// - `type`==`staticGbp` if from matching subnet
	Subnets []string `pulumi:"subnets"`
	// enum: `any`, `dynamicGbp`, `mac`, `network`, `radiusGroup`, `resource`, `staticGbp`, `subnet`
	Type string `pulumi:"type"`
}

// NetworktemplateAclTagsInput is an input type that accepts NetworktemplateAclTagsArgs and NetworktemplateAclTagsOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsInput` via:
//
//	NetworktemplateAclTagsArgs{...}
type NetworktemplateAclTagsInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsOutput() NetworktemplateAclTagsOutput
	ToNetworktemplateAclTagsOutputWithContext(context.Context) NetworktemplateAclTagsOutput
}

type NetworktemplateAclTagsArgs struct {
	// required if
	// - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
	// - `type`==`staticGbp` (applying gbp tag against matching conditions)
	GbpTag pulumi.IntPtrInput `pulumi:"gbpTag"`
	// required if
	// - `type`==`mac`
	// - `type`==`staticGbp` if from matching mac
	Macs pulumi.StringArrayInput `pulumi:"macs"`
	// if:
	//   * `type`==`mac` (optional. default is `any`)
	//   * `type`==`subnet` (optional. default is `any`)
	//   * `type`==`network`
	//   * `type`==`resource` (optional. default is `any`)
	//   * `type`==`staticGbp` if from matching network (vlan)'
	Network pulumi.StringPtrInput `pulumi:"network"`
	// required if:
	//   * `type`==`radiusGroup`
	//   * `type`==`staticGbp`
	//     if from matching radius_group
	RadiusGroup pulumi.StringPtrInput `pulumi:"radiusGroup"`
	// if `type`==`resource`
	// empty means unrestricted, i.e. any
	Specs NetworktemplateAclTagsSpecArrayInput `pulumi:"specs"`
	// if
	// - `type`==`subnet`
	// - `type`==`resource` (optional. default is `any`)
	// - `type`==`staticGbp` if from matching subnet
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
	// enum: `any`, `dynamicGbp`, `mac`, `network`, `radiusGroup`, `resource`, `staticGbp`, `subnet`
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetworktemplateAclTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTags)(nil)).Elem()
}

func (i NetworktemplateAclTagsArgs) ToNetworktemplateAclTagsOutput() NetworktemplateAclTagsOutput {
	return i.ToNetworktemplateAclTagsOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsArgs) ToNetworktemplateAclTagsOutputWithContext(ctx context.Context) NetworktemplateAclTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsOutput)
}

// NetworktemplateAclTagsMapInput is an input type that accepts NetworktemplateAclTagsMap and NetworktemplateAclTagsMapOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsMapInput` via:
//
//	NetworktemplateAclTagsMap{ "key": NetworktemplateAclTagsArgs{...} }
type NetworktemplateAclTagsMapInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsMapOutput() NetworktemplateAclTagsMapOutput
	ToNetworktemplateAclTagsMapOutputWithContext(context.Context) NetworktemplateAclTagsMapOutput
}

type NetworktemplateAclTagsMap map[string]NetworktemplateAclTagsInput

func (NetworktemplateAclTagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateAclTags)(nil)).Elem()
}

func (i NetworktemplateAclTagsMap) ToNetworktemplateAclTagsMapOutput() NetworktemplateAclTagsMapOutput {
	return i.ToNetworktemplateAclTagsMapOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsMap) ToNetworktemplateAclTagsMapOutputWithContext(ctx context.Context) NetworktemplateAclTagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsMapOutput)
}

type NetworktemplateAclTagsOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTags)(nil)).Elem()
}

func (o NetworktemplateAclTagsOutput) ToNetworktemplateAclTagsOutput() NetworktemplateAclTagsOutput {
	return o
}

func (o NetworktemplateAclTagsOutput) ToNetworktemplateAclTagsOutputWithContext(ctx context.Context) NetworktemplateAclTagsOutput {
	return o
}

// required if
// - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
// - `type`==`staticGbp` (applying gbp tag against matching conditions)
func (o NetworktemplateAclTagsOutput) GbpTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) *int { return v.GbpTag }).(pulumi.IntPtrOutput)
}

// required if
// - `type`==`mac`
// - `type`==`staticGbp` if from matching mac
func (o NetworktemplateAclTagsOutput) Macs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) []string { return v.Macs }).(pulumi.StringArrayOutput)
}

// if:
//   - `type`==`mac` (optional. default is `any`)
//   - `type`==`subnet` (optional. default is `any`)
//   - `type`==`network`
//   - `type`==`resource` (optional. default is `any`)
//   - `type`==`staticGbp` if from matching network (vlan)'
func (o NetworktemplateAclTagsOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// required if:
//   - `type`==`radiusGroup`
//   - `type`==`staticGbp`
//     if from matching radius_group
func (o NetworktemplateAclTagsOutput) RadiusGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) *string { return v.RadiusGroup }).(pulumi.StringPtrOutput)
}

// if `type`==`resource`
// empty means unrestricted, i.e. any
func (o NetworktemplateAclTagsOutput) Specs() NetworktemplateAclTagsSpecArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) []NetworktemplateAclTagsSpec { return v.Specs }).(NetworktemplateAclTagsSpecArrayOutput)
}

// if
// - `type`==`subnet`
// - `type`==`resource` (optional. default is `any`)
// - `type`==`staticGbp` if from matching subnet
func (o NetworktemplateAclTagsOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// enum: `any`, `dynamicGbp`, `mac`, `network`, `radiusGroup`, `resource`, `staticGbp`, `subnet`
func (o NetworktemplateAclTagsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) string { return v.Type }).(pulumi.StringOutput)
}

type NetworktemplateAclTagsMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateAclTags)(nil)).Elem()
}

func (o NetworktemplateAclTagsMapOutput) ToNetworktemplateAclTagsMapOutput() NetworktemplateAclTagsMapOutput {
	return o
}

func (o NetworktemplateAclTagsMapOutput) ToNetworktemplateAclTagsMapOutputWithContext(ctx context.Context) NetworktemplateAclTagsMapOutput {
	return o
}

func (o NetworktemplateAclTagsMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateAclTagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateAclTags {
		return vs[0].(map[string]NetworktemplateAclTags)[vs[1].(string)]
	}).(NetworktemplateAclTagsOutput)
}

type NetworktemplateAclTagsSpec struct {
	// matched dst port, "0" means any
	PortRange *string `pulumi:"portRange"`
	// `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocolNumber` is between 1-254
	Protocol *string `pulumi:"protocol"`
}

// NetworktemplateAclTagsSpecInput is an input type that accepts NetworktemplateAclTagsSpecArgs and NetworktemplateAclTagsSpecOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsSpecInput` via:
//
//	NetworktemplateAclTagsSpecArgs{...}
type NetworktemplateAclTagsSpecInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsSpecOutput() NetworktemplateAclTagsSpecOutput
	ToNetworktemplateAclTagsSpecOutputWithContext(context.Context) NetworktemplateAclTagsSpecOutput
}

type NetworktemplateAclTagsSpecArgs struct {
	// matched dst port, "0" means any
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocolNumber` is between 1-254
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworktemplateAclTagsSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (i NetworktemplateAclTagsSpecArgs) ToNetworktemplateAclTagsSpecOutput() NetworktemplateAclTagsSpecOutput {
	return i.ToNetworktemplateAclTagsSpecOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsSpecArgs) ToNetworktemplateAclTagsSpecOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsSpecOutput)
}

// NetworktemplateAclTagsSpecArrayInput is an input type that accepts NetworktemplateAclTagsSpecArray and NetworktemplateAclTagsSpecArrayOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsSpecArrayInput` via:
//
//	NetworktemplateAclTagsSpecArray{ NetworktemplateAclTagsSpecArgs{...} }
type NetworktemplateAclTagsSpecArrayInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsSpecArrayOutput() NetworktemplateAclTagsSpecArrayOutput
	ToNetworktemplateAclTagsSpecArrayOutputWithContext(context.Context) NetworktemplateAclTagsSpecArrayOutput
}

type NetworktemplateAclTagsSpecArray []NetworktemplateAclTagsSpecInput

func (NetworktemplateAclTagsSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (i NetworktemplateAclTagsSpecArray) ToNetworktemplateAclTagsSpecArrayOutput() NetworktemplateAclTagsSpecArrayOutput {
	return i.ToNetworktemplateAclTagsSpecArrayOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsSpecArray) ToNetworktemplateAclTagsSpecArrayOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsSpecArrayOutput)
}

type NetworktemplateAclTagsSpecOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (o NetworktemplateAclTagsSpecOutput) ToNetworktemplateAclTagsSpecOutput() NetworktemplateAclTagsSpecOutput {
	return o
}

func (o NetworktemplateAclTagsSpecOutput) ToNetworktemplateAclTagsSpecOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecOutput {
	return o
}

// matched dst port, "0" means any
func (o NetworktemplateAclTagsSpecOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTagsSpec) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocolNumber` is between 1-254
func (o NetworktemplateAclTagsSpecOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTagsSpec) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworktemplateAclTagsSpecArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (o NetworktemplateAclTagsSpecArrayOutput) ToNetworktemplateAclTagsSpecArrayOutput() NetworktemplateAclTagsSpecArrayOutput {
	return o
}

func (o NetworktemplateAclTagsSpecArrayOutput) ToNetworktemplateAclTagsSpecArrayOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecArrayOutput {
	return o
}

func (o NetworktemplateAclTagsSpecArrayOutput) Index(i pulumi.IntInput) NetworktemplateAclTagsSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateAclTagsSpec {
		return vs[0].([]NetworktemplateAclTagsSpec)[vs[1].(int)]
	}).(NetworktemplateAclTagsSpecOutput)
}

type NetworktemplateDhcpSnooping struct {
	AllNetworks *bool `pulumi:"allNetworks"`
	// Enable for dynamic ARP inspection check
	EnableArpSpoofCheck *bool `pulumi:"enableArpSpoofCheck"`
	// Enable for check for forging source IP address
	EnableIpSourceGuard *bool `pulumi:"enableIpSourceGuard"`
	Enabled             *bool `pulumi:"enabled"`
	// if `allNetworks`==`false`, list of network with DHCP snooping enabled
	Networks []string `pulumi:"networks"`
}

// NetworktemplateDhcpSnoopingInput is an input type that accepts NetworktemplateDhcpSnoopingArgs and NetworktemplateDhcpSnoopingOutput values.
// You can construct a concrete instance of `NetworktemplateDhcpSnoopingInput` via:
//
//	NetworktemplateDhcpSnoopingArgs{...}
type NetworktemplateDhcpSnoopingInput interface {
	pulumi.Input

	ToNetworktemplateDhcpSnoopingOutput() NetworktemplateDhcpSnoopingOutput
	ToNetworktemplateDhcpSnoopingOutputWithContext(context.Context) NetworktemplateDhcpSnoopingOutput
}

type NetworktemplateDhcpSnoopingArgs struct {
	AllNetworks pulumi.BoolPtrInput `pulumi:"allNetworks"`
	// Enable for dynamic ARP inspection check
	EnableArpSpoofCheck pulumi.BoolPtrInput `pulumi:"enableArpSpoofCheck"`
	// Enable for check for forging source IP address
	EnableIpSourceGuard pulumi.BoolPtrInput `pulumi:"enableIpSourceGuard"`
	Enabled             pulumi.BoolPtrInput `pulumi:"enabled"`
	// if `allNetworks`==`false`, list of network with DHCP snooping enabled
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (NetworktemplateDhcpSnoopingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingOutput() NetworktemplateDhcpSnoopingOutput {
	return i.ToNetworktemplateDhcpSnoopingOutputWithContext(context.Background())
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateDhcpSnoopingOutput)
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return i.ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Background())
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateDhcpSnoopingOutput).ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx)
}

// NetworktemplateDhcpSnoopingPtrInput is an input type that accepts NetworktemplateDhcpSnoopingArgs, NetworktemplateDhcpSnoopingPtr and NetworktemplateDhcpSnoopingPtrOutput values.
// You can construct a concrete instance of `NetworktemplateDhcpSnoopingPtrInput` via:
//
//	        NetworktemplateDhcpSnoopingArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateDhcpSnoopingPtrInput interface {
	pulumi.Input

	ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput
	ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Context) NetworktemplateDhcpSnoopingPtrOutput
}

type networktemplateDhcpSnoopingPtrType NetworktemplateDhcpSnoopingArgs

func NetworktemplateDhcpSnoopingPtr(v *NetworktemplateDhcpSnoopingArgs) NetworktemplateDhcpSnoopingPtrInput {
	return (*networktemplateDhcpSnoopingPtrType)(v)
}

func (*networktemplateDhcpSnoopingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (i *networktemplateDhcpSnoopingPtrType) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return i.ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Background())
}

func (i *networktemplateDhcpSnoopingPtrType) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateDhcpSnoopingPtrOutput)
}

type NetworktemplateDhcpSnoopingOutput struct{ *pulumi.OutputState }

func (NetworktemplateDhcpSnoopingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingOutput() NetworktemplateDhcpSnoopingOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return o.ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Background())
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateDhcpSnooping) *NetworktemplateDhcpSnooping {
		return &v
	}).(NetworktemplateDhcpSnoopingPtrOutput)
}

func (o NetworktemplateDhcpSnoopingOutput) AllNetworks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.AllNetworks }).(pulumi.BoolPtrOutput)
}

// Enable for dynamic ARP inspection check
func (o NetworktemplateDhcpSnoopingOutput) EnableArpSpoofCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.EnableArpSpoofCheck }).(pulumi.BoolPtrOutput)
}

// Enable for check for forging source IP address
func (o NetworktemplateDhcpSnoopingOutput) EnableIpSourceGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.EnableIpSourceGuard }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateDhcpSnoopingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// if `allNetworks`==`false`, list of network with DHCP snooping enabled
func (o NetworktemplateDhcpSnoopingOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type NetworktemplateDhcpSnoopingPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateDhcpSnoopingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (o NetworktemplateDhcpSnoopingPtrOutput) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingPtrOutput) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingPtrOutput) Elem() NetworktemplateDhcpSnoopingOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) NetworktemplateDhcpSnooping {
		if v != nil {
			return *v
		}
		var ret NetworktemplateDhcpSnooping
		return ret
	}).(NetworktemplateDhcpSnoopingOutput)
}

func (o NetworktemplateDhcpSnoopingPtrOutput) AllNetworks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.AllNetworks
	}).(pulumi.BoolPtrOutput)
}

// Enable for dynamic ARP inspection check
func (o NetworktemplateDhcpSnoopingPtrOutput) EnableArpSpoofCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.EnableArpSpoofCheck
	}).(pulumi.BoolPtrOutput)
}

// Enable for check for forging source IP address
func (o NetworktemplateDhcpSnoopingPtrOutput) EnableIpSourceGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpSourceGuard
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateDhcpSnoopingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// if `allNetworks`==`false`, list of network with DHCP snooping enabled
func (o NetworktemplateDhcpSnoopingPtrOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) []string {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(pulumi.StringArrayOutput)
}

type NetworktemplateExtraRoutes6 struct {
	// this takes precedence
	Discard       *bool                                               `pulumi:"discard"`
	Metric        *int                                                `pulumi:"metric"`
	NextQualified map[string]NetworktemplateExtraRoutes6NextQualified `pulumi:"nextQualified"`
	NoResolve     *bool                                               `pulumi:"noResolve"`
	Preference    *int                                                `pulumi:"preference"`
	// next-hop IP Address
	Via string `pulumi:"via"`
}

// NetworktemplateExtraRoutes6Input is an input type that accepts NetworktemplateExtraRoutes6Args and NetworktemplateExtraRoutes6Output values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6Input` via:
//
//	NetworktemplateExtraRoutes6Args{...}
type NetworktemplateExtraRoutes6Input interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6Output() NetworktemplateExtraRoutes6Output
	ToNetworktemplateExtraRoutes6OutputWithContext(context.Context) NetworktemplateExtraRoutes6Output
}

type NetworktemplateExtraRoutes6Args struct {
	// this takes precedence
	Discard       pulumi.BoolPtrInput                              `pulumi:"discard"`
	Metric        pulumi.IntPtrInput                               `pulumi:"metric"`
	NextQualified NetworktemplateExtraRoutes6NextQualifiedMapInput `pulumi:"nextQualified"`
	NoResolve     pulumi.BoolPtrInput                              `pulumi:"noResolve"`
	Preference    pulumi.IntPtrInput                               `pulumi:"preference"`
	// next-hop IP Address
	Via pulumi.StringInput `pulumi:"via"`
}

func (NetworktemplateExtraRoutes6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6Args) ToNetworktemplateExtraRoutes6Output() NetworktemplateExtraRoutes6Output {
	return i.ToNetworktemplateExtraRoutes6OutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6Args) ToNetworktemplateExtraRoutes6OutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6Output)
}

// NetworktemplateExtraRoutes6MapInput is an input type that accepts NetworktemplateExtraRoutes6Map and NetworktemplateExtraRoutes6MapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6MapInput` via:
//
//	NetworktemplateExtraRoutes6Map{ "key": NetworktemplateExtraRoutes6Args{...} }
type NetworktemplateExtraRoutes6MapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6MapOutput() NetworktemplateExtraRoutes6MapOutput
	ToNetworktemplateExtraRoutes6MapOutputWithContext(context.Context) NetworktemplateExtraRoutes6MapOutput
}

type NetworktemplateExtraRoutes6Map map[string]NetworktemplateExtraRoutes6Input

func (NetworktemplateExtraRoutes6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6Map) ToNetworktemplateExtraRoutes6MapOutput() NetworktemplateExtraRoutes6MapOutput {
	return i.ToNetworktemplateExtraRoutes6MapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6Map) ToNetworktemplateExtraRoutes6MapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6MapOutput)
}

type NetworktemplateExtraRoutes6Output struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6Output) ToNetworktemplateExtraRoutes6Output() NetworktemplateExtraRoutes6Output {
	return o
}

func (o NetworktemplateExtraRoutes6Output) ToNetworktemplateExtraRoutes6OutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6Output {
	return o
}

// this takes precedence
func (o NetworktemplateExtraRoutes6Output) Discard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *bool { return v.Discard }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutes6Output) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutes6Output) NextQualified() NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) map[string]NetworktemplateExtraRoutes6NextQualified {
		return v.NextQualified
	}).(NetworktemplateExtraRoutes6NextQualifiedMapOutput)
}

func (o NetworktemplateExtraRoutes6Output) NoResolve() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *bool { return v.NoResolve }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutes6Output) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// next-hop IP Address
func (o NetworktemplateExtraRoutes6Output) Via() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) string { return v.Via }).(pulumi.StringOutput)
}

type NetworktemplateExtraRoutes6MapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6MapOutput) ToNetworktemplateExtraRoutes6MapOutput() NetworktemplateExtraRoutes6MapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6MapOutput) ToNetworktemplateExtraRoutes6MapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6MapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6MapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutes6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutes6 {
		return vs[0].(map[string]NetworktemplateExtraRoutes6)[vs[1].(string)]
	}).(NetworktemplateExtraRoutes6Output)
}

type NetworktemplateExtraRoutes6NextQualified struct {
	Metric     *int `pulumi:"metric"`
	Preference *int `pulumi:"preference"`
}

// NetworktemplateExtraRoutes6NextQualifiedInput is an input type that accepts NetworktemplateExtraRoutes6NextQualifiedArgs and NetworktemplateExtraRoutes6NextQualifiedOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6NextQualifiedInput` via:
//
//	NetworktemplateExtraRoutes6NextQualifiedArgs{...}
type NetworktemplateExtraRoutes6NextQualifiedInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6NextQualifiedOutput() NetworktemplateExtraRoutes6NextQualifiedOutput
	ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(context.Context) NetworktemplateExtraRoutes6NextQualifiedOutput
}

type NetworktemplateExtraRoutes6NextQualifiedArgs struct {
	Metric     pulumi.IntPtrInput `pulumi:"metric"`
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (NetworktemplateExtraRoutes6NextQualifiedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6NextQualifiedArgs) ToNetworktemplateExtraRoutes6NextQualifiedOutput() NetworktemplateExtraRoutes6NextQualifiedOutput {
	return i.ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6NextQualifiedArgs) ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6NextQualifiedOutput)
}

// NetworktemplateExtraRoutes6NextQualifiedMapInput is an input type that accepts NetworktemplateExtraRoutes6NextQualifiedMap and NetworktemplateExtraRoutes6NextQualifiedMapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6NextQualifiedMapInput` via:
//
//	NetworktemplateExtraRoutes6NextQualifiedMap{ "key": NetworktemplateExtraRoutes6NextQualifiedArgs{...} }
type NetworktemplateExtraRoutes6NextQualifiedMapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6NextQualifiedMapOutput() NetworktemplateExtraRoutes6NextQualifiedMapOutput
	ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(context.Context) NetworktemplateExtraRoutes6NextQualifiedMapOutput
}

type NetworktemplateExtraRoutes6NextQualifiedMap map[string]NetworktemplateExtraRoutes6NextQualifiedInput

func (NetworktemplateExtraRoutes6NextQualifiedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6NextQualifiedMap) ToNetworktemplateExtraRoutes6NextQualifiedMapOutput() NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return i.ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6NextQualifiedMap) ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6NextQualifiedMapOutput)
}

type NetworktemplateExtraRoutes6NextQualifiedOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6NextQualifiedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) ToNetworktemplateExtraRoutes6NextQualifiedOutput() NetworktemplateExtraRoutes6NextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6NextQualified) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6NextQualified) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type NetworktemplateExtraRoutes6NextQualifiedMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6NextQualifiedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6NextQualifiedMapOutput) ToNetworktemplateExtraRoutes6NextQualifiedMapOutput() NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedMapOutput) ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutes6NextQualifiedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutes6NextQualified {
		return vs[0].(map[string]NetworktemplateExtraRoutes6NextQualified)[vs[1].(string)]
	}).(NetworktemplateExtraRoutes6NextQualifiedOutput)
}

type NetworktemplateExtraRoutes struct {
	// this takes precedence
	Discard       *bool                                              `pulumi:"discard"`
	Metric        *int                                               `pulumi:"metric"`
	NextQualified map[string]NetworktemplateExtraRoutesNextQualified `pulumi:"nextQualified"`
	NoResolve     *bool                                              `pulumi:"noResolve"`
	Preference    *int                                               `pulumi:"preference"`
	// next-hop IP Address
	Via string `pulumi:"via"`
}

// NetworktemplateExtraRoutesInput is an input type that accepts NetworktemplateExtraRoutesArgs and NetworktemplateExtraRoutesOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesInput` via:
//
//	NetworktemplateExtraRoutesArgs{...}
type NetworktemplateExtraRoutesInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesOutput() NetworktemplateExtraRoutesOutput
	ToNetworktemplateExtraRoutesOutputWithContext(context.Context) NetworktemplateExtraRoutesOutput
}

type NetworktemplateExtraRoutesArgs struct {
	// this takes precedence
	Discard       pulumi.BoolPtrInput                             `pulumi:"discard"`
	Metric        pulumi.IntPtrInput                              `pulumi:"metric"`
	NextQualified NetworktemplateExtraRoutesNextQualifiedMapInput `pulumi:"nextQualified"`
	NoResolve     pulumi.BoolPtrInput                             `pulumi:"noResolve"`
	Preference    pulumi.IntPtrInput                              `pulumi:"preference"`
	// next-hop IP Address
	Via pulumi.StringInput `pulumi:"via"`
}

func (NetworktemplateExtraRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesArgs) ToNetworktemplateExtraRoutesOutput() NetworktemplateExtraRoutesOutput {
	return i.ToNetworktemplateExtraRoutesOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesArgs) ToNetworktemplateExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesOutput)
}

// NetworktemplateExtraRoutesMapInput is an input type that accepts NetworktemplateExtraRoutesMap and NetworktemplateExtraRoutesMapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesMapInput` via:
//
//	NetworktemplateExtraRoutesMap{ "key": NetworktemplateExtraRoutesArgs{...} }
type NetworktemplateExtraRoutesMapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesMapOutput() NetworktemplateExtraRoutesMapOutput
	ToNetworktemplateExtraRoutesMapOutputWithContext(context.Context) NetworktemplateExtraRoutesMapOutput
}

type NetworktemplateExtraRoutesMap map[string]NetworktemplateExtraRoutesInput

func (NetworktemplateExtraRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesMap) ToNetworktemplateExtraRoutesMapOutput() NetworktemplateExtraRoutesMapOutput {
	return i.ToNetworktemplateExtraRoutesMapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesMap) ToNetworktemplateExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesMapOutput)
}

type NetworktemplateExtraRoutesOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesOutput) ToNetworktemplateExtraRoutesOutput() NetworktemplateExtraRoutesOutput {
	return o
}

func (o NetworktemplateExtraRoutesOutput) ToNetworktemplateExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesOutput {
	return o
}

// this takes precedence
func (o NetworktemplateExtraRoutesOutput) Discard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *bool { return v.Discard }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutesOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutesOutput) NextQualified() NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) map[string]NetworktemplateExtraRoutesNextQualified {
		return v.NextQualified
	}).(NetworktemplateExtraRoutesNextQualifiedMapOutput)
}

func (o NetworktemplateExtraRoutesOutput) NoResolve() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *bool { return v.NoResolve }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutesOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// next-hop IP Address
func (o NetworktemplateExtraRoutesOutput) Via() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) string { return v.Via }).(pulumi.StringOutput)
}

type NetworktemplateExtraRoutesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesMapOutput) ToNetworktemplateExtraRoutesMapOutput() NetworktemplateExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesMapOutput) ToNetworktemplateExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutes {
		return vs[0].(map[string]NetworktemplateExtraRoutes)[vs[1].(string)]
	}).(NetworktemplateExtraRoutesOutput)
}

type NetworktemplateExtraRoutesNextQualified struct {
	Metric     *int `pulumi:"metric"`
	Preference *int `pulumi:"preference"`
}

// NetworktemplateExtraRoutesNextQualifiedInput is an input type that accepts NetworktemplateExtraRoutesNextQualifiedArgs and NetworktemplateExtraRoutesNextQualifiedOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesNextQualifiedInput` via:
//
//	NetworktemplateExtraRoutesNextQualifiedArgs{...}
type NetworktemplateExtraRoutesNextQualifiedInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesNextQualifiedOutput() NetworktemplateExtraRoutesNextQualifiedOutput
	ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(context.Context) NetworktemplateExtraRoutesNextQualifiedOutput
}

type NetworktemplateExtraRoutesNextQualifiedArgs struct {
	Metric     pulumi.IntPtrInput `pulumi:"metric"`
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (NetworktemplateExtraRoutesNextQualifiedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesNextQualifiedArgs) ToNetworktemplateExtraRoutesNextQualifiedOutput() NetworktemplateExtraRoutesNextQualifiedOutput {
	return i.ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesNextQualifiedArgs) ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesNextQualifiedOutput)
}

// NetworktemplateExtraRoutesNextQualifiedMapInput is an input type that accepts NetworktemplateExtraRoutesNextQualifiedMap and NetworktemplateExtraRoutesNextQualifiedMapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesNextQualifiedMapInput` via:
//
//	NetworktemplateExtraRoutesNextQualifiedMap{ "key": NetworktemplateExtraRoutesNextQualifiedArgs{...} }
type NetworktemplateExtraRoutesNextQualifiedMapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesNextQualifiedMapOutput() NetworktemplateExtraRoutesNextQualifiedMapOutput
	ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(context.Context) NetworktemplateExtraRoutesNextQualifiedMapOutput
}

type NetworktemplateExtraRoutesNextQualifiedMap map[string]NetworktemplateExtraRoutesNextQualifiedInput

func (NetworktemplateExtraRoutesNextQualifiedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesNextQualifiedMap) ToNetworktemplateExtraRoutesNextQualifiedMapOutput() NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return i.ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesNextQualifiedMap) ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesNextQualifiedMapOutput)
}

type NetworktemplateExtraRoutesNextQualifiedOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesNextQualifiedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) ToNetworktemplateExtraRoutesNextQualifiedOutput() NetworktemplateExtraRoutesNextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutesNextQualified) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutesNextQualified) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type NetworktemplateExtraRoutesNextQualifiedMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesNextQualifiedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesNextQualifiedMapOutput) ToNetworktemplateExtraRoutesNextQualifiedMapOutput() NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedMapOutput) ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutesNextQualifiedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutesNextQualified {
		return vs[0].(map[string]NetworktemplateExtraRoutesNextQualified)[vs[1].(string)]
	}).(NetworktemplateExtraRoutesNextQualifiedOutput)
}

type NetworktemplateMistNac struct {
	Enabled *bool   `pulumi:"enabled"`
	Network *string `pulumi:"network"`
}

// NetworktemplateMistNacInput is an input type that accepts NetworktemplateMistNacArgs and NetworktemplateMistNacOutput values.
// You can construct a concrete instance of `NetworktemplateMistNacInput` via:
//
//	NetworktemplateMistNacArgs{...}
type NetworktemplateMistNacInput interface {
	pulumi.Input

	ToNetworktemplateMistNacOutput() NetworktemplateMistNacOutput
	ToNetworktemplateMistNacOutputWithContext(context.Context) NetworktemplateMistNacOutput
}

type NetworktemplateMistNacArgs struct {
	Enabled pulumi.BoolPtrInput   `pulumi:"enabled"`
	Network pulumi.StringPtrInput `pulumi:"network"`
}

func (NetworktemplateMistNacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateMistNac)(nil)).Elem()
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacOutput() NetworktemplateMistNacOutput {
	return i.ToNetworktemplateMistNacOutputWithContext(context.Background())
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacOutputWithContext(ctx context.Context) NetworktemplateMistNacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateMistNacOutput)
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return i.ToNetworktemplateMistNacPtrOutputWithContext(context.Background())
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateMistNacOutput).ToNetworktemplateMistNacPtrOutputWithContext(ctx)
}

// NetworktemplateMistNacPtrInput is an input type that accepts NetworktemplateMistNacArgs, NetworktemplateMistNacPtr and NetworktemplateMistNacPtrOutput values.
// You can construct a concrete instance of `NetworktemplateMistNacPtrInput` via:
//
//	        NetworktemplateMistNacArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateMistNacPtrInput interface {
	pulumi.Input

	ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput
	ToNetworktemplateMistNacPtrOutputWithContext(context.Context) NetworktemplateMistNacPtrOutput
}

type networktemplateMistNacPtrType NetworktemplateMistNacArgs

func NetworktemplateMistNacPtr(v *NetworktemplateMistNacArgs) NetworktemplateMistNacPtrInput {
	return (*networktemplateMistNacPtrType)(v)
}

func (*networktemplateMistNacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateMistNac)(nil)).Elem()
}

func (i *networktemplateMistNacPtrType) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return i.ToNetworktemplateMistNacPtrOutputWithContext(context.Background())
}

func (i *networktemplateMistNacPtrType) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateMistNacPtrOutput)
}

type NetworktemplateMistNacOutput struct{ *pulumi.OutputState }

func (NetworktemplateMistNacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateMistNac)(nil)).Elem()
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacOutput() NetworktemplateMistNacOutput {
	return o
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacOutputWithContext(ctx context.Context) NetworktemplateMistNacOutput {
	return o
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return o.ToNetworktemplateMistNacPtrOutputWithContext(context.Background())
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateMistNac) *NetworktemplateMistNac {
		return &v
	}).(NetworktemplateMistNacPtrOutput)
}

func (o NetworktemplateMistNacOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateMistNac) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateMistNacOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateMistNac) *string { return v.Network }).(pulumi.StringPtrOutput)
}

type NetworktemplateMistNacPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateMistNacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateMistNac)(nil)).Elem()
}

func (o NetworktemplateMistNacPtrOutput) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return o
}

func (o NetworktemplateMistNacPtrOutput) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return o
}

func (o NetworktemplateMistNacPtrOutput) Elem() NetworktemplateMistNacOutput {
	return o.ApplyT(func(v *NetworktemplateMistNac) NetworktemplateMistNac {
		if v != nil {
			return *v
		}
		var ret NetworktemplateMistNac
		return ret
	}).(NetworktemplateMistNacOutput)
}

func (o NetworktemplateMistNacPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateMistNac) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateMistNacPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateMistNac) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateNetworks struct {
	// whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required)
	// NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
	Isolation       *bool   `pulumi:"isolation"`
	IsolationVlanId *string `pulumi:"isolationVlanId"`
	// optional for pure switching, required when L3 / routing features are used
	Subnet *string `pulumi:"subnet"`
	VlanId string  `pulumi:"vlanId"`
}

// NetworktemplateNetworksInput is an input type that accepts NetworktemplateNetworksArgs and NetworktemplateNetworksOutput values.
// You can construct a concrete instance of `NetworktemplateNetworksInput` via:
//
//	NetworktemplateNetworksArgs{...}
type NetworktemplateNetworksInput interface {
	pulumi.Input

	ToNetworktemplateNetworksOutput() NetworktemplateNetworksOutput
	ToNetworktemplateNetworksOutputWithContext(context.Context) NetworktemplateNetworksOutput
}

type NetworktemplateNetworksArgs struct {
	// whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required)
	// NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
	Isolation       pulumi.BoolPtrInput   `pulumi:"isolation"`
	IsolationVlanId pulumi.StringPtrInput `pulumi:"isolationVlanId"`
	// optional for pure switching, required when L3 / routing features are used
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	VlanId pulumi.StringInput    `pulumi:"vlanId"`
}

func (NetworktemplateNetworksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateNetworks)(nil)).Elem()
}

func (i NetworktemplateNetworksArgs) ToNetworktemplateNetworksOutput() NetworktemplateNetworksOutput {
	return i.ToNetworktemplateNetworksOutputWithContext(context.Background())
}

func (i NetworktemplateNetworksArgs) ToNetworktemplateNetworksOutputWithContext(ctx context.Context) NetworktemplateNetworksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateNetworksOutput)
}

// NetworktemplateNetworksMapInput is an input type that accepts NetworktemplateNetworksMap and NetworktemplateNetworksMapOutput values.
// You can construct a concrete instance of `NetworktemplateNetworksMapInput` via:
//
//	NetworktemplateNetworksMap{ "key": NetworktemplateNetworksArgs{...} }
type NetworktemplateNetworksMapInput interface {
	pulumi.Input

	ToNetworktemplateNetworksMapOutput() NetworktemplateNetworksMapOutput
	ToNetworktemplateNetworksMapOutputWithContext(context.Context) NetworktemplateNetworksMapOutput
}

type NetworktemplateNetworksMap map[string]NetworktemplateNetworksInput

func (NetworktemplateNetworksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateNetworks)(nil)).Elem()
}

func (i NetworktemplateNetworksMap) ToNetworktemplateNetworksMapOutput() NetworktemplateNetworksMapOutput {
	return i.ToNetworktemplateNetworksMapOutputWithContext(context.Background())
}

func (i NetworktemplateNetworksMap) ToNetworktemplateNetworksMapOutputWithContext(ctx context.Context) NetworktemplateNetworksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateNetworksMapOutput)
}

type NetworktemplateNetworksOutput struct{ *pulumi.OutputState }

func (NetworktemplateNetworksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateNetworks)(nil)).Elem()
}

func (o NetworktemplateNetworksOutput) ToNetworktemplateNetworksOutput() NetworktemplateNetworksOutput {
	return o
}

func (o NetworktemplateNetworksOutput) ToNetworktemplateNetworksOutputWithContext(ctx context.Context) NetworktemplateNetworksOutput {
	return o
}

// whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required)
// NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
func (o NetworktemplateNetworksOutput) Isolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *bool { return v.Isolation }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateNetworksOutput) IsolationVlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *string { return v.IsolationVlanId }).(pulumi.StringPtrOutput)
}

// optional for pure switching, required when L3 / routing features are used
func (o NetworktemplateNetworksOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateNetworksOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) string { return v.VlanId }).(pulumi.StringOutput)
}

type NetworktemplateNetworksMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateNetworksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateNetworks)(nil)).Elem()
}

func (o NetworktemplateNetworksMapOutput) ToNetworktemplateNetworksMapOutput() NetworktemplateNetworksMapOutput {
	return o
}

func (o NetworktemplateNetworksMapOutput) ToNetworktemplateNetworksMapOutputWithContext(ctx context.Context) NetworktemplateNetworksMapOutput {
	return o
}

func (o NetworktemplateNetworksMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateNetworksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateNetworks {
		return vs[0].(map[string]NetworktemplateNetworks)[vs[1].(string)]
	}).(NetworktemplateNetworksOutput)
}

type NetworktemplatePortMirroring struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses []string `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses []string `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses []string `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork *string `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId *string `pulumi:"outputPortId"`
}

// NetworktemplatePortMirroringInput is an input type that accepts NetworktemplatePortMirroringArgs and NetworktemplatePortMirroringOutput values.
// You can construct a concrete instance of `NetworktemplatePortMirroringInput` via:
//
//	NetworktemplatePortMirroringArgs{...}
type NetworktemplatePortMirroringInput interface {
	pulumi.Input

	ToNetworktemplatePortMirroringOutput() NetworktemplatePortMirroringOutput
	ToNetworktemplatePortMirroringOutputWithContext(context.Context) NetworktemplatePortMirroringOutput
}

type NetworktemplatePortMirroringArgs struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses pulumi.StringArrayInput `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses pulumi.StringArrayInput `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses pulumi.StringArrayInput `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork pulumi.StringPtrInput `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId pulumi.StringPtrInput `pulumi:"outputPortId"`
}

func (NetworktemplatePortMirroringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortMirroring)(nil)).Elem()
}

func (i NetworktemplatePortMirroringArgs) ToNetworktemplatePortMirroringOutput() NetworktemplatePortMirroringOutput {
	return i.ToNetworktemplatePortMirroringOutputWithContext(context.Background())
}

func (i NetworktemplatePortMirroringArgs) ToNetworktemplatePortMirroringOutputWithContext(ctx context.Context) NetworktemplatePortMirroringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortMirroringOutput)
}

// NetworktemplatePortMirroringMapInput is an input type that accepts NetworktemplatePortMirroringMap and NetworktemplatePortMirroringMapOutput values.
// You can construct a concrete instance of `NetworktemplatePortMirroringMapInput` via:
//
//	NetworktemplatePortMirroringMap{ "key": NetworktemplatePortMirroringArgs{...} }
type NetworktemplatePortMirroringMapInput interface {
	pulumi.Input

	ToNetworktemplatePortMirroringMapOutput() NetworktemplatePortMirroringMapOutput
	ToNetworktemplatePortMirroringMapOutputWithContext(context.Context) NetworktemplatePortMirroringMapOutput
}

type NetworktemplatePortMirroringMap map[string]NetworktemplatePortMirroringInput

func (NetworktemplatePortMirroringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortMirroring)(nil)).Elem()
}

func (i NetworktemplatePortMirroringMap) ToNetworktemplatePortMirroringMapOutput() NetworktemplatePortMirroringMapOutput {
	return i.ToNetworktemplatePortMirroringMapOutputWithContext(context.Background())
}

func (i NetworktemplatePortMirroringMap) ToNetworktemplatePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplatePortMirroringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortMirroringMapOutput)
}

type NetworktemplatePortMirroringOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortMirroringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortMirroring)(nil)).Elem()
}

func (o NetworktemplatePortMirroringOutput) ToNetworktemplatePortMirroringOutput() NetworktemplatePortMirroringOutput {
	return o
}

func (o NetworktemplatePortMirroringOutput) ToNetworktemplatePortMirroringOutputWithContext(ctx context.Context) NetworktemplatePortMirroringOutput {
	return o
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplatePortMirroringOutput) InputNetworksIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) []string { return v.InputNetworksIngresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplatePortMirroringOutput) InputPortIdsEgresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) []string { return v.InputPortIdsEgresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplatePortMirroringOutput) InputPortIdsIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) []string { return v.InputPortIdsIngresses }).(pulumi.StringArrayOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplatePortMirroringOutput) OutputNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) *string { return v.OutputNetwork }).(pulumi.StringPtrOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplatePortMirroringOutput) OutputPortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) *string { return v.OutputPortId }).(pulumi.StringPtrOutput)
}

type NetworktemplatePortMirroringMapOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortMirroringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortMirroring)(nil)).Elem()
}

func (o NetworktemplatePortMirroringMapOutput) ToNetworktemplatePortMirroringMapOutput() NetworktemplatePortMirroringMapOutput {
	return o
}

func (o NetworktemplatePortMirroringMapOutput) ToNetworktemplatePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplatePortMirroringMapOutput {
	return o
}

func (o NetworktemplatePortMirroringMapOutput) MapIndex(k pulumi.StringInput) NetworktemplatePortMirroringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplatePortMirroring {
		return vs[0].(map[string]NetworktemplatePortMirroring)[vs[1].(string)]
	}).(NetworktemplatePortMirroringOutput)
}

type NetworktemplatePortUsages struct {
	// Only if `mode`==`trunk` whether to trunk all network/vlans
	AllNetworks *bool `pulumi:"allNetworks"`
	// Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state.
	//
	// When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
	AllowDhcpd *bool `pulumi:"allowDhcpd"`
	// Only if `mode`!=`dynamic`
	AllowMultipleSupplicants *bool `pulumi:"allowMultipleSupplicants"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
	BypassAuthWhenServerDown *bool `pulumi:"bypassAuthWhenServerDown"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
	BypassAuthWhenServerDownForUnkonwnClient *bool `pulumi:"bypassAuthWhenServerDownForUnkonwnClient"`
	// Only if `mode`!=`dynamic`
	Description *string `pulumi:"description"`
	// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
	DisableAutoneg *bool `pulumi:"disableAutoneg"`
	// Only if `mode`!=`dynamic` whether the port is disabled
	Disabled *bool `pulumi:"disabled"`
	// Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
	Duplex *string `pulumi:"duplex"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
	DynamicVlanNetworks []string `pulumi:"dynamicVlanNetworks"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
	EnableMacAuth *bool `pulumi:"enableMacAuth"`
	// Only if `mode`!=`dynamic`
	EnableQos *bool `pulumi:"enableQos"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
	GuestNetwork *string `pulumi:"guestNetwork"`
	// Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks
	// NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
	InterSwitchLink *bool `pulumi:"interSwitchLink"`
	// Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
	MacAuthOnly *bool `pulumi:"macAuthOnly"`
	// Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
	MacAuthProtocol *string `pulumi:"macAuthProtocol"`
	// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
	MacLimit *int `pulumi:"macLimit"`
	// `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
	Mode *string `pulumi:"mode"`
	// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
	Mtu *int `pulumi:"mtu"`
	// Only if `mode`==`trunk`, the list of network/vlans
	Networks []string `pulumi:"networks"`
	// Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
	PersistMac *bool `pulumi:"persistMac"`
	// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
	PoeDisabled *bool `pulumi:"poeDisabled"`
	// Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
	PortAuth *string `pulumi:"portAuth"`
	// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
	PortNetwork *string `pulumi:"portNetwork"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
	ReauthInterval *int `pulumi:"reauthInterval"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
	RejectedNetwork *string `pulumi:"rejectedNetwork"`
	// Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
	ResetDefaultWhen *string `pulumi:"resetDefaultWhen"`
	// Only if `mode`==`dynamic`
	Rules []NetworktemplatePortUsagesRule `pulumi:"rules"`
	// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
	Speed *string `pulumi:"speed"`
	// Switch storm control
	// Only if `mode`!=`dynamic`
	StormControl *NetworktemplatePortUsagesStormControl `pulumi:"stormControl"`
	// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
	StpEdge *bool `pulumi:"stpEdge"`
	// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
	VoipNetwork *string `pulumi:"voipNetwork"`
}

// NetworktemplatePortUsagesInput is an input type that accepts NetworktemplatePortUsagesArgs and NetworktemplatePortUsagesOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesInput` via:
//
//	NetworktemplatePortUsagesArgs{...}
type NetworktemplatePortUsagesInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesOutput() NetworktemplatePortUsagesOutput
	ToNetworktemplatePortUsagesOutputWithContext(context.Context) NetworktemplatePortUsagesOutput
}

type NetworktemplatePortUsagesArgs struct {
	// Only if `mode`==`trunk` whether to trunk all network/vlans
	AllNetworks pulumi.BoolPtrInput `pulumi:"allNetworks"`
	// Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state.
	//
	// When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
	AllowDhcpd pulumi.BoolPtrInput `pulumi:"allowDhcpd"`
	// Only if `mode`!=`dynamic`
	AllowMultipleSupplicants pulumi.BoolPtrInput `pulumi:"allowMultipleSupplicants"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
	BypassAuthWhenServerDown pulumi.BoolPtrInput `pulumi:"bypassAuthWhenServerDown"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
	BypassAuthWhenServerDownForUnkonwnClient pulumi.BoolPtrInput `pulumi:"bypassAuthWhenServerDownForUnkonwnClient"`
	// Only if `mode`!=`dynamic`
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
	DisableAutoneg pulumi.BoolPtrInput `pulumi:"disableAutoneg"`
	// Only if `mode`!=`dynamic` whether the port is disabled
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
	Duplex pulumi.StringPtrInput `pulumi:"duplex"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
	DynamicVlanNetworks pulumi.StringArrayInput `pulumi:"dynamicVlanNetworks"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
	EnableMacAuth pulumi.BoolPtrInput `pulumi:"enableMacAuth"`
	// Only if `mode`!=`dynamic`
	EnableQos pulumi.BoolPtrInput `pulumi:"enableQos"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
	GuestNetwork pulumi.StringPtrInput `pulumi:"guestNetwork"`
	// Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks
	// NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
	InterSwitchLink pulumi.BoolPtrInput `pulumi:"interSwitchLink"`
	// Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
	MacAuthOnly pulumi.BoolPtrInput `pulumi:"macAuthOnly"`
	// Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
	MacAuthProtocol pulumi.StringPtrInput `pulumi:"macAuthProtocol"`
	// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
	MacLimit pulumi.IntPtrInput `pulumi:"macLimit"`
	// `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// Only if `mode`==`trunk`, the list of network/vlans
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
	PersistMac pulumi.BoolPtrInput `pulumi:"persistMac"`
	// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
	PoeDisabled pulumi.BoolPtrInput `pulumi:"poeDisabled"`
	// Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
	PortAuth pulumi.StringPtrInput `pulumi:"portAuth"`
	// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
	PortNetwork pulumi.StringPtrInput `pulumi:"portNetwork"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
	ReauthInterval pulumi.IntPtrInput `pulumi:"reauthInterval"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
	RejectedNetwork pulumi.StringPtrInput `pulumi:"rejectedNetwork"`
	// Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
	ResetDefaultWhen pulumi.StringPtrInput `pulumi:"resetDefaultWhen"`
	// Only if `mode`==`dynamic`
	Rules NetworktemplatePortUsagesRuleArrayInput `pulumi:"rules"`
	// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
	Speed pulumi.StringPtrInput `pulumi:"speed"`
	// Switch storm control
	// Only if `mode`!=`dynamic`
	StormControl NetworktemplatePortUsagesStormControlPtrInput `pulumi:"stormControl"`
	// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
	StpEdge pulumi.BoolPtrInput `pulumi:"stpEdge"`
	// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
	VoipNetwork pulumi.StringPtrInput `pulumi:"voipNetwork"`
}

func (NetworktemplatePortUsagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsages)(nil)).Elem()
}

func (i NetworktemplatePortUsagesArgs) ToNetworktemplatePortUsagesOutput() NetworktemplatePortUsagesOutput {
	return i.ToNetworktemplatePortUsagesOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesArgs) ToNetworktemplatePortUsagesOutputWithContext(ctx context.Context) NetworktemplatePortUsagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesOutput)
}

// NetworktemplatePortUsagesMapInput is an input type that accepts NetworktemplatePortUsagesMap and NetworktemplatePortUsagesMapOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesMapInput` via:
//
//	NetworktemplatePortUsagesMap{ "key": NetworktemplatePortUsagesArgs{...} }
type NetworktemplatePortUsagesMapInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesMapOutput() NetworktemplatePortUsagesMapOutput
	ToNetworktemplatePortUsagesMapOutputWithContext(context.Context) NetworktemplatePortUsagesMapOutput
}

type NetworktemplatePortUsagesMap map[string]NetworktemplatePortUsagesInput

func (NetworktemplatePortUsagesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortUsages)(nil)).Elem()
}

func (i NetworktemplatePortUsagesMap) ToNetworktemplatePortUsagesMapOutput() NetworktemplatePortUsagesMapOutput {
	return i.ToNetworktemplatePortUsagesMapOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesMap) ToNetworktemplatePortUsagesMapOutputWithContext(ctx context.Context) NetworktemplatePortUsagesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesMapOutput)
}

type NetworktemplatePortUsagesOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsages)(nil)).Elem()
}

func (o NetworktemplatePortUsagesOutput) ToNetworktemplatePortUsagesOutput() NetworktemplatePortUsagesOutput {
	return o
}

func (o NetworktemplatePortUsagesOutput) ToNetworktemplatePortUsagesOutputWithContext(ctx context.Context) NetworktemplatePortUsagesOutput {
	return o
}

// Only if `mode`==`trunk` whether to trunk all network/vlans
func (o NetworktemplatePortUsagesOutput) AllNetworks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.AllNetworks }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state.
//
// When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
func (o NetworktemplatePortUsagesOutput) AllowDhcpd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.AllowDhcpd }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) AllowMultipleSupplicants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.AllowMultipleSupplicants }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
func (o NetworktemplatePortUsagesOutput) BypassAuthWhenServerDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.BypassAuthWhenServerDown }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
func (o NetworktemplatePortUsagesOutput) BypassAuthWhenServerDownForUnkonwnClient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.BypassAuthWhenServerDownForUnkonwnClient }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
func (o NetworktemplatePortUsagesOutput) DisableAutoneg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.DisableAutoneg }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` whether the port is disabled
func (o NetworktemplatePortUsagesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
func (o NetworktemplatePortUsagesOutput) Duplex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Duplex }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
func (o NetworktemplatePortUsagesOutput) DynamicVlanNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) []string { return v.DynamicVlanNetworks }).(pulumi.StringArrayOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
func (o NetworktemplatePortUsagesOutput) EnableMacAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.EnableMacAuth }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) EnableQos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.EnableQos }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
func (o NetworktemplatePortUsagesOutput) GuestNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.GuestNetwork }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks
// NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
func (o NetworktemplatePortUsagesOutput) InterSwitchLink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.InterSwitchLink }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
func (o NetworktemplatePortUsagesOutput) MacAuthOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.MacAuthOnly }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
func (o NetworktemplatePortUsagesOutput) MacAuthProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.MacAuthProtocol }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
func (o NetworktemplatePortUsagesOutput) MacLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *int { return v.MacLimit }).(pulumi.IntPtrOutput)
}

// `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
func (o NetworktemplatePortUsagesOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
func (o NetworktemplatePortUsagesOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Only if `mode`==`trunk`, the list of network/vlans
func (o NetworktemplatePortUsagesOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
func (o NetworktemplatePortUsagesOutput) PersistMac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.PersistMac }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
func (o NetworktemplatePortUsagesOutput) PoeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.PoeDisabled }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
func (o NetworktemplatePortUsagesOutput) PortAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.PortAuth }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
func (o NetworktemplatePortUsagesOutput) PortNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.PortNetwork }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
func (o NetworktemplatePortUsagesOutput) ReauthInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *int { return v.ReauthInterval }).(pulumi.IntPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
func (o NetworktemplatePortUsagesOutput) RejectedNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.RejectedNetwork }).(pulumi.StringPtrOutput)
}

// Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
func (o NetworktemplatePortUsagesOutput) ResetDefaultWhen() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.ResetDefaultWhen }).(pulumi.StringPtrOutput)
}

// Only if `mode`==`dynamic`
func (o NetworktemplatePortUsagesOutput) Rules() NetworktemplatePortUsagesRuleArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) []NetworktemplatePortUsagesRule { return v.Rules }).(NetworktemplatePortUsagesRuleArrayOutput)
}

// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
func (o NetworktemplatePortUsagesOutput) Speed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Speed }).(pulumi.StringPtrOutput)
}

// Switch storm control
// Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) StormControl() NetworktemplatePortUsagesStormControlPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *NetworktemplatePortUsagesStormControl { return v.StormControl }).(NetworktemplatePortUsagesStormControlPtrOutput)
}

// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
func (o NetworktemplatePortUsagesOutput) StpEdge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.StpEdge }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
func (o NetworktemplatePortUsagesOutput) VoipNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.VoipNetwork }).(pulumi.StringPtrOutput)
}

type NetworktemplatePortUsagesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortUsages)(nil)).Elem()
}

func (o NetworktemplatePortUsagesMapOutput) ToNetworktemplatePortUsagesMapOutput() NetworktemplatePortUsagesMapOutput {
	return o
}

func (o NetworktemplatePortUsagesMapOutput) ToNetworktemplatePortUsagesMapOutputWithContext(ctx context.Context) NetworktemplatePortUsagesMapOutput {
	return o
}

func (o NetworktemplatePortUsagesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplatePortUsagesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplatePortUsages {
		return vs[0].(map[string]NetworktemplatePortUsages)[vs[1].(string)]
	}).(NetworktemplatePortUsagesOutput)
}

type NetworktemplatePortUsagesRule struct {
	Equals *string `pulumi:"equals"`
	// use `equalsAny` to match any item in a list
	EqualsAnies []string `pulumi:"equalsAnies"`
	// "[0:3]":"abcdef" > "abc"
	// "split(.)[1]": "a.b.c" > "b"
	// "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
	Expression *string `pulumi:"expression"`
	// enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
	Src string `pulumi:"src"`
	// `portUsage` name
	Usage *string `pulumi:"usage"`
}

// NetworktemplatePortUsagesRuleInput is an input type that accepts NetworktemplatePortUsagesRuleArgs and NetworktemplatePortUsagesRuleOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesRuleInput` via:
//
//	NetworktemplatePortUsagesRuleArgs{...}
type NetworktemplatePortUsagesRuleInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesRuleOutput() NetworktemplatePortUsagesRuleOutput
	ToNetworktemplatePortUsagesRuleOutputWithContext(context.Context) NetworktemplatePortUsagesRuleOutput
}

type NetworktemplatePortUsagesRuleArgs struct {
	Equals pulumi.StringPtrInput `pulumi:"equals"`
	// use `equalsAny` to match any item in a list
	EqualsAnies pulumi.StringArrayInput `pulumi:"equalsAnies"`
	// "[0:3]":"abcdef" > "abc"
	// "split(.)[1]": "a.b.c" > "b"
	// "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
	Src pulumi.StringInput `pulumi:"src"`
	// `portUsage` name
	Usage pulumi.StringPtrInput `pulumi:"usage"`
}

func (NetworktemplatePortUsagesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (i NetworktemplatePortUsagesRuleArgs) ToNetworktemplatePortUsagesRuleOutput() NetworktemplatePortUsagesRuleOutput {
	return i.ToNetworktemplatePortUsagesRuleOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesRuleArgs) ToNetworktemplatePortUsagesRuleOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesRuleOutput)
}

// NetworktemplatePortUsagesRuleArrayInput is an input type that accepts NetworktemplatePortUsagesRuleArray and NetworktemplatePortUsagesRuleArrayOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesRuleArrayInput` via:
//
//	NetworktemplatePortUsagesRuleArray{ NetworktemplatePortUsagesRuleArgs{...} }
type NetworktemplatePortUsagesRuleArrayInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesRuleArrayOutput() NetworktemplatePortUsagesRuleArrayOutput
	ToNetworktemplatePortUsagesRuleArrayOutputWithContext(context.Context) NetworktemplatePortUsagesRuleArrayOutput
}

type NetworktemplatePortUsagesRuleArray []NetworktemplatePortUsagesRuleInput

func (NetworktemplatePortUsagesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (i NetworktemplatePortUsagesRuleArray) ToNetworktemplatePortUsagesRuleArrayOutput() NetworktemplatePortUsagesRuleArrayOutput {
	return i.ToNetworktemplatePortUsagesRuleArrayOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesRuleArray) ToNetworktemplatePortUsagesRuleArrayOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesRuleArrayOutput)
}

type NetworktemplatePortUsagesRuleOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (o NetworktemplatePortUsagesRuleOutput) ToNetworktemplatePortUsagesRuleOutput() NetworktemplatePortUsagesRuleOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleOutput) ToNetworktemplatePortUsagesRuleOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleOutput) Equals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) *string { return v.Equals }).(pulumi.StringPtrOutput)
}

// use `equalsAny` to match any item in a list
func (o NetworktemplatePortUsagesRuleOutput) EqualsAnies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) []string { return v.EqualsAnies }).(pulumi.StringArrayOutput)
}

// "[0:3]":"abcdef" > "abc"
// "split(.)[1]": "a.b.c" > "b"
// "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
func (o NetworktemplatePortUsagesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
func (o NetworktemplatePortUsagesRuleOutput) Src() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) string { return v.Src }).(pulumi.StringOutput)
}

// `portUsage` name
func (o NetworktemplatePortUsagesRuleOutput) Usage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) *string { return v.Usage }).(pulumi.StringPtrOutput)
}

type NetworktemplatePortUsagesRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (o NetworktemplatePortUsagesRuleArrayOutput) ToNetworktemplatePortUsagesRuleArrayOutput() NetworktemplatePortUsagesRuleArrayOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleArrayOutput) ToNetworktemplatePortUsagesRuleArrayOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleArrayOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleArrayOutput) Index(i pulumi.IntInput) NetworktemplatePortUsagesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplatePortUsagesRule {
		return vs[0].([]NetworktemplatePortUsagesRule)[vs[1].(int)]
	}).(NetworktemplatePortUsagesRuleOutput)
}

type NetworktemplatePortUsagesStormControl struct {
	// whether to disable storm control on broadcast traffic
	NoBroadcast *bool `pulumi:"noBroadcast"`
	// whether to disable storm control on multicast traffic
	NoMulticast *bool `pulumi:"noMulticast"`
	// whether to disable storm control on registered multicast traffic
	NoRegisteredMulticast *bool `pulumi:"noRegisteredMulticast"`
	// whether to disable storm control on unknown unicast traffic
	NoUnknownUnicast *bool `pulumi:"noUnknownUnicast"`
	// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
	Percentage *int `pulumi:"percentage"`
}

// NetworktemplatePortUsagesStormControlInput is an input type that accepts NetworktemplatePortUsagesStormControlArgs and NetworktemplatePortUsagesStormControlOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesStormControlInput` via:
//
//	NetworktemplatePortUsagesStormControlArgs{...}
type NetworktemplatePortUsagesStormControlInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesStormControlOutput() NetworktemplatePortUsagesStormControlOutput
	ToNetworktemplatePortUsagesStormControlOutputWithContext(context.Context) NetworktemplatePortUsagesStormControlOutput
}

type NetworktemplatePortUsagesStormControlArgs struct {
	// whether to disable storm control on broadcast traffic
	NoBroadcast pulumi.BoolPtrInput `pulumi:"noBroadcast"`
	// whether to disable storm control on multicast traffic
	NoMulticast pulumi.BoolPtrInput `pulumi:"noMulticast"`
	// whether to disable storm control on registered multicast traffic
	NoRegisteredMulticast pulumi.BoolPtrInput `pulumi:"noRegisteredMulticast"`
	// whether to disable storm control on unknown unicast traffic
	NoUnknownUnicast pulumi.BoolPtrInput `pulumi:"noUnknownUnicast"`
	// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (NetworktemplatePortUsagesStormControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlOutput() NetworktemplatePortUsagesStormControlOutput {
	return i.ToNetworktemplatePortUsagesStormControlOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesStormControlOutput)
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return i.ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesStormControlOutput).ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx)
}

// NetworktemplatePortUsagesStormControlPtrInput is an input type that accepts NetworktemplatePortUsagesStormControlArgs, NetworktemplatePortUsagesStormControlPtr and NetworktemplatePortUsagesStormControlPtrOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesStormControlPtrInput` via:
//
//	        NetworktemplatePortUsagesStormControlArgs{...}
//
//	or:
//
//	        nil
type NetworktemplatePortUsagesStormControlPtrInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput
	ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Context) NetworktemplatePortUsagesStormControlPtrOutput
}

type networktemplatePortUsagesStormControlPtrType NetworktemplatePortUsagesStormControlArgs

func NetworktemplatePortUsagesStormControlPtr(v *NetworktemplatePortUsagesStormControlArgs) NetworktemplatePortUsagesStormControlPtrInput {
	return (*networktemplatePortUsagesStormControlPtrType)(v)
}

func (*networktemplatePortUsagesStormControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (i *networktemplatePortUsagesStormControlPtrType) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return i.ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Background())
}

func (i *networktemplatePortUsagesStormControlPtrType) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesStormControlPtrOutput)
}

type NetworktemplatePortUsagesStormControlOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesStormControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlOutput() NetworktemplatePortUsagesStormControlOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return o.ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Background())
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplatePortUsagesStormControl) *NetworktemplatePortUsagesStormControl {
		return &v
	}).(NetworktemplatePortUsagesStormControlPtrOutput)
}

// whether to disable storm control on broadcast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoBroadcast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoBroadcast }).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on multicast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoMulticast }).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on registered multicast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoRegisteredMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoRegisteredMulticast }).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on unknown unicast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoUnknownUnicast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoUnknownUnicast }).(pulumi.BoolPtrOutput)
}

// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
func (o NetworktemplatePortUsagesStormControlOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type NetworktemplatePortUsagesStormControlPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesStormControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (o NetworktemplatePortUsagesStormControlPtrOutput) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlPtrOutput) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlPtrOutput) Elem() NetworktemplatePortUsagesStormControlOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) NetworktemplatePortUsagesStormControl {
		if v != nil {
			return *v
		}
		var ret NetworktemplatePortUsagesStormControl
		return ret
	}).(NetworktemplatePortUsagesStormControlOutput)
}

// whether to disable storm control on broadcast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoBroadcast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoBroadcast
	}).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on multicast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoMulticast
	}).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on registered multicast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoRegisteredMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoRegisteredMulticast
	}).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on unknown unicast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoUnknownUnicast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoUnknownUnicast
	}).(pulumi.BoolPtrOutput)
}

// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
func (o NetworktemplatePortUsagesStormControlPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

type NetworktemplateRadiusConfig struct {
	// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
	AcctInterimInterval *int                                    `pulumi:"acctInterimInterval"`
	AcctServers         []NetworktemplateRadiusConfigAcctServer `pulumi:"acctServers"`
	AuthServers         []NetworktemplateRadiusConfigAuthServer `pulumi:"authServers"`
	// radius auth session retries
	AuthServersRetries *int `pulumi:"authServersRetries"`
	// radius auth session timeout
	AuthServersTimeout *int  `pulumi:"authServersTimeout"`
	CoaEnabled         *bool `pulumi:"coaEnabled"`
	CoaPort            *int  `pulumi:"coaPort"`
	// use `network`or `sourceIp`
	// which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
	Network *string `pulumi:"network"`
	// use `network`or `sourceIp`
	SourceIp *string `pulumi:"sourceIp"`
}

// NetworktemplateRadiusConfigInput is an input type that accepts NetworktemplateRadiusConfigArgs and NetworktemplateRadiusConfigOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigInput` via:
//
//	NetworktemplateRadiusConfigArgs{...}
type NetworktemplateRadiusConfigInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigOutput() NetworktemplateRadiusConfigOutput
	ToNetworktemplateRadiusConfigOutputWithContext(context.Context) NetworktemplateRadiusConfigOutput
}

type NetworktemplateRadiusConfigArgs struct {
	// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
	AcctInterimInterval pulumi.IntPtrInput                              `pulumi:"acctInterimInterval"`
	AcctServers         NetworktemplateRadiusConfigAcctServerArrayInput `pulumi:"acctServers"`
	AuthServers         NetworktemplateRadiusConfigAuthServerArrayInput `pulumi:"authServers"`
	// radius auth session retries
	AuthServersRetries pulumi.IntPtrInput `pulumi:"authServersRetries"`
	// radius auth session timeout
	AuthServersTimeout pulumi.IntPtrInput  `pulumi:"authServersTimeout"`
	CoaEnabled         pulumi.BoolPtrInput `pulumi:"coaEnabled"`
	CoaPort            pulumi.IntPtrInput  `pulumi:"coaPort"`
	// use `network`or `sourceIp`
	// which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
	Network pulumi.StringPtrInput `pulumi:"network"`
	// use `network`or `sourceIp`
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
}

func (NetworktemplateRadiusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfig)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigOutput() NetworktemplateRadiusConfigOutput {
	return i.ToNetworktemplateRadiusConfigOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigOutput)
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return i.ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigOutput).ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx)
}

// NetworktemplateRadiusConfigPtrInput is an input type that accepts NetworktemplateRadiusConfigArgs, NetworktemplateRadiusConfigPtr and NetworktemplateRadiusConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigPtrInput` via:
//
//	        NetworktemplateRadiusConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRadiusConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput
	ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Context) NetworktemplateRadiusConfigPtrOutput
}

type networktemplateRadiusConfigPtrType NetworktemplateRadiusConfigArgs

func NetworktemplateRadiusConfigPtr(v *NetworktemplateRadiusConfigArgs) NetworktemplateRadiusConfigPtrInput {
	return (*networktemplateRadiusConfigPtrType)(v)
}

func (*networktemplateRadiusConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRadiusConfig)(nil)).Elem()
}

func (i *networktemplateRadiusConfigPtrType) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return i.ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateRadiusConfigPtrType) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigPtrOutput)
}

type NetworktemplateRadiusConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfig)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigOutput() NetworktemplateRadiusConfigOutput {
	return o
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigOutput {
	return o
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return o.ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRadiusConfig) *NetworktemplateRadiusConfig {
		return &v
	}).(NetworktemplateRadiusConfigPtrOutput)
}

// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
func (o NetworktemplateRadiusConfigOutput) AcctInterimInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *int { return v.AcctInterimInterval }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRadiusConfigOutput) AcctServers() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAcctServer { return v.AcctServers }).(NetworktemplateRadiusConfigAcctServerArrayOutput)
}

func (o NetworktemplateRadiusConfigOutput) AuthServers() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAuthServer { return v.AuthServers }).(NetworktemplateRadiusConfigAuthServerArrayOutput)
}

// radius auth session retries
func (o NetworktemplateRadiusConfigOutput) AuthServersRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *int { return v.AuthServersRetries }).(pulumi.IntPtrOutput)
}

// radius auth session timeout
func (o NetworktemplateRadiusConfigOutput) AuthServersTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *int { return v.AuthServersTimeout }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRadiusConfigOutput) CoaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *bool { return v.CoaEnabled }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRadiusConfigOutput) CoaPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *int { return v.CoaPort }).(pulumi.IntPtrOutput)
}

// use `network`or `sourceIp`
// which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
func (o NetworktemplateRadiusConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// use `network`or `sourceIp`
func (o NetworktemplateRadiusConfigOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

type NetworktemplateRadiusConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRadiusConfig)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigPtrOutput) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return o
}

func (o NetworktemplateRadiusConfigPtrOutput) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return o
}

func (o NetworktemplateRadiusConfigPtrOutput) Elem() NetworktemplateRadiusConfigOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) NetworktemplateRadiusConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRadiusConfig
		return ret
	}).(NetworktemplateRadiusConfigOutput)
}

// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
func (o NetworktemplateRadiusConfigPtrOutput) AcctInterimInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *int {
		if v == nil {
			return nil
		}
		return v.AcctInterimInterval
	}).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRadiusConfigPtrOutput) AcctServers() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAcctServer {
		if v == nil {
			return nil
		}
		return v.AcctServers
	}).(NetworktemplateRadiusConfigAcctServerArrayOutput)
}

func (o NetworktemplateRadiusConfigPtrOutput) AuthServers() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAuthServer {
		if v == nil {
			return nil
		}
		return v.AuthServers
	}).(NetworktemplateRadiusConfigAuthServerArrayOutput)
}

// radius auth session retries
func (o NetworktemplateRadiusConfigPtrOutput) AuthServersRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *int {
		if v == nil {
			return nil
		}
		return v.AuthServersRetries
	}).(pulumi.IntPtrOutput)
}

// radius auth session timeout
func (o NetworktemplateRadiusConfigPtrOutput) AuthServersTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *int {
		if v == nil {
			return nil
		}
		return v.AuthServersTimeout
	}).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRadiusConfigPtrOutput) CoaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CoaEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRadiusConfigPtrOutput) CoaPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *int {
		if v == nil {
			return nil
		}
		return v.CoaPort
	}).(pulumi.IntPtrOutput)
}

// use `network`or `sourceIp`
// which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
func (o NetworktemplateRadiusConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// use `network`or `sourceIp`
func (o NetworktemplateRadiusConfigPtrOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *string {
		if v == nil {
			return nil
		}
		return v.SourceIp
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateRadiusConfigAcctServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port *int `pulumi:"port"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// NetworktemplateRadiusConfigAcctServerInput is an input type that accepts NetworktemplateRadiusConfigAcctServerArgs and NetworktemplateRadiusConfigAcctServerOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAcctServerInput` via:
//
//	NetworktemplateRadiusConfigAcctServerArgs{...}
type NetworktemplateRadiusConfigAcctServerInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAcctServerOutput() NetworktemplateRadiusConfigAcctServerOutput
	ToNetworktemplateRadiusConfigAcctServerOutputWithContext(context.Context) NetworktemplateRadiusConfigAcctServerOutput
}

type NetworktemplateRadiusConfigAcctServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (NetworktemplateRadiusConfigAcctServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAcctServerArgs) ToNetworktemplateRadiusConfigAcctServerOutput() NetworktemplateRadiusConfigAcctServerOutput {
	return i.ToNetworktemplateRadiusConfigAcctServerOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAcctServerArgs) ToNetworktemplateRadiusConfigAcctServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAcctServerOutput)
}

// NetworktemplateRadiusConfigAcctServerArrayInput is an input type that accepts NetworktemplateRadiusConfigAcctServerArray and NetworktemplateRadiusConfigAcctServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAcctServerArrayInput` via:
//
//	NetworktemplateRadiusConfigAcctServerArray{ NetworktemplateRadiusConfigAcctServerArgs{...} }
type NetworktemplateRadiusConfigAcctServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAcctServerArrayOutput() NetworktemplateRadiusConfigAcctServerArrayOutput
	ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(context.Context) NetworktemplateRadiusConfigAcctServerArrayOutput
}

type NetworktemplateRadiusConfigAcctServerArray []NetworktemplateRadiusConfigAcctServerInput

func (NetworktemplateRadiusConfigAcctServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAcctServerArray) ToNetworktemplateRadiusConfigAcctServerArrayOutput() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return i.ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAcctServerArray) ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAcctServerArrayOutput)
}

type NetworktemplateRadiusConfigAcctServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAcctServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAcctServerOutput) ToNetworktemplateRadiusConfigAcctServerOutput() NetworktemplateRadiusConfigAcctServerOutput {
	return o
}

func (o NetworktemplateRadiusConfigAcctServerOutput) ToNetworktemplateRadiusConfigAcctServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o NetworktemplateRadiusConfigAcctServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Acct port of RADIUS server
func (o NetworktemplateRadiusConfigAcctServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// secret of RADIUS server
func (o NetworktemplateRadiusConfigAcctServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) string { return v.Secret }).(pulumi.StringOutput)
}

type NetworktemplateRadiusConfigAcctServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAcctServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAcctServerArrayOutput) ToNetworktemplateRadiusConfigAcctServerArrayOutput() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAcctServerArrayOutput) ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAcctServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateRadiusConfigAcctServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRadiusConfigAcctServer {
		return vs[0].([]NetworktemplateRadiusConfigAcctServer)[vs[1].(int)]
	}).(NetworktemplateRadiusConfigAcctServerOutput)
}

type NetworktemplateRadiusConfigAuthServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port *int `pulumi:"port"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// NetworktemplateRadiusConfigAuthServerInput is an input type that accepts NetworktemplateRadiusConfigAuthServerArgs and NetworktemplateRadiusConfigAuthServerOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAuthServerInput` via:
//
//	NetworktemplateRadiusConfigAuthServerArgs{...}
type NetworktemplateRadiusConfigAuthServerInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAuthServerOutput() NetworktemplateRadiusConfigAuthServerOutput
	ToNetworktemplateRadiusConfigAuthServerOutputWithContext(context.Context) NetworktemplateRadiusConfigAuthServerOutput
}

type NetworktemplateRadiusConfigAuthServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (NetworktemplateRadiusConfigAuthServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAuthServerArgs) ToNetworktemplateRadiusConfigAuthServerOutput() NetworktemplateRadiusConfigAuthServerOutput {
	return i.ToNetworktemplateRadiusConfigAuthServerOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAuthServerArgs) ToNetworktemplateRadiusConfigAuthServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAuthServerOutput)
}

// NetworktemplateRadiusConfigAuthServerArrayInput is an input type that accepts NetworktemplateRadiusConfigAuthServerArray and NetworktemplateRadiusConfigAuthServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAuthServerArrayInput` via:
//
//	NetworktemplateRadiusConfigAuthServerArray{ NetworktemplateRadiusConfigAuthServerArgs{...} }
type NetworktemplateRadiusConfigAuthServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAuthServerArrayOutput() NetworktemplateRadiusConfigAuthServerArrayOutput
	ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(context.Context) NetworktemplateRadiusConfigAuthServerArrayOutput
}

type NetworktemplateRadiusConfigAuthServerArray []NetworktemplateRadiusConfigAuthServerInput

func (NetworktemplateRadiusConfigAuthServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAuthServerArray) ToNetworktemplateRadiusConfigAuthServerArrayOutput() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return i.ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAuthServerArray) ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAuthServerArrayOutput)
}

type NetworktemplateRadiusConfigAuthServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAuthServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAuthServerOutput) ToNetworktemplateRadiusConfigAuthServerOutput() NetworktemplateRadiusConfigAuthServerOutput {
	return o
}

func (o NetworktemplateRadiusConfigAuthServerOutput) ToNetworktemplateRadiusConfigAuthServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o NetworktemplateRadiusConfigAuthServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Auth port of RADIUS server
func (o NetworktemplateRadiusConfigAuthServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// secret of RADIUS server
func (o NetworktemplateRadiusConfigAuthServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) string { return v.Secret }).(pulumi.StringOutput)
}

type NetworktemplateRadiusConfigAuthServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAuthServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAuthServerArrayOutput) ToNetworktemplateRadiusConfigAuthServerArrayOutput() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAuthServerArrayOutput) ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAuthServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateRadiusConfigAuthServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRadiusConfigAuthServer {
		return vs[0].([]NetworktemplateRadiusConfigAuthServer)[vs[1].(int)]
	}).(NetworktemplateRadiusConfigAuthServerOutput)
}

type NetworktemplateRemoteSyslog struct {
	Archive *NetworktemplateRemoteSyslogArchive `pulumi:"archive"`
	Console *NetworktemplateRemoteSyslogConsole `pulumi:"console"`
	Enabled *bool                               `pulumi:"enabled"`
	Files   []NetworktemplateRemoteSyslogFile   `pulumi:"files"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	Network          *string                             `pulumi:"network"`
	SendToAllServers *bool                               `pulumi:"sendToAllServers"`
	Servers          []NetworktemplateRemoteSyslogServer `pulumi:"servers"`
	// enum: `millisecond`, `year`, `year millisecond`
	TimeFormat *string                           `pulumi:"timeFormat"`
	Users      []NetworktemplateRemoteSyslogUser `pulumi:"users"`
}

// NetworktemplateRemoteSyslogInput is an input type that accepts NetworktemplateRemoteSyslogArgs and NetworktemplateRemoteSyslogOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogInput` via:
//
//	NetworktemplateRemoteSyslogArgs{...}
type NetworktemplateRemoteSyslogInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogOutput() NetworktemplateRemoteSyslogOutput
	ToNetworktemplateRemoteSyslogOutputWithContext(context.Context) NetworktemplateRemoteSyslogOutput
}

type NetworktemplateRemoteSyslogArgs struct {
	Archive NetworktemplateRemoteSyslogArchivePtrInput `pulumi:"archive"`
	Console NetworktemplateRemoteSyslogConsolePtrInput `pulumi:"console"`
	Enabled pulumi.BoolPtrInput                        `pulumi:"enabled"`
	Files   NetworktemplateRemoteSyslogFileArrayInput  `pulumi:"files"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	Network          pulumi.StringPtrInput                       `pulumi:"network"`
	SendToAllServers pulumi.BoolPtrInput                         `pulumi:"sendToAllServers"`
	Servers          NetworktemplateRemoteSyslogServerArrayInput `pulumi:"servers"`
	// enum: `millisecond`, `year`, `year millisecond`
	TimeFormat pulumi.StringPtrInput                     `pulumi:"timeFormat"`
	Users      NetworktemplateRemoteSyslogUserArrayInput `pulumi:"users"`
}

func (NetworktemplateRemoteSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogOutput() NetworktemplateRemoteSyslogOutput {
	return i.ToNetworktemplateRemoteSyslogOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogOutput)
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return i.ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogOutput).ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogPtrInput is an input type that accepts NetworktemplateRemoteSyslogArgs, NetworktemplateRemoteSyslogPtr and NetworktemplateRemoteSyslogPtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogPtrInput` via:
//
//	        NetworktemplateRemoteSyslogArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogPtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput
	ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogPtrOutput
}

type networktemplateRemoteSyslogPtrType NetworktemplateRemoteSyslogArgs

func NetworktemplateRemoteSyslogPtr(v *NetworktemplateRemoteSyslogArgs) NetworktemplateRemoteSyslogPtrInput {
	return (*networktemplateRemoteSyslogPtrType)(v)
}

func (*networktemplateRemoteSyslogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogPtrType) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return i.ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogPtrType) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogPtrOutput)
}

type NetworktemplateRemoteSyslogOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogOutput() NetworktemplateRemoteSyslogOutput {
	return o
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogOutput {
	return o
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return o.ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslog {
		return &v
	}).(NetworktemplateRemoteSyslogPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Archive() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogArchive { return v.Archive }).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Console() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogConsole { return v.Console }).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Files() NetworktemplateRemoteSyslogFileArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogFile { return v.Files }).(NetworktemplateRemoteSyslogFileArrayOutput)
}

// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
func (o NetworktemplateRemoteSyslogOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) SendToAllServers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *bool { return v.SendToAllServers }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Servers() NetworktemplateRemoteSyslogServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogServer { return v.Servers }).(NetworktemplateRemoteSyslogServerArrayOutput)
}

// enum: `millisecond`, `year`, `year millisecond`
func (o NetworktemplateRemoteSyslogOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Users() NetworktemplateRemoteSyslogUserArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogUser { return v.Users }).(NetworktemplateRemoteSyslogUserArrayOutput)
}

type NetworktemplateRemoteSyslogPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogPtrOutput) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogPtrOutput) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogPtrOutput) Elem() NetworktemplateRemoteSyslogOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) NetworktemplateRemoteSyslog {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslog
		return ret
	}).(NetworktemplateRemoteSyslogOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Archive() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogArchive {
		if v == nil {
			return nil
		}
		return v.Archive
	}).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Console() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogConsole {
		if v == nil {
			return nil
		}
		return v.Console
	}).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Files() NetworktemplateRemoteSyslogFileArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogFile {
		if v == nil {
			return nil
		}
		return v.Files
	}).(NetworktemplateRemoteSyslogFileArrayOutput)
}

// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
func (o NetworktemplateRemoteSyslogPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) SendToAllServers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *bool {
		if v == nil {
			return nil
		}
		return v.SendToAllServers
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Servers() NetworktemplateRemoteSyslogServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogServer {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(NetworktemplateRemoteSyslogServerArrayOutput)
}

// enum: `millisecond`, `year`, `year millisecond`
func (o NetworktemplateRemoteSyslogPtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Users() NetworktemplateRemoteSyslogUserArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(NetworktemplateRemoteSyslogUserArrayOutput)
}

type NetworktemplateRemoteSyslogArchive struct {
	Files *int    `pulumi:"files"`
	Size  *string `pulumi:"size"`
}

// NetworktemplateRemoteSyslogArchiveInput is an input type that accepts NetworktemplateRemoteSyslogArchiveArgs and NetworktemplateRemoteSyslogArchiveOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogArchiveInput` via:
//
//	NetworktemplateRemoteSyslogArchiveArgs{...}
type NetworktemplateRemoteSyslogArchiveInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogArchiveOutput() NetworktemplateRemoteSyslogArchiveOutput
	ToNetworktemplateRemoteSyslogArchiveOutputWithContext(context.Context) NetworktemplateRemoteSyslogArchiveOutput
}

type NetworktemplateRemoteSyslogArchiveArgs struct {
	Files pulumi.IntPtrInput    `pulumi:"files"`
	Size  pulumi.StringPtrInput `pulumi:"size"`
}

func (NetworktemplateRemoteSyslogArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchiveOutput() NetworktemplateRemoteSyslogArchiveOutput {
	return i.ToNetworktemplateRemoteSyslogArchiveOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogArchiveOutput)
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogArchiveOutput).ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogArchivePtrInput is an input type that accepts NetworktemplateRemoteSyslogArchiveArgs, NetworktemplateRemoteSyslogArchivePtr and NetworktemplateRemoteSyslogArchivePtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogArchivePtrInput` via:
//
//	        NetworktemplateRemoteSyslogArchiveArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogArchivePtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput
	ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogArchivePtrOutput
}

type networktemplateRemoteSyslogArchivePtrType NetworktemplateRemoteSyslogArchiveArgs

func NetworktemplateRemoteSyslogArchivePtr(v *NetworktemplateRemoteSyslogArchiveArgs) NetworktemplateRemoteSyslogArchivePtrInput {
	return (*networktemplateRemoteSyslogArchivePtrType)(v)
}

func (*networktemplateRemoteSyslogArchivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogArchivePtrType) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogArchivePtrType) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

type NetworktemplateRemoteSyslogArchiveOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchiveOutput() NetworktemplateRemoteSyslogArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslogArchive) *NetworktemplateRemoteSyslogArchive {
		return &v
	}).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogArchiveOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogArchive) *int { return v.Files }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogArchiveOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogArchive) *string { return v.Size }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogArchivePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogArchivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) Elem() NetworktemplateRemoteSyslogArchiveOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogArchive) NetworktemplateRemoteSyslogArchive {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslogArchive
		return ret
	}).(NetworktemplateRemoteSyslogArchiveOutput)
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogArchive) *int {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogArchive) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogConsole struct {
	Contents []NetworktemplateRemoteSyslogConsoleContent `pulumi:"contents"`
}

// NetworktemplateRemoteSyslogConsoleInput is an input type that accepts NetworktemplateRemoteSyslogConsoleArgs and NetworktemplateRemoteSyslogConsoleOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsoleInput` via:
//
//	NetworktemplateRemoteSyslogConsoleArgs{...}
type NetworktemplateRemoteSyslogConsoleInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsoleOutput() NetworktemplateRemoteSyslogConsoleOutput
	ToNetworktemplateRemoteSyslogConsoleOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsoleOutput
}

type NetworktemplateRemoteSyslogConsoleArgs struct {
	Contents NetworktemplateRemoteSyslogConsoleContentArrayInput `pulumi:"contents"`
}

func (NetworktemplateRemoteSyslogConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsoleOutput() NetworktemplateRemoteSyslogConsoleOutput {
	return i.ToNetworktemplateRemoteSyslogConsoleOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsoleOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleOutput)
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return i.ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleOutput).ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogConsolePtrInput is an input type that accepts NetworktemplateRemoteSyslogConsoleArgs, NetworktemplateRemoteSyslogConsolePtr and NetworktemplateRemoteSyslogConsolePtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsolePtrInput` via:
//
//	        NetworktemplateRemoteSyslogConsoleArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogConsolePtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput
	ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsolePtrOutput
}

type networktemplateRemoteSyslogConsolePtrType NetworktemplateRemoteSyslogConsoleArgs

func NetworktemplateRemoteSyslogConsolePtr(v *NetworktemplateRemoteSyslogConsoleArgs) NetworktemplateRemoteSyslogConsolePtrInput {
	return (*networktemplateRemoteSyslogConsolePtrType)(v)
}

func (*networktemplateRemoteSyslogConsolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogConsolePtrType) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return i.ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogConsolePtrType) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

type NetworktemplateRemoteSyslogConsoleOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsoleOutput() NetworktemplateRemoteSyslogConsoleOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsoleOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslogConsole) *NetworktemplateRemoteSyslogConsole {
		return &v
	}).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

func (o NetworktemplateRemoteSyslogConsoleOutput) Contents() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogConsole) []NetworktemplateRemoteSyslogConsoleContent {
		return v.Contents
	}).(NetworktemplateRemoteSyslogConsoleContentArrayOutput)
}

type NetworktemplateRemoteSyslogConsolePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) Elem() NetworktemplateRemoteSyslogConsoleOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogConsole) NetworktemplateRemoteSyslogConsole {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslogConsole
		return ret
	}).(NetworktemplateRemoteSyslogConsoleOutput)
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) Contents() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogConsole) []NetworktemplateRemoteSyslogConsoleContent {
		if v == nil {
			return nil
		}
		return v.Contents
	}).(NetworktemplateRemoteSyslogConsoleContentArrayOutput)
}

type NetworktemplateRemoteSyslogConsoleContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogConsoleContentInput is an input type that accepts NetworktemplateRemoteSyslogConsoleContentArgs and NetworktemplateRemoteSyslogConsoleContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsoleContentInput` via:
//
//	NetworktemplateRemoteSyslogConsoleContentArgs{...}
type NetworktemplateRemoteSyslogConsoleContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsoleContentOutput() NetworktemplateRemoteSyslogConsoleContentOutput
	ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsoleContentOutput
}

type NetworktemplateRemoteSyslogConsoleContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogConsoleContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogConsoleContentArgs) ToNetworktemplateRemoteSyslogConsoleContentOutput() NetworktemplateRemoteSyslogConsoleContentOutput {
	return i.ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleContentArgs) ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleContentOutput)
}

// NetworktemplateRemoteSyslogConsoleContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogConsoleContentArray and NetworktemplateRemoteSyslogConsoleContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsoleContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogConsoleContentArray{ NetworktemplateRemoteSyslogConsoleContentArgs{...} }
type NetworktemplateRemoteSyslogConsoleContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsoleContentArrayOutput() NetworktemplateRemoteSyslogConsoleContentArrayOutput
	ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsoleContentArrayOutput
}

type NetworktemplateRemoteSyslogConsoleContentArray []NetworktemplateRemoteSyslogConsoleContentInput

func (NetworktemplateRemoteSyslogConsoleContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogConsoleContentArray) ToNetworktemplateRemoteSyslogConsoleContentArrayOutput() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleContentArray) ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleContentArrayOutput)
}

type NetworktemplateRemoteSyslogConsoleContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsoleContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsoleContentOutput) ToNetworktemplateRemoteSyslogConsoleContentOutput() NetworktemplateRemoteSyslogConsoleContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleContentOutput) ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogConsoleContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogConsoleContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogConsoleContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogConsoleContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogConsoleContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsoleContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsoleContentArrayOutput) ToNetworktemplateRemoteSyslogConsoleContentArrayOutput() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleContentArrayOutput) ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogConsoleContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogConsoleContent {
		return vs[0].([]NetworktemplateRemoteSyslogConsoleContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogConsoleContentOutput)
}

type NetworktemplateRemoteSyslogFile struct {
	Archive          *NetworktemplateRemoteSyslogFileArchive  `pulumi:"archive"`
	Contents         []NetworktemplateRemoteSyslogFileContent `pulumi:"contents"`
	ExplicitPriority *bool                                    `pulumi:"explicitPriority"`
	File             *string                                  `pulumi:"file"`
	Match            *string                                  `pulumi:"match"`
	StructuredData   *bool                                    `pulumi:"structuredData"`
}

// NetworktemplateRemoteSyslogFileInput is an input type that accepts NetworktemplateRemoteSyslogFileArgs and NetworktemplateRemoteSyslogFileOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileInput` via:
//
//	NetworktemplateRemoteSyslogFileArgs{...}
type NetworktemplateRemoteSyslogFileInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileOutput() NetworktemplateRemoteSyslogFileOutput
	ToNetworktemplateRemoteSyslogFileOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileOutput
}

type NetworktemplateRemoteSyslogFileArgs struct {
	Archive          NetworktemplateRemoteSyslogFileArchivePtrInput   `pulumi:"archive"`
	Contents         NetworktemplateRemoteSyslogFileContentArrayInput `pulumi:"contents"`
	ExplicitPriority pulumi.BoolPtrInput                              `pulumi:"explicitPriority"`
	File             pulumi.StringPtrInput                            `pulumi:"file"`
	Match            pulumi.StringPtrInput                            `pulumi:"match"`
	StructuredData   pulumi.BoolPtrInput                              `pulumi:"structuredData"`
}

func (NetworktemplateRemoteSyslogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileArgs) ToNetworktemplateRemoteSyslogFileOutput() NetworktemplateRemoteSyslogFileOutput {
	return i.ToNetworktemplateRemoteSyslogFileOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArgs) ToNetworktemplateRemoteSyslogFileOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileOutput)
}

// NetworktemplateRemoteSyslogFileArrayInput is an input type that accepts NetworktemplateRemoteSyslogFileArray and NetworktemplateRemoteSyslogFileArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileArrayInput` via:
//
//	NetworktemplateRemoteSyslogFileArray{ NetworktemplateRemoteSyslogFileArgs{...} }
type NetworktemplateRemoteSyslogFileArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileArrayOutput() NetworktemplateRemoteSyslogFileArrayOutput
	ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileArrayOutput
}

type NetworktemplateRemoteSyslogFileArray []NetworktemplateRemoteSyslogFileInput

func (NetworktemplateRemoteSyslogFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileArray) ToNetworktemplateRemoteSyslogFileArrayOutput() NetworktemplateRemoteSyslogFileArrayOutput {
	return i.ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArray) ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArrayOutput)
}

type NetworktemplateRemoteSyslogFileOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileOutput) ToNetworktemplateRemoteSyslogFileOutput() NetworktemplateRemoteSyslogFileOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileOutput) ToNetworktemplateRemoteSyslogFileOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileOutput) Archive() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *NetworktemplateRemoteSyslogFileArchive { return v.Archive }).(NetworktemplateRemoteSyslogFileArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) Contents() NetworktemplateRemoteSyslogFileContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) []NetworktemplateRemoteSyslogFileContent { return v.Contents }).(NetworktemplateRemoteSyslogFileContentArrayOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) ExplicitPriority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *bool { return v.ExplicitPriority }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *string { return v.File }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *string { return v.Match }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) StructuredData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *bool { return v.StructuredData }).(pulumi.BoolPtrOutput)
}

type NetworktemplateRemoteSyslogFileArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileArrayOutput) ToNetworktemplateRemoteSyslogFileArrayOutput() NetworktemplateRemoteSyslogFileArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArrayOutput) ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogFile {
		return vs[0].([]NetworktemplateRemoteSyslogFile)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogFileOutput)
}

type NetworktemplateRemoteSyslogFileArchive struct {
	Files *int    `pulumi:"files"`
	Size  *string `pulumi:"size"`
}

// NetworktemplateRemoteSyslogFileArchiveInput is an input type that accepts NetworktemplateRemoteSyslogFileArchiveArgs and NetworktemplateRemoteSyslogFileArchiveOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileArchiveInput` via:
//
//	NetworktemplateRemoteSyslogFileArchiveArgs{...}
type NetworktemplateRemoteSyslogFileArchiveInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileArchiveOutput() NetworktemplateRemoteSyslogFileArchiveOutput
	ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileArchiveOutput
}

type NetworktemplateRemoteSyslogFileArchiveArgs struct {
	Files pulumi.IntPtrInput    `pulumi:"files"`
	Size  pulumi.StringPtrInput `pulumi:"size"`
}

func (NetworktemplateRemoteSyslogFileArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchiveOutput() NetworktemplateRemoteSyslogFileArchiveOutput {
	return i.ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArchiveOutput)
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArchiveOutput).ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogFileArchivePtrInput is an input type that accepts NetworktemplateRemoteSyslogFileArchiveArgs, NetworktemplateRemoteSyslogFileArchivePtr and NetworktemplateRemoteSyslogFileArchivePtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileArchivePtrInput` via:
//
//	        NetworktemplateRemoteSyslogFileArchiveArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogFileArchivePtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput
	ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput
}

type networktemplateRemoteSyslogFileArchivePtrType NetworktemplateRemoteSyslogFileArchiveArgs

func NetworktemplateRemoteSyslogFileArchivePtr(v *NetworktemplateRemoteSyslogFileArchiveArgs) NetworktemplateRemoteSyslogFileArchivePtrInput {
	return (*networktemplateRemoteSyslogFileArchivePtrType)(v)
}

func (*networktemplateRemoteSyslogFileArchivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogFileArchivePtrType) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogFileArchivePtrType) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArchivePtrOutput)
}

type NetworktemplateRemoteSyslogFileArchiveOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchiveOutput() NetworktemplateRemoteSyslogFileArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o.ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslogFileArchive) *NetworktemplateRemoteSyslogFileArchive {
		return &v
	}).(NetworktemplateRemoteSyslogFileArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileArchive) *int { return v.Files }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileArchive) *string { return v.Size }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogFileArchivePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileArchivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) Elem() NetworktemplateRemoteSyslogFileArchiveOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogFileArchive) NetworktemplateRemoteSyslogFileArchive {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslogFileArchive
		return ret
	}).(NetworktemplateRemoteSyslogFileArchiveOutput)
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogFileArchive) *int {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogFileArchive) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogFileContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogFileContentInput is an input type that accepts NetworktemplateRemoteSyslogFileContentArgs and NetworktemplateRemoteSyslogFileContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileContentInput` via:
//
//	NetworktemplateRemoteSyslogFileContentArgs{...}
type NetworktemplateRemoteSyslogFileContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileContentOutput() NetworktemplateRemoteSyslogFileContentOutput
	ToNetworktemplateRemoteSyslogFileContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileContentOutput
}

type NetworktemplateRemoteSyslogFileContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogFileContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileContentArgs) ToNetworktemplateRemoteSyslogFileContentOutput() NetworktemplateRemoteSyslogFileContentOutput {
	return i.ToNetworktemplateRemoteSyslogFileContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileContentArgs) ToNetworktemplateRemoteSyslogFileContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileContentOutput)
}

// NetworktemplateRemoteSyslogFileContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogFileContentArray and NetworktemplateRemoteSyslogFileContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogFileContentArray{ NetworktemplateRemoteSyslogFileContentArgs{...} }
type NetworktemplateRemoteSyslogFileContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileContentArrayOutput() NetworktemplateRemoteSyslogFileContentArrayOutput
	ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileContentArrayOutput
}

type NetworktemplateRemoteSyslogFileContentArray []NetworktemplateRemoteSyslogFileContentInput

func (NetworktemplateRemoteSyslogFileContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileContentArray) ToNetworktemplateRemoteSyslogFileContentArrayOutput() NetworktemplateRemoteSyslogFileContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileContentArray) ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileContentArrayOutput)
}

type NetworktemplateRemoteSyslogFileContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileContentOutput) ToNetworktemplateRemoteSyslogFileContentOutput() NetworktemplateRemoteSyslogFileContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileContentOutput) ToNetworktemplateRemoteSyslogFileContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogFileContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogFileContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogFileContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileContentArrayOutput) ToNetworktemplateRemoteSyslogFileContentArrayOutput() NetworktemplateRemoteSyslogFileContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileContentArrayOutput) ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogFileContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogFileContent {
		return vs[0].([]NetworktemplateRemoteSyslogFileContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogFileContentOutput)
}

type NetworktemplateRemoteSyslogServer struct {
	Contents         []NetworktemplateRemoteSyslogServerContent `pulumi:"contents"`
	ExplicitPriority *bool                                      `pulumi:"explicitPriority"`
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	Host     *string `pulumi:"host"`
	Match    *string `pulumi:"match"`
	Port     *int    `pulumi:"port"`
	// enum: `tcp`, `udp`
	Protocol        *string `pulumi:"protocol"`
	RoutingInstance *string `pulumi:"routingInstance"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	SourceAddress  *string `pulumi:"sourceAddress"`
	StructuredData *bool   `pulumi:"structuredData"`
	Tag            *string `pulumi:"tag"`
}

// NetworktemplateRemoteSyslogServerInput is an input type that accepts NetworktemplateRemoteSyslogServerArgs and NetworktemplateRemoteSyslogServerOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerInput` via:
//
//	NetworktemplateRemoteSyslogServerArgs{...}
type NetworktemplateRemoteSyslogServerInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerOutput() NetworktemplateRemoteSyslogServerOutput
	ToNetworktemplateRemoteSyslogServerOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerOutput
}

type NetworktemplateRemoteSyslogServerArgs struct {
	Contents         NetworktemplateRemoteSyslogServerContentArrayInput `pulumi:"contents"`
	ExplicitPriority pulumi.BoolPtrInput                                `pulumi:"explicitPriority"`
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	Host     pulumi.StringPtrInput `pulumi:"host"`
	Match    pulumi.StringPtrInput `pulumi:"match"`
	Port     pulumi.IntPtrInput    `pulumi:"port"`
	// enum: `tcp`, `udp`
	Protocol        pulumi.StringPtrInput `pulumi:"protocol"`
	RoutingInstance pulumi.StringPtrInput `pulumi:"routingInstance"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	SourceAddress  pulumi.StringPtrInput `pulumi:"sourceAddress"`
	StructuredData pulumi.BoolPtrInput   `pulumi:"structuredData"`
	Tag            pulumi.StringPtrInput `pulumi:"tag"`
}

func (NetworktemplateRemoteSyslogServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerArgs) ToNetworktemplateRemoteSyslogServerOutput() NetworktemplateRemoteSyslogServerOutput {
	return i.ToNetworktemplateRemoteSyslogServerOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerArgs) ToNetworktemplateRemoteSyslogServerOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerOutput)
}

// NetworktemplateRemoteSyslogServerArrayInput is an input type that accepts NetworktemplateRemoteSyslogServerArray and NetworktemplateRemoteSyslogServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerArrayInput` via:
//
//	NetworktemplateRemoteSyslogServerArray{ NetworktemplateRemoteSyslogServerArgs{...} }
type NetworktemplateRemoteSyslogServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerArrayOutput() NetworktemplateRemoteSyslogServerArrayOutput
	ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerArrayOutput
}

type NetworktemplateRemoteSyslogServerArray []NetworktemplateRemoteSyslogServerInput

func (NetworktemplateRemoteSyslogServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerArray) ToNetworktemplateRemoteSyslogServerArrayOutput() NetworktemplateRemoteSyslogServerArrayOutput {
	return i.ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerArray) ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerArrayOutput)
}

type NetworktemplateRemoteSyslogServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerOutput) ToNetworktemplateRemoteSyslogServerOutput() NetworktemplateRemoteSyslogServerOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerOutput) ToNetworktemplateRemoteSyslogServerOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerOutput) Contents() NetworktemplateRemoteSyslogServerContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) []NetworktemplateRemoteSyslogServerContent {
		return v.Contents
	}).(NetworktemplateRemoteSyslogServerContentArrayOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) ExplicitPriority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *bool { return v.ExplicitPriority }).(pulumi.BoolPtrOutput)
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogServerOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Match }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// enum: `tcp`, `udp`
func (o NetworktemplateRemoteSyslogServerOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) RoutingInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.RoutingInstance }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogServerOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
func (o NetworktemplateRemoteSyslogServerOutput) SourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.SourceAddress }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) StructuredData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *bool { return v.StructuredData }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerArrayOutput) ToNetworktemplateRemoteSyslogServerArrayOutput() NetworktemplateRemoteSyslogServerArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerArrayOutput) ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogServer {
		return vs[0].([]NetworktemplateRemoteSyslogServer)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogServerOutput)
}

type NetworktemplateRemoteSyslogServerContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogServerContentInput is an input type that accepts NetworktemplateRemoteSyslogServerContentArgs and NetworktemplateRemoteSyslogServerContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerContentInput` via:
//
//	NetworktemplateRemoteSyslogServerContentArgs{...}
type NetworktemplateRemoteSyslogServerContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerContentOutput() NetworktemplateRemoteSyslogServerContentOutput
	ToNetworktemplateRemoteSyslogServerContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerContentOutput
}

type NetworktemplateRemoteSyslogServerContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogServerContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerContentArgs) ToNetworktemplateRemoteSyslogServerContentOutput() NetworktemplateRemoteSyslogServerContentOutput {
	return i.ToNetworktemplateRemoteSyslogServerContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerContentArgs) ToNetworktemplateRemoteSyslogServerContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerContentOutput)
}

// NetworktemplateRemoteSyslogServerContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogServerContentArray and NetworktemplateRemoteSyslogServerContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogServerContentArray{ NetworktemplateRemoteSyslogServerContentArgs{...} }
type NetworktemplateRemoteSyslogServerContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerContentArrayOutput() NetworktemplateRemoteSyslogServerContentArrayOutput
	ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerContentArrayOutput
}

type NetworktemplateRemoteSyslogServerContentArray []NetworktemplateRemoteSyslogServerContentInput

func (NetworktemplateRemoteSyslogServerContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerContentArray) ToNetworktemplateRemoteSyslogServerContentArrayOutput() NetworktemplateRemoteSyslogServerContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerContentArray) ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerContentArrayOutput)
}

type NetworktemplateRemoteSyslogServerContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerContentOutput) ToNetworktemplateRemoteSyslogServerContentOutput() NetworktemplateRemoteSyslogServerContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerContentOutput) ToNetworktemplateRemoteSyslogServerContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogServerContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServerContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogServerContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServerContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogServerContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerContentArrayOutput) ToNetworktemplateRemoteSyslogServerContentArrayOutput() NetworktemplateRemoteSyslogServerContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerContentArrayOutput) ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogServerContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogServerContent {
		return vs[0].([]NetworktemplateRemoteSyslogServerContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogServerContentOutput)
}

type NetworktemplateRemoteSyslogUser struct {
	Contents []NetworktemplateRemoteSyslogUserContent `pulumi:"contents"`
	Match    *string                                  `pulumi:"match"`
	User     *string                                  `pulumi:"user"`
}

// NetworktemplateRemoteSyslogUserInput is an input type that accepts NetworktemplateRemoteSyslogUserArgs and NetworktemplateRemoteSyslogUserOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserInput` via:
//
//	NetworktemplateRemoteSyslogUserArgs{...}
type NetworktemplateRemoteSyslogUserInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserOutput() NetworktemplateRemoteSyslogUserOutput
	ToNetworktemplateRemoteSyslogUserOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserOutput
}

type NetworktemplateRemoteSyslogUserArgs struct {
	Contents NetworktemplateRemoteSyslogUserContentArrayInput `pulumi:"contents"`
	Match    pulumi.StringPtrInput                            `pulumi:"match"`
	User     pulumi.StringPtrInput                            `pulumi:"user"`
}

func (NetworktemplateRemoteSyslogUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserArgs) ToNetworktemplateRemoteSyslogUserOutput() NetworktemplateRemoteSyslogUserOutput {
	return i.ToNetworktemplateRemoteSyslogUserOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserArgs) ToNetworktemplateRemoteSyslogUserOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserOutput)
}

// NetworktemplateRemoteSyslogUserArrayInput is an input type that accepts NetworktemplateRemoteSyslogUserArray and NetworktemplateRemoteSyslogUserArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserArrayInput` via:
//
//	NetworktemplateRemoteSyslogUserArray{ NetworktemplateRemoteSyslogUserArgs{...} }
type NetworktemplateRemoteSyslogUserArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserArrayOutput() NetworktemplateRemoteSyslogUserArrayOutput
	ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserArrayOutput
}

type NetworktemplateRemoteSyslogUserArray []NetworktemplateRemoteSyslogUserInput

func (NetworktemplateRemoteSyslogUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserArray) ToNetworktemplateRemoteSyslogUserArrayOutput() NetworktemplateRemoteSyslogUserArrayOutput {
	return i.ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserArray) ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserArrayOutput)
}

type NetworktemplateRemoteSyslogUserOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserOutput) ToNetworktemplateRemoteSyslogUserOutput() NetworktemplateRemoteSyslogUserOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserOutput) ToNetworktemplateRemoteSyslogUserOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserOutput) Contents() NetworktemplateRemoteSyslogUserContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUser) []NetworktemplateRemoteSyslogUserContent { return v.Contents }).(NetworktemplateRemoteSyslogUserContentArrayOutput)
}

func (o NetworktemplateRemoteSyslogUserOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUser) *string { return v.Match }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogUserOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUser) *string { return v.User }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogUserArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserArrayOutput) ToNetworktemplateRemoteSyslogUserArrayOutput() NetworktemplateRemoteSyslogUserArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserArrayOutput) ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogUser {
		return vs[0].([]NetworktemplateRemoteSyslogUser)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogUserOutput)
}

type NetworktemplateRemoteSyslogUserContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogUserContentInput is an input type that accepts NetworktemplateRemoteSyslogUserContentArgs and NetworktemplateRemoteSyslogUserContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserContentInput` via:
//
//	NetworktemplateRemoteSyslogUserContentArgs{...}
type NetworktemplateRemoteSyslogUserContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserContentOutput() NetworktemplateRemoteSyslogUserContentOutput
	ToNetworktemplateRemoteSyslogUserContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserContentOutput
}

type NetworktemplateRemoteSyslogUserContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogUserContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserContentArgs) ToNetworktemplateRemoteSyslogUserContentOutput() NetworktemplateRemoteSyslogUserContentOutput {
	return i.ToNetworktemplateRemoteSyslogUserContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserContentArgs) ToNetworktemplateRemoteSyslogUserContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserContentOutput)
}

// NetworktemplateRemoteSyslogUserContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogUserContentArray and NetworktemplateRemoteSyslogUserContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogUserContentArray{ NetworktemplateRemoteSyslogUserContentArgs{...} }
type NetworktemplateRemoteSyslogUserContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserContentArrayOutput() NetworktemplateRemoteSyslogUserContentArrayOutput
	ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserContentArrayOutput
}

type NetworktemplateRemoteSyslogUserContentArray []NetworktemplateRemoteSyslogUserContentInput

func (NetworktemplateRemoteSyslogUserContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserContentArray) ToNetworktemplateRemoteSyslogUserContentArrayOutput() NetworktemplateRemoteSyslogUserContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserContentArray) ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserContentArrayOutput)
}

type NetworktemplateRemoteSyslogUserContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserContentOutput) ToNetworktemplateRemoteSyslogUserContentOutput() NetworktemplateRemoteSyslogUserContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserContentOutput) ToNetworktemplateRemoteSyslogUserContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogUserContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUserContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogUserContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUserContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogUserContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserContentArrayOutput) ToNetworktemplateRemoteSyslogUserContentArrayOutput() NetworktemplateRemoteSyslogUserContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserContentArrayOutput) ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogUserContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogUserContent {
		return vs[0].([]NetworktemplateRemoteSyslogUserContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogUserContentOutput)
}

type NetworktemplateSnmpConfig struct {
	ClientLists []NetworktemplateSnmpConfigClientList `pulumi:"clientLists"`
	Contact     *string                               `pulumi:"contact"`
	Description *string                               `pulumi:"description"`
	Enabled     *bool                                 `pulumi:"enabled"`
	// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
	EngineId   *string                              `pulumi:"engineId"`
	Location   *string                              `pulumi:"location"`
	Name       *string                              `pulumi:"name"`
	Network    *string                              `pulumi:"network"`
	TrapGroups []NetworktemplateSnmpConfigTrapGroup `pulumi:"trapGroups"`
	V2cConfigs []NetworktemplateSnmpConfigV2cConfig `pulumi:"v2cConfigs"`
	V3Config   *NetworktemplateSnmpConfigV3Config   `pulumi:"v3Config"`
	Views      []NetworktemplateSnmpConfigView      `pulumi:"views"`
}

// NetworktemplateSnmpConfigInput is an input type that accepts NetworktemplateSnmpConfigArgs and NetworktemplateSnmpConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigInput` via:
//
//	NetworktemplateSnmpConfigArgs{...}
type NetworktemplateSnmpConfigInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigOutput() NetworktemplateSnmpConfigOutput
	ToNetworktemplateSnmpConfigOutputWithContext(context.Context) NetworktemplateSnmpConfigOutput
}

type NetworktemplateSnmpConfigArgs struct {
	ClientLists NetworktemplateSnmpConfigClientListArrayInput `pulumi:"clientLists"`
	Contact     pulumi.StringPtrInput                         `pulumi:"contact"`
	Description pulumi.StringPtrInput                         `pulumi:"description"`
	Enabled     pulumi.BoolPtrInput                           `pulumi:"enabled"`
	// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
	EngineId   pulumi.StringPtrInput                        `pulumi:"engineId"`
	Location   pulumi.StringPtrInput                        `pulumi:"location"`
	Name       pulumi.StringPtrInput                        `pulumi:"name"`
	Network    pulumi.StringPtrInput                        `pulumi:"network"`
	TrapGroups NetworktemplateSnmpConfigTrapGroupArrayInput `pulumi:"trapGroups"`
	V2cConfigs NetworktemplateSnmpConfigV2cConfigArrayInput `pulumi:"v2cConfigs"`
	V3Config   NetworktemplateSnmpConfigV3ConfigPtrInput    `pulumi:"v3Config"`
	Views      NetworktemplateSnmpConfigViewArrayInput      `pulumi:"views"`
}

func (NetworktemplateSnmpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfig)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigOutput() NetworktemplateSnmpConfigOutput {
	return i.ToNetworktemplateSnmpConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigOutput)
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigOutput).ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigPtrInput is an input type that accepts NetworktemplateSnmpConfigArgs, NetworktemplateSnmpConfigPtr and NetworktemplateSnmpConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigPtrInput` via:
//
//	        NetworktemplateSnmpConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput
	ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigPtrOutput
}

type networktemplateSnmpConfigPtrType NetworktemplateSnmpConfigArgs

func NetworktemplateSnmpConfigPtr(v *NetworktemplateSnmpConfigArgs) NetworktemplateSnmpConfigPtrInput {
	return (*networktemplateSnmpConfigPtrType)(v)
}

func (*networktemplateSnmpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfig)(nil)).Elem()
}

func (i *networktemplateSnmpConfigPtrType) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigPtrType) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigPtrOutput)
}

type NetworktemplateSnmpConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigOutput() NetworktemplateSnmpConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return o.ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfig) *NetworktemplateSnmpConfig {
		return &v
	}).(NetworktemplateSnmpConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) ClientLists() NetworktemplateSnmpConfigClientListArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigClientList { return v.ClientLists }).(NetworktemplateSnmpConfigClientListArrayOutput)
}

func (o NetworktemplateSnmpConfigOutput) Contact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Contact }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
func (o NetworktemplateSnmpConfigOutput) EngineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.EngineId }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) TrapGroups() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigTrapGroup { return v.TrapGroups }).(NetworktemplateSnmpConfigTrapGroupArrayOutput)
}

func (o NetworktemplateSnmpConfigOutput) V2cConfigs() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigV2cConfig { return v.V2cConfigs }).(NetworktemplateSnmpConfigV2cConfigArrayOutput)
}

func (o NetworktemplateSnmpConfigOutput) V3Config() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *NetworktemplateSnmpConfigV3Config { return v.V3Config }).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Views() NetworktemplateSnmpConfigViewArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigView { return v.Views }).(NetworktemplateSnmpConfigViewArrayOutput)
}

type NetworktemplateSnmpConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigPtrOutput) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigPtrOutput) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigPtrOutput) Elem() NetworktemplateSnmpConfigOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) NetworktemplateSnmpConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfig
		return ret
	}).(NetworktemplateSnmpConfigOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) ClientLists() NetworktemplateSnmpConfigClientListArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigClientList {
		if v == nil {
			return nil
		}
		return v.ClientLists
	}).(NetworktemplateSnmpConfigClientListArrayOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Contact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Contact
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
func (o NetworktemplateSnmpConfigPtrOutput) EngineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.EngineId
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) TrapGroups() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigTrapGroup {
		if v == nil {
			return nil
		}
		return v.TrapGroups
	}).(NetworktemplateSnmpConfigTrapGroupArrayOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) V2cConfigs() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigV2cConfig {
		if v == nil {
			return nil
		}
		return v.V2cConfigs
	}).(NetworktemplateSnmpConfigV2cConfigArrayOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) V3Config() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *NetworktemplateSnmpConfigV3Config {
		if v == nil {
			return nil
		}
		return v.V3Config
	}).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Views() NetworktemplateSnmpConfigViewArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigView {
		if v == nil {
			return nil
		}
		return v.Views
	}).(NetworktemplateSnmpConfigViewArrayOutput)
}

type NetworktemplateSnmpConfigClientList struct {
	ClientListName *string  `pulumi:"clientListName"`
	Clients        []string `pulumi:"clients"`
}

// NetworktemplateSnmpConfigClientListInput is an input type that accepts NetworktemplateSnmpConfigClientListArgs and NetworktemplateSnmpConfigClientListOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigClientListInput` via:
//
//	NetworktemplateSnmpConfigClientListArgs{...}
type NetworktemplateSnmpConfigClientListInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigClientListOutput() NetworktemplateSnmpConfigClientListOutput
	ToNetworktemplateSnmpConfigClientListOutputWithContext(context.Context) NetworktemplateSnmpConfigClientListOutput
}

type NetworktemplateSnmpConfigClientListArgs struct {
	ClientListName pulumi.StringPtrInput   `pulumi:"clientListName"`
	Clients        pulumi.StringArrayInput `pulumi:"clients"`
}

func (NetworktemplateSnmpConfigClientListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigClientListArgs) ToNetworktemplateSnmpConfigClientListOutput() NetworktemplateSnmpConfigClientListOutput {
	return i.ToNetworktemplateSnmpConfigClientListOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigClientListArgs) ToNetworktemplateSnmpConfigClientListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigClientListOutput)
}

// NetworktemplateSnmpConfigClientListArrayInput is an input type that accepts NetworktemplateSnmpConfigClientListArray and NetworktemplateSnmpConfigClientListArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigClientListArrayInput` via:
//
//	NetworktemplateSnmpConfigClientListArray{ NetworktemplateSnmpConfigClientListArgs{...} }
type NetworktemplateSnmpConfigClientListArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigClientListArrayOutput() NetworktemplateSnmpConfigClientListArrayOutput
	ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigClientListArrayOutput
}

type NetworktemplateSnmpConfigClientListArray []NetworktemplateSnmpConfigClientListInput

func (NetworktemplateSnmpConfigClientListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigClientListArray) ToNetworktemplateSnmpConfigClientListArrayOutput() NetworktemplateSnmpConfigClientListArrayOutput {
	return i.ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigClientListArray) ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigClientListArrayOutput)
}

type NetworktemplateSnmpConfigClientListOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigClientListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigClientListOutput) ToNetworktemplateSnmpConfigClientListOutput() NetworktemplateSnmpConfigClientListOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListOutput) ToNetworktemplateSnmpConfigClientListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListOutput) ClientListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigClientList) *string { return v.ClientListName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigClientListOutput) Clients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigClientList) []string { return v.Clients }).(pulumi.StringArrayOutput)
}

type NetworktemplateSnmpConfigClientListArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigClientListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigClientListArrayOutput) ToNetworktemplateSnmpConfigClientListArrayOutput() NetworktemplateSnmpConfigClientListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListArrayOutput) ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigClientListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigClientList {
		return vs[0].([]NetworktemplateSnmpConfigClientList)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigClientListOutput)
}

type NetworktemplateSnmpConfigTrapGroup struct {
	Categories []string `pulumi:"categories"`
	// Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
	GroupName *string  `pulumi:"groupName"`
	Targets   []string `pulumi:"targets"`
	// enum: `all`, `v1`, `v2`
	Version *string `pulumi:"version"`
}

// NetworktemplateSnmpConfigTrapGroupInput is an input type that accepts NetworktemplateSnmpConfigTrapGroupArgs and NetworktemplateSnmpConfigTrapGroupOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigTrapGroupInput` via:
//
//	NetworktemplateSnmpConfigTrapGroupArgs{...}
type NetworktemplateSnmpConfigTrapGroupInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigTrapGroupOutput() NetworktemplateSnmpConfigTrapGroupOutput
	ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(context.Context) NetworktemplateSnmpConfigTrapGroupOutput
}

type NetworktemplateSnmpConfigTrapGroupArgs struct {
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
	GroupName pulumi.StringPtrInput   `pulumi:"groupName"`
	Targets   pulumi.StringArrayInput `pulumi:"targets"`
	// enum: `all`, `v1`, `v2`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NetworktemplateSnmpConfigTrapGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigTrapGroupArgs) ToNetworktemplateSnmpConfigTrapGroupOutput() NetworktemplateSnmpConfigTrapGroupOutput {
	return i.ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigTrapGroupArgs) ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigTrapGroupOutput)
}

// NetworktemplateSnmpConfigTrapGroupArrayInput is an input type that accepts NetworktemplateSnmpConfigTrapGroupArray and NetworktemplateSnmpConfigTrapGroupArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigTrapGroupArrayInput` via:
//
//	NetworktemplateSnmpConfigTrapGroupArray{ NetworktemplateSnmpConfigTrapGroupArgs{...} }
type NetworktemplateSnmpConfigTrapGroupArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigTrapGroupArrayOutput() NetworktemplateSnmpConfigTrapGroupArrayOutput
	ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigTrapGroupArrayOutput
}

type NetworktemplateSnmpConfigTrapGroupArray []NetworktemplateSnmpConfigTrapGroupInput

func (NetworktemplateSnmpConfigTrapGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigTrapGroupArray) ToNetworktemplateSnmpConfigTrapGroupArrayOutput() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return i.ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigTrapGroupArray) ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigTrapGroupArrayOutput)
}

type NetworktemplateSnmpConfigTrapGroupOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigTrapGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) ToNetworktemplateSnmpConfigTrapGroupOutput() NetworktemplateSnmpConfigTrapGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
func (o NetworktemplateSnmpConfigTrapGroupOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

// enum: `all`, `v1`, `v2`
func (o NetworktemplateSnmpConfigTrapGroupOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigTrapGroupArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigTrapGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigTrapGroupArrayOutput) ToNetworktemplateSnmpConfigTrapGroupArrayOutput() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupArrayOutput) ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigTrapGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigTrapGroup {
		return vs[0].([]NetworktemplateSnmpConfigTrapGroup)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigTrapGroupOutput)
}

type NetworktemplateSnmpConfigV2cConfig struct {
	Authorization *string `pulumi:"authorization"`
	// client_list_name here should refer to clientList above
	ClientListName *string `pulumi:"clientListName"`
	CommunityName  *string `pulumi:"communityName"`
	// view name here should be defined in views above
	View *string `pulumi:"view"`
}

// NetworktemplateSnmpConfigV2cConfigInput is an input type that accepts NetworktemplateSnmpConfigV2cConfigArgs and NetworktemplateSnmpConfigV2cConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV2cConfigInput` via:
//
//	NetworktemplateSnmpConfigV2cConfigArgs{...}
type NetworktemplateSnmpConfigV2cConfigInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV2cConfigOutput() NetworktemplateSnmpConfigV2cConfigOutput
	ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(context.Context) NetworktemplateSnmpConfigV2cConfigOutput
}

type NetworktemplateSnmpConfigV2cConfigArgs struct {
	Authorization pulumi.StringPtrInput `pulumi:"authorization"`
	// client_list_name here should refer to clientList above
	ClientListName pulumi.StringPtrInput `pulumi:"clientListName"`
	CommunityName  pulumi.StringPtrInput `pulumi:"communityName"`
	// view name here should be defined in views above
	View pulumi.StringPtrInput `pulumi:"view"`
}

func (NetworktemplateSnmpConfigV2cConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV2cConfigArgs) ToNetworktemplateSnmpConfigV2cConfigOutput() NetworktemplateSnmpConfigV2cConfigOutput {
	return i.ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV2cConfigArgs) ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV2cConfigOutput)
}

// NetworktemplateSnmpConfigV2cConfigArrayInput is an input type that accepts NetworktemplateSnmpConfigV2cConfigArray and NetworktemplateSnmpConfigV2cConfigArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV2cConfigArrayInput` via:
//
//	NetworktemplateSnmpConfigV2cConfigArray{ NetworktemplateSnmpConfigV2cConfigArgs{...} }
type NetworktemplateSnmpConfigV2cConfigArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV2cConfigArrayOutput() NetworktemplateSnmpConfigV2cConfigArrayOutput
	ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV2cConfigArrayOutput
}

type NetworktemplateSnmpConfigV2cConfigArray []NetworktemplateSnmpConfigV2cConfigInput

func (NetworktemplateSnmpConfigV2cConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV2cConfigArray) ToNetworktemplateSnmpConfigV2cConfigArrayOutput() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return i.ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV2cConfigArray) ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV2cConfigArrayOutput)
}

type NetworktemplateSnmpConfigV2cConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV2cConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) ToNetworktemplateSnmpConfigV2cConfigOutput() NetworktemplateSnmpConfigV2cConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) Authorization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.Authorization }).(pulumi.StringPtrOutput)
}

// client_list_name here should refer to clientList above
func (o NetworktemplateSnmpConfigV2cConfigOutput) ClientListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.ClientListName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) CommunityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.CommunityName }).(pulumi.StringPtrOutput)
}

// view name here should be defined in views above
func (o NetworktemplateSnmpConfigV2cConfigOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.View }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV2cConfigArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV2cConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV2cConfigArrayOutput) ToNetworktemplateSnmpConfigV2cConfigArrayOutput() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigArrayOutput) ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV2cConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV2cConfig {
		return vs[0].([]NetworktemplateSnmpConfigV2cConfig)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV2cConfigOutput)
}

type NetworktemplateSnmpConfigV3Config struct {
	Notifies         []NetworktemplateSnmpConfigV3ConfigNotify          `pulumi:"notifies"`
	NotifyFilters    []NetworktemplateSnmpConfigV3ConfigNotifyFilter    `pulumi:"notifyFilters"`
	TargetAddresses  []NetworktemplateSnmpConfigV3ConfigTargetAddress   `pulumi:"targetAddresses"`
	TargetParameters []NetworktemplateSnmpConfigV3ConfigTargetParameter `pulumi:"targetParameters"`
	Usm              *NetworktemplateSnmpConfigV3ConfigUsm              `pulumi:"usm"`
	Vacm             *NetworktemplateSnmpConfigV3ConfigVacm             `pulumi:"vacm"`
}

// NetworktemplateSnmpConfigV3ConfigInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigArgs and NetworktemplateSnmpConfigV3ConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigArgs{...}
type NetworktemplateSnmpConfigV3ConfigInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigOutput() NetworktemplateSnmpConfigV3ConfigOutput
	ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigOutput
}

type NetworktemplateSnmpConfigV3ConfigArgs struct {
	Notifies         NetworktemplateSnmpConfigV3ConfigNotifyArrayInput          `pulumi:"notifies"`
	NotifyFilters    NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput    `pulumi:"notifyFilters"`
	TargetAddresses  NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput   `pulumi:"targetAddresses"`
	TargetParameters NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput `pulumi:"targetParameters"`
	Usm              NetworktemplateSnmpConfigV3ConfigUsmPtrInput               `pulumi:"usm"`
	Vacm             NetworktemplateSnmpConfigV3ConfigVacmPtrInput              `pulumi:"vacm"`
}

func (NetworktemplateSnmpConfigV3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigOutput() NetworktemplateSnmpConfigV3ConfigOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigOutput).ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigArgs, NetworktemplateSnmpConfigV3ConfigPtr and NetworktemplateSnmpConfigV3ConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput
}

type networktemplateSnmpConfigV3ConfigPtrType NetworktemplateSnmpConfigV3ConfigArgs

func NetworktemplateSnmpConfigV3ConfigPtr(v *NetworktemplateSnmpConfigV3ConfigArgs) NetworktemplateSnmpConfigV3ConfigPtrInput {
	return (*networktemplateSnmpConfigV3ConfigPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigPtrType) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigPtrType) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigOutput() NetworktemplateSnmpConfigV3ConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3Config {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) Notifies() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotify { return v.Notifies }).(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) NotifyFilters() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotifyFilter {
		return v.NotifyFilters
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) TargetAddresses() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetAddress {
		return v.TargetAddresses
	}).(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) TargetParameters() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetParameter {
		return v.TargetParameters
	}).(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) Usm() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigUsm { return v.Usm }).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) Vacm() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigVacm { return v.Vacm }).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) NetworktemplateSnmpConfigV3Config {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3Config
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Notifies() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotify {
		if v == nil {
			return nil
		}
		return v.Notifies
	}).(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) NotifyFilters() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotifyFilter {
		if v == nil {
			return nil
		}
		return v.NotifyFilters
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) TargetAddresses() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetAddress {
		if v == nil {
			return nil
		}
		return v.TargetAddresses
	}).(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) TargetParameters() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetParameter {
		if v == nil {
			return nil
		}
		return v.TargetParameters
	}).(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Usm() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigUsm {
		if v == nil {
			return nil
		}
		return v.Usm
	}).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Vacm() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigVacm {
		if v == nil {
			return nil
		}
		return v.Vacm
	}).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotify struct {
	Name *string `pulumi:"name"`
	Tag  *string `pulumi:"tag"`
	// enum: `inform`, `trap`
	Type *string `pulumi:"type"`
}

// NetworktemplateSnmpConfigV3ConfigNotifyInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyArgs and NetworktemplateSnmpConfigV3ConfigNotifyOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyArgs{...}
type NetworktemplateSnmpConfigV3ConfigNotifyInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyOutput() NetworktemplateSnmpConfigV3ConfigNotifyOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	Tag  pulumi.StringPtrInput `pulumi:"tag"`
	// enum: `inform`, `trap`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NetworktemplateSnmpConfigV3ConfigNotifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyOutput() NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyOutput)
}

// NetworktemplateSnmpConfigV3ConfigNotifyArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyArray and NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyArray{ NetworktemplateSnmpConfigV3ConfigNotifyArgs{...} }
type NetworktemplateSnmpConfigV3ConfigNotifyArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyArray []NetworktemplateSnmpConfigV3ConfigNotifyInput

func (NetworktemplateSnmpConfigV3ConfigNotifyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArray) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArray) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyOutput() NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotify) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotify) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// enum: `inform`, `trap`
func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotify) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigNotify {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigNotify)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigNotifyOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilter struct {
	Contents    []NetworktemplateSnmpConfigV3ConfigNotifyFilterContent `pulumi:"contents"`
	ProfileName *string                                                `pulumi:"profileName"`
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs and NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs{...}
type NetworktemplateSnmpConfigV3ConfigNotifyFilterInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs struct {
	Contents    NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput `pulumi:"contents"`
	ProfileName pulumi.StringPtrInput                                          `pulumi:"profileName"`
}

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput)
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterArray and NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterArray{ NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs{...} }
type NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterArray []NetworktemplateSnmpConfigV3ConfigNotifyFilterInput

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) Contents() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilter) []NetworktemplateSnmpConfigV3ConfigNotifyFilterContent {
		return v.Contents
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilter) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigNotifyFilter {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigNotifyFilter)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContent struct {
	Include *bool   `pulumi:"include"`
	Oid     *string `pulumi:"oid"`
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs and NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs{...}
type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs struct {
	Include pulumi.BoolPtrInput   `pulumi:"include"`
	Oid     pulumi.StringPtrInput `pulumi:"oid"`
}

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput)
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray and NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray{ NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs{...} }
type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray []NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) Include() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilterContent) *bool { return v.Include }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) Oid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilterContent) *string { return v.Oid }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigNotifyFilterContent {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetAddress struct {
	Address     *string `pulumi:"address"`
	AddressMask *string `pulumi:"addressMask"`
	Port        *int    `pulumi:"port"`
	// <refer to notify tag, can be multiple with blank
	TagList           *string `pulumi:"tagList"`
	TargetAddressName *string `pulumi:"targetAddressName"`
	// refer to notify target parameters name
	TargetParameters *string `pulumi:"targetParameters"`
}

// NetworktemplateSnmpConfigV3ConfigTargetAddressInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetAddressArgs and NetworktemplateSnmpConfigV3ConfigTargetAddressOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetAddressInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetAddressArgs{...}
type NetworktemplateSnmpConfigV3ConfigTargetAddressInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressArgs struct {
	Address     pulumi.StringPtrInput `pulumi:"address"`
	AddressMask pulumi.StringPtrInput `pulumi:"addressMask"`
	Port        pulumi.IntPtrInput    `pulumi:"port"`
	// <refer to notify tag, can be multiple with blank
	TagList           pulumi.StringPtrInput `pulumi:"tagList"`
	TargetAddressName pulumi.StringPtrInput `pulumi:"targetAddressName"`
	// refer to notify target parameters name
	TargetParameters pulumi.StringPtrInput `pulumi:"targetParameters"`
}

func (NetworktemplateSnmpConfigV3ConfigTargetAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArgs) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArgs) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetAddressOutput)
}

// NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetAddressArray and NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetAddressArray{ NetworktemplateSnmpConfigV3ConfigTargetAddressArgs{...} }
type NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressArray []NetworktemplateSnmpConfigV3ConfigTargetAddressInput

func (NetworktemplateSnmpConfigV3ConfigTargetAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArray) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArray) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) AddressMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.AddressMask }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// <refer to notify tag, can be multiple with blank
func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) TagList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.TagList }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) TargetAddressName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.TargetAddressName }).(pulumi.StringPtrOutput)
}

// refer to notify target parameters name
func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) TargetParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.TargetParameters }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigTargetAddress {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigTargetAddress)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigTargetAddressOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetParameter struct {
	// enum: `v1`, `v2c`, `v3`
	MessageProcessingModel *string `pulumi:"messageProcessingModel"`
	Name                   *string `pulumi:"name"`
	// refer to profile-name in notify_filter
	NotifyFilter *string `pulumi:"notifyFilter"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel *string `pulumi:"securityLevel"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel *string `pulumi:"securityModel"`
	// refer to securityName in usm
	SecurityName *string `pulumi:"securityName"`
}

// NetworktemplateSnmpConfigV3ConfigTargetParameterInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetParameterArgs and NetworktemplateSnmpConfigV3ConfigTargetParameterOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetParameterInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetParameterArgs{...}
type NetworktemplateSnmpConfigV3ConfigTargetParameterInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterArgs struct {
	// enum: `v1`, `v2c`, `v3`
	MessageProcessingModel pulumi.StringPtrInput `pulumi:"messageProcessingModel"`
	Name                   pulumi.StringPtrInput `pulumi:"name"`
	// refer to profile-name in notify_filter
	NotifyFilter pulumi.StringPtrInput `pulumi:"notifyFilter"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel pulumi.StringPtrInput `pulumi:"securityModel"`
	// refer to securityName in usm
	SecurityName pulumi.StringPtrInput `pulumi:"securityName"`
}

func (NetworktemplateSnmpConfigV3ConfigTargetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArgs) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArgs) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetParameterOutput)
}

// NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetParameterArray and NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetParameterArray{ NetworktemplateSnmpConfigV3ConfigTargetParameterArgs{...} }
type NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterArray []NetworktemplateSnmpConfigV3ConfigTargetParameterInput

func (NetworktemplateSnmpConfigV3ConfigTargetParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArray) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArray) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return o
}

// enum: `v1`, `v2c`, `v3`
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) MessageProcessingModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.MessageProcessingModel }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// refer to profile-name in notify_filter
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) NotifyFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.NotifyFilter }).(pulumi.StringPtrOutput)
}

// enum: `authentication`, `none`, `privacy`
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

// enum: `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.SecurityModel }).(pulumi.StringPtrOutput)
}

// refer to securityName in usm
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) SecurityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.SecurityName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigTargetParameter {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigTargetParameter)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigTargetParameterOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsm struct {
	// enum: `localEngine`, `remoteEngine`
	EngineType *string `pulumi:"engineType"`
	// required only if `engineType`==`remoteEngine`
	Engineid *string                                    `pulumi:"engineid"`
	Users    []NetworktemplateSnmpConfigV3ConfigUsmUser `pulumi:"users"`
}

// NetworktemplateSnmpConfigV3ConfigUsmInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmArgs and NetworktemplateSnmpConfigV3ConfigUsmOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigUsmArgs{...}
type NetworktemplateSnmpConfigV3ConfigUsmInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmOutput() NetworktemplateSnmpConfigV3ConfigUsmOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmOutput
}

type NetworktemplateSnmpConfigV3ConfigUsmArgs struct {
	// enum: `localEngine`, `remoteEngine`
	EngineType pulumi.StringPtrInput `pulumi:"engineType"`
	// required only if `engineType`==`remoteEngine`
	Engineid pulumi.StringPtrInput                              `pulumi:"engineid"`
	Users    NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput `pulumi:"users"`
}

func (NetworktemplateSnmpConfigV3ConfigUsmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmOutput() NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmOutput).ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigUsmPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmArgs, NetworktemplateSnmpConfigV3ConfigUsmPtr and NetworktemplateSnmpConfigV3ConfigUsmPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigUsmArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigUsmPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput
}

type networktemplateSnmpConfigV3ConfigUsmPtrType NetworktemplateSnmpConfigV3ConfigUsmArgs

func NetworktemplateSnmpConfigV3ConfigUsmPtr(v *NetworktemplateSnmpConfigV3ConfigUsmArgs) NetworktemplateSnmpConfigV3ConfigUsmPtrInput {
	return (*networktemplateSnmpConfigV3ConfigUsmPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigUsmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigUsmPtrType) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigUsmPtrType) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmOutput() NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3ConfigUsm) *NetworktemplateSnmpConfigV3ConfigUsm {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

// enum: `localEngine`, `remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) EngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsm) *string { return v.EngineType }).(pulumi.StringPtrOutput)
}

// required only if `engineType`==`remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) Engineid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsm) *string { return v.Engineid }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) Users() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsm) []NetworktemplateSnmpConfigV3ConfigUsmUser {
		return v.Users
	}).(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) NetworktemplateSnmpConfigV3ConfigUsm {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3ConfigUsm
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigUsmOutput)
}

// enum: `localEngine`, `remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) EngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) *string {
		if v == nil {
			return nil
		}
		return v.EngineType
	}).(pulumi.StringPtrOutput)
}

// required only if `engineType`==`remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) Engineid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) *string {
		if v == nil {
			return nil
		}
		return v.Engineid
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) Users() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) []NetworktemplateSnmpConfigV3ConfigUsmUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmUser struct {
	// Not required if `authenticationType`==`authenticationNone`
	// include alphabetic, numeric, and special characters, but it cannot include control characters.
	AuthenticationPassword *string `pulumi:"authenticationPassword"`
	// sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authenticationMd5`, `authenticationNone`, `authenticationSha`, `authenticationSha224`, `authenticationSha256`, `authenticationSha384`, `authenticationSha512`
	AuthenticationType *string `pulumi:"authenticationType"`
	// Not required if `encryptionType`==`privacy-none`
	// include alphabetic, numeric, and special characters, but it cannot include control characters
	EncryptionPassword *string `pulumi:"encryptionPassword"`
	// enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
	EncryptionType *string `pulumi:"encryptionType"`
	Name           *string `pulumi:"name"`
}

// NetworktemplateSnmpConfigV3ConfigUsmUserInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmUserArgs and NetworktemplateSnmpConfigV3ConfigUsmUserOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmUserInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigUsmUserArgs{...}
type NetworktemplateSnmpConfigV3ConfigUsmUserInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmUserOutput() NetworktemplateSnmpConfigV3ConfigUsmUserOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserOutput
}

type NetworktemplateSnmpConfigV3ConfigUsmUserArgs struct {
	// Not required if `authenticationType`==`authenticationNone`
	// include alphabetic, numeric, and special characters, but it cannot include control characters.
	AuthenticationPassword pulumi.StringPtrInput `pulumi:"authenticationPassword"`
	// sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authenticationMd5`, `authenticationNone`, `authenticationSha`, `authenticationSha224`, `authenticationSha256`, `authenticationSha384`, `authenticationSha512`
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Not required if `encryptionType`==`privacy-none`
	// include alphabetic, numeric, and special characters, but it cannot include control characters
	EncryptionPassword pulumi.StringPtrInput `pulumi:"encryptionPassword"`
	// enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
	EncryptionType pulumi.StringPtrInput `pulumi:"encryptionType"`
	Name           pulumi.StringPtrInput `pulumi:"name"`
}

func (NetworktemplateSnmpConfigV3ConfigUsmUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArgs) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutput() NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArgs) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmUserOutput)
}

// NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmUserArray and NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigUsmUserArray{ NetworktemplateSnmpConfigV3ConfigUsmUserArgs{...} }
type NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigUsmUserArray []NetworktemplateSnmpConfigV3ConfigUsmUserInput

func (NetworktemplateSnmpConfigV3ConfigUsmUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArray) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArray) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmUserOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutput() NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return o
}

// Not required if `authenticationType`==`authenticationNone`
// include alphabetic, numeric, and special characters, but it cannot include control characters.
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) AuthenticationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.AuthenticationPassword }).(pulumi.StringPtrOutput)
}

// sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authenticationMd5`, `authenticationNone`, `authenticationSha`, `authenticationSha224`, `authenticationSha256`, `authenticationSha384`, `authenticationSha512`
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Not required if `encryptionType`==`privacy-none`
// include alphabetic, numeric, and special characters, but it cannot include control characters
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) EncryptionPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.EncryptionPassword }).(pulumi.StringPtrOutput)
}

// enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigUsmUser {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigUsmUser)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigUsmUserOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacm struct {
	Accesses        []NetworktemplateSnmpConfigV3ConfigVacmAccess         `pulumi:"accesses"`
	SecurityToGroup *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup `pulumi:"securityToGroup"`
}

// NetworktemplateSnmpConfigV3ConfigVacmInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmArgs and NetworktemplateSnmpConfigV3ConfigVacmOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmOutput() NetworktemplateSnmpConfigV3ConfigVacmOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmArgs struct {
	Accesses        NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput        `pulumi:"accesses"`
	SecurityToGroup NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput `pulumi:"securityToGroup"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmOutput() NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmOutput).ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigVacmPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmArgs, NetworktemplateSnmpConfigV3ConfigVacmPtr and NetworktemplateSnmpConfigV3ConfigVacmPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigVacmArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigVacmPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput
}

type networktemplateSnmpConfigV3ConfigVacmPtrType NetworktemplateSnmpConfigV3ConfigVacmArgs

func NetworktemplateSnmpConfigV3ConfigVacmPtr(v *NetworktemplateSnmpConfigV3ConfigVacmArgs) NetworktemplateSnmpConfigV3ConfigVacmPtrInput {
	return (*networktemplateSnmpConfigV3ConfigVacmPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigVacmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigVacmPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigVacmPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmOutput() NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3ConfigVacm) *NetworktemplateSnmpConfigV3ConfigVacm {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) Accesses() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacm) []NetworktemplateSnmpConfigV3ConfigVacmAccess {
		return v.Accesses
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) SecurityToGroup() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacm) *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		return v.SecurityToGroup
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacm) NetworktemplateSnmpConfigV3ConfigVacm {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3ConfigVacm
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigVacmOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) Accesses() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacm) []NetworktemplateSnmpConfigV3ConfigVacmAccess {
		if v == nil {
			return nil
		}
		return v.Accesses
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) SecurityToGroup() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacm) *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		if v == nil {
			return nil
		}
		return v.SecurityToGroup
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccess struct {
	GroupName   *string                                                 `pulumi:"groupName"`
	PrefixLists []NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList `pulumi:"prefixLists"`
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessArgs and NetworktemplateSnmpConfigV3ConfigVacmAccessOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmAccessInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessArgs struct {
	GroupName   pulumi.StringPtrInput                                           `pulumi:"groupName"`
	PrefixLists NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput `pulumi:"prefixLists"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessOutput)
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessArray and NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessArray{ NetworktemplateSnmpConfigV3ConfigVacmAccessArgs{...} }
type NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessArray []NetworktemplateSnmpConfigV3ConfigVacmAccessInput

func (NetworktemplateSnmpConfigV3ConfigVacmAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccess) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) PrefixLists() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccess) []NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList {
		return v.PrefixLists
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigVacmAccess {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigVacmAccess)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList struct {
	// only required if `type`==`contextPrefix`
	ContextPrefix *string `pulumi:"contextPrefix"`
	// refer to view name
	NotifyView *string `pulumi:"notifyView"`
	// refer to view name
	ReadView *string `pulumi:"readView"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel *string `pulumi:"securityLevel"`
	// enum: `any`, `usm`, `v1`, `v2c`
	SecurityModel *string `pulumi:"securityModel"`
	// enum: `contextPrefix`, `defaultContextPrefix`
	Type *string `pulumi:"type"`
	// refer to view name
	WriteView *string `pulumi:"writeView"`
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs and NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs struct {
	// only required if `type`==`contextPrefix`
	ContextPrefix pulumi.StringPtrInput `pulumi:"contextPrefix"`
	// refer to view name
	NotifyView pulumi.StringPtrInput `pulumi:"notifyView"`
	// refer to view name
	ReadView pulumi.StringPtrInput `pulumi:"readView"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
	// enum: `any`, `usm`, `v1`, `v2c`
	SecurityModel pulumi.StringPtrInput `pulumi:"securityModel"`
	// enum: `contextPrefix`, `defaultContextPrefix`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// refer to view name
	WriteView pulumi.StringPtrInput `pulumi:"writeView"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput)
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray and NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray{ NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs{...} }
type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray []NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return o
}

// only required if `type`==`contextPrefix`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ContextPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.ContextPrefix }).(pulumi.StringPtrOutput)
}

// refer to view name
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) NotifyView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.NotifyView }).(pulumi.StringPtrOutput)
}

// refer to view name
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ReadView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.ReadView }).(pulumi.StringPtrOutput)
}

// enum: `authentication`, `none`, `privacy`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

// enum: `any`, `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.SecurityModel }).(pulumi.StringPtrOutput)
}

// enum: `contextPrefix`, `defaultContextPrefix`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// refer to view name
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) WriteView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.WriteView }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup struct {
	Contents []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent `pulumi:"contents"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel *string `pulumi:"securityModel"`
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs struct {
	Contents NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput `pulumi:"contents"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel pulumi.StringPtrInput `pulumi:"securityModel"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput).ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs, NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtr and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput
}

type networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs

func NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtr(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput {
	return (*networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) Contents() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
		return v.Contents
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput)
}

// enum: `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) *string { return v.SecurityModel }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) Contents() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
		if v == nil {
			return nil
		}
		return v.Contents
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput)
}

// enum: `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) *string {
		if v == nil {
			return nil
		}
		return v.SecurityModel
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent struct {
	// refer to groupName under access
	Group        *string `pulumi:"group"`
	SecurityName *string `pulumi:"securityName"`
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs struct {
	// refer to groupName under access
	Group        pulumi.StringPtrInput `pulumi:"group"`
	SecurityName pulumi.StringPtrInput `pulumi:"securityName"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput)
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray{ NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs{...} }
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return o
}

// refer to groupName under access
func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) SecurityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent) *string { return v.SecurityName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput)
}

type NetworktemplateSnmpConfigView struct {
	// if the root oid configured is included
	Include  *bool   `pulumi:"include"`
	Oid      *string `pulumi:"oid"`
	ViewName *string `pulumi:"viewName"`
}

// NetworktemplateSnmpConfigViewInput is an input type that accepts NetworktemplateSnmpConfigViewArgs and NetworktemplateSnmpConfigViewOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigViewInput` via:
//
//	NetworktemplateSnmpConfigViewArgs{...}
type NetworktemplateSnmpConfigViewInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigViewOutput() NetworktemplateSnmpConfigViewOutput
	ToNetworktemplateSnmpConfigViewOutputWithContext(context.Context) NetworktemplateSnmpConfigViewOutput
}

type NetworktemplateSnmpConfigViewArgs struct {
	// if the root oid configured is included
	Include  pulumi.BoolPtrInput   `pulumi:"include"`
	Oid      pulumi.StringPtrInput `pulumi:"oid"`
	ViewName pulumi.StringPtrInput `pulumi:"viewName"`
}

func (NetworktemplateSnmpConfigViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigViewArgs) ToNetworktemplateSnmpConfigViewOutput() NetworktemplateSnmpConfigViewOutput {
	return i.ToNetworktemplateSnmpConfigViewOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigViewArgs) ToNetworktemplateSnmpConfigViewOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigViewOutput)
}

// NetworktemplateSnmpConfigViewArrayInput is an input type that accepts NetworktemplateSnmpConfigViewArray and NetworktemplateSnmpConfigViewArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigViewArrayInput` via:
//
//	NetworktemplateSnmpConfigViewArray{ NetworktemplateSnmpConfigViewArgs{...} }
type NetworktemplateSnmpConfigViewArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigViewArrayOutput() NetworktemplateSnmpConfigViewArrayOutput
	ToNetworktemplateSnmpConfigViewArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigViewArrayOutput
}

type NetworktemplateSnmpConfigViewArray []NetworktemplateSnmpConfigViewInput

func (NetworktemplateSnmpConfigViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigViewArray) ToNetworktemplateSnmpConfigViewArrayOutput() NetworktemplateSnmpConfigViewArrayOutput {
	return i.ToNetworktemplateSnmpConfigViewArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigViewArray) ToNetworktemplateSnmpConfigViewArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigViewArrayOutput)
}

type NetworktemplateSnmpConfigViewOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigViewOutput) ToNetworktemplateSnmpConfigViewOutput() NetworktemplateSnmpConfigViewOutput {
	return o
}

func (o NetworktemplateSnmpConfigViewOutput) ToNetworktemplateSnmpConfigViewOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewOutput {
	return o
}

// if the root oid configured is included
func (o NetworktemplateSnmpConfigViewOutput) Include() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigView) *bool { return v.Include }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSnmpConfigViewOutput) Oid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigView) *string { return v.Oid }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigViewOutput) ViewName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigView) *string { return v.ViewName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigViewArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigViewArrayOutput) ToNetworktemplateSnmpConfigViewArrayOutput() NetworktemplateSnmpConfigViewArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigViewArrayOutput) ToNetworktemplateSnmpConfigViewArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigViewArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigView {
		return vs[0].([]NetworktemplateSnmpConfigView)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigViewOutput)
}

type NetworktemplateSwitchMatching struct {
	Enable *bool                               `pulumi:"enable"`
	Rules  []NetworktemplateSwitchMatchingRule `pulumi:"rules"`
}

// NetworktemplateSwitchMatchingInput is an input type that accepts NetworktemplateSwitchMatchingArgs and NetworktemplateSwitchMatchingOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingInput` via:
//
//	NetworktemplateSwitchMatchingArgs{...}
type NetworktemplateSwitchMatchingInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingOutput() NetworktemplateSwitchMatchingOutput
	ToNetworktemplateSwitchMatchingOutputWithContext(context.Context) NetworktemplateSwitchMatchingOutput
}

type NetworktemplateSwitchMatchingArgs struct {
	Enable pulumi.BoolPtrInput                         `pulumi:"enable"`
	Rules  NetworktemplateSwitchMatchingRuleArrayInput `pulumi:"rules"`
}

func (NetworktemplateSwitchMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatching)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingOutput() NetworktemplateSwitchMatchingOutput {
	return i.ToNetworktemplateSwitchMatchingOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingOutput)
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return i.ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingOutput).ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMatchingPtrInput is an input type that accepts NetworktemplateSwitchMatchingArgs, NetworktemplateSwitchMatchingPtr and NetworktemplateSwitchMatchingPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingPtrInput` via:
//
//	        NetworktemplateSwitchMatchingArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMatchingPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput
	ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Context) NetworktemplateSwitchMatchingPtrOutput
}

type networktemplateSwitchMatchingPtrType NetworktemplateSwitchMatchingArgs

func NetworktemplateSwitchMatchingPtr(v *NetworktemplateSwitchMatchingArgs) NetworktemplateSwitchMatchingPtrInput {
	return (*networktemplateSwitchMatchingPtrType)(v)
}

func (*networktemplateSwitchMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatching)(nil)).Elem()
}

func (i *networktemplateSwitchMatchingPtrType) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return i.ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMatchingPtrType) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingPtrOutput)
}

type NetworktemplateSwitchMatchingOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatching)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingOutput() NetworktemplateSwitchMatchingOutput {
	return o
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingOutput {
	return o
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return o.ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMatching) *NetworktemplateSwitchMatching {
		return &v
	}).(NetworktemplateSwitchMatchingPtrOutput)
}

func (o NetworktemplateSwitchMatchingOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatching) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingOutput) Rules() NetworktemplateSwitchMatchingRuleArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatching) []NetworktemplateSwitchMatchingRule { return v.Rules }).(NetworktemplateSwitchMatchingRuleArrayOutput)
}

type NetworktemplateSwitchMatchingPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatching)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingPtrOutput) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingPtrOutput) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingPtrOutput) Elem() NetworktemplateSwitchMatchingOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatching) NetworktemplateSwitchMatching {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMatching
		return ret
	}).(NetworktemplateSwitchMatchingOutput)
}

func (o NetworktemplateSwitchMatchingPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatching) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingPtrOutput) Rules() NetworktemplateSwitchMatchingRuleArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatching) []NetworktemplateSwitchMatchingRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(NetworktemplateSwitchMatchingRuleArrayOutput)
}

type NetworktemplateSwitchMatchingRule struct {
	// additional CLI commands to append to the generated Junos config
	//
	// **Note**: no check is done
	AdditionalConfigCmds []string `pulumi:"additionalConfigCmds"`
	// role to match
	MatchRole *string `pulumi:"matchRole"`
	// 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
	MatchType  *string `pulumi:"matchType"`
	MatchValue *string `pulumi:"matchValue"`
	Name       *string `pulumi:"name"`
	// Propery key is the interface name or interface range
	PortConfig map[string]NetworktemplateSwitchMatchingRulePortConfig `pulumi:"portConfig"`
	// Property key is the port mirroring instance name
	// portMirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
	PortMirroring map[string]NetworktemplateSwitchMatchingRulePortMirroring `pulumi:"portMirroring"`
}

// NetworktemplateSwitchMatchingRuleInput is an input type that accepts NetworktemplateSwitchMatchingRuleArgs and NetworktemplateSwitchMatchingRuleOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleInput` via:
//
//	NetworktemplateSwitchMatchingRuleArgs{...}
type NetworktemplateSwitchMatchingRuleInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleOutput() NetworktemplateSwitchMatchingRuleOutput
	ToNetworktemplateSwitchMatchingRuleOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleOutput
}

type NetworktemplateSwitchMatchingRuleArgs struct {
	// additional CLI commands to append to the generated Junos config
	//
	// **Note**: no check is done
	AdditionalConfigCmds pulumi.StringArrayInput `pulumi:"additionalConfigCmds"`
	// role to match
	MatchRole pulumi.StringPtrInput `pulumi:"matchRole"`
	// 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
	MatchType  pulumi.StringPtrInput `pulumi:"matchType"`
	MatchValue pulumi.StringPtrInput `pulumi:"matchValue"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// Propery key is the interface name or interface range
	PortConfig NetworktemplateSwitchMatchingRulePortConfigMapInput `pulumi:"portConfig"`
	// Property key is the port mirroring instance name
	// portMirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
	PortMirroring NetworktemplateSwitchMatchingRulePortMirroringMapInput `pulumi:"portMirroring"`
}

func (NetworktemplateSwitchMatchingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRuleArgs) ToNetworktemplateSwitchMatchingRuleOutput() NetworktemplateSwitchMatchingRuleOutput {
	return i.ToNetworktemplateSwitchMatchingRuleOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleArgs) ToNetworktemplateSwitchMatchingRuleOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleOutput)
}

// NetworktemplateSwitchMatchingRuleArrayInput is an input type that accepts NetworktemplateSwitchMatchingRuleArray and NetworktemplateSwitchMatchingRuleArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleArrayInput` via:
//
//	NetworktemplateSwitchMatchingRuleArray{ NetworktemplateSwitchMatchingRuleArgs{...} }
type NetworktemplateSwitchMatchingRuleArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleArrayOutput() NetworktemplateSwitchMatchingRuleArrayOutput
	ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleArrayOutput
}

type NetworktemplateSwitchMatchingRuleArray []NetworktemplateSwitchMatchingRuleInput

func (NetworktemplateSwitchMatchingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRuleArray) ToNetworktemplateSwitchMatchingRuleArrayOutput() NetworktemplateSwitchMatchingRuleArrayOutput {
	return i.ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleArray) ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleArrayOutput)
}

type NetworktemplateSwitchMatchingRuleOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleOutput) ToNetworktemplateSwitchMatchingRuleOutput() NetworktemplateSwitchMatchingRuleOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleOutput) ToNetworktemplateSwitchMatchingRuleOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOutput {
	return o
}

// additional CLI commands to append to the generated Junos config
//
// **Note**: no check is done
func (o NetworktemplateSwitchMatchingRuleOutput) AdditionalConfigCmds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) []string { return v.AdditionalConfigCmds }).(pulumi.StringArrayOutput)
}

// role to match
func (o NetworktemplateSwitchMatchingRuleOutput) MatchRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchRole }).(pulumi.StringPtrOutput)
}

// 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
func (o NetworktemplateSwitchMatchingRuleOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMatchingRuleOutput) MatchValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchValue }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMatchingRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Propery key is the interface name or interface range
func (o NetworktemplateSwitchMatchingRuleOutput) PortConfig() NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) map[string]NetworktemplateSwitchMatchingRulePortConfig {
		return v.PortConfig
	}).(NetworktemplateSwitchMatchingRulePortConfigMapOutput)
}

// Property key is the port mirroring instance name
// portMirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
func (o NetworktemplateSwitchMatchingRuleOutput) PortMirroring() NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) map[string]NetworktemplateSwitchMatchingRulePortMirroring {
		return v.PortMirroring
	}).(NetworktemplateSwitchMatchingRulePortMirroringMapOutput)
}

type NetworktemplateSwitchMatchingRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleArrayOutput) ToNetworktemplateSwitchMatchingRuleArrayOutput() NetworktemplateSwitchMatchingRuleArrayOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleArrayOutput) ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleArrayOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMatchingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMatchingRule {
		return vs[0].([]NetworktemplateSwitchMatchingRule)[vs[1].(int)]
	}).(NetworktemplateSwitchMatchingRuleOutput)
}

type NetworktemplateSwitchMatchingRulePortConfig struct {
	// To disable LACP support for the AE interface
	AeDisableLacp *bool `pulumi:"aeDisableLacp"`
	// Users could force to use the designated AE name
	AeIdx *int `pulumi:"aeIdx"`
	// to use fast timeout
	AeLacpSlow *bool `pulumi:"aeLacpSlow"`
	Aggregated *bool `pulumi:"aggregated"`
	// if want to generate port up/down alarm
	Critical    *bool   `pulumi:"critical"`
	Description *string `pulumi:"description"`
	// if `speed` and `duplex` are specified, whether to disable autonegotiation
	DisableAutoneg *bool `pulumi:"disableAutoneg"`
	// enum: `auto`, `full`, `half`
	Duplex *string `pulumi:"duplex"`
	// Enable dynamic usage for this port. Set to `dynamic` to enable.
	DynamicUsage *string `pulumi:"dynamicUsage"`
	Esilag       *bool   `pulumi:"esilag"`
	// media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
	Mtu *int `pulumi:"mtu"`
	// prevent helpdesk to override the port config
	NoLocalOverwrite *bool `pulumi:"noLocalOverwrite"`
	PoeDisabled      *bool `pulumi:"poeDisabled"`
	// enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
	Speed *string `pulumi:"speed"`
	// port usage name.
	//
	// If EVPN is used, use `evpnUplink`or `evpnDownlink`
	Usage string `pulumi:"usage"`
}

// NetworktemplateSwitchMatchingRulePortConfigInput is an input type that accepts NetworktemplateSwitchMatchingRulePortConfigArgs and NetworktemplateSwitchMatchingRulePortConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortConfigInput` via:
//
//	NetworktemplateSwitchMatchingRulePortConfigArgs{...}
type NetworktemplateSwitchMatchingRulePortConfigInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortConfigOutput() NetworktemplateSwitchMatchingRulePortConfigOutput
	ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortConfigOutput
}

type NetworktemplateSwitchMatchingRulePortConfigArgs struct {
	// To disable LACP support for the AE interface
	AeDisableLacp pulumi.BoolPtrInput `pulumi:"aeDisableLacp"`
	// Users could force to use the designated AE name
	AeIdx pulumi.IntPtrInput `pulumi:"aeIdx"`
	// to use fast timeout
	AeLacpSlow pulumi.BoolPtrInput `pulumi:"aeLacpSlow"`
	Aggregated pulumi.BoolPtrInput `pulumi:"aggregated"`
	// if want to generate port up/down alarm
	Critical    pulumi.BoolPtrInput   `pulumi:"critical"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	// if `speed` and `duplex` are specified, whether to disable autonegotiation
	DisableAutoneg pulumi.BoolPtrInput `pulumi:"disableAutoneg"`
	// enum: `auto`, `full`, `half`
	Duplex pulumi.StringPtrInput `pulumi:"duplex"`
	// Enable dynamic usage for this port. Set to `dynamic` to enable.
	DynamicUsage pulumi.StringPtrInput `pulumi:"dynamicUsage"`
	Esilag       pulumi.BoolPtrInput   `pulumi:"esilag"`
	// media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// prevent helpdesk to override the port config
	NoLocalOverwrite pulumi.BoolPtrInput `pulumi:"noLocalOverwrite"`
	PoeDisabled      pulumi.BoolPtrInput `pulumi:"poeDisabled"`
	// enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
	Speed pulumi.StringPtrInput `pulumi:"speed"`
	// port usage name.
	//
	// If EVPN is used, use `evpnUplink`or `evpnDownlink`
	Usage pulumi.StringInput `pulumi:"usage"`
}

func (NetworktemplateSwitchMatchingRulePortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortConfigArgs) ToNetworktemplateSwitchMatchingRulePortConfigOutput() NetworktemplateSwitchMatchingRulePortConfigOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortConfigArgs) ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortConfigOutput)
}

// NetworktemplateSwitchMatchingRulePortConfigMapInput is an input type that accepts NetworktemplateSwitchMatchingRulePortConfigMap and NetworktemplateSwitchMatchingRulePortConfigMapOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortConfigMapInput` via:
//
//	NetworktemplateSwitchMatchingRulePortConfigMap{ "key": NetworktemplateSwitchMatchingRulePortConfigArgs{...} }
type NetworktemplateSwitchMatchingRulePortConfigMapInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortConfigMapOutput() NetworktemplateSwitchMatchingRulePortConfigMapOutput
	ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortConfigMapOutput
}

type NetworktemplateSwitchMatchingRulePortConfigMap map[string]NetworktemplateSwitchMatchingRulePortConfigInput

func (NetworktemplateSwitchMatchingRulePortConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortConfigMap) ToNetworktemplateSwitchMatchingRulePortConfigMapOutput() NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortConfigMap) ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortConfigMapOutput)
}

type NetworktemplateSwitchMatchingRulePortConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) ToNetworktemplateSwitchMatchingRulePortConfigOutput() NetworktemplateSwitchMatchingRulePortConfigOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigOutput {
	return o
}

// To disable LACP support for the AE interface
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) AeDisableLacp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.AeDisableLacp }).(pulumi.BoolPtrOutput)
}

// Users could force to use the designated AE name
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) AeIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *int { return v.AeIdx }).(pulumi.IntPtrOutput)
}

// to use fast timeout
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) AeLacpSlow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.AeLacpSlow }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Aggregated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.Aggregated }).(pulumi.BoolPtrOutput)
}

// if want to generate port up/down alarm
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Critical() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.Critical }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// if `speed` and `duplex` are specified, whether to disable autonegotiation
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) DisableAutoneg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.DisableAutoneg }).(pulumi.BoolPtrOutput)
}

// enum: `auto`, `full`, `half`
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Duplex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.Duplex }).(pulumi.StringPtrOutput)
}

// Enable dynamic usage for this port. Set to `dynamic` to enable.
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) DynamicUsage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.DynamicUsage }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Esilag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.Esilag }).(pulumi.BoolPtrOutput)
}

// media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// prevent helpdesk to override the port config
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) NoLocalOverwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.NoLocalOverwrite }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) PoeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.PoeDisabled }).(pulumi.BoolPtrOutput)
}

// enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Speed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.Speed }).(pulumi.StringPtrOutput)
}

// port usage name.
//
// If EVPN is used, use `evpnUplink`or `evpnDownlink`
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) string { return v.Usage }).(pulumi.StringOutput)
}

type NetworktemplateSwitchMatchingRulePortConfigMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortConfigMapOutput) ToNetworktemplateSwitchMatchingRulePortConfigMapOutput() NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortConfigMapOutput) ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortConfigMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateSwitchMatchingRulePortConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateSwitchMatchingRulePortConfig {
		return vs[0].(map[string]NetworktemplateSwitchMatchingRulePortConfig)[vs[1].(string)]
	}).(NetworktemplateSwitchMatchingRulePortConfigOutput)
}

type NetworktemplateSwitchMatchingRulePortMirroring struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses []string `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses []string `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses []string `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork *string `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId *string `pulumi:"outputPortId"`
}

// NetworktemplateSwitchMatchingRulePortMirroringInput is an input type that accepts NetworktemplateSwitchMatchingRulePortMirroringArgs and NetworktemplateSwitchMatchingRulePortMirroringOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortMirroringInput` via:
//
//	NetworktemplateSwitchMatchingRulePortMirroringArgs{...}
type NetworktemplateSwitchMatchingRulePortMirroringInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortMirroringOutput() NetworktemplateSwitchMatchingRulePortMirroringOutput
	ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortMirroringOutput
}

type NetworktemplateSwitchMatchingRulePortMirroringArgs struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses pulumi.StringArrayInput `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses pulumi.StringArrayInput `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses pulumi.StringArrayInput `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork pulumi.StringPtrInput `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId pulumi.StringPtrInput `pulumi:"outputPortId"`
}

func (NetworktemplateSwitchMatchingRulePortMirroringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortMirroringArgs) ToNetworktemplateSwitchMatchingRulePortMirroringOutput() NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortMirroringArgs) ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortMirroringOutput)
}

// NetworktemplateSwitchMatchingRulePortMirroringMapInput is an input type that accepts NetworktemplateSwitchMatchingRulePortMirroringMap and NetworktemplateSwitchMatchingRulePortMirroringMapOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortMirroringMapInput` via:
//
//	NetworktemplateSwitchMatchingRulePortMirroringMap{ "key": NetworktemplateSwitchMatchingRulePortMirroringArgs{...} }
type NetworktemplateSwitchMatchingRulePortMirroringMapInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortMirroringMapOutput() NetworktemplateSwitchMatchingRulePortMirroringMapOutput
	ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortMirroringMapOutput
}

type NetworktemplateSwitchMatchingRulePortMirroringMap map[string]NetworktemplateSwitchMatchingRulePortMirroringInput

func (NetworktemplateSwitchMatchingRulePortMirroringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortMirroringMap) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutput() NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortMirroringMap) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortMirroringMapOutput)
}

type NetworktemplateSwitchMatchingRulePortMirroringOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortMirroringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) ToNetworktemplateSwitchMatchingRulePortMirroringOutput() NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return o
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) InputNetworksIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) []string { return v.InputNetworksIngresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) InputPortIdsEgresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) []string { return v.InputPortIdsEgresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) InputPortIdsIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) []string { return v.InputPortIdsIngresses }).(pulumi.StringArrayOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) OutputNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) *string { return v.OutputNetwork }).(pulumi.StringPtrOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) OutputPortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) *string { return v.OutputPortId }).(pulumi.StringPtrOutput)
}

type NetworktemplateSwitchMatchingRulePortMirroringMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortMirroringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortMirroringMapOutput) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutput() NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortMirroringMapOutput) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortMirroringMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateSwitchMatchingRulePortMirroring {
		return vs[0].(map[string]NetworktemplateSwitchMatchingRulePortMirroring)[vs[1].(string)]
	}).(NetworktemplateSwitchMatchingRulePortMirroringOutput)
}

type NetworktemplateSwitchMgmt struct {
	ConfigRevert *int `pulumi:"configRevert"`
	// restrict inbound-traffic to host
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
	ProtectRe    *NetworktemplateSwitchMgmtProtectRe `pulumi:"protectRe"`
	RootPassword *string                             `pulumi:"rootPassword"`
	Tacacs       *NetworktemplateSwitchMgmtTacacs    `pulumi:"tacacs"`
}

// NetworktemplateSwitchMgmtInput is an input type that accepts NetworktemplateSwitchMgmtArgs and NetworktemplateSwitchMgmtOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtInput` via:
//
//	NetworktemplateSwitchMgmtArgs{...}
type NetworktemplateSwitchMgmtInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtOutput() NetworktemplateSwitchMgmtOutput
	ToNetworktemplateSwitchMgmtOutputWithContext(context.Context) NetworktemplateSwitchMgmtOutput
}

type NetworktemplateSwitchMgmtArgs struct {
	ConfigRevert pulumi.IntPtrInput `pulumi:"configRevert"`
	// restrict inbound-traffic to host
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
	ProtectRe    NetworktemplateSwitchMgmtProtectRePtrInput `pulumi:"protectRe"`
	RootPassword pulumi.StringPtrInput                      `pulumi:"rootPassword"`
	Tacacs       NetworktemplateSwitchMgmtTacacsPtrInput    `pulumi:"tacacs"`
}

func (NetworktemplateSwitchMgmtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtOutput() NetworktemplateSwitchMgmtOutput {
	return i.ToNetworktemplateSwitchMgmtOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtOutput)
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return i.ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtOutput).ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMgmtPtrInput is an input type that accepts NetworktemplateSwitchMgmtArgs, NetworktemplateSwitchMgmtPtr and NetworktemplateSwitchMgmtPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtPtrInput` via:
//
//	        NetworktemplateSwitchMgmtArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMgmtPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput
	ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Context) NetworktemplateSwitchMgmtPtrOutput
}

type networktemplateSwitchMgmtPtrType NetworktemplateSwitchMgmtArgs

func NetworktemplateSwitchMgmtPtr(v *NetworktemplateSwitchMgmtArgs) NetworktemplateSwitchMgmtPtrInput {
	return (*networktemplateSwitchMgmtPtrType)(v)
}

func (*networktemplateSwitchMgmtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (i *networktemplateSwitchMgmtPtrType) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return i.ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMgmtPtrType) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtPtrOutput)
}

type NetworktemplateSwitchMgmtOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtOutput() NetworktemplateSwitchMgmtOutput {
	return o
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtOutput {
	return o
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return o.ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmt {
		return &v
	}).(NetworktemplateSwitchMgmtPtrOutput)
}

func (o NetworktemplateSwitchMgmtOutput) ConfigRevert() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *int { return v.ConfigRevert }).(pulumi.IntPtrOutput)
}

// restrict inbound-traffic to host
// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtOutput) ProtectRe() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtProtectRe { return v.ProtectRe }).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

func (o NetworktemplateSwitchMgmtOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtOutput) Tacacs() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtTacacs { return v.Tacacs }).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

type NetworktemplateSwitchMgmtPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtPtrOutput) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtPtrOutput) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtPtrOutput) Elem() NetworktemplateSwitchMgmtOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) NetworktemplateSwitchMgmt {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMgmt
		return ret
	}).(NetworktemplateSwitchMgmtOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) ConfigRevert() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *int {
		if v == nil {
			return nil
		}
		return v.ConfigRevert
	}).(pulumi.IntPtrOutput)
}

// restrict inbound-traffic to host
// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtPtrOutput) ProtectRe() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtProtectRe {
		if v == nil {
			return nil
		}
		return v.ProtectRe
	}).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) Tacacs() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtTacacs {
		if v == nil {
			return nil
		}
		return v.Tacacs
	}).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

type NetworktemplateSwitchMgmtProtectRe struct {
	// optionally, services we'll allow
	AllowedServices []string                                   `pulumi:"allowedServices"`
	Customs         []NetworktemplateSwitchMgmtProtectReCustom `pulumi:"customs"`
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default
	//      if dhcpd is enabled, we'll make sure it works
	Enabled *bool `pulumi:"enabled"`
	// host/subnets we'll allow traffic to/from
	TrustedHosts []string `pulumi:"trustedHosts"`
}

// NetworktemplateSwitchMgmtProtectReInput is an input type that accepts NetworktemplateSwitchMgmtProtectReArgs and NetworktemplateSwitchMgmtProtectReOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectReInput` via:
//
//	NetworktemplateSwitchMgmtProtectReArgs{...}
type NetworktemplateSwitchMgmtProtectReInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectReOutput() NetworktemplateSwitchMgmtProtectReOutput
	ToNetworktemplateSwitchMgmtProtectReOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectReOutput
}

type NetworktemplateSwitchMgmtProtectReArgs struct {
	// optionally, services we'll allow
	AllowedServices pulumi.StringArrayInput                            `pulumi:"allowedServices"`
	Customs         NetworktemplateSwitchMgmtProtectReCustomArrayInput `pulumi:"customs"`
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default
	//      if dhcpd is enabled, we'll make sure it works
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// host/subnets we'll allow traffic to/from
	TrustedHosts pulumi.StringArrayInput `pulumi:"trustedHosts"`
}

func (NetworktemplateSwitchMgmtProtectReArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectReOutput() NetworktemplateSwitchMgmtProtectReOutput {
	return i.ToNetworktemplateSwitchMgmtProtectReOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectReOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReOutput)
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return i.ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReOutput).ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMgmtProtectRePtrInput is an input type that accepts NetworktemplateSwitchMgmtProtectReArgs, NetworktemplateSwitchMgmtProtectRePtr and NetworktemplateSwitchMgmtProtectRePtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectRePtrInput` via:
//
//	        NetworktemplateSwitchMgmtProtectReArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMgmtProtectRePtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput
	ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput
}

type networktemplateSwitchMgmtProtectRePtrType NetworktemplateSwitchMgmtProtectReArgs

func NetworktemplateSwitchMgmtProtectRePtr(v *NetworktemplateSwitchMgmtProtectReArgs) NetworktemplateSwitchMgmtProtectRePtrInput {
	return (*networktemplateSwitchMgmtProtectRePtrType)(v)
}

func (*networktemplateSwitchMgmtProtectRePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (i *networktemplateSwitchMgmtProtectRePtrType) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return i.ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMgmtProtectRePtrType) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

type NetworktemplateSwitchMgmtProtectReOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectReOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectReOutput() NetworktemplateSwitchMgmtProtectReOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectReOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMgmtProtectRe) *NetworktemplateSwitchMgmtProtectRe {
		return &v
	}).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

// optionally, services we'll allow
func (o NetworktemplateSwitchMgmtProtectReOutput) AllowedServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) []string { return v.AllowedServices }).(pulumi.StringArrayOutput)
}

func (o NetworktemplateSwitchMgmtProtectReOutput) Customs() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) []NetworktemplateSwitchMgmtProtectReCustom {
		return v.Customs
	}).(NetworktemplateSwitchMgmtProtectReCustomArrayOutput)
}

// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default
//
//	if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtProtectReOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// host/subnets we'll allow traffic to/from
func (o NetworktemplateSwitchMgmtProtectReOutput) TrustedHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) []string { return v.TrustedHosts }).(pulumi.StringArrayOutput)
}

type NetworktemplateSwitchMgmtProtectRePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectRePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) Elem() NetworktemplateSwitchMgmtProtectReOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) NetworktemplateSwitchMgmtProtectRe {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMgmtProtectRe
		return ret
	}).(NetworktemplateSwitchMgmtProtectReOutput)
}

// optionally, services we'll allow
func (o NetworktemplateSwitchMgmtProtectRePtrOutput) AllowedServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) []string {
		if v == nil {
			return nil
		}
		return v.AllowedServices
	}).(pulumi.StringArrayOutput)
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) Customs() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) []NetworktemplateSwitchMgmtProtectReCustom {
		if v == nil {
			return nil
		}
		return v.Customs
	}).(NetworktemplateSwitchMgmtProtectReCustomArrayOutput)
}

// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default
//
//	if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtProtectRePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// host/subnets we'll allow traffic to/from
func (o NetworktemplateSwitchMgmtProtectRePtrOutput) TrustedHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) []string {
		if v == nil {
			return nil
		}
		return v.TrustedHosts
	}).(pulumi.StringArrayOutput)
}

type NetworktemplateSwitchMgmtProtectReCustom struct {
	// matched dst port, "0" means any
	PortRange *string `pulumi:"portRange"`
	// enum: `any`, `icmp`, `tcp`, `udp`
	Protocol *string  `pulumi:"protocol"`
	Subnets  []string `pulumi:"subnets"`
}

// NetworktemplateSwitchMgmtProtectReCustomInput is an input type that accepts NetworktemplateSwitchMgmtProtectReCustomArgs and NetworktemplateSwitchMgmtProtectReCustomOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectReCustomInput` via:
//
//	NetworktemplateSwitchMgmtProtectReCustomArgs{...}
type NetworktemplateSwitchMgmtProtectReCustomInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectReCustomOutput() NetworktemplateSwitchMgmtProtectReCustomOutput
	ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectReCustomOutput
}

type NetworktemplateSwitchMgmtProtectReCustomArgs struct {
	// matched dst port, "0" means any
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// enum: `any`, `icmp`, `tcp`, `udp`
	Protocol pulumi.StringPtrInput   `pulumi:"protocol"`
	Subnets  pulumi.StringArrayInput `pulumi:"subnets"`
}

func (NetworktemplateSwitchMgmtProtectReCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtProtectReCustomArgs) ToNetworktemplateSwitchMgmtProtectReCustomOutput() NetworktemplateSwitchMgmtProtectReCustomOutput {
	return i.ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReCustomArgs) ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReCustomOutput)
}

// NetworktemplateSwitchMgmtProtectReCustomArrayInput is an input type that accepts NetworktemplateSwitchMgmtProtectReCustomArray and NetworktemplateSwitchMgmtProtectReCustomArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectReCustomArrayInput` via:
//
//	NetworktemplateSwitchMgmtProtectReCustomArray{ NetworktemplateSwitchMgmtProtectReCustomArgs{...} }
type NetworktemplateSwitchMgmtProtectReCustomArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectReCustomArrayOutput() NetworktemplateSwitchMgmtProtectReCustomArrayOutput
	ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectReCustomArrayOutput
}

type NetworktemplateSwitchMgmtProtectReCustomArray []NetworktemplateSwitchMgmtProtectReCustomInput

func (NetworktemplateSwitchMgmtProtectReCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtProtectReCustomArray) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutput() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return i.ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReCustomArray) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReCustomArrayOutput)
}

type NetworktemplateSwitchMgmtProtectReCustomOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectReCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectReCustomOutput) ToNetworktemplateSwitchMgmtProtectReCustomOutput() NetworktemplateSwitchMgmtProtectReCustomOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReCustomOutput) ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomOutput {
	return o
}

// matched dst port, "0" means any
func (o NetworktemplateSwitchMgmtProtectReCustomOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectReCustom) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// enum: `any`, `icmp`, `tcp`, `udp`
func (o NetworktemplateSwitchMgmtProtectReCustomOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectReCustom) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtProtectReCustomOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectReCustom) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type NetworktemplateSwitchMgmtProtectReCustomArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectReCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectReCustomArrayOutput) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutput() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReCustomArrayOutput) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReCustomArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMgmtProtectReCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMgmtProtectReCustom {
		return vs[0].([]NetworktemplateSwitchMgmtProtectReCustom)[vs[1].(int)]
	}).(NetworktemplateSwitchMgmtProtectReCustomOutput)
}

type NetworktemplateSwitchMgmtTacacs struct {
	AcctServers []NetworktemplateSwitchMgmtTacacsAcctServer `pulumi:"acctServers"`
	// enum: `admin`, `helpdesk`, `none`, `read`
	DefaultRole *string `pulumi:"defaultRole"`
	Enabled     *bool   `pulumi:"enabled"`
	// which network the TACACS server resides
	Network        *string                                        `pulumi:"network"`
	TacplusServers []NetworktemplateSwitchMgmtTacacsTacplusServer `pulumi:"tacplusServers"`
}

// NetworktemplateSwitchMgmtTacacsInput is an input type that accepts NetworktemplateSwitchMgmtTacacsArgs and NetworktemplateSwitchMgmtTacacsOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsInput` via:
//
//	NetworktemplateSwitchMgmtTacacsArgs{...}
type NetworktemplateSwitchMgmtTacacsInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsOutput() NetworktemplateSwitchMgmtTacacsOutput
	ToNetworktemplateSwitchMgmtTacacsOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsOutput
}

type NetworktemplateSwitchMgmtTacacsArgs struct {
	AcctServers NetworktemplateSwitchMgmtTacacsAcctServerArrayInput `pulumi:"acctServers"`
	// enum: `admin`, `helpdesk`, `none`, `read`
	DefaultRole pulumi.StringPtrInput `pulumi:"defaultRole"`
	Enabled     pulumi.BoolPtrInput   `pulumi:"enabled"`
	// which network the TACACS server resides
	Network        pulumi.StringPtrInput                                  `pulumi:"network"`
	TacplusServers NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput `pulumi:"tacplusServers"`
}

func (NetworktemplateSwitchMgmtTacacsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsOutput() NetworktemplateSwitchMgmtTacacsOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsOutput)
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsOutput).ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMgmtTacacsPtrInput is an input type that accepts NetworktemplateSwitchMgmtTacacsArgs, NetworktemplateSwitchMgmtTacacsPtr and NetworktemplateSwitchMgmtTacacsPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsPtrInput` via:
//
//	        NetworktemplateSwitchMgmtTacacsArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMgmtTacacsPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput
	ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput
}

type networktemplateSwitchMgmtTacacsPtrType NetworktemplateSwitchMgmtTacacsArgs

func NetworktemplateSwitchMgmtTacacsPtr(v *NetworktemplateSwitchMgmtTacacsArgs) NetworktemplateSwitchMgmtTacacsPtrInput {
	return (*networktemplateSwitchMgmtTacacsPtrType)(v)
}

func (*networktemplateSwitchMgmtTacacsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (i *networktemplateSwitchMgmtTacacsPtrType) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMgmtTacacsPtrType) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

type NetworktemplateSwitchMgmtTacacsOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsOutput() NetworktemplateSwitchMgmtTacacsOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMgmtTacacs) *NetworktemplateSwitchMgmtTacacs {
		return &v
	}).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsOutput) AcctServers() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsAcctServer {
		return v.AcctServers
	}).(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput)
}

// enum: `admin`, `helpdesk`, `none`, `read`
func (o NetworktemplateSwitchMgmtTacacsOutput) DefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) *string { return v.DefaultRole }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// which network the TACACS server resides
func (o NetworktemplateSwitchMgmtTacacsOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsOutput) TacplusServers() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsTacplusServer {
		return v.TacplusServers
	}).(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) Elem() NetworktemplateSwitchMgmtTacacsOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) NetworktemplateSwitchMgmtTacacs {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMgmtTacacs
		return ret
	}).(NetworktemplateSwitchMgmtTacacsOutput)
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) AcctServers() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsAcctServer {
		if v == nil {
			return nil
		}
		return v.AcctServers
	}).(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput)
}

// enum: `admin`, `helpdesk`, `none`, `read`
func (o NetworktemplateSwitchMgmtTacacsPtrOutput) DefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) *string {
		if v == nil {
			return nil
		}
		return v.DefaultRole
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// which network the TACACS server resides
func (o NetworktemplateSwitchMgmtTacacsPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) TacplusServers() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsTacplusServer {
		if v == nil {
			return nil
		}
		return v.TacplusServers
	}).(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsAcctServer struct {
	Host    *string `pulumi:"host"`
	Port    *string `pulumi:"port"`
	Secret  *string `pulumi:"secret"`
	Timeout *int    `pulumi:"timeout"`
}

// NetworktemplateSwitchMgmtTacacsAcctServerInput is an input type that accepts NetworktemplateSwitchMgmtTacacsAcctServerArgs and NetworktemplateSwitchMgmtTacacsAcctServerOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsAcctServerInput` via:
//
//	NetworktemplateSwitchMgmtTacacsAcctServerArgs{...}
type NetworktemplateSwitchMgmtTacacsAcctServerInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsAcctServerOutput() NetworktemplateSwitchMgmtTacacsAcctServerOutput
	ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsAcctServerOutput
}

type NetworktemplateSwitchMgmtTacacsAcctServerArgs struct {
	Host    pulumi.StringPtrInput `pulumi:"host"`
	Port    pulumi.StringPtrInput `pulumi:"port"`
	Secret  pulumi.StringPtrInput `pulumi:"secret"`
	Timeout pulumi.IntPtrInput    `pulumi:"timeout"`
}

func (NetworktemplateSwitchMgmtTacacsAcctServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArgs) ToNetworktemplateSwitchMgmtTacacsAcctServerOutput() NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArgs) ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsAcctServerOutput)
}

// NetworktemplateSwitchMgmtTacacsAcctServerArrayInput is an input type that accepts NetworktemplateSwitchMgmtTacacsAcctServerArray and NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsAcctServerArrayInput` via:
//
//	NetworktemplateSwitchMgmtTacacsAcctServerArray{ NetworktemplateSwitchMgmtTacacsAcctServerArgs{...} }
type NetworktemplateSwitchMgmtTacacsAcctServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutput() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput
	ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput
}

type NetworktemplateSwitchMgmtTacacsAcctServerArray []NetworktemplateSwitchMgmtTacacsAcctServerInput

func (NetworktemplateSwitchMgmtTacacsAcctServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArray) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutput() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArray) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsAcctServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsAcctServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerOutput() NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutput() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMgmtTacacsAcctServer {
		return vs[0].([]NetworktemplateSwitchMgmtTacacsAcctServer)[vs[1].(int)]
	}).(NetworktemplateSwitchMgmtTacacsAcctServerOutput)
}

type NetworktemplateSwitchMgmtTacacsTacplusServer struct {
	Host    *string `pulumi:"host"`
	Port    *string `pulumi:"port"`
	Secret  *string `pulumi:"secret"`
	Timeout *int    `pulumi:"timeout"`
}

// NetworktemplateSwitchMgmtTacacsTacplusServerInput is an input type that accepts NetworktemplateSwitchMgmtTacacsTacplusServerArgs and NetworktemplateSwitchMgmtTacacsTacplusServerOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsTacplusServerInput` via:
//
//	NetworktemplateSwitchMgmtTacacsTacplusServerArgs{...}
type NetworktemplateSwitchMgmtTacacsTacplusServerInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsTacplusServerOutput() NetworktemplateSwitchMgmtTacacsTacplusServerOutput
	ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerOutput
}

type NetworktemplateSwitchMgmtTacacsTacplusServerArgs struct {
	Host    pulumi.StringPtrInput `pulumi:"host"`
	Port    pulumi.StringPtrInput `pulumi:"port"`
	Secret  pulumi.StringPtrInput `pulumi:"secret"`
	Timeout pulumi.IntPtrInput    `pulumi:"timeout"`
}

func (NetworktemplateSwitchMgmtTacacsTacplusServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArgs) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutput() NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArgs) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsTacplusServerOutput)
}

// NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput is an input type that accepts NetworktemplateSwitchMgmtTacacsTacplusServerArray and NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput` via:
//
//	NetworktemplateSwitchMgmtTacacsTacplusServerArray{ NetworktemplateSwitchMgmtTacacsTacplusServerArgs{...} }
type NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput
	ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput
}

type NetworktemplateSwitchMgmtTacacsTacplusServerArray []NetworktemplateSwitchMgmtTacacsTacplusServerInput

func (NetworktemplateSwitchMgmtTacacsTacplusServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArray) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArray) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsTacplusServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsTacplusServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutput() NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMgmtTacacsTacplusServer {
		return vs[0].([]NetworktemplateSwitchMgmtTacacsTacplusServer)[vs[1].(int)]
	}).(NetworktemplateSwitchMgmtTacacsTacplusServerOutput)
}

type NetworktemplateVrfConfig struct {
	// whether to enable VRF (when supported on the device)
	Enabled *bool `pulumi:"enabled"`
}

// NetworktemplateVrfConfigInput is an input type that accepts NetworktemplateVrfConfigArgs and NetworktemplateVrfConfigOutput values.
// You can construct a concrete instance of `NetworktemplateVrfConfigInput` via:
//
//	NetworktemplateVrfConfigArgs{...}
type NetworktemplateVrfConfigInput interface {
	pulumi.Input

	ToNetworktemplateVrfConfigOutput() NetworktemplateVrfConfigOutput
	ToNetworktemplateVrfConfigOutputWithContext(context.Context) NetworktemplateVrfConfigOutput
}

type NetworktemplateVrfConfigArgs struct {
	// whether to enable VRF (when supported on the device)
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (NetworktemplateVrfConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfConfig)(nil)).Elem()
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigOutput() NetworktemplateVrfConfigOutput {
	return i.ToNetworktemplateVrfConfigOutputWithContext(context.Background())
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigOutputWithContext(ctx context.Context) NetworktemplateVrfConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfConfigOutput)
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return i.ToNetworktemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfConfigOutput).ToNetworktemplateVrfConfigPtrOutputWithContext(ctx)
}

// NetworktemplateVrfConfigPtrInput is an input type that accepts NetworktemplateVrfConfigArgs, NetworktemplateVrfConfigPtr and NetworktemplateVrfConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateVrfConfigPtrInput` via:
//
//	        NetworktemplateVrfConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateVrfConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput
	ToNetworktemplateVrfConfigPtrOutputWithContext(context.Context) NetworktemplateVrfConfigPtrOutput
}

type networktemplateVrfConfigPtrType NetworktemplateVrfConfigArgs

func NetworktemplateVrfConfigPtr(v *NetworktemplateVrfConfigArgs) NetworktemplateVrfConfigPtrInput {
	return (*networktemplateVrfConfigPtrType)(v)
}

func (*networktemplateVrfConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateVrfConfig)(nil)).Elem()
}

func (i *networktemplateVrfConfigPtrType) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return i.ToNetworktemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateVrfConfigPtrType) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfConfigPtrOutput)
}

type NetworktemplateVrfConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfConfig)(nil)).Elem()
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigOutput() NetworktemplateVrfConfigOutput {
	return o
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigOutputWithContext(ctx context.Context) NetworktemplateVrfConfigOutput {
	return o
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return o.ToNetworktemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateVrfConfig) *NetworktemplateVrfConfig {
		return &v
	}).(NetworktemplateVrfConfigPtrOutput)
}

// whether to enable VRF (when supported on the device)
func (o NetworktemplateVrfConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateVrfConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type NetworktemplateVrfConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateVrfConfig)(nil)).Elem()
}

func (o NetworktemplateVrfConfigPtrOutput) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return o
}

func (o NetworktemplateVrfConfigPtrOutput) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return o
}

func (o NetworktemplateVrfConfigPtrOutput) Elem() NetworktemplateVrfConfigOutput {
	return o.ApplyT(func(v *NetworktemplateVrfConfig) NetworktemplateVrfConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateVrfConfig
		return ret
	}).(NetworktemplateVrfConfigOutput)
}

// whether to enable VRF (when supported on the device)
func (o NetworktemplateVrfConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateVrfConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type NetworktemplateVrfInstances struct {
	// Property key is the destination CIDR (e.g. "10.0.0.0/8")
	ExtraRoutes map[string]NetworktemplateVrfInstancesExtraRoutes `pulumi:"extraRoutes"`
	Networks    []string                                          `pulumi:"networks"`
}

// NetworktemplateVrfInstancesInput is an input type that accepts NetworktemplateVrfInstancesArgs and NetworktemplateVrfInstancesOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesInput` via:
//
//	NetworktemplateVrfInstancesArgs{...}
type NetworktemplateVrfInstancesInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesOutput() NetworktemplateVrfInstancesOutput
	ToNetworktemplateVrfInstancesOutputWithContext(context.Context) NetworktemplateVrfInstancesOutput
}

type NetworktemplateVrfInstancesArgs struct {
	// Property key is the destination CIDR (e.g. "10.0.0.0/8")
	ExtraRoutes NetworktemplateVrfInstancesExtraRoutesMapInput `pulumi:"extraRoutes"`
	Networks    pulumi.StringArrayInput                        `pulumi:"networks"`
}

func (NetworktemplateVrfInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstances)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesArgs) ToNetworktemplateVrfInstancesOutput() NetworktemplateVrfInstancesOutput {
	return i.ToNetworktemplateVrfInstancesOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesArgs) ToNetworktemplateVrfInstancesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesOutput)
}

// NetworktemplateVrfInstancesMapInput is an input type that accepts NetworktemplateVrfInstancesMap and NetworktemplateVrfInstancesMapOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesMapInput` via:
//
//	NetworktemplateVrfInstancesMap{ "key": NetworktemplateVrfInstancesArgs{...} }
type NetworktemplateVrfInstancesMapInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesMapOutput() NetworktemplateVrfInstancesMapOutput
	ToNetworktemplateVrfInstancesMapOutputWithContext(context.Context) NetworktemplateVrfInstancesMapOutput
}

type NetworktemplateVrfInstancesMap map[string]NetworktemplateVrfInstancesInput

func (NetworktemplateVrfInstancesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstances)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesMap) ToNetworktemplateVrfInstancesMapOutput() NetworktemplateVrfInstancesMapOutput {
	return i.ToNetworktemplateVrfInstancesMapOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesMap) ToNetworktemplateVrfInstancesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesMapOutput)
}

type NetworktemplateVrfInstancesOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstances)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesOutput) ToNetworktemplateVrfInstancesOutput() NetworktemplateVrfInstancesOutput {
	return o
}

func (o NetworktemplateVrfInstancesOutput) ToNetworktemplateVrfInstancesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesOutput {
	return o
}

// Property key is the destination CIDR (e.g. "10.0.0.0/8")
func (o NetworktemplateVrfInstancesOutput) ExtraRoutes() NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return o.ApplyT(func(v NetworktemplateVrfInstances) map[string]NetworktemplateVrfInstancesExtraRoutes {
		return v.ExtraRoutes
	}).(NetworktemplateVrfInstancesExtraRoutesMapOutput)
}

func (o NetworktemplateVrfInstancesOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateVrfInstances) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type NetworktemplateVrfInstancesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstances)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesMapOutput) ToNetworktemplateVrfInstancesMapOutput() NetworktemplateVrfInstancesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesMapOutput) ToNetworktemplateVrfInstancesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateVrfInstancesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateVrfInstances {
		return vs[0].(map[string]NetworktemplateVrfInstances)[vs[1].(string)]
	}).(NetworktemplateVrfInstancesOutput)
}

type NetworktemplateVrfInstancesExtraRoutes struct {
	// Next-hop address
	Via string `pulumi:"via"`
}

// NetworktemplateVrfInstancesExtraRoutesInput is an input type that accepts NetworktemplateVrfInstancesExtraRoutesArgs and NetworktemplateVrfInstancesExtraRoutesOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesExtraRoutesInput` via:
//
//	NetworktemplateVrfInstancesExtraRoutesArgs{...}
type NetworktemplateVrfInstancesExtraRoutesInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesExtraRoutesOutput() NetworktemplateVrfInstancesExtraRoutesOutput
	ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(context.Context) NetworktemplateVrfInstancesExtraRoutesOutput
}

type NetworktemplateVrfInstancesExtraRoutesArgs struct {
	// Next-hop address
	Via pulumi.StringInput `pulumi:"via"`
}

func (NetworktemplateVrfInstancesExtraRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesExtraRoutesArgs) ToNetworktemplateVrfInstancesExtraRoutesOutput() NetworktemplateVrfInstancesExtraRoutesOutput {
	return i.ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesExtraRoutesArgs) ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesExtraRoutesOutput)
}

// NetworktemplateVrfInstancesExtraRoutesMapInput is an input type that accepts NetworktemplateVrfInstancesExtraRoutesMap and NetworktemplateVrfInstancesExtraRoutesMapOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesExtraRoutesMapInput` via:
//
//	NetworktemplateVrfInstancesExtraRoutesMap{ "key": NetworktemplateVrfInstancesExtraRoutesArgs{...} }
type NetworktemplateVrfInstancesExtraRoutesMapInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesExtraRoutesMapOutput() NetworktemplateVrfInstancesExtraRoutesMapOutput
	ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(context.Context) NetworktemplateVrfInstancesExtraRoutesMapOutput
}

type NetworktemplateVrfInstancesExtraRoutesMap map[string]NetworktemplateVrfInstancesExtraRoutesInput

func (NetworktemplateVrfInstancesExtraRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesExtraRoutesMap) ToNetworktemplateVrfInstancesExtraRoutesMapOutput() NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return i.ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesExtraRoutesMap) ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesExtraRoutesMapOutput)
}

type NetworktemplateVrfInstancesExtraRoutesOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesExtraRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesExtraRoutesOutput) ToNetworktemplateVrfInstancesExtraRoutesOutput() NetworktemplateVrfInstancesExtraRoutesOutput {
	return o
}

func (o NetworktemplateVrfInstancesExtraRoutesOutput) ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesOutput {
	return o
}

// Next-hop address
func (o NetworktemplateVrfInstancesExtraRoutesOutput) Via() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateVrfInstancesExtraRoutes) string { return v.Via }).(pulumi.StringOutput)
}

type NetworktemplateVrfInstancesExtraRoutesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesExtraRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesExtraRoutesMapOutput) ToNetworktemplateVrfInstancesExtraRoutesMapOutput() NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesExtraRoutesMapOutput) ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesExtraRoutesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateVrfInstancesExtraRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateVrfInstancesExtraRoutes {
		return vs[0].(map[string]NetworktemplateVrfInstancesExtraRoutes)[vs[1].(string)]
	}).(NetworktemplateVrfInstancesExtraRoutesOutput)
}

type RftemplateBand24 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 2.4GHz band. enum: `20`, `40`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// RftemplateBand24Input is an input type that accepts RftemplateBand24Args and RftemplateBand24Output values.
// You can construct a concrete instance of `RftemplateBand24Input` via:
//
//	RftemplateBand24Args{...}
type RftemplateBand24Input interface {
	pulumi.Input

	ToRftemplateBand24Output() RftemplateBand24Output
	ToRftemplateBand24OutputWithContext(context.Context) RftemplateBand24Output
}

type RftemplateBand24Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 2.4GHz band. enum: `20`, `40`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (RftemplateBand24Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand24)(nil)).Elem()
}

func (i RftemplateBand24Args) ToRftemplateBand24Output() RftemplateBand24Output {
	return i.ToRftemplateBand24OutputWithContext(context.Background())
}

func (i RftemplateBand24Args) ToRftemplateBand24OutputWithContext(ctx context.Context) RftemplateBand24Output {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand24Output)
}

func (i RftemplateBand24Args) ToRftemplateBand24PtrOutput() RftemplateBand24PtrOutput {
	return i.ToRftemplateBand24PtrOutputWithContext(context.Background())
}

func (i RftemplateBand24Args) ToRftemplateBand24PtrOutputWithContext(ctx context.Context) RftemplateBand24PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand24Output).ToRftemplateBand24PtrOutputWithContext(ctx)
}

// RftemplateBand24PtrInput is an input type that accepts RftemplateBand24Args, RftemplateBand24Ptr and RftemplateBand24PtrOutput values.
// You can construct a concrete instance of `RftemplateBand24PtrInput` via:
//
//	        RftemplateBand24Args{...}
//
//	or:
//
//	        nil
type RftemplateBand24PtrInput interface {
	pulumi.Input

	ToRftemplateBand24PtrOutput() RftemplateBand24PtrOutput
	ToRftemplateBand24PtrOutputWithContext(context.Context) RftemplateBand24PtrOutput
}

type rftemplateBand24PtrType RftemplateBand24Args

func RftemplateBand24Ptr(v *RftemplateBand24Args) RftemplateBand24PtrInput {
	return (*rftemplateBand24PtrType)(v)
}

func (*rftemplateBand24PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand24)(nil)).Elem()
}

func (i *rftemplateBand24PtrType) ToRftemplateBand24PtrOutput() RftemplateBand24PtrOutput {
	return i.ToRftemplateBand24PtrOutputWithContext(context.Background())
}

func (i *rftemplateBand24PtrType) ToRftemplateBand24PtrOutputWithContext(ctx context.Context) RftemplateBand24PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand24PtrOutput)
}

type RftemplateBand24Output struct{ *pulumi.OutputState }

func (RftemplateBand24Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand24)(nil)).Elem()
}

func (o RftemplateBand24Output) ToRftemplateBand24Output() RftemplateBand24Output {
	return o
}

func (o RftemplateBand24Output) ToRftemplateBand24OutputWithContext(ctx context.Context) RftemplateBand24Output {
	return o
}

func (o RftemplateBand24Output) ToRftemplateBand24PtrOutput() RftemplateBand24PtrOutput {
	return o.ToRftemplateBand24PtrOutputWithContext(context.Background())
}

func (o RftemplateBand24Output) ToRftemplateBand24PtrOutputWithContext(ctx context.Context) RftemplateBand24PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateBand24) *RftemplateBand24 {
		return &v
	}).(RftemplateBand24PtrOutput)
}

func (o RftemplateBand24Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand24Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand24Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 2.4GHz band. enum: `20`, `40`
func (o RftemplateBand24Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand24Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateBand24) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand24Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand24Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand24Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand24Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand24Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand24) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type RftemplateBand24PtrOutput struct{ *pulumi.OutputState }

func (RftemplateBand24PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand24)(nil)).Elem()
}

func (o RftemplateBand24PtrOutput) ToRftemplateBand24PtrOutput() RftemplateBand24PtrOutput {
	return o
}

func (o RftemplateBand24PtrOutput) ToRftemplateBand24PtrOutputWithContext(ctx context.Context) RftemplateBand24PtrOutput {
	return o
}

func (o RftemplateBand24PtrOutput) Elem() RftemplateBand24Output {
	return o.ApplyT(func(v *RftemplateBand24) RftemplateBand24 {
		if v != nil {
			return *v
		}
		var ret RftemplateBand24
		return ret
	}).(RftemplateBand24Output)
}

func (o RftemplateBand24PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand24PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand24PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 2.4GHz band. enum: `20`, `40`
func (o RftemplateBand24PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand24PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateBand24) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand24PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand24PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand24PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand24PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand24PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand24) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type RftemplateBand5 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// RftemplateBand5Input is an input type that accepts RftemplateBand5Args and RftemplateBand5Output values.
// You can construct a concrete instance of `RftemplateBand5Input` via:
//
//	RftemplateBand5Args{...}
type RftemplateBand5Input interface {
	pulumi.Input

	ToRftemplateBand5Output() RftemplateBand5Output
	ToRftemplateBand5OutputWithContext(context.Context) RftemplateBand5Output
}

type RftemplateBand5Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (RftemplateBand5Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand5)(nil)).Elem()
}

func (i RftemplateBand5Args) ToRftemplateBand5Output() RftemplateBand5Output {
	return i.ToRftemplateBand5OutputWithContext(context.Background())
}

func (i RftemplateBand5Args) ToRftemplateBand5OutputWithContext(ctx context.Context) RftemplateBand5Output {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand5Output)
}

func (i RftemplateBand5Args) ToRftemplateBand5PtrOutput() RftemplateBand5PtrOutput {
	return i.ToRftemplateBand5PtrOutputWithContext(context.Background())
}

func (i RftemplateBand5Args) ToRftemplateBand5PtrOutputWithContext(ctx context.Context) RftemplateBand5PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand5Output).ToRftemplateBand5PtrOutputWithContext(ctx)
}

// RftemplateBand5PtrInput is an input type that accepts RftemplateBand5Args, RftemplateBand5Ptr and RftemplateBand5PtrOutput values.
// You can construct a concrete instance of `RftemplateBand5PtrInput` via:
//
//	        RftemplateBand5Args{...}
//
//	or:
//
//	        nil
type RftemplateBand5PtrInput interface {
	pulumi.Input

	ToRftemplateBand5PtrOutput() RftemplateBand5PtrOutput
	ToRftemplateBand5PtrOutputWithContext(context.Context) RftemplateBand5PtrOutput
}

type rftemplateBand5PtrType RftemplateBand5Args

func RftemplateBand5Ptr(v *RftemplateBand5Args) RftemplateBand5PtrInput {
	return (*rftemplateBand5PtrType)(v)
}

func (*rftemplateBand5PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand5)(nil)).Elem()
}

func (i *rftemplateBand5PtrType) ToRftemplateBand5PtrOutput() RftemplateBand5PtrOutput {
	return i.ToRftemplateBand5PtrOutputWithContext(context.Background())
}

func (i *rftemplateBand5PtrType) ToRftemplateBand5PtrOutputWithContext(ctx context.Context) RftemplateBand5PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand5PtrOutput)
}

type RftemplateBand5Output struct{ *pulumi.OutputState }

func (RftemplateBand5Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand5)(nil)).Elem()
}

func (o RftemplateBand5Output) ToRftemplateBand5Output() RftemplateBand5Output {
	return o
}

func (o RftemplateBand5Output) ToRftemplateBand5OutputWithContext(ctx context.Context) RftemplateBand5Output {
	return o
}

func (o RftemplateBand5Output) ToRftemplateBand5PtrOutput() RftemplateBand5PtrOutput {
	return o.ToRftemplateBand5PtrOutputWithContext(context.Background())
}

func (o RftemplateBand5Output) ToRftemplateBand5PtrOutputWithContext(ctx context.Context) RftemplateBand5PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateBand5) *RftemplateBand5 {
		return &v
	}).(RftemplateBand5PtrOutput)
}

func (o RftemplateBand5Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand5Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand5Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateBand5Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand5Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateBand5) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand5Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand5Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand5Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand5) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type RftemplateBand5PtrOutput struct{ *pulumi.OutputState }

func (RftemplateBand5PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand5)(nil)).Elem()
}

func (o RftemplateBand5PtrOutput) ToRftemplateBand5PtrOutput() RftemplateBand5PtrOutput {
	return o
}

func (o RftemplateBand5PtrOutput) ToRftemplateBand5PtrOutputWithContext(ctx context.Context) RftemplateBand5PtrOutput {
	return o
}

func (o RftemplateBand5PtrOutput) Elem() RftemplateBand5Output {
	return o.ApplyT(func(v *RftemplateBand5) RftemplateBand5 {
		if v != nil {
			return *v
		}
		var ret RftemplateBand5
		return ret
	}).(RftemplateBand5Output)
}

func (o RftemplateBand5PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand5PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand5PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateBand5PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand5PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateBand5) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand5PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand5PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand5PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type RftemplateBand5On24Radio struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// RftemplateBand5On24RadioInput is an input type that accepts RftemplateBand5On24RadioArgs and RftemplateBand5On24RadioOutput values.
// You can construct a concrete instance of `RftemplateBand5On24RadioInput` via:
//
//	RftemplateBand5On24RadioArgs{...}
type RftemplateBand5On24RadioInput interface {
	pulumi.Input

	ToRftemplateBand5On24RadioOutput() RftemplateBand5On24RadioOutput
	ToRftemplateBand5On24RadioOutputWithContext(context.Context) RftemplateBand5On24RadioOutput
}

type RftemplateBand5On24RadioArgs struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (RftemplateBand5On24RadioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand5On24Radio)(nil)).Elem()
}

func (i RftemplateBand5On24RadioArgs) ToRftemplateBand5On24RadioOutput() RftemplateBand5On24RadioOutput {
	return i.ToRftemplateBand5On24RadioOutputWithContext(context.Background())
}

func (i RftemplateBand5On24RadioArgs) ToRftemplateBand5On24RadioOutputWithContext(ctx context.Context) RftemplateBand5On24RadioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand5On24RadioOutput)
}

func (i RftemplateBand5On24RadioArgs) ToRftemplateBand5On24RadioPtrOutput() RftemplateBand5On24RadioPtrOutput {
	return i.ToRftemplateBand5On24RadioPtrOutputWithContext(context.Background())
}

func (i RftemplateBand5On24RadioArgs) ToRftemplateBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateBand5On24RadioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand5On24RadioOutput).ToRftemplateBand5On24RadioPtrOutputWithContext(ctx)
}

// RftemplateBand5On24RadioPtrInput is an input type that accepts RftemplateBand5On24RadioArgs, RftemplateBand5On24RadioPtr and RftemplateBand5On24RadioPtrOutput values.
// You can construct a concrete instance of `RftemplateBand5On24RadioPtrInput` via:
//
//	        RftemplateBand5On24RadioArgs{...}
//
//	or:
//
//	        nil
type RftemplateBand5On24RadioPtrInput interface {
	pulumi.Input

	ToRftemplateBand5On24RadioPtrOutput() RftemplateBand5On24RadioPtrOutput
	ToRftemplateBand5On24RadioPtrOutputWithContext(context.Context) RftemplateBand5On24RadioPtrOutput
}

type rftemplateBand5On24RadioPtrType RftemplateBand5On24RadioArgs

func RftemplateBand5On24RadioPtr(v *RftemplateBand5On24RadioArgs) RftemplateBand5On24RadioPtrInput {
	return (*rftemplateBand5On24RadioPtrType)(v)
}

func (*rftemplateBand5On24RadioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand5On24Radio)(nil)).Elem()
}

func (i *rftemplateBand5On24RadioPtrType) ToRftemplateBand5On24RadioPtrOutput() RftemplateBand5On24RadioPtrOutput {
	return i.ToRftemplateBand5On24RadioPtrOutputWithContext(context.Background())
}

func (i *rftemplateBand5On24RadioPtrType) ToRftemplateBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateBand5On24RadioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand5On24RadioPtrOutput)
}

type RftemplateBand5On24RadioOutput struct{ *pulumi.OutputState }

func (RftemplateBand5On24RadioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand5On24Radio)(nil)).Elem()
}

func (o RftemplateBand5On24RadioOutput) ToRftemplateBand5On24RadioOutput() RftemplateBand5On24RadioOutput {
	return o
}

func (o RftemplateBand5On24RadioOutput) ToRftemplateBand5On24RadioOutputWithContext(ctx context.Context) RftemplateBand5On24RadioOutput {
	return o
}

func (o RftemplateBand5On24RadioOutput) ToRftemplateBand5On24RadioPtrOutput() RftemplateBand5On24RadioPtrOutput {
	return o.ToRftemplateBand5On24RadioPtrOutputWithContext(context.Background())
}

func (o RftemplateBand5On24RadioOutput) ToRftemplateBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateBand5On24RadioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateBand5On24Radio) *RftemplateBand5On24Radio {
		return &v
	}).(RftemplateBand5On24RadioPtrOutput)
}

func (o RftemplateBand5On24RadioOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand5On24RadioOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand5On24RadioOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateBand5On24RadioOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand5On24RadioOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand5On24RadioOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand5On24RadioOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5On24RadioOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5On24RadioOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand5On24RadioOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand5On24Radio) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type RftemplateBand5On24RadioPtrOutput struct{ *pulumi.OutputState }

func (RftemplateBand5On24RadioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand5On24Radio)(nil)).Elem()
}

func (o RftemplateBand5On24RadioPtrOutput) ToRftemplateBand5On24RadioPtrOutput() RftemplateBand5On24RadioPtrOutput {
	return o
}

func (o RftemplateBand5On24RadioPtrOutput) ToRftemplateBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateBand5On24RadioPtrOutput {
	return o
}

func (o RftemplateBand5On24RadioPtrOutput) Elem() RftemplateBand5On24RadioOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) RftemplateBand5On24Radio {
		if v != nil {
			return *v
		}
		var ret RftemplateBand5On24Radio
		return ret
	}).(RftemplateBand5On24RadioOutput)
}

func (o RftemplateBand5On24RadioPtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand5On24RadioPtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand5On24RadioPtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateBand5On24RadioPtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand5On24RadioPtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand5On24RadioPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand5On24RadioPtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5On24RadioPtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand5On24RadioPtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand5On24RadioPtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand5On24Radio) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type RftemplateBand6 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
	// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
	StandardPower *bool `pulumi:"standardPower"`
}

// RftemplateBand6Input is an input type that accepts RftemplateBand6Args and RftemplateBand6Output values.
// You can construct a concrete instance of `RftemplateBand6Input` via:
//
//	RftemplateBand6Args{...}
type RftemplateBand6Input interface {
	pulumi.Input

	ToRftemplateBand6Output() RftemplateBand6Output
	ToRftemplateBand6OutputWithContext(context.Context) RftemplateBand6Output
}

type RftemplateBand6Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
	// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
	StandardPower pulumi.BoolPtrInput `pulumi:"standardPower"`
}

func (RftemplateBand6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand6)(nil)).Elem()
}

func (i RftemplateBand6Args) ToRftemplateBand6Output() RftemplateBand6Output {
	return i.ToRftemplateBand6OutputWithContext(context.Background())
}

func (i RftemplateBand6Args) ToRftemplateBand6OutputWithContext(ctx context.Context) RftemplateBand6Output {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand6Output)
}

func (i RftemplateBand6Args) ToRftemplateBand6PtrOutput() RftemplateBand6PtrOutput {
	return i.ToRftemplateBand6PtrOutputWithContext(context.Background())
}

func (i RftemplateBand6Args) ToRftemplateBand6PtrOutputWithContext(ctx context.Context) RftemplateBand6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand6Output).ToRftemplateBand6PtrOutputWithContext(ctx)
}

// RftemplateBand6PtrInput is an input type that accepts RftemplateBand6Args, RftemplateBand6Ptr and RftemplateBand6PtrOutput values.
// You can construct a concrete instance of `RftemplateBand6PtrInput` via:
//
//	        RftemplateBand6Args{...}
//
//	or:
//
//	        nil
type RftemplateBand6PtrInput interface {
	pulumi.Input

	ToRftemplateBand6PtrOutput() RftemplateBand6PtrOutput
	ToRftemplateBand6PtrOutputWithContext(context.Context) RftemplateBand6PtrOutput
}

type rftemplateBand6PtrType RftemplateBand6Args

func RftemplateBand6Ptr(v *RftemplateBand6Args) RftemplateBand6PtrInput {
	return (*rftemplateBand6PtrType)(v)
}

func (*rftemplateBand6PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand6)(nil)).Elem()
}

func (i *rftemplateBand6PtrType) ToRftemplateBand6PtrOutput() RftemplateBand6PtrOutput {
	return i.ToRftemplateBand6PtrOutputWithContext(context.Background())
}

func (i *rftemplateBand6PtrType) ToRftemplateBand6PtrOutputWithContext(ctx context.Context) RftemplateBand6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateBand6PtrOutput)
}

type RftemplateBand6Output struct{ *pulumi.OutputState }

func (RftemplateBand6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateBand6)(nil)).Elem()
}

func (o RftemplateBand6Output) ToRftemplateBand6Output() RftemplateBand6Output {
	return o
}

func (o RftemplateBand6Output) ToRftemplateBand6OutputWithContext(ctx context.Context) RftemplateBand6Output {
	return o
}

func (o RftemplateBand6Output) ToRftemplateBand6PtrOutput() RftemplateBand6PtrOutput {
	return o.ToRftemplateBand6PtrOutputWithContext(context.Background())
}

func (o RftemplateBand6Output) ToRftemplateBand6PtrOutputWithContext(ctx context.Context) RftemplateBand6PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateBand6) *RftemplateBand6 {
		return &v
	}).(RftemplateBand6PtrOutput)
}

func (o RftemplateBand6Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand6Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand6Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
func (o RftemplateBand6Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand6Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateBand6) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand6Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand6Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand6Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand6Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand6Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
func (o RftemplateBand6Output) StandardPower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateBand6) *bool { return v.StandardPower }).(pulumi.BoolPtrOutput)
}

type RftemplateBand6PtrOutput struct{ *pulumi.OutputState }

func (RftemplateBand6PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateBand6)(nil)).Elem()
}

func (o RftemplateBand6PtrOutput) ToRftemplateBand6PtrOutput() RftemplateBand6PtrOutput {
	return o
}

func (o RftemplateBand6PtrOutput) ToRftemplateBand6PtrOutputWithContext(ctx context.Context) RftemplateBand6PtrOutput {
	return o
}

func (o RftemplateBand6PtrOutput) Elem() RftemplateBand6Output {
	return o.ApplyT(func(v *RftemplateBand6) RftemplateBand6 {
		if v != nil {
			return *v
		}
		var ret RftemplateBand6
		return ret
	}).(RftemplateBand6Output)
}

func (o RftemplateBand6PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateBand6PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateBand6PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
func (o RftemplateBand6PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateBand6PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateBand6) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateBand6PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateBand6PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateBand6PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateBand6PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateBand6PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
func (o RftemplateBand6PtrOutput) StandardPower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateBand6) *bool {
		if v == nil {
			return nil
		}
		return v.StandardPower
	}).(pulumi.BoolPtrOutput)
}

type RftemplateModelSpecific struct {
	AntGain24 *int `pulumi:"antGain24"`
	AntGain5  *int `pulumi:"antGain5"`
	AntGain6  *int `pulumi:"antGain6"`
	// Radio Band AP settings
	Band24 *RftemplateModelSpecificBand24 `pulumi:"band24"`
	// enum: `24`, `5`, `6`, `auto`
	Band24Usage *string `pulumi:"band24Usage"`
	// Radio Band AP settings
	Band5 *RftemplateModelSpecificBand5 `pulumi:"band5"`
	// Radio Band AP settings
	Band5On24Radio *RftemplateModelSpecificBand5On24Radio `pulumi:"band5On24Radio"`
	// Radio Band AP settings
	Band6 *RftemplateModelSpecificBand6 `pulumi:"band6"`
}

// RftemplateModelSpecificInput is an input type that accepts RftemplateModelSpecificArgs and RftemplateModelSpecificOutput values.
// You can construct a concrete instance of `RftemplateModelSpecificInput` via:
//
//	RftemplateModelSpecificArgs{...}
type RftemplateModelSpecificInput interface {
	pulumi.Input

	ToRftemplateModelSpecificOutput() RftemplateModelSpecificOutput
	ToRftemplateModelSpecificOutputWithContext(context.Context) RftemplateModelSpecificOutput
}

type RftemplateModelSpecificArgs struct {
	AntGain24 pulumi.IntPtrInput `pulumi:"antGain24"`
	AntGain5  pulumi.IntPtrInput `pulumi:"antGain5"`
	AntGain6  pulumi.IntPtrInput `pulumi:"antGain6"`
	// Radio Band AP settings
	Band24 RftemplateModelSpecificBand24PtrInput `pulumi:"band24"`
	// enum: `24`, `5`, `6`, `auto`
	Band24Usage pulumi.StringPtrInput `pulumi:"band24Usage"`
	// Radio Band AP settings
	Band5 RftemplateModelSpecificBand5PtrInput `pulumi:"band5"`
	// Radio Band AP settings
	Band5On24Radio RftemplateModelSpecificBand5On24RadioPtrInput `pulumi:"band5On24Radio"`
	// Radio Band AP settings
	Band6 RftemplateModelSpecificBand6PtrInput `pulumi:"band6"`
}

func (RftemplateModelSpecificArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecific)(nil)).Elem()
}

func (i RftemplateModelSpecificArgs) ToRftemplateModelSpecificOutput() RftemplateModelSpecificOutput {
	return i.ToRftemplateModelSpecificOutputWithContext(context.Background())
}

func (i RftemplateModelSpecificArgs) ToRftemplateModelSpecificOutputWithContext(ctx context.Context) RftemplateModelSpecificOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificOutput)
}

// RftemplateModelSpecificMapInput is an input type that accepts RftemplateModelSpecificMap and RftemplateModelSpecificMapOutput values.
// You can construct a concrete instance of `RftemplateModelSpecificMapInput` via:
//
//	RftemplateModelSpecificMap{ "key": RftemplateModelSpecificArgs{...} }
type RftemplateModelSpecificMapInput interface {
	pulumi.Input

	ToRftemplateModelSpecificMapOutput() RftemplateModelSpecificMapOutput
	ToRftemplateModelSpecificMapOutputWithContext(context.Context) RftemplateModelSpecificMapOutput
}

type RftemplateModelSpecificMap map[string]RftemplateModelSpecificInput

func (RftemplateModelSpecificMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RftemplateModelSpecific)(nil)).Elem()
}

func (i RftemplateModelSpecificMap) ToRftemplateModelSpecificMapOutput() RftemplateModelSpecificMapOutput {
	return i.ToRftemplateModelSpecificMapOutputWithContext(context.Background())
}

func (i RftemplateModelSpecificMap) ToRftemplateModelSpecificMapOutputWithContext(ctx context.Context) RftemplateModelSpecificMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificMapOutput)
}

type RftemplateModelSpecificOutput struct{ *pulumi.OutputState }

func (RftemplateModelSpecificOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecific)(nil)).Elem()
}

func (o RftemplateModelSpecificOutput) ToRftemplateModelSpecificOutput() RftemplateModelSpecificOutput {
	return o
}

func (o RftemplateModelSpecificOutput) ToRftemplateModelSpecificOutputWithContext(ctx context.Context) RftemplateModelSpecificOutput {
	return o
}

func (o RftemplateModelSpecificOutput) AntGain24() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *int { return v.AntGain24 }).(pulumi.IntPtrOutput)
}

func (o RftemplateModelSpecificOutput) AntGain5() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *int { return v.AntGain5 }).(pulumi.IntPtrOutput)
}

func (o RftemplateModelSpecificOutput) AntGain6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *int { return v.AntGain6 }).(pulumi.IntPtrOutput)
}

// Radio Band AP settings
func (o RftemplateModelSpecificOutput) Band24() RftemplateModelSpecificBand24PtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *RftemplateModelSpecificBand24 { return v.Band24 }).(RftemplateModelSpecificBand24PtrOutput)
}

// enum: `24`, `5`, `6`, `auto`
func (o RftemplateModelSpecificOutput) Band24Usage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *string { return v.Band24Usage }).(pulumi.StringPtrOutput)
}

// Radio Band AP settings
func (o RftemplateModelSpecificOutput) Band5() RftemplateModelSpecificBand5PtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *RftemplateModelSpecificBand5 { return v.Band5 }).(RftemplateModelSpecificBand5PtrOutput)
}

// Radio Band AP settings
func (o RftemplateModelSpecificOutput) Band5On24Radio() RftemplateModelSpecificBand5On24RadioPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *RftemplateModelSpecificBand5On24Radio { return v.Band5On24Radio }).(RftemplateModelSpecificBand5On24RadioPtrOutput)
}

// Radio Band AP settings
func (o RftemplateModelSpecificOutput) Band6() RftemplateModelSpecificBand6PtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecific) *RftemplateModelSpecificBand6 { return v.Band6 }).(RftemplateModelSpecificBand6PtrOutput)
}

type RftemplateModelSpecificMapOutput struct{ *pulumi.OutputState }

func (RftemplateModelSpecificMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RftemplateModelSpecific)(nil)).Elem()
}

func (o RftemplateModelSpecificMapOutput) ToRftemplateModelSpecificMapOutput() RftemplateModelSpecificMapOutput {
	return o
}

func (o RftemplateModelSpecificMapOutput) ToRftemplateModelSpecificMapOutputWithContext(ctx context.Context) RftemplateModelSpecificMapOutput {
	return o
}

func (o RftemplateModelSpecificMapOutput) MapIndex(k pulumi.StringInput) RftemplateModelSpecificOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RftemplateModelSpecific {
		return vs[0].(map[string]RftemplateModelSpecific)[vs[1].(string)]
	}).(RftemplateModelSpecificOutput)
}

type RftemplateModelSpecificBand24 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 2.4GHz band. enum: `20`, `40`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// RftemplateModelSpecificBand24Input is an input type that accepts RftemplateModelSpecificBand24Args and RftemplateModelSpecificBand24Output values.
// You can construct a concrete instance of `RftemplateModelSpecificBand24Input` via:
//
//	RftemplateModelSpecificBand24Args{...}
type RftemplateModelSpecificBand24Input interface {
	pulumi.Input

	ToRftemplateModelSpecificBand24Output() RftemplateModelSpecificBand24Output
	ToRftemplateModelSpecificBand24OutputWithContext(context.Context) RftemplateModelSpecificBand24Output
}

type RftemplateModelSpecificBand24Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 2.4GHz band. enum: `20`, `40`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (RftemplateModelSpecificBand24Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand24)(nil)).Elem()
}

func (i RftemplateModelSpecificBand24Args) ToRftemplateModelSpecificBand24Output() RftemplateModelSpecificBand24Output {
	return i.ToRftemplateModelSpecificBand24OutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand24Args) ToRftemplateModelSpecificBand24OutputWithContext(ctx context.Context) RftemplateModelSpecificBand24Output {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand24Output)
}

func (i RftemplateModelSpecificBand24Args) ToRftemplateModelSpecificBand24PtrOutput() RftemplateModelSpecificBand24PtrOutput {
	return i.ToRftemplateModelSpecificBand24PtrOutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand24Args) ToRftemplateModelSpecificBand24PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand24PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand24Output).ToRftemplateModelSpecificBand24PtrOutputWithContext(ctx)
}

// RftemplateModelSpecificBand24PtrInput is an input type that accepts RftemplateModelSpecificBand24Args, RftemplateModelSpecificBand24Ptr and RftemplateModelSpecificBand24PtrOutput values.
// You can construct a concrete instance of `RftemplateModelSpecificBand24PtrInput` via:
//
//	        RftemplateModelSpecificBand24Args{...}
//
//	or:
//
//	        nil
type RftemplateModelSpecificBand24PtrInput interface {
	pulumi.Input

	ToRftemplateModelSpecificBand24PtrOutput() RftemplateModelSpecificBand24PtrOutput
	ToRftemplateModelSpecificBand24PtrOutputWithContext(context.Context) RftemplateModelSpecificBand24PtrOutput
}

type rftemplateModelSpecificBand24PtrType RftemplateModelSpecificBand24Args

func RftemplateModelSpecificBand24Ptr(v *RftemplateModelSpecificBand24Args) RftemplateModelSpecificBand24PtrInput {
	return (*rftemplateModelSpecificBand24PtrType)(v)
}

func (*rftemplateModelSpecificBand24PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand24)(nil)).Elem()
}

func (i *rftemplateModelSpecificBand24PtrType) ToRftemplateModelSpecificBand24PtrOutput() RftemplateModelSpecificBand24PtrOutput {
	return i.ToRftemplateModelSpecificBand24PtrOutputWithContext(context.Background())
}

func (i *rftemplateModelSpecificBand24PtrType) ToRftemplateModelSpecificBand24PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand24PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand24PtrOutput)
}

type RftemplateModelSpecificBand24Output struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand24Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand24)(nil)).Elem()
}

func (o RftemplateModelSpecificBand24Output) ToRftemplateModelSpecificBand24Output() RftemplateModelSpecificBand24Output {
	return o
}

func (o RftemplateModelSpecificBand24Output) ToRftemplateModelSpecificBand24OutputWithContext(ctx context.Context) RftemplateModelSpecificBand24Output {
	return o
}

func (o RftemplateModelSpecificBand24Output) ToRftemplateModelSpecificBand24PtrOutput() RftemplateModelSpecificBand24PtrOutput {
	return o.ToRftemplateModelSpecificBand24PtrOutputWithContext(context.Background())
}

func (o RftemplateModelSpecificBand24Output) ToRftemplateModelSpecificBand24PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand24PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateModelSpecificBand24) *RftemplateModelSpecificBand24 {
		return &v
	}).(RftemplateModelSpecificBand24PtrOutput)
}

func (o RftemplateModelSpecificBand24Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand24Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand24Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 2.4GHz band. enum: `20`, `40`
func (o RftemplateModelSpecificBand24Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand24Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand24Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand24Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand24Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand24Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand24Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand24) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type RftemplateModelSpecificBand24PtrOutput struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand24PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand24)(nil)).Elem()
}

func (o RftemplateModelSpecificBand24PtrOutput) ToRftemplateModelSpecificBand24PtrOutput() RftemplateModelSpecificBand24PtrOutput {
	return o
}

func (o RftemplateModelSpecificBand24PtrOutput) ToRftemplateModelSpecificBand24PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand24PtrOutput {
	return o
}

func (o RftemplateModelSpecificBand24PtrOutput) Elem() RftemplateModelSpecificBand24Output {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) RftemplateModelSpecificBand24 {
		if v != nil {
			return *v
		}
		var ret RftemplateModelSpecificBand24
		return ret
	}).(RftemplateModelSpecificBand24Output)
}

func (o RftemplateModelSpecificBand24PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand24PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand24PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 2.4GHz band. enum: `20`, `40`
func (o RftemplateModelSpecificBand24PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand24PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand24PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand24PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand24PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand24PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand24PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand24) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type RftemplateModelSpecificBand5 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// RftemplateModelSpecificBand5Input is an input type that accepts RftemplateModelSpecificBand5Args and RftemplateModelSpecificBand5Output values.
// You can construct a concrete instance of `RftemplateModelSpecificBand5Input` via:
//
//	RftemplateModelSpecificBand5Args{...}
type RftemplateModelSpecificBand5Input interface {
	pulumi.Input

	ToRftemplateModelSpecificBand5Output() RftemplateModelSpecificBand5Output
	ToRftemplateModelSpecificBand5OutputWithContext(context.Context) RftemplateModelSpecificBand5Output
}

type RftemplateModelSpecificBand5Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (RftemplateModelSpecificBand5Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand5)(nil)).Elem()
}

func (i RftemplateModelSpecificBand5Args) ToRftemplateModelSpecificBand5Output() RftemplateModelSpecificBand5Output {
	return i.ToRftemplateModelSpecificBand5OutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand5Args) ToRftemplateModelSpecificBand5OutputWithContext(ctx context.Context) RftemplateModelSpecificBand5Output {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand5Output)
}

func (i RftemplateModelSpecificBand5Args) ToRftemplateModelSpecificBand5PtrOutput() RftemplateModelSpecificBand5PtrOutput {
	return i.ToRftemplateModelSpecificBand5PtrOutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand5Args) ToRftemplateModelSpecificBand5PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand5Output).ToRftemplateModelSpecificBand5PtrOutputWithContext(ctx)
}

// RftemplateModelSpecificBand5PtrInput is an input type that accepts RftemplateModelSpecificBand5Args, RftemplateModelSpecificBand5Ptr and RftemplateModelSpecificBand5PtrOutput values.
// You can construct a concrete instance of `RftemplateModelSpecificBand5PtrInput` via:
//
//	        RftemplateModelSpecificBand5Args{...}
//
//	or:
//
//	        nil
type RftemplateModelSpecificBand5PtrInput interface {
	pulumi.Input

	ToRftemplateModelSpecificBand5PtrOutput() RftemplateModelSpecificBand5PtrOutput
	ToRftemplateModelSpecificBand5PtrOutputWithContext(context.Context) RftemplateModelSpecificBand5PtrOutput
}

type rftemplateModelSpecificBand5PtrType RftemplateModelSpecificBand5Args

func RftemplateModelSpecificBand5Ptr(v *RftemplateModelSpecificBand5Args) RftemplateModelSpecificBand5PtrInput {
	return (*rftemplateModelSpecificBand5PtrType)(v)
}

func (*rftemplateModelSpecificBand5PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand5)(nil)).Elem()
}

func (i *rftemplateModelSpecificBand5PtrType) ToRftemplateModelSpecificBand5PtrOutput() RftemplateModelSpecificBand5PtrOutput {
	return i.ToRftemplateModelSpecificBand5PtrOutputWithContext(context.Background())
}

func (i *rftemplateModelSpecificBand5PtrType) ToRftemplateModelSpecificBand5PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand5PtrOutput)
}

type RftemplateModelSpecificBand5Output struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand5Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand5)(nil)).Elem()
}

func (o RftemplateModelSpecificBand5Output) ToRftemplateModelSpecificBand5Output() RftemplateModelSpecificBand5Output {
	return o
}

func (o RftemplateModelSpecificBand5Output) ToRftemplateModelSpecificBand5OutputWithContext(ctx context.Context) RftemplateModelSpecificBand5Output {
	return o
}

func (o RftemplateModelSpecificBand5Output) ToRftemplateModelSpecificBand5PtrOutput() RftemplateModelSpecificBand5PtrOutput {
	return o.ToRftemplateModelSpecificBand5PtrOutputWithContext(context.Background())
}

func (o RftemplateModelSpecificBand5Output) ToRftemplateModelSpecificBand5PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateModelSpecificBand5) *RftemplateModelSpecificBand5 {
		return &v
	}).(RftemplateModelSpecificBand5PtrOutput)
}

func (o RftemplateModelSpecificBand5Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand5Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand5Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateModelSpecificBand5Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand5Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand5Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand5Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand5Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type RftemplateModelSpecificBand5PtrOutput struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand5PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand5)(nil)).Elem()
}

func (o RftemplateModelSpecificBand5PtrOutput) ToRftemplateModelSpecificBand5PtrOutput() RftemplateModelSpecificBand5PtrOutput {
	return o
}

func (o RftemplateModelSpecificBand5PtrOutput) ToRftemplateModelSpecificBand5PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5PtrOutput {
	return o
}

func (o RftemplateModelSpecificBand5PtrOutput) Elem() RftemplateModelSpecificBand5Output {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) RftemplateModelSpecificBand5 {
		if v != nil {
			return *v
		}
		var ret RftemplateModelSpecificBand5
		return ret
	}).(RftemplateModelSpecificBand5Output)
}

func (o RftemplateModelSpecificBand5PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand5PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand5PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateModelSpecificBand5PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand5PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand5PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand5PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand5PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type RftemplateModelSpecificBand5On24Radio struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
}

// RftemplateModelSpecificBand5On24RadioInput is an input type that accepts RftemplateModelSpecificBand5On24RadioArgs and RftemplateModelSpecificBand5On24RadioOutput values.
// You can construct a concrete instance of `RftemplateModelSpecificBand5On24RadioInput` via:
//
//	RftemplateModelSpecificBand5On24RadioArgs{...}
type RftemplateModelSpecificBand5On24RadioInput interface {
	pulumi.Input

	ToRftemplateModelSpecificBand5On24RadioOutput() RftemplateModelSpecificBand5On24RadioOutput
	ToRftemplateModelSpecificBand5On24RadioOutputWithContext(context.Context) RftemplateModelSpecificBand5On24RadioOutput
}

type RftemplateModelSpecificBand5On24RadioArgs struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 5GHz band. enum: `20`, `40`, `80`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
}

func (RftemplateModelSpecificBand5On24RadioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand5On24Radio)(nil)).Elem()
}

func (i RftemplateModelSpecificBand5On24RadioArgs) ToRftemplateModelSpecificBand5On24RadioOutput() RftemplateModelSpecificBand5On24RadioOutput {
	return i.ToRftemplateModelSpecificBand5On24RadioOutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand5On24RadioArgs) ToRftemplateModelSpecificBand5On24RadioOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5On24RadioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand5On24RadioOutput)
}

func (i RftemplateModelSpecificBand5On24RadioArgs) ToRftemplateModelSpecificBand5On24RadioPtrOutput() RftemplateModelSpecificBand5On24RadioPtrOutput {
	return i.ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand5On24RadioArgs) ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5On24RadioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand5On24RadioOutput).ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(ctx)
}

// RftemplateModelSpecificBand5On24RadioPtrInput is an input type that accepts RftemplateModelSpecificBand5On24RadioArgs, RftemplateModelSpecificBand5On24RadioPtr and RftemplateModelSpecificBand5On24RadioPtrOutput values.
// You can construct a concrete instance of `RftemplateModelSpecificBand5On24RadioPtrInput` via:
//
//	        RftemplateModelSpecificBand5On24RadioArgs{...}
//
//	or:
//
//	        nil
type RftemplateModelSpecificBand5On24RadioPtrInput interface {
	pulumi.Input

	ToRftemplateModelSpecificBand5On24RadioPtrOutput() RftemplateModelSpecificBand5On24RadioPtrOutput
	ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(context.Context) RftemplateModelSpecificBand5On24RadioPtrOutput
}

type rftemplateModelSpecificBand5On24RadioPtrType RftemplateModelSpecificBand5On24RadioArgs

func RftemplateModelSpecificBand5On24RadioPtr(v *RftemplateModelSpecificBand5On24RadioArgs) RftemplateModelSpecificBand5On24RadioPtrInput {
	return (*rftemplateModelSpecificBand5On24RadioPtrType)(v)
}

func (*rftemplateModelSpecificBand5On24RadioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand5On24Radio)(nil)).Elem()
}

func (i *rftemplateModelSpecificBand5On24RadioPtrType) ToRftemplateModelSpecificBand5On24RadioPtrOutput() RftemplateModelSpecificBand5On24RadioPtrOutput {
	return i.ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(context.Background())
}

func (i *rftemplateModelSpecificBand5On24RadioPtrType) ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5On24RadioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand5On24RadioPtrOutput)
}

type RftemplateModelSpecificBand5On24RadioOutput struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand5On24RadioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand5On24Radio)(nil)).Elem()
}

func (o RftemplateModelSpecificBand5On24RadioOutput) ToRftemplateModelSpecificBand5On24RadioOutput() RftemplateModelSpecificBand5On24RadioOutput {
	return o
}

func (o RftemplateModelSpecificBand5On24RadioOutput) ToRftemplateModelSpecificBand5On24RadioOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5On24RadioOutput {
	return o
}

func (o RftemplateModelSpecificBand5On24RadioOutput) ToRftemplateModelSpecificBand5On24RadioPtrOutput() RftemplateModelSpecificBand5On24RadioPtrOutput {
	return o.ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(context.Background())
}

func (o RftemplateModelSpecificBand5On24RadioOutput) ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5On24RadioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateModelSpecificBand5On24Radio) *RftemplateModelSpecificBand5On24Radio {
		return &v
	}).(RftemplateModelSpecificBand5On24RadioPtrOutput)
}

func (o RftemplateModelSpecificBand5On24RadioOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand5On24RadioOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand5On24RadioOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateModelSpecificBand5On24RadioOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand5On24RadioOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand5On24RadioOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand5On24RadioOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5On24RadioOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5On24RadioOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand5On24RadioOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand5On24Radio) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

type RftemplateModelSpecificBand5On24RadioPtrOutput struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand5On24RadioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand5On24Radio)(nil)).Elem()
}

func (o RftemplateModelSpecificBand5On24RadioPtrOutput) ToRftemplateModelSpecificBand5On24RadioPtrOutput() RftemplateModelSpecificBand5On24RadioPtrOutput {
	return o
}

func (o RftemplateModelSpecificBand5On24RadioPtrOutput) ToRftemplateModelSpecificBand5On24RadioPtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand5On24RadioPtrOutput {
	return o
}

func (o RftemplateModelSpecificBand5On24RadioPtrOutput) Elem() RftemplateModelSpecificBand5On24RadioOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) RftemplateModelSpecificBand5On24Radio {
		if v != nil {
			return *v
		}
		var ret RftemplateModelSpecificBand5On24Radio
		return ret
	}).(RftemplateModelSpecificBand5On24RadioOutput)
}

func (o RftemplateModelSpecificBand5On24RadioPtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand5On24RadioPtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 5GHz band. enum: `20`, `40`, `80`
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand5On24RadioPtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand5On24Radio) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

type RftemplateModelSpecificBand6 struct {
	AllowRrmDisable *bool `pulumi:"allowRrmDisable"`
	AntGain         *int  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode *string `pulumi:"antennaMode"`
	// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
	Bandwidth *int `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels []int `pulumi:"channels"`
	// whether to disable the radio
	Disabled *bool `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power *int `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax *int `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin *int `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble *string `pulumi:"preamble"`
	// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
	StandardPower *bool `pulumi:"standardPower"`
}

// RftemplateModelSpecificBand6Input is an input type that accepts RftemplateModelSpecificBand6Args and RftemplateModelSpecificBand6Output values.
// You can construct a concrete instance of `RftemplateModelSpecificBand6Input` via:
//
//	RftemplateModelSpecificBand6Args{...}
type RftemplateModelSpecificBand6Input interface {
	pulumi.Input

	ToRftemplateModelSpecificBand6Output() RftemplateModelSpecificBand6Output
	ToRftemplateModelSpecificBand6OutputWithContext(context.Context) RftemplateModelSpecificBand6Output
}

type RftemplateModelSpecificBand6Args struct {
	AllowRrmDisable pulumi.BoolPtrInput `pulumi:"allowRrmDisable"`
	AntGain         pulumi.IntPtrInput  `pulumi:"antGain"`
	// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
	AntennaMode pulumi.StringPtrInput `pulumi:"antennaMode"`
	// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// For RFTemplates. List of channels, null or empty array means auto
	Channels pulumi.IntArrayInput `pulumi:"channels"`
	// whether to disable the radio
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
	Power pulumi.IntPtrInput `pulumi:"power"`
	// when power=0, max tx power to use, HW-specific values will be used if not set
	PowerMax pulumi.IntPtrInput `pulumi:"powerMax"`
	// when power=0, min tx power to use, HW-specific values will be used if not set
	PowerMin pulumi.IntPtrInput `pulumi:"powerMin"`
	// enum: `auto`, `long`, `short`
	Preamble pulumi.StringPtrInput `pulumi:"preamble"`
	// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
	StandardPower pulumi.BoolPtrInput `pulumi:"standardPower"`
}

func (RftemplateModelSpecificBand6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand6)(nil)).Elem()
}

func (i RftemplateModelSpecificBand6Args) ToRftemplateModelSpecificBand6Output() RftemplateModelSpecificBand6Output {
	return i.ToRftemplateModelSpecificBand6OutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand6Args) ToRftemplateModelSpecificBand6OutputWithContext(ctx context.Context) RftemplateModelSpecificBand6Output {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand6Output)
}

func (i RftemplateModelSpecificBand6Args) ToRftemplateModelSpecificBand6PtrOutput() RftemplateModelSpecificBand6PtrOutput {
	return i.ToRftemplateModelSpecificBand6PtrOutputWithContext(context.Background())
}

func (i RftemplateModelSpecificBand6Args) ToRftemplateModelSpecificBand6PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand6Output).ToRftemplateModelSpecificBand6PtrOutputWithContext(ctx)
}

// RftemplateModelSpecificBand6PtrInput is an input type that accepts RftemplateModelSpecificBand6Args, RftemplateModelSpecificBand6Ptr and RftemplateModelSpecificBand6PtrOutput values.
// You can construct a concrete instance of `RftemplateModelSpecificBand6PtrInput` via:
//
//	        RftemplateModelSpecificBand6Args{...}
//
//	or:
//
//	        nil
type RftemplateModelSpecificBand6PtrInput interface {
	pulumi.Input

	ToRftemplateModelSpecificBand6PtrOutput() RftemplateModelSpecificBand6PtrOutput
	ToRftemplateModelSpecificBand6PtrOutputWithContext(context.Context) RftemplateModelSpecificBand6PtrOutput
}

type rftemplateModelSpecificBand6PtrType RftemplateModelSpecificBand6Args

func RftemplateModelSpecificBand6Ptr(v *RftemplateModelSpecificBand6Args) RftemplateModelSpecificBand6PtrInput {
	return (*rftemplateModelSpecificBand6PtrType)(v)
}

func (*rftemplateModelSpecificBand6PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand6)(nil)).Elem()
}

func (i *rftemplateModelSpecificBand6PtrType) ToRftemplateModelSpecificBand6PtrOutput() RftemplateModelSpecificBand6PtrOutput {
	return i.ToRftemplateModelSpecificBand6PtrOutputWithContext(context.Background())
}

func (i *rftemplateModelSpecificBand6PtrType) ToRftemplateModelSpecificBand6PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand6PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RftemplateModelSpecificBand6PtrOutput)
}

type RftemplateModelSpecificBand6Output struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*RftemplateModelSpecificBand6)(nil)).Elem()
}

func (o RftemplateModelSpecificBand6Output) ToRftemplateModelSpecificBand6Output() RftemplateModelSpecificBand6Output {
	return o
}

func (o RftemplateModelSpecificBand6Output) ToRftemplateModelSpecificBand6OutputWithContext(ctx context.Context) RftemplateModelSpecificBand6Output {
	return o
}

func (o RftemplateModelSpecificBand6Output) ToRftemplateModelSpecificBand6PtrOutput() RftemplateModelSpecificBand6PtrOutput {
	return o.ToRftemplateModelSpecificBand6PtrOutputWithContext(context.Background())
}

func (o RftemplateModelSpecificBand6Output) ToRftemplateModelSpecificBand6PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand6PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RftemplateModelSpecificBand6) *RftemplateModelSpecificBand6 {
		return &v
	}).(RftemplateModelSpecificBand6PtrOutput)
}

func (o RftemplateModelSpecificBand6Output) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *bool { return v.AllowRrmDisable }).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand6Output) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *int { return v.AntGain }).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand6Output) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *string { return v.AntennaMode }).(pulumi.StringPtrOutput)
}

// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
func (o RftemplateModelSpecificBand6Output) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand6Output) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) []int { return v.Channels }).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand6Output) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand6Output) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand6Output) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *int { return v.PowerMax }).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand6Output) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *int { return v.PowerMin }).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand6Output) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *string { return v.Preamble }).(pulumi.StringPtrOutput)
}

// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
func (o RftemplateModelSpecificBand6Output) StandardPower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RftemplateModelSpecificBand6) *bool { return v.StandardPower }).(pulumi.BoolPtrOutput)
}

type RftemplateModelSpecificBand6PtrOutput struct{ *pulumi.OutputState }

func (RftemplateModelSpecificBand6PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RftemplateModelSpecificBand6)(nil)).Elem()
}

func (o RftemplateModelSpecificBand6PtrOutput) ToRftemplateModelSpecificBand6PtrOutput() RftemplateModelSpecificBand6PtrOutput {
	return o
}

func (o RftemplateModelSpecificBand6PtrOutput) ToRftemplateModelSpecificBand6PtrOutputWithContext(ctx context.Context) RftemplateModelSpecificBand6PtrOutput {
	return o
}

func (o RftemplateModelSpecificBand6PtrOutput) Elem() RftemplateModelSpecificBand6Output {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) RftemplateModelSpecificBand6 {
		if v != nil {
			return *v
		}
		var ret RftemplateModelSpecificBand6
		return ret
	}).(RftemplateModelSpecificBand6Output)
}

func (o RftemplateModelSpecificBand6PtrOutput) AllowRrmDisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *bool {
		if v == nil {
			return nil
		}
		return v.AllowRrmDisable
	}).(pulumi.BoolPtrOutput)
}

func (o RftemplateModelSpecificBand6PtrOutput) AntGain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *int {
		if v == nil {
			return nil
		}
		return v.AntGain
	}).(pulumi.IntPtrOutput)
}

// enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
func (o RftemplateModelSpecificBand6PtrOutput) AntennaMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *string {
		if v == nil {
			return nil
		}
		return v.AntennaMode
	}).(pulumi.StringPtrOutput)
}

// channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
func (o RftemplateModelSpecificBand6PtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// For RFTemplates. List of channels, null or empty array means auto
func (o RftemplateModelSpecificBand6PtrOutput) Channels() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) []int {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.IntArrayOutput)
}

// whether to disable the radio
func (o RftemplateModelSpecificBand6PtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
func (o RftemplateModelSpecificBand6PtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// when power=0, max tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand6PtrOutput) PowerMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *int {
		if v == nil {
			return nil
		}
		return v.PowerMax
	}).(pulumi.IntPtrOutput)
}

// when power=0, min tx power to use, HW-specific values will be used if not set
func (o RftemplateModelSpecificBand6PtrOutput) PowerMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *int {
		if v == nil {
			return nil
		}
		return v.PowerMin
	}).(pulumi.IntPtrOutput)
}

// enum: `auto`, `long`, `short`
func (o RftemplateModelSpecificBand6PtrOutput) Preamble() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *string {
		if v == nil {
			return nil
		}
		return v.Preamble
	}).(pulumi.StringPtrOutput)
}

// for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
func (o RftemplateModelSpecificBand6PtrOutput) StandardPower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RftemplateModelSpecificBand6) *bool {
		if v == nil {
			return nil
		}
		return v.StandardPower
	}).(pulumi.BoolPtrOutput)
}

type ServiceSpec struct {
	// port number, port range, or variable
	PortRange *string `pulumi:"portRange"`
	// `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
	// `protocolNumber` is between 1-254
	Protocol *string `pulumi:"protocol"`
}

// ServiceSpecInput is an input type that accepts ServiceSpecArgs and ServiceSpecOutput values.
// You can construct a concrete instance of `ServiceSpecInput` via:
//
//	ServiceSpecArgs{...}
type ServiceSpecInput interface {
	pulumi.Input

	ToServiceSpecOutput() ServiceSpecOutput
	ToServiceSpecOutputWithContext(context.Context) ServiceSpecOutput
}

type ServiceSpecArgs struct {
	// port number, port range, or variable
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
	// `protocolNumber` is between 1-254
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpec)(nil)).Elem()
}

func (i ServiceSpecArgs) ToServiceSpecOutput() ServiceSpecOutput {
	return i.ToServiceSpecOutputWithContext(context.Background())
}

func (i ServiceSpecArgs) ToServiceSpecOutputWithContext(ctx context.Context) ServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecOutput)
}

// ServiceSpecArrayInput is an input type that accepts ServiceSpecArray and ServiceSpecArrayOutput values.
// You can construct a concrete instance of `ServiceSpecArrayInput` via:
//
//	ServiceSpecArray{ ServiceSpecArgs{...} }
type ServiceSpecArrayInput interface {
	pulumi.Input

	ToServiceSpecArrayOutput() ServiceSpecArrayOutput
	ToServiceSpecArrayOutputWithContext(context.Context) ServiceSpecArrayOutput
}

type ServiceSpecArray []ServiceSpecInput

func (ServiceSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceSpec)(nil)).Elem()
}

func (i ServiceSpecArray) ToServiceSpecArrayOutput() ServiceSpecArrayOutput {
	return i.ToServiceSpecArrayOutputWithContext(context.Background())
}

func (i ServiceSpecArray) ToServiceSpecArrayOutputWithContext(ctx context.Context) ServiceSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecArrayOutput)
}

type ServiceSpecOutput struct{ *pulumi.OutputState }

func (ServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpec)(nil)).Elem()
}

func (o ServiceSpecOutput) ToServiceSpecOutput() ServiceSpecOutput {
	return o
}

func (o ServiceSpecOutput) ToServiceSpecOutputWithContext(ctx context.Context) ServiceSpecOutput {
	return o
}

// port number, port range, or variable
func (o ServiceSpecOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
// `protocolNumber` is between 1-254
func (o ServiceSpecOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceSpec) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ServiceSpecArrayOutput struct{ *pulumi.OutputState }

func (ServiceSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceSpec)(nil)).Elem()
}

func (o ServiceSpecArrayOutput) ToServiceSpecArrayOutput() ServiceSpecArrayOutput {
	return o
}

func (o ServiceSpecArrayOutput) ToServiceSpecArrayOutputWithContext(ctx context.Context) ServiceSpecArrayOutput {
	return o
}

func (o ServiceSpecArrayOutput) Index(i pulumi.IntInput) ServiceSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceSpec {
		return vs[0].([]ServiceSpec)[vs[1].(int)]
	}).(ServiceSpecOutput)
}

type ServicepolicyAppqoe struct {
	Enabled *bool `pulumi:"enabled"`
}

// ServicepolicyAppqoeInput is an input type that accepts ServicepolicyAppqoeArgs and ServicepolicyAppqoeOutput values.
// You can construct a concrete instance of `ServicepolicyAppqoeInput` via:
//
//	ServicepolicyAppqoeArgs{...}
type ServicepolicyAppqoeInput interface {
	pulumi.Input

	ToServicepolicyAppqoeOutput() ServicepolicyAppqoeOutput
	ToServicepolicyAppqoeOutputWithContext(context.Context) ServicepolicyAppqoeOutput
}

type ServicepolicyAppqoeArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ServicepolicyAppqoeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicepolicyAppqoe)(nil)).Elem()
}

func (i ServicepolicyAppqoeArgs) ToServicepolicyAppqoeOutput() ServicepolicyAppqoeOutput {
	return i.ToServicepolicyAppqoeOutputWithContext(context.Background())
}

func (i ServicepolicyAppqoeArgs) ToServicepolicyAppqoeOutputWithContext(ctx context.Context) ServicepolicyAppqoeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyAppqoeOutput)
}

func (i ServicepolicyAppqoeArgs) ToServicepolicyAppqoePtrOutput() ServicepolicyAppqoePtrOutput {
	return i.ToServicepolicyAppqoePtrOutputWithContext(context.Background())
}

func (i ServicepolicyAppqoeArgs) ToServicepolicyAppqoePtrOutputWithContext(ctx context.Context) ServicepolicyAppqoePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyAppqoeOutput).ToServicepolicyAppqoePtrOutputWithContext(ctx)
}

// ServicepolicyAppqoePtrInput is an input type that accepts ServicepolicyAppqoeArgs, ServicepolicyAppqoePtr and ServicepolicyAppqoePtrOutput values.
// You can construct a concrete instance of `ServicepolicyAppqoePtrInput` via:
//
//	        ServicepolicyAppqoeArgs{...}
//
//	or:
//
//	        nil
type ServicepolicyAppqoePtrInput interface {
	pulumi.Input

	ToServicepolicyAppqoePtrOutput() ServicepolicyAppqoePtrOutput
	ToServicepolicyAppqoePtrOutputWithContext(context.Context) ServicepolicyAppqoePtrOutput
}

type servicepolicyAppqoePtrType ServicepolicyAppqoeArgs

func ServicepolicyAppqoePtr(v *ServicepolicyAppqoeArgs) ServicepolicyAppqoePtrInput {
	return (*servicepolicyAppqoePtrType)(v)
}

func (*servicepolicyAppqoePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicepolicyAppqoe)(nil)).Elem()
}

func (i *servicepolicyAppqoePtrType) ToServicepolicyAppqoePtrOutput() ServicepolicyAppqoePtrOutput {
	return i.ToServicepolicyAppqoePtrOutputWithContext(context.Background())
}

func (i *servicepolicyAppqoePtrType) ToServicepolicyAppqoePtrOutputWithContext(ctx context.Context) ServicepolicyAppqoePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyAppqoePtrOutput)
}

type ServicepolicyAppqoeOutput struct{ *pulumi.OutputState }

func (ServicepolicyAppqoeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicepolicyAppqoe)(nil)).Elem()
}

func (o ServicepolicyAppqoeOutput) ToServicepolicyAppqoeOutput() ServicepolicyAppqoeOutput {
	return o
}

func (o ServicepolicyAppqoeOutput) ToServicepolicyAppqoeOutputWithContext(ctx context.Context) ServicepolicyAppqoeOutput {
	return o
}

func (o ServicepolicyAppqoeOutput) ToServicepolicyAppqoePtrOutput() ServicepolicyAppqoePtrOutput {
	return o.ToServicepolicyAppqoePtrOutputWithContext(context.Background())
}

func (o ServicepolicyAppqoeOutput) ToServicepolicyAppqoePtrOutputWithContext(ctx context.Context) ServicepolicyAppqoePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServicepolicyAppqoe) *ServicepolicyAppqoe {
		return &v
	}).(ServicepolicyAppqoePtrOutput)
}

func (o ServicepolicyAppqoeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicepolicyAppqoe) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ServicepolicyAppqoePtrOutput struct{ *pulumi.OutputState }

func (ServicepolicyAppqoePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicepolicyAppqoe)(nil)).Elem()
}

func (o ServicepolicyAppqoePtrOutput) ToServicepolicyAppqoePtrOutput() ServicepolicyAppqoePtrOutput {
	return o
}

func (o ServicepolicyAppqoePtrOutput) ToServicepolicyAppqoePtrOutputWithContext(ctx context.Context) ServicepolicyAppqoePtrOutput {
	return o
}

func (o ServicepolicyAppqoePtrOutput) Elem() ServicepolicyAppqoeOutput {
	return o.ApplyT(func(v *ServicepolicyAppqoe) ServicepolicyAppqoe {
		if v != nil {
			return *v
		}
		var ret ServicepolicyAppqoe
		return ret
	}).(ServicepolicyAppqoeOutput)
}

func (o ServicepolicyAppqoePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicepolicyAppqoe) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type ServicepolicyEwf struct {
	AlertOnly    *bool   `pulumi:"alertOnly"`
	BlockMessage *string `pulumi:"blockMessage"`
	Enabled      *bool   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile *string `pulumi:"profile"`
}

// ServicepolicyEwfInput is an input type that accepts ServicepolicyEwfArgs and ServicepolicyEwfOutput values.
// You can construct a concrete instance of `ServicepolicyEwfInput` via:
//
//	ServicepolicyEwfArgs{...}
type ServicepolicyEwfInput interface {
	pulumi.Input

	ToServicepolicyEwfOutput() ServicepolicyEwfOutput
	ToServicepolicyEwfOutputWithContext(context.Context) ServicepolicyEwfOutput
}

type ServicepolicyEwfArgs struct {
	AlertOnly    pulumi.BoolPtrInput   `pulumi:"alertOnly"`
	BlockMessage pulumi.StringPtrInput `pulumi:"blockMessage"`
	Enabled      pulumi.BoolPtrInput   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (ServicepolicyEwfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicepolicyEwf)(nil)).Elem()
}

func (i ServicepolicyEwfArgs) ToServicepolicyEwfOutput() ServicepolicyEwfOutput {
	return i.ToServicepolicyEwfOutputWithContext(context.Background())
}

func (i ServicepolicyEwfArgs) ToServicepolicyEwfOutputWithContext(ctx context.Context) ServicepolicyEwfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyEwfOutput)
}

// ServicepolicyEwfArrayInput is an input type that accepts ServicepolicyEwfArray and ServicepolicyEwfArrayOutput values.
// You can construct a concrete instance of `ServicepolicyEwfArrayInput` via:
//
//	ServicepolicyEwfArray{ ServicepolicyEwfArgs{...} }
type ServicepolicyEwfArrayInput interface {
	pulumi.Input

	ToServicepolicyEwfArrayOutput() ServicepolicyEwfArrayOutput
	ToServicepolicyEwfArrayOutputWithContext(context.Context) ServicepolicyEwfArrayOutput
}

type ServicepolicyEwfArray []ServicepolicyEwfInput

func (ServicepolicyEwfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicepolicyEwf)(nil)).Elem()
}

func (i ServicepolicyEwfArray) ToServicepolicyEwfArrayOutput() ServicepolicyEwfArrayOutput {
	return i.ToServicepolicyEwfArrayOutputWithContext(context.Background())
}

func (i ServicepolicyEwfArray) ToServicepolicyEwfArrayOutputWithContext(ctx context.Context) ServicepolicyEwfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyEwfArrayOutput)
}

type ServicepolicyEwfOutput struct{ *pulumi.OutputState }

func (ServicepolicyEwfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicepolicyEwf)(nil)).Elem()
}

func (o ServicepolicyEwfOutput) ToServicepolicyEwfOutput() ServicepolicyEwfOutput {
	return o
}

func (o ServicepolicyEwfOutput) ToServicepolicyEwfOutputWithContext(ctx context.Context) ServicepolicyEwfOutput {
	return o
}

func (o ServicepolicyEwfOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicepolicyEwf) *bool { return v.AlertOnly }).(pulumi.BoolPtrOutput)
}

func (o ServicepolicyEwfOutput) BlockMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicepolicyEwf) *string { return v.BlockMessage }).(pulumi.StringPtrOutput)
}

func (o ServicepolicyEwfOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicepolicyEwf) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// enum: `critical`, `standard`, `strict`
func (o ServicepolicyEwfOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicepolicyEwf) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type ServicepolicyEwfArrayOutput struct{ *pulumi.OutputState }

func (ServicepolicyEwfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicepolicyEwf)(nil)).Elem()
}

func (o ServicepolicyEwfArrayOutput) ToServicepolicyEwfArrayOutput() ServicepolicyEwfArrayOutput {
	return o
}

func (o ServicepolicyEwfArrayOutput) ToServicepolicyEwfArrayOutputWithContext(ctx context.Context) ServicepolicyEwfArrayOutput {
	return o
}

func (o ServicepolicyEwfArrayOutput) Index(i pulumi.IntInput) ServicepolicyEwfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicepolicyEwf {
		return vs[0].([]ServicepolicyEwf)[vs[1].(int)]
	}).(ServicepolicyEwfOutput)
}

type ServicepolicyIdp struct {
	AlertOnly *bool `pulumi:"alertOnly"`
	Enabled   *bool `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId *string `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile *string `pulumi:"profile"`
}

// ServicepolicyIdpInput is an input type that accepts ServicepolicyIdpArgs and ServicepolicyIdpOutput values.
// You can construct a concrete instance of `ServicepolicyIdpInput` via:
//
//	ServicepolicyIdpArgs{...}
type ServicepolicyIdpInput interface {
	pulumi.Input

	ToServicepolicyIdpOutput() ServicepolicyIdpOutput
	ToServicepolicyIdpOutputWithContext(context.Context) ServicepolicyIdpOutput
}

type ServicepolicyIdpArgs struct {
	AlertOnly pulumi.BoolPtrInput `pulumi:"alertOnly"`
	Enabled   pulumi.BoolPtrInput `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId pulumi.StringPtrInput `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (ServicepolicyIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicepolicyIdp)(nil)).Elem()
}

func (i ServicepolicyIdpArgs) ToServicepolicyIdpOutput() ServicepolicyIdpOutput {
	return i.ToServicepolicyIdpOutputWithContext(context.Background())
}

func (i ServicepolicyIdpArgs) ToServicepolicyIdpOutputWithContext(ctx context.Context) ServicepolicyIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyIdpOutput)
}

func (i ServicepolicyIdpArgs) ToServicepolicyIdpPtrOutput() ServicepolicyIdpPtrOutput {
	return i.ToServicepolicyIdpPtrOutputWithContext(context.Background())
}

func (i ServicepolicyIdpArgs) ToServicepolicyIdpPtrOutputWithContext(ctx context.Context) ServicepolicyIdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyIdpOutput).ToServicepolicyIdpPtrOutputWithContext(ctx)
}

// ServicepolicyIdpPtrInput is an input type that accepts ServicepolicyIdpArgs, ServicepolicyIdpPtr and ServicepolicyIdpPtrOutput values.
// You can construct a concrete instance of `ServicepolicyIdpPtrInput` via:
//
//	        ServicepolicyIdpArgs{...}
//
//	or:
//
//	        nil
type ServicepolicyIdpPtrInput interface {
	pulumi.Input

	ToServicepolicyIdpPtrOutput() ServicepolicyIdpPtrOutput
	ToServicepolicyIdpPtrOutputWithContext(context.Context) ServicepolicyIdpPtrOutput
}

type servicepolicyIdpPtrType ServicepolicyIdpArgs

func ServicepolicyIdpPtr(v *ServicepolicyIdpArgs) ServicepolicyIdpPtrInput {
	return (*servicepolicyIdpPtrType)(v)
}

func (*servicepolicyIdpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicepolicyIdp)(nil)).Elem()
}

func (i *servicepolicyIdpPtrType) ToServicepolicyIdpPtrOutput() ServicepolicyIdpPtrOutput {
	return i.ToServicepolicyIdpPtrOutputWithContext(context.Background())
}

func (i *servicepolicyIdpPtrType) ToServicepolicyIdpPtrOutputWithContext(ctx context.Context) ServicepolicyIdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicepolicyIdpPtrOutput)
}

type ServicepolicyIdpOutput struct{ *pulumi.OutputState }

func (ServicepolicyIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicepolicyIdp)(nil)).Elem()
}

func (o ServicepolicyIdpOutput) ToServicepolicyIdpOutput() ServicepolicyIdpOutput {
	return o
}

func (o ServicepolicyIdpOutput) ToServicepolicyIdpOutputWithContext(ctx context.Context) ServicepolicyIdpOutput {
	return o
}

func (o ServicepolicyIdpOutput) ToServicepolicyIdpPtrOutput() ServicepolicyIdpPtrOutput {
	return o.ToServicepolicyIdpPtrOutputWithContext(context.Background())
}

func (o ServicepolicyIdpOutput) ToServicepolicyIdpPtrOutputWithContext(ctx context.Context) ServicepolicyIdpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServicepolicyIdp) *ServicepolicyIdp {
		return &v
	}).(ServicepolicyIdpPtrOutput)
}

func (o ServicepolicyIdpOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicepolicyIdp) *bool { return v.AlertOnly }).(pulumi.BoolPtrOutput)
}

func (o ServicepolicyIdpOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicepolicyIdp) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// org_level IDP Profile can be used, this takes precedence over `profile`
func (o ServicepolicyIdpOutput) IdpprofileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicepolicyIdp) *string { return v.IdpprofileId }).(pulumi.StringPtrOutput)
}

// `strict` (default) / `standard` / or keys from from idp_profiles
func (o ServicepolicyIdpOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicepolicyIdp) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type ServicepolicyIdpPtrOutput struct{ *pulumi.OutputState }

func (ServicepolicyIdpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicepolicyIdp)(nil)).Elem()
}

func (o ServicepolicyIdpPtrOutput) ToServicepolicyIdpPtrOutput() ServicepolicyIdpPtrOutput {
	return o
}

func (o ServicepolicyIdpPtrOutput) ToServicepolicyIdpPtrOutputWithContext(ctx context.Context) ServicepolicyIdpPtrOutput {
	return o
}

func (o ServicepolicyIdpPtrOutput) Elem() ServicepolicyIdpOutput {
	return o.ApplyT(func(v *ServicepolicyIdp) ServicepolicyIdp {
		if v != nil {
			return *v
		}
		var ret ServicepolicyIdp
		return ret
	}).(ServicepolicyIdpOutput)
}

func (o ServicepolicyIdpPtrOutput) AlertOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicepolicyIdp) *bool {
		if v == nil {
			return nil
		}
		return v.AlertOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ServicepolicyIdpPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicepolicyIdp) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// org_level IDP Profile can be used, this takes precedence over `profile`
func (o ServicepolicyIdpPtrOutput) IdpprofileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicepolicyIdp) *string {
		if v == nil {
			return nil
		}
		return v.IdpprofileId
	}).(pulumi.StringPtrOutput)
}

// `strict` (default) / `standard` / or keys from from idp_profiles
func (o ServicepolicyIdpPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicepolicyIdp) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

type SettingApiPolicy struct {
	// by default, API hides password/secrets when the user doesn't have write access
	//   * `true`: API will hide passwords/secrets for all users
	//   * `false`: API will hide passwords/secrets for read-only users
	NoReveal *bool `pulumi:"noReveal"`
}

// SettingApiPolicyInput is an input type that accepts SettingApiPolicyArgs and SettingApiPolicyOutput values.
// You can construct a concrete instance of `SettingApiPolicyInput` via:
//
//	SettingApiPolicyArgs{...}
type SettingApiPolicyInput interface {
	pulumi.Input

	ToSettingApiPolicyOutput() SettingApiPolicyOutput
	ToSettingApiPolicyOutputWithContext(context.Context) SettingApiPolicyOutput
}

type SettingApiPolicyArgs struct {
	// by default, API hides password/secrets when the user doesn't have write access
	//   * `true`: API will hide passwords/secrets for all users
	//   * `false`: API will hide passwords/secrets for read-only users
	NoReveal pulumi.BoolPtrInput `pulumi:"noReveal"`
}

func (SettingApiPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingApiPolicy)(nil)).Elem()
}

func (i SettingApiPolicyArgs) ToSettingApiPolicyOutput() SettingApiPolicyOutput {
	return i.ToSettingApiPolicyOutputWithContext(context.Background())
}

func (i SettingApiPolicyArgs) ToSettingApiPolicyOutputWithContext(ctx context.Context) SettingApiPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingApiPolicyOutput)
}

func (i SettingApiPolicyArgs) ToSettingApiPolicyPtrOutput() SettingApiPolicyPtrOutput {
	return i.ToSettingApiPolicyPtrOutputWithContext(context.Background())
}

func (i SettingApiPolicyArgs) ToSettingApiPolicyPtrOutputWithContext(ctx context.Context) SettingApiPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingApiPolicyOutput).ToSettingApiPolicyPtrOutputWithContext(ctx)
}

// SettingApiPolicyPtrInput is an input type that accepts SettingApiPolicyArgs, SettingApiPolicyPtr and SettingApiPolicyPtrOutput values.
// You can construct a concrete instance of `SettingApiPolicyPtrInput` via:
//
//	        SettingApiPolicyArgs{...}
//
//	or:
//
//	        nil
type SettingApiPolicyPtrInput interface {
	pulumi.Input

	ToSettingApiPolicyPtrOutput() SettingApiPolicyPtrOutput
	ToSettingApiPolicyPtrOutputWithContext(context.Context) SettingApiPolicyPtrOutput
}

type settingApiPolicyPtrType SettingApiPolicyArgs

func SettingApiPolicyPtr(v *SettingApiPolicyArgs) SettingApiPolicyPtrInput {
	return (*settingApiPolicyPtrType)(v)
}

func (*settingApiPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingApiPolicy)(nil)).Elem()
}

func (i *settingApiPolicyPtrType) ToSettingApiPolicyPtrOutput() SettingApiPolicyPtrOutput {
	return i.ToSettingApiPolicyPtrOutputWithContext(context.Background())
}

func (i *settingApiPolicyPtrType) ToSettingApiPolicyPtrOutputWithContext(ctx context.Context) SettingApiPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingApiPolicyPtrOutput)
}

type SettingApiPolicyOutput struct{ *pulumi.OutputState }

func (SettingApiPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingApiPolicy)(nil)).Elem()
}

func (o SettingApiPolicyOutput) ToSettingApiPolicyOutput() SettingApiPolicyOutput {
	return o
}

func (o SettingApiPolicyOutput) ToSettingApiPolicyOutputWithContext(ctx context.Context) SettingApiPolicyOutput {
	return o
}

func (o SettingApiPolicyOutput) ToSettingApiPolicyPtrOutput() SettingApiPolicyPtrOutput {
	return o.ToSettingApiPolicyPtrOutputWithContext(context.Background())
}

func (o SettingApiPolicyOutput) ToSettingApiPolicyPtrOutputWithContext(ctx context.Context) SettingApiPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingApiPolicy) *SettingApiPolicy {
		return &v
	}).(SettingApiPolicyPtrOutput)
}

// by default, API hides password/secrets when the user doesn't have write access
//   - `true`: API will hide passwords/secrets for all users
//   - `false`: API will hide passwords/secrets for read-only users
func (o SettingApiPolicyOutput) NoReveal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingApiPolicy) *bool { return v.NoReveal }).(pulumi.BoolPtrOutput)
}

type SettingApiPolicyPtrOutput struct{ *pulumi.OutputState }

func (SettingApiPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingApiPolicy)(nil)).Elem()
}

func (o SettingApiPolicyPtrOutput) ToSettingApiPolicyPtrOutput() SettingApiPolicyPtrOutput {
	return o
}

func (o SettingApiPolicyPtrOutput) ToSettingApiPolicyPtrOutputWithContext(ctx context.Context) SettingApiPolicyPtrOutput {
	return o
}

func (o SettingApiPolicyPtrOutput) Elem() SettingApiPolicyOutput {
	return o.ApplyT(func(v *SettingApiPolicy) SettingApiPolicy {
		if v != nil {
			return *v
		}
		var ret SettingApiPolicy
		return ret
	}).(SettingApiPolicyOutput)
}

// by default, API hides password/secrets when the user doesn't have write access
//   - `true`: API will hide passwords/secrets for all users
//   - `false`: API will hide passwords/secrets for read-only users
func (o SettingApiPolicyPtrOutput) NoReveal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingApiPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.NoReveal
	}).(pulumi.BoolPtrOutput)
}

type SettingCelona struct {
	ApiKey    string `pulumi:"apiKey"`
	ApiPrefix string `pulumi:"apiPrefix"`
}

// SettingCelonaInput is an input type that accepts SettingCelonaArgs and SettingCelonaOutput values.
// You can construct a concrete instance of `SettingCelonaInput` via:
//
//	SettingCelonaArgs{...}
type SettingCelonaInput interface {
	pulumi.Input

	ToSettingCelonaOutput() SettingCelonaOutput
	ToSettingCelonaOutputWithContext(context.Context) SettingCelonaOutput
}

type SettingCelonaArgs struct {
	ApiKey    pulumi.StringInput `pulumi:"apiKey"`
	ApiPrefix pulumi.StringInput `pulumi:"apiPrefix"`
}

func (SettingCelonaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCelona)(nil)).Elem()
}

func (i SettingCelonaArgs) ToSettingCelonaOutput() SettingCelonaOutput {
	return i.ToSettingCelonaOutputWithContext(context.Background())
}

func (i SettingCelonaArgs) ToSettingCelonaOutputWithContext(ctx context.Context) SettingCelonaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCelonaOutput)
}

func (i SettingCelonaArgs) ToSettingCelonaPtrOutput() SettingCelonaPtrOutput {
	return i.ToSettingCelonaPtrOutputWithContext(context.Background())
}

func (i SettingCelonaArgs) ToSettingCelonaPtrOutputWithContext(ctx context.Context) SettingCelonaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCelonaOutput).ToSettingCelonaPtrOutputWithContext(ctx)
}

// SettingCelonaPtrInput is an input type that accepts SettingCelonaArgs, SettingCelonaPtr and SettingCelonaPtrOutput values.
// You can construct a concrete instance of `SettingCelonaPtrInput` via:
//
//	        SettingCelonaArgs{...}
//
//	or:
//
//	        nil
type SettingCelonaPtrInput interface {
	pulumi.Input

	ToSettingCelonaPtrOutput() SettingCelonaPtrOutput
	ToSettingCelonaPtrOutputWithContext(context.Context) SettingCelonaPtrOutput
}

type settingCelonaPtrType SettingCelonaArgs

func SettingCelonaPtr(v *SettingCelonaArgs) SettingCelonaPtrInput {
	return (*settingCelonaPtrType)(v)
}

func (*settingCelonaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCelona)(nil)).Elem()
}

func (i *settingCelonaPtrType) ToSettingCelonaPtrOutput() SettingCelonaPtrOutput {
	return i.ToSettingCelonaPtrOutputWithContext(context.Background())
}

func (i *settingCelonaPtrType) ToSettingCelonaPtrOutputWithContext(ctx context.Context) SettingCelonaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCelonaPtrOutput)
}

type SettingCelonaOutput struct{ *pulumi.OutputState }

func (SettingCelonaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCelona)(nil)).Elem()
}

func (o SettingCelonaOutput) ToSettingCelonaOutput() SettingCelonaOutput {
	return o
}

func (o SettingCelonaOutput) ToSettingCelonaOutputWithContext(ctx context.Context) SettingCelonaOutput {
	return o
}

func (o SettingCelonaOutput) ToSettingCelonaPtrOutput() SettingCelonaPtrOutput {
	return o.ToSettingCelonaPtrOutputWithContext(context.Background())
}

func (o SettingCelonaOutput) ToSettingCelonaPtrOutputWithContext(ctx context.Context) SettingCelonaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingCelona) *SettingCelona {
		return &v
	}).(SettingCelonaPtrOutput)
}

func (o SettingCelonaOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v SettingCelona) string { return v.ApiKey }).(pulumi.StringOutput)
}

func (o SettingCelonaOutput) ApiPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SettingCelona) string { return v.ApiPrefix }).(pulumi.StringOutput)
}

type SettingCelonaPtrOutput struct{ *pulumi.OutputState }

func (SettingCelonaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCelona)(nil)).Elem()
}

func (o SettingCelonaPtrOutput) ToSettingCelonaPtrOutput() SettingCelonaPtrOutput {
	return o
}

func (o SettingCelonaPtrOutput) ToSettingCelonaPtrOutputWithContext(ctx context.Context) SettingCelonaPtrOutput {
	return o
}

func (o SettingCelonaPtrOutput) Elem() SettingCelonaOutput {
	return o.ApplyT(func(v *SettingCelona) SettingCelona {
		if v != nil {
			return *v
		}
		var ret SettingCelona
		return ret
	}).(SettingCelonaOutput)
}

func (o SettingCelonaPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCelona) *string {
		if v == nil {
			return nil
		}
		return &v.ApiKey
	}).(pulumi.StringPtrOutput)
}

func (o SettingCelonaPtrOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCelona) *string {
		if v == nil {
			return nil
		}
		return &v.ApiPrefix
	}).(pulumi.StringPtrOutput)
}

type SettingCloudshark struct {
	Apitoken string `pulumi:"apitoken"`
	// if using CS Enteprise
	Url *string `pulumi:"url"`
}

// SettingCloudsharkInput is an input type that accepts SettingCloudsharkArgs and SettingCloudsharkOutput values.
// You can construct a concrete instance of `SettingCloudsharkInput` via:
//
//	SettingCloudsharkArgs{...}
type SettingCloudsharkInput interface {
	pulumi.Input

	ToSettingCloudsharkOutput() SettingCloudsharkOutput
	ToSettingCloudsharkOutputWithContext(context.Context) SettingCloudsharkOutput
}

type SettingCloudsharkArgs struct {
	Apitoken pulumi.StringInput `pulumi:"apitoken"`
	// if using CS Enteprise
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SettingCloudsharkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCloudshark)(nil)).Elem()
}

func (i SettingCloudsharkArgs) ToSettingCloudsharkOutput() SettingCloudsharkOutput {
	return i.ToSettingCloudsharkOutputWithContext(context.Background())
}

func (i SettingCloudsharkArgs) ToSettingCloudsharkOutputWithContext(ctx context.Context) SettingCloudsharkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCloudsharkOutput)
}

func (i SettingCloudsharkArgs) ToSettingCloudsharkPtrOutput() SettingCloudsharkPtrOutput {
	return i.ToSettingCloudsharkPtrOutputWithContext(context.Background())
}

func (i SettingCloudsharkArgs) ToSettingCloudsharkPtrOutputWithContext(ctx context.Context) SettingCloudsharkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCloudsharkOutput).ToSettingCloudsharkPtrOutputWithContext(ctx)
}

// SettingCloudsharkPtrInput is an input type that accepts SettingCloudsharkArgs, SettingCloudsharkPtr and SettingCloudsharkPtrOutput values.
// You can construct a concrete instance of `SettingCloudsharkPtrInput` via:
//
//	        SettingCloudsharkArgs{...}
//
//	or:
//
//	        nil
type SettingCloudsharkPtrInput interface {
	pulumi.Input

	ToSettingCloudsharkPtrOutput() SettingCloudsharkPtrOutput
	ToSettingCloudsharkPtrOutputWithContext(context.Context) SettingCloudsharkPtrOutput
}

type settingCloudsharkPtrType SettingCloudsharkArgs

func SettingCloudsharkPtr(v *SettingCloudsharkArgs) SettingCloudsharkPtrInput {
	return (*settingCloudsharkPtrType)(v)
}

func (*settingCloudsharkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCloudshark)(nil)).Elem()
}

func (i *settingCloudsharkPtrType) ToSettingCloudsharkPtrOutput() SettingCloudsharkPtrOutput {
	return i.ToSettingCloudsharkPtrOutputWithContext(context.Background())
}

func (i *settingCloudsharkPtrType) ToSettingCloudsharkPtrOutputWithContext(ctx context.Context) SettingCloudsharkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCloudsharkPtrOutput)
}

type SettingCloudsharkOutput struct{ *pulumi.OutputState }

func (SettingCloudsharkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCloudshark)(nil)).Elem()
}

func (o SettingCloudsharkOutput) ToSettingCloudsharkOutput() SettingCloudsharkOutput {
	return o
}

func (o SettingCloudsharkOutput) ToSettingCloudsharkOutputWithContext(ctx context.Context) SettingCloudsharkOutput {
	return o
}

func (o SettingCloudsharkOutput) ToSettingCloudsharkPtrOutput() SettingCloudsharkPtrOutput {
	return o.ToSettingCloudsharkPtrOutputWithContext(context.Background())
}

func (o SettingCloudsharkOutput) ToSettingCloudsharkPtrOutputWithContext(ctx context.Context) SettingCloudsharkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingCloudshark) *SettingCloudshark {
		return &v
	}).(SettingCloudsharkPtrOutput)
}

func (o SettingCloudsharkOutput) Apitoken() pulumi.StringOutput {
	return o.ApplyT(func(v SettingCloudshark) string { return v.Apitoken }).(pulumi.StringOutput)
}

// if using CS Enteprise
func (o SettingCloudsharkOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingCloudshark) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SettingCloudsharkPtrOutput struct{ *pulumi.OutputState }

func (SettingCloudsharkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCloudshark)(nil)).Elem()
}

func (o SettingCloudsharkPtrOutput) ToSettingCloudsharkPtrOutput() SettingCloudsharkPtrOutput {
	return o
}

func (o SettingCloudsharkPtrOutput) ToSettingCloudsharkPtrOutputWithContext(ctx context.Context) SettingCloudsharkPtrOutput {
	return o
}

func (o SettingCloudsharkPtrOutput) Elem() SettingCloudsharkOutput {
	return o.ApplyT(func(v *SettingCloudshark) SettingCloudshark {
		if v != nil {
			return *v
		}
		var ret SettingCloudshark
		return ret
	}).(SettingCloudsharkOutput)
}

func (o SettingCloudsharkPtrOutput) Apitoken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCloudshark) *string {
		if v == nil {
			return nil
		}
		return &v.Apitoken
	}).(pulumi.StringPtrOutput)
}

// if using CS Enteprise
func (o SettingCloudsharkPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCloudshark) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type SettingCradlepoint struct {
	CpApiId   string `pulumi:"cpApiId"`
	CpApiKey  string `pulumi:"cpApiKey"`
	EcmApiId  string `pulumi:"ecmApiId"`
	EcmApiKey string `pulumi:"ecmApiKey"`
}

// SettingCradlepointInput is an input type that accepts SettingCradlepointArgs and SettingCradlepointOutput values.
// You can construct a concrete instance of `SettingCradlepointInput` via:
//
//	SettingCradlepointArgs{...}
type SettingCradlepointInput interface {
	pulumi.Input

	ToSettingCradlepointOutput() SettingCradlepointOutput
	ToSettingCradlepointOutputWithContext(context.Context) SettingCradlepointOutput
}

type SettingCradlepointArgs struct {
	CpApiId   pulumi.StringInput `pulumi:"cpApiId"`
	CpApiKey  pulumi.StringInput `pulumi:"cpApiKey"`
	EcmApiId  pulumi.StringInput `pulumi:"ecmApiId"`
	EcmApiKey pulumi.StringInput `pulumi:"ecmApiKey"`
}

func (SettingCradlepointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCradlepoint)(nil)).Elem()
}

func (i SettingCradlepointArgs) ToSettingCradlepointOutput() SettingCradlepointOutput {
	return i.ToSettingCradlepointOutputWithContext(context.Background())
}

func (i SettingCradlepointArgs) ToSettingCradlepointOutputWithContext(ctx context.Context) SettingCradlepointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCradlepointOutput)
}

func (i SettingCradlepointArgs) ToSettingCradlepointPtrOutput() SettingCradlepointPtrOutput {
	return i.ToSettingCradlepointPtrOutputWithContext(context.Background())
}

func (i SettingCradlepointArgs) ToSettingCradlepointPtrOutputWithContext(ctx context.Context) SettingCradlepointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCradlepointOutput).ToSettingCradlepointPtrOutputWithContext(ctx)
}

// SettingCradlepointPtrInput is an input type that accepts SettingCradlepointArgs, SettingCradlepointPtr and SettingCradlepointPtrOutput values.
// You can construct a concrete instance of `SettingCradlepointPtrInput` via:
//
//	        SettingCradlepointArgs{...}
//
//	or:
//
//	        nil
type SettingCradlepointPtrInput interface {
	pulumi.Input

	ToSettingCradlepointPtrOutput() SettingCradlepointPtrOutput
	ToSettingCradlepointPtrOutputWithContext(context.Context) SettingCradlepointPtrOutput
}

type settingCradlepointPtrType SettingCradlepointArgs

func SettingCradlepointPtr(v *SettingCradlepointArgs) SettingCradlepointPtrInput {
	return (*settingCradlepointPtrType)(v)
}

func (*settingCradlepointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCradlepoint)(nil)).Elem()
}

func (i *settingCradlepointPtrType) ToSettingCradlepointPtrOutput() SettingCradlepointPtrOutput {
	return i.ToSettingCradlepointPtrOutputWithContext(context.Background())
}

func (i *settingCradlepointPtrType) ToSettingCradlepointPtrOutputWithContext(ctx context.Context) SettingCradlepointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCradlepointPtrOutput)
}

type SettingCradlepointOutput struct{ *pulumi.OutputState }

func (SettingCradlepointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCradlepoint)(nil)).Elem()
}

func (o SettingCradlepointOutput) ToSettingCradlepointOutput() SettingCradlepointOutput {
	return o
}

func (o SettingCradlepointOutput) ToSettingCradlepointOutputWithContext(ctx context.Context) SettingCradlepointOutput {
	return o
}

func (o SettingCradlepointOutput) ToSettingCradlepointPtrOutput() SettingCradlepointPtrOutput {
	return o.ToSettingCradlepointPtrOutputWithContext(context.Background())
}

func (o SettingCradlepointOutput) ToSettingCradlepointPtrOutputWithContext(ctx context.Context) SettingCradlepointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingCradlepoint) *SettingCradlepoint {
		return &v
	}).(SettingCradlepointPtrOutput)
}

func (o SettingCradlepointOutput) CpApiId() pulumi.StringOutput {
	return o.ApplyT(func(v SettingCradlepoint) string { return v.CpApiId }).(pulumi.StringOutput)
}

func (o SettingCradlepointOutput) CpApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v SettingCradlepoint) string { return v.CpApiKey }).(pulumi.StringOutput)
}

func (o SettingCradlepointOutput) EcmApiId() pulumi.StringOutput {
	return o.ApplyT(func(v SettingCradlepoint) string { return v.EcmApiId }).(pulumi.StringOutput)
}

func (o SettingCradlepointOutput) EcmApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v SettingCradlepoint) string { return v.EcmApiKey }).(pulumi.StringOutput)
}

type SettingCradlepointPtrOutput struct{ *pulumi.OutputState }

func (SettingCradlepointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCradlepoint)(nil)).Elem()
}

func (o SettingCradlepointPtrOutput) ToSettingCradlepointPtrOutput() SettingCradlepointPtrOutput {
	return o
}

func (o SettingCradlepointPtrOutput) ToSettingCradlepointPtrOutputWithContext(ctx context.Context) SettingCradlepointPtrOutput {
	return o
}

func (o SettingCradlepointPtrOutput) Elem() SettingCradlepointOutput {
	return o.ApplyT(func(v *SettingCradlepoint) SettingCradlepoint {
		if v != nil {
			return *v
		}
		var ret SettingCradlepoint
		return ret
	}).(SettingCradlepointOutput)
}

func (o SettingCradlepointPtrOutput) CpApiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCradlepoint) *string {
		if v == nil {
			return nil
		}
		return &v.CpApiId
	}).(pulumi.StringPtrOutput)
}

func (o SettingCradlepointPtrOutput) CpApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCradlepoint) *string {
		if v == nil {
			return nil
		}
		return &v.CpApiKey
	}).(pulumi.StringPtrOutput)
}

func (o SettingCradlepointPtrOutput) EcmApiId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCradlepoint) *string {
		if v == nil {
			return nil
		}
		return &v.EcmApiId
	}).(pulumi.StringPtrOutput)
}

func (o SettingCradlepointPtrOutput) EcmApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingCradlepoint) *string {
		if v == nil {
			return nil
		}
		return &v.EcmApiKey
	}).(pulumi.StringPtrOutput)
}

type SettingDeviceCert struct {
	Cert string `pulumi:"cert"`
	Key  string `pulumi:"key"`
}

// SettingDeviceCertInput is an input type that accepts SettingDeviceCertArgs and SettingDeviceCertOutput values.
// You can construct a concrete instance of `SettingDeviceCertInput` via:
//
//	SettingDeviceCertArgs{...}
type SettingDeviceCertInput interface {
	pulumi.Input

	ToSettingDeviceCertOutput() SettingDeviceCertOutput
	ToSettingDeviceCertOutputWithContext(context.Context) SettingDeviceCertOutput
}

type SettingDeviceCertArgs struct {
	Cert pulumi.StringInput `pulumi:"cert"`
	Key  pulumi.StringInput `pulumi:"key"`
}

func (SettingDeviceCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingDeviceCert)(nil)).Elem()
}

func (i SettingDeviceCertArgs) ToSettingDeviceCertOutput() SettingDeviceCertOutput {
	return i.ToSettingDeviceCertOutputWithContext(context.Background())
}

func (i SettingDeviceCertArgs) ToSettingDeviceCertOutputWithContext(ctx context.Context) SettingDeviceCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingDeviceCertOutput)
}

func (i SettingDeviceCertArgs) ToSettingDeviceCertPtrOutput() SettingDeviceCertPtrOutput {
	return i.ToSettingDeviceCertPtrOutputWithContext(context.Background())
}

func (i SettingDeviceCertArgs) ToSettingDeviceCertPtrOutputWithContext(ctx context.Context) SettingDeviceCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingDeviceCertOutput).ToSettingDeviceCertPtrOutputWithContext(ctx)
}

// SettingDeviceCertPtrInput is an input type that accepts SettingDeviceCertArgs, SettingDeviceCertPtr and SettingDeviceCertPtrOutput values.
// You can construct a concrete instance of `SettingDeviceCertPtrInput` via:
//
//	        SettingDeviceCertArgs{...}
//
//	or:
//
//	        nil
type SettingDeviceCertPtrInput interface {
	pulumi.Input

	ToSettingDeviceCertPtrOutput() SettingDeviceCertPtrOutput
	ToSettingDeviceCertPtrOutputWithContext(context.Context) SettingDeviceCertPtrOutput
}

type settingDeviceCertPtrType SettingDeviceCertArgs

func SettingDeviceCertPtr(v *SettingDeviceCertArgs) SettingDeviceCertPtrInput {
	return (*settingDeviceCertPtrType)(v)
}

func (*settingDeviceCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingDeviceCert)(nil)).Elem()
}

func (i *settingDeviceCertPtrType) ToSettingDeviceCertPtrOutput() SettingDeviceCertPtrOutput {
	return i.ToSettingDeviceCertPtrOutputWithContext(context.Background())
}

func (i *settingDeviceCertPtrType) ToSettingDeviceCertPtrOutputWithContext(ctx context.Context) SettingDeviceCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingDeviceCertPtrOutput)
}

type SettingDeviceCertOutput struct{ *pulumi.OutputState }

func (SettingDeviceCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingDeviceCert)(nil)).Elem()
}

func (o SettingDeviceCertOutput) ToSettingDeviceCertOutput() SettingDeviceCertOutput {
	return o
}

func (o SettingDeviceCertOutput) ToSettingDeviceCertOutputWithContext(ctx context.Context) SettingDeviceCertOutput {
	return o
}

func (o SettingDeviceCertOutput) ToSettingDeviceCertPtrOutput() SettingDeviceCertPtrOutput {
	return o.ToSettingDeviceCertPtrOutputWithContext(context.Background())
}

func (o SettingDeviceCertOutput) ToSettingDeviceCertPtrOutputWithContext(ctx context.Context) SettingDeviceCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingDeviceCert) *SettingDeviceCert {
		return &v
	}).(SettingDeviceCertPtrOutput)
}

func (o SettingDeviceCertOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v SettingDeviceCert) string { return v.Cert }).(pulumi.StringOutput)
}

func (o SettingDeviceCertOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SettingDeviceCert) string { return v.Key }).(pulumi.StringOutput)
}

type SettingDeviceCertPtrOutput struct{ *pulumi.OutputState }

func (SettingDeviceCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingDeviceCert)(nil)).Elem()
}

func (o SettingDeviceCertPtrOutput) ToSettingDeviceCertPtrOutput() SettingDeviceCertPtrOutput {
	return o
}

func (o SettingDeviceCertPtrOutput) ToSettingDeviceCertPtrOutputWithContext(ctx context.Context) SettingDeviceCertPtrOutput {
	return o
}

func (o SettingDeviceCertPtrOutput) Elem() SettingDeviceCertOutput {
	return o.ApplyT(func(v *SettingDeviceCert) SettingDeviceCert {
		if v != nil {
			return *v
		}
		var ret SettingDeviceCert
		return ret
	}).(SettingDeviceCertOutput)
}

func (o SettingDeviceCertPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingDeviceCert) *string {
		if v == nil {
			return nil
		}
		return &v.Cert
	}).(pulumi.StringPtrOutput)
}

func (o SettingDeviceCertPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingDeviceCert) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

type SettingInstaller struct {
	AllowAllDevices *bool    `pulumi:"allowAllDevices"`
	AllowAllSites   *bool    `pulumi:"allowAllSites"`
	ExtraSiteIds    []string `pulumi:"extraSiteIds"`
	GracePeriod     *int     `pulumi:"gracePeriod"`
}

// SettingInstallerInput is an input type that accepts SettingInstallerArgs and SettingInstallerOutput values.
// You can construct a concrete instance of `SettingInstallerInput` via:
//
//	SettingInstallerArgs{...}
type SettingInstallerInput interface {
	pulumi.Input

	ToSettingInstallerOutput() SettingInstallerOutput
	ToSettingInstallerOutputWithContext(context.Context) SettingInstallerOutput
}

type SettingInstallerArgs struct {
	AllowAllDevices pulumi.BoolPtrInput     `pulumi:"allowAllDevices"`
	AllowAllSites   pulumi.BoolPtrInput     `pulumi:"allowAllSites"`
	ExtraSiteIds    pulumi.StringArrayInput `pulumi:"extraSiteIds"`
	GracePeriod     pulumi.IntPtrInput      `pulumi:"gracePeriod"`
}

func (SettingInstallerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingInstaller)(nil)).Elem()
}

func (i SettingInstallerArgs) ToSettingInstallerOutput() SettingInstallerOutput {
	return i.ToSettingInstallerOutputWithContext(context.Background())
}

func (i SettingInstallerArgs) ToSettingInstallerOutputWithContext(ctx context.Context) SettingInstallerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingInstallerOutput)
}

func (i SettingInstallerArgs) ToSettingInstallerPtrOutput() SettingInstallerPtrOutput {
	return i.ToSettingInstallerPtrOutputWithContext(context.Background())
}

func (i SettingInstallerArgs) ToSettingInstallerPtrOutputWithContext(ctx context.Context) SettingInstallerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingInstallerOutput).ToSettingInstallerPtrOutputWithContext(ctx)
}

// SettingInstallerPtrInput is an input type that accepts SettingInstallerArgs, SettingInstallerPtr and SettingInstallerPtrOutput values.
// You can construct a concrete instance of `SettingInstallerPtrInput` via:
//
//	        SettingInstallerArgs{...}
//
//	or:
//
//	        nil
type SettingInstallerPtrInput interface {
	pulumi.Input

	ToSettingInstallerPtrOutput() SettingInstallerPtrOutput
	ToSettingInstallerPtrOutputWithContext(context.Context) SettingInstallerPtrOutput
}

type settingInstallerPtrType SettingInstallerArgs

func SettingInstallerPtr(v *SettingInstallerArgs) SettingInstallerPtrInput {
	return (*settingInstallerPtrType)(v)
}

func (*settingInstallerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingInstaller)(nil)).Elem()
}

func (i *settingInstallerPtrType) ToSettingInstallerPtrOutput() SettingInstallerPtrOutput {
	return i.ToSettingInstallerPtrOutputWithContext(context.Background())
}

func (i *settingInstallerPtrType) ToSettingInstallerPtrOutputWithContext(ctx context.Context) SettingInstallerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingInstallerPtrOutput)
}

type SettingInstallerOutput struct{ *pulumi.OutputState }

func (SettingInstallerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingInstaller)(nil)).Elem()
}

func (o SettingInstallerOutput) ToSettingInstallerOutput() SettingInstallerOutput {
	return o
}

func (o SettingInstallerOutput) ToSettingInstallerOutputWithContext(ctx context.Context) SettingInstallerOutput {
	return o
}

func (o SettingInstallerOutput) ToSettingInstallerPtrOutput() SettingInstallerPtrOutput {
	return o.ToSettingInstallerPtrOutputWithContext(context.Background())
}

func (o SettingInstallerOutput) ToSettingInstallerPtrOutputWithContext(ctx context.Context) SettingInstallerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingInstaller) *SettingInstaller {
		return &v
	}).(SettingInstallerPtrOutput)
}

func (o SettingInstallerOutput) AllowAllDevices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingInstaller) *bool { return v.AllowAllDevices }).(pulumi.BoolPtrOutput)
}

func (o SettingInstallerOutput) AllowAllSites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingInstaller) *bool { return v.AllowAllSites }).(pulumi.BoolPtrOutput)
}

func (o SettingInstallerOutput) ExtraSiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingInstaller) []string { return v.ExtraSiteIds }).(pulumi.StringArrayOutput)
}

func (o SettingInstallerOutput) GracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingInstaller) *int { return v.GracePeriod }).(pulumi.IntPtrOutput)
}

type SettingInstallerPtrOutput struct{ *pulumi.OutputState }

func (SettingInstallerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingInstaller)(nil)).Elem()
}

func (o SettingInstallerPtrOutput) ToSettingInstallerPtrOutput() SettingInstallerPtrOutput {
	return o
}

func (o SettingInstallerPtrOutput) ToSettingInstallerPtrOutputWithContext(ctx context.Context) SettingInstallerPtrOutput {
	return o
}

func (o SettingInstallerPtrOutput) Elem() SettingInstallerOutput {
	return o.ApplyT(func(v *SettingInstaller) SettingInstaller {
		if v != nil {
			return *v
		}
		var ret SettingInstaller
		return ret
	}).(SettingInstallerOutput)
}

func (o SettingInstallerPtrOutput) AllowAllDevices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingInstaller) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAllDevices
	}).(pulumi.BoolPtrOutput)
}

func (o SettingInstallerPtrOutput) AllowAllSites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingInstaller) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAllSites
	}).(pulumi.BoolPtrOutput)
}

func (o SettingInstallerPtrOutput) ExtraSiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingInstaller) []string {
		if v == nil {
			return nil
		}
		return v.ExtraSiteIds
	}).(pulumi.StringArrayOutput)
}

func (o SettingInstallerPtrOutput) GracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingInstaller) *int {
		if v == nil {
			return nil
		}
		return v.GracePeriod
	}).(pulumi.IntPtrOutput)
}

type SettingJcloud struct {
	// JCloud Org Token
	OrgApitoken string `pulumi:"orgApitoken"`
	// JCloud Org Token Name
	OrgApitokenName string `pulumi:"orgApitokenName"`
	// JCloud Org ID
	OrgId string `pulumi:"orgId"`
}

// SettingJcloudInput is an input type that accepts SettingJcloudArgs and SettingJcloudOutput values.
// You can construct a concrete instance of `SettingJcloudInput` via:
//
//	SettingJcloudArgs{...}
type SettingJcloudInput interface {
	pulumi.Input

	ToSettingJcloudOutput() SettingJcloudOutput
	ToSettingJcloudOutputWithContext(context.Context) SettingJcloudOutput
}

type SettingJcloudArgs struct {
	// JCloud Org Token
	OrgApitoken pulumi.StringInput `pulumi:"orgApitoken"`
	// JCloud Org Token Name
	OrgApitokenName pulumi.StringInput `pulumi:"orgApitokenName"`
	// JCloud Org ID
	OrgId pulumi.StringInput `pulumi:"orgId"`
}

func (SettingJcloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingJcloud)(nil)).Elem()
}

func (i SettingJcloudArgs) ToSettingJcloudOutput() SettingJcloudOutput {
	return i.ToSettingJcloudOutputWithContext(context.Background())
}

func (i SettingJcloudArgs) ToSettingJcloudOutputWithContext(ctx context.Context) SettingJcloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJcloudOutput)
}

func (i SettingJcloudArgs) ToSettingJcloudPtrOutput() SettingJcloudPtrOutput {
	return i.ToSettingJcloudPtrOutputWithContext(context.Background())
}

func (i SettingJcloudArgs) ToSettingJcloudPtrOutputWithContext(ctx context.Context) SettingJcloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJcloudOutput).ToSettingJcloudPtrOutputWithContext(ctx)
}

// SettingJcloudPtrInput is an input type that accepts SettingJcloudArgs, SettingJcloudPtr and SettingJcloudPtrOutput values.
// You can construct a concrete instance of `SettingJcloudPtrInput` via:
//
//	        SettingJcloudArgs{...}
//
//	or:
//
//	        nil
type SettingJcloudPtrInput interface {
	pulumi.Input

	ToSettingJcloudPtrOutput() SettingJcloudPtrOutput
	ToSettingJcloudPtrOutputWithContext(context.Context) SettingJcloudPtrOutput
}

type settingJcloudPtrType SettingJcloudArgs

func SettingJcloudPtr(v *SettingJcloudArgs) SettingJcloudPtrInput {
	return (*settingJcloudPtrType)(v)
}

func (*settingJcloudPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingJcloud)(nil)).Elem()
}

func (i *settingJcloudPtrType) ToSettingJcloudPtrOutput() SettingJcloudPtrOutput {
	return i.ToSettingJcloudPtrOutputWithContext(context.Background())
}

func (i *settingJcloudPtrType) ToSettingJcloudPtrOutputWithContext(ctx context.Context) SettingJcloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJcloudPtrOutput)
}

type SettingJcloudOutput struct{ *pulumi.OutputState }

func (SettingJcloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingJcloud)(nil)).Elem()
}

func (o SettingJcloudOutput) ToSettingJcloudOutput() SettingJcloudOutput {
	return o
}

func (o SettingJcloudOutput) ToSettingJcloudOutputWithContext(ctx context.Context) SettingJcloudOutput {
	return o
}

func (o SettingJcloudOutput) ToSettingJcloudPtrOutput() SettingJcloudPtrOutput {
	return o.ToSettingJcloudPtrOutputWithContext(context.Background())
}

func (o SettingJcloudOutput) ToSettingJcloudPtrOutputWithContext(ctx context.Context) SettingJcloudPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingJcloud) *SettingJcloud {
		return &v
	}).(SettingJcloudPtrOutput)
}

// JCloud Org Token
func (o SettingJcloudOutput) OrgApitoken() pulumi.StringOutput {
	return o.ApplyT(func(v SettingJcloud) string { return v.OrgApitoken }).(pulumi.StringOutput)
}

// JCloud Org Token Name
func (o SettingJcloudOutput) OrgApitokenName() pulumi.StringOutput {
	return o.ApplyT(func(v SettingJcloud) string { return v.OrgApitokenName }).(pulumi.StringOutput)
}

// JCloud Org ID
func (o SettingJcloudOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v SettingJcloud) string { return v.OrgId }).(pulumi.StringOutput)
}

type SettingJcloudPtrOutput struct{ *pulumi.OutputState }

func (SettingJcloudPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingJcloud)(nil)).Elem()
}

func (o SettingJcloudPtrOutput) ToSettingJcloudPtrOutput() SettingJcloudPtrOutput {
	return o
}

func (o SettingJcloudPtrOutput) ToSettingJcloudPtrOutputWithContext(ctx context.Context) SettingJcloudPtrOutput {
	return o
}

func (o SettingJcloudPtrOutput) Elem() SettingJcloudOutput {
	return o.ApplyT(func(v *SettingJcloud) SettingJcloud {
		if v != nil {
			return *v
		}
		var ret SettingJcloud
		return ret
	}).(SettingJcloudOutput)
}

// JCloud Org Token
func (o SettingJcloudPtrOutput) OrgApitoken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingJcloud) *string {
		if v == nil {
			return nil
		}
		return &v.OrgApitoken
	}).(pulumi.StringPtrOutput)
}

// JCloud Org Token Name
func (o SettingJcloudPtrOutput) OrgApitokenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingJcloud) *string {
		if v == nil {
			return nil
		}
		return &v.OrgApitokenName
	}).(pulumi.StringPtrOutput)
}

// JCloud Org ID
func (o SettingJcloudPtrOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingJcloud) *string {
		if v == nil {
			return nil
		}
		return &v.OrgId
	}).(pulumi.StringPtrOutput)
}

type SettingJuniper struct {
	Accounts []SettingJuniperAccount `pulumi:"accounts"`
}

// SettingJuniperInput is an input type that accepts SettingJuniperArgs and SettingJuniperOutput values.
// You can construct a concrete instance of `SettingJuniperInput` via:
//
//	SettingJuniperArgs{...}
type SettingJuniperInput interface {
	pulumi.Input

	ToSettingJuniperOutput() SettingJuniperOutput
	ToSettingJuniperOutputWithContext(context.Context) SettingJuniperOutput
}

type SettingJuniperArgs struct {
	Accounts SettingJuniperAccountArrayInput `pulumi:"accounts"`
}

func (SettingJuniperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingJuniper)(nil)).Elem()
}

func (i SettingJuniperArgs) ToSettingJuniperOutput() SettingJuniperOutput {
	return i.ToSettingJuniperOutputWithContext(context.Background())
}

func (i SettingJuniperArgs) ToSettingJuniperOutputWithContext(ctx context.Context) SettingJuniperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJuniperOutput)
}

func (i SettingJuniperArgs) ToSettingJuniperPtrOutput() SettingJuniperPtrOutput {
	return i.ToSettingJuniperPtrOutputWithContext(context.Background())
}

func (i SettingJuniperArgs) ToSettingJuniperPtrOutputWithContext(ctx context.Context) SettingJuniperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJuniperOutput).ToSettingJuniperPtrOutputWithContext(ctx)
}

// SettingJuniperPtrInput is an input type that accepts SettingJuniperArgs, SettingJuniperPtr and SettingJuniperPtrOutput values.
// You can construct a concrete instance of `SettingJuniperPtrInput` via:
//
//	        SettingJuniperArgs{...}
//
//	or:
//
//	        nil
type SettingJuniperPtrInput interface {
	pulumi.Input

	ToSettingJuniperPtrOutput() SettingJuniperPtrOutput
	ToSettingJuniperPtrOutputWithContext(context.Context) SettingJuniperPtrOutput
}

type settingJuniperPtrType SettingJuniperArgs

func SettingJuniperPtr(v *SettingJuniperArgs) SettingJuniperPtrInput {
	return (*settingJuniperPtrType)(v)
}

func (*settingJuniperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingJuniper)(nil)).Elem()
}

func (i *settingJuniperPtrType) ToSettingJuniperPtrOutput() SettingJuniperPtrOutput {
	return i.ToSettingJuniperPtrOutputWithContext(context.Background())
}

func (i *settingJuniperPtrType) ToSettingJuniperPtrOutputWithContext(ctx context.Context) SettingJuniperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJuniperPtrOutput)
}

type SettingJuniperOutput struct{ *pulumi.OutputState }

func (SettingJuniperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingJuniper)(nil)).Elem()
}

func (o SettingJuniperOutput) ToSettingJuniperOutput() SettingJuniperOutput {
	return o
}

func (o SettingJuniperOutput) ToSettingJuniperOutputWithContext(ctx context.Context) SettingJuniperOutput {
	return o
}

func (o SettingJuniperOutput) ToSettingJuniperPtrOutput() SettingJuniperPtrOutput {
	return o.ToSettingJuniperPtrOutputWithContext(context.Background())
}

func (o SettingJuniperOutput) ToSettingJuniperPtrOutputWithContext(ctx context.Context) SettingJuniperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingJuniper) *SettingJuniper {
		return &v
	}).(SettingJuniperPtrOutput)
}

func (o SettingJuniperOutput) Accounts() SettingJuniperAccountArrayOutput {
	return o.ApplyT(func(v SettingJuniper) []SettingJuniperAccount { return v.Accounts }).(SettingJuniperAccountArrayOutput)
}

type SettingJuniperPtrOutput struct{ *pulumi.OutputState }

func (SettingJuniperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingJuniper)(nil)).Elem()
}

func (o SettingJuniperPtrOutput) ToSettingJuniperPtrOutput() SettingJuniperPtrOutput {
	return o
}

func (o SettingJuniperPtrOutput) ToSettingJuniperPtrOutputWithContext(ctx context.Context) SettingJuniperPtrOutput {
	return o
}

func (o SettingJuniperPtrOutput) Elem() SettingJuniperOutput {
	return o.ApplyT(func(v *SettingJuniper) SettingJuniper {
		if v != nil {
			return *v
		}
		var ret SettingJuniper
		return ret
	}).(SettingJuniperOutput)
}

func (o SettingJuniperPtrOutput) Accounts() SettingJuniperAccountArrayOutput {
	return o.ApplyT(func(v *SettingJuniper) []SettingJuniperAccount {
		if v == nil {
			return nil
		}
		return v.Accounts
	}).(SettingJuniperAccountArrayOutput)
}

type SettingJuniperAccount struct {
	LinkedBy *string `pulumi:"linkedBy"`
	Name     *string `pulumi:"name"`
}

// SettingJuniperAccountInput is an input type that accepts SettingJuniperAccountArgs and SettingJuniperAccountOutput values.
// You can construct a concrete instance of `SettingJuniperAccountInput` via:
//
//	SettingJuniperAccountArgs{...}
type SettingJuniperAccountInput interface {
	pulumi.Input

	ToSettingJuniperAccountOutput() SettingJuniperAccountOutput
	ToSettingJuniperAccountOutputWithContext(context.Context) SettingJuniperAccountOutput
}

type SettingJuniperAccountArgs struct {
	LinkedBy pulumi.StringPtrInput `pulumi:"linkedBy"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
}

func (SettingJuniperAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingJuniperAccount)(nil)).Elem()
}

func (i SettingJuniperAccountArgs) ToSettingJuniperAccountOutput() SettingJuniperAccountOutput {
	return i.ToSettingJuniperAccountOutputWithContext(context.Background())
}

func (i SettingJuniperAccountArgs) ToSettingJuniperAccountOutputWithContext(ctx context.Context) SettingJuniperAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJuniperAccountOutput)
}

// SettingJuniperAccountArrayInput is an input type that accepts SettingJuniperAccountArray and SettingJuniperAccountArrayOutput values.
// You can construct a concrete instance of `SettingJuniperAccountArrayInput` via:
//
//	SettingJuniperAccountArray{ SettingJuniperAccountArgs{...} }
type SettingJuniperAccountArrayInput interface {
	pulumi.Input

	ToSettingJuniperAccountArrayOutput() SettingJuniperAccountArrayOutput
	ToSettingJuniperAccountArrayOutputWithContext(context.Context) SettingJuniperAccountArrayOutput
}

type SettingJuniperAccountArray []SettingJuniperAccountInput

func (SettingJuniperAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingJuniperAccount)(nil)).Elem()
}

func (i SettingJuniperAccountArray) ToSettingJuniperAccountArrayOutput() SettingJuniperAccountArrayOutput {
	return i.ToSettingJuniperAccountArrayOutputWithContext(context.Background())
}

func (i SettingJuniperAccountArray) ToSettingJuniperAccountArrayOutputWithContext(ctx context.Context) SettingJuniperAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingJuniperAccountArrayOutput)
}

type SettingJuniperAccountOutput struct{ *pulumi.OutputState }

func (SettingJuniperAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingJuniperAccount)(nil)).Elem()
}

func (o SettingJuniperAccountOutput) ToSettingJuniperAccountOutput() SettingJuniperAccountOutput {
	return o
}

func (o SettingJuniperAccountOutput) ToSettingJuniperAccountOutputWithContext(ctx context.Context) SettingJuniperAccountOutput {
	return o
}

func (o SettingJuniperAccountOutput) LinkedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingJuniperAccount) *string { return v.LinkedBy }).(pulumi.StringPtrOutput)
}

func (o SettingJuniperAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingJuniperAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SettingJuniperAccountArrayOutput struct{ *pulumi.OutputState }

func (SettingJuniperAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingJuniperAccount)(nil)).Elem()
}

func (o SettingJuniperAccountArrayOutput) ToSettingJuniperAccountArrayOutput() SettingJuniperAccountArrayOutput {
	return o
}

func (o SettingJuniperAccountArrayOutput) ToSettingJuniperAccountArrayOutputWithContext(ctx context.Context) SettingJuniperAccountArrayOutput {
	return o
}

func (o SettingJuniperAccountArrayOutput) Index(i pulumi.IntInput) SettingJuniperAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingJuniperAccount {
		return vs[0].([]SettingJuniperAccount)[vs[1].(int)]
	}).(SettingJuniperAccountOutput)
}

type SettingMgmt struct {
	// list of Mist Tunnels
	MxtunnelIds []string `pulumi:"mxtunnelIds"`
	// whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
	UseMxtunnel *bool `pulumi:"useMxtunnel"`
	// whether to use wxtunnel for mgmt connectivity
	UseWxtunnel *bool `pulumi:"useWxtunnel"`
}

// SettingMgmtInput is an input type that accepts SettingMgmtArgs and SettingMgmtOutput values.
// You can construct a concrete instance of `SettingMgmtInput` via:
//
//	SettingMgmtArgs{...}
type SettingMgmtInput interface {
	pulumi.Input

	ToSettingMgmtOutput() SettingMgmtOutput
	ToSettingMgmtOutputWithContext(context.Context) SettingMgmtOutput
}

type SettingMgmtArgs struct {
	// list of Mist Tunnels
	MxtunnelIds pulumi.StringArrayInput `pulumi:"mxtunnelIds"`
	// whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
	UseMxtunnel pulumi.BoolPtrInput `pulumi:"useMxtunnel"`
	// whether to use wxtunnel for mgmt connectivity
	UseWxtunnel pulumi.BoolPtrInput `pulumi:"useWxtunnel"`
}

func (SettingMgmtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMgmt)(nil)).Elem()
}

func (i SettingMgmtArgs) ToSettingMgmtOutput() SettingMgmtOutput {
	return i.ToSettingMgmtOutputWithContext(context.Background())
}

func (i SettingMgmtArgs) ToSettingMgmtOutputWithContext(ctx context.Context) SettingMgmtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMgmtOutput)
}

func (i SettingMgmtArgs) ToSettingMgmtPtrOutput() SettingMgmtPtrOutput {
	return i.ToSettingMgmtPtrOutputWithContext(context.Background())
}

func (i SettingMgmtArgs) ToSettingMgmtPtrOutputWithContext(ctx context.Context) SettingMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMgmtOutput).ToSettingMgmtPtrOutputWithContext(ctx)
}

// SettingMgmtPtrInput is an input type that accepts SettingMgmtArgs, SettingMgmtPtr and SettingMgmtPtrOutput values.
// You can construct a concrete instance of `SettingMgmtPtrInput` via:
//
//	        SettingMgmtArgs{...}
//
//	or:
//
//	        nil
type SettingMgmtPtrInput interface {
	pulumi.Input

	ToSettingMgmtPtrOutput() SettingMgmtPtrOutput
	ToSettingMgmtPtrOutputWithContext(context.Context) SettingMgmtPtrOutput
}

type settingMgmtPtrType SettingMgmtArgs

func SettingMgmtPtr(v *SettingMgmtArgs) SettingMgmtPtrInput {
	return (*settingMgmtPtrType)(v)
}

func (*settingMgmtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMgmt)(nil)).Elem()
}

func (i *settingMgmtPtrType) ToSettingMgmtPtrOutput() SettingMgmtPtrOutput {
	return i.ToSettingMgmtPtrOutputWithContext(context.Background())
}

func (i *settingMgmtPtrType) ToSettingMgmtPtrOutputWithContext(ctx context.Context) SettingMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMgmtPtrOutput)
}

type SettingMgmtOutput struct{ *pulumi.OutputState }

func (SettingMgmtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMgmt)(nil)).Elem()
}

func (o SettingMgmtOutput) ToSettingMgmtOutput() SettingMgmtOutput {
	return o
}

func (o SettingMgmtOutput) ToSettingMgmtOutputWithContext(ctx context.Context) SettingMgmtOutput {
	return o
}

func (o SettingMgmtOutput) ToSettingMgmtPtrOutput() SettingMgmtPtrOutput {
	return o.ToSettingMgmtPtrOutputWithContext(context.Background())
}

func (o SettingMgmtOutput) ToSettingMgmtPtrOutputWithContext(ctx context.Context) SettingMgmtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingMgmt) *SettingMgmt {
		return &v
	}).(SettingMgmtPtrOutput)
}

// list of Mist Tunnels
func (o SettingMgmtOutput) MxtunnelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingMgmt) []string { return v.MxtunnelIds }).(pulumi.StringArrayOutput)
}

// whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
func (o SettingMgmtOutput) UseMxtunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingMgmt) *bool { return v.UseMxtunnel }).(pulumi.BoolPtrOutput)
}

// whether to use wxtunnel for mgmt connectivity
func (o SettingMgmtOutput) UseWxtunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingMgmt) *bool { return v.UseWxtunnel }).(pulumi.BoolPtrOutput)
}

type SettingMgmtPtrOutput struct{ *pulumi.OutputState }

func (SettingMgmtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMgmt)(nil)).Elem()
}

func (o SettingMgmtPtrOutput) ToSettingMgmtPtrOutput() SettingMgmtPtrOutput {
	return o
}

func (o SettingMgmtPtrOutput) ToSettingMgmtPtrOutputWithContext(ctx context.Context) SettingMgmtPtrOutput {
	return o
}

func (o SettingMgmtPtrOutput) Elem() SettingMgmtOutput {
	return o.ApplyT(func(v *SettingMgmt) SettingMgmt {
		if v != nil {
			return *v
		}
		var ret SettingMgmt
		return ret
	}).(SettingMgmtOutput)
}

// list of Mist Tunnels
func (o SettingMgmtPtrOutput) MxtunnelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingMgmt) []string {
		if v == nil {
			return nil
		}
		return v.MxtunnelIds
	}).(pulumi.StringArrayOutput)
}

// whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
func (o SettingMgmtPtrOutput) UseMxtunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.UseMxtunnel
	}).(pulumi.BoolPtrOutput)
}

// whether to use wxtunnel for mgmt connectivity
func (o SettingMgmtPtrOutput) UseWxtunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.UseWxtunnel
	}).(pulumi.BoolPtrOutput)
}

type SettingMistNac struct {
	// list of PEM-encoded ca certs
	Cacerts []string `pulumi:"cacerts"`
	// use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
	DefaultIdpId *string `pulumi:"defaultIdpId"`
	// eap ssl security level
	// see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
	EapSslSecurityLevel *int `pulumi:"eapSslSecurityLevel"`
	// By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
	// For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mistNac enabled
	EuOnly *bool               `pulumi:"euOnly"`
	Idps   []SettingMistNacIdp `pulumi:"idps"`
	// radius server cert to be presented in EAP TLS
	ServerCert *SettingMistNacServerCert `pulumi:"serverCert"`
	// by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
	UseIpVersion *string `pulumi:"useIpVersion"`
	// By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac.
	// Set `useSslPort`==`true` to override that port with TCP43 (ssl),
	// This is a org level setting that is applicable to wlans, switch_templates, and mxedgeClusters that have mist-nac enabled
	UseSslPort *bool `pulumi:"useSslPort"`
}

// SettingMistNacInput is an input type that accepts SettingMistNacArgs and SettingMistNacOutput values.
// You can construct a concrete instance of `SettingMistNacInput` via:
//
//	SettingMistNacArgs{...}
type SettingMistNacInput interface {
	pulumi.Input

	ToSettingMistNacOutput() SettingMistNacOutput
	ToSettingMistNacOutputWithContext(context.Context) SettingMistNacOutput
}

type SettingMistNacArgs struct {
	// list of PEM-encoded ca certs
	Cacerts pulumi.StringArrayInput `pulumi:"cacerts"`
	// use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
	DefaultIdpId pulumi.StringPtrInput `pulumi:"defaultIdpId"`
	// eap ssl security level
	// see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
	EapSslSecurityLevel pulumi.IntPtrInput `pulumi:"eapSslSecurityLevel"`
	// By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
	// For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mistNac enabled
	EuOnly pulumi.BoolPtrInput         `pulumi:"euOnly"`
	Idps   SettingMistNacIdpArrayInput `pulumi:"idps"`
	// radius server cert to be presented in EAP TLS
	ServerCert SettingMistNacServerCertPtrInput `pulumi:"serverCert"`
	// by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
	UseIpVersion pulumi.StringPtrInput `pulumi:"useIpVersion"`
	// By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac.
	// Set `useSslPort`==`true` to override that port with TCP43 (ssl),
	// This is a org level setting that is applicable to wlans, switch_templates, and mxedgeClusters that have mist-nac enabled
	UseSslPort pulumi.BoolPtrInput `pulumi:"useSslPort"`
}

func (SettingMistNacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMistNac)(nil)).Elem()
}

func (i SettingMistNacArgs) ToSettingMistNacOutput() SettingMistNacOutput {
	return i.ToSettingMistNacOutputWithContext(context.Background())
}

func (i SettingMistNacArgs) ToSettingMistNacOutputWithContext(ctx context.Context) SettingMistNacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacOutput)
}

func (i SettingMistNacArgs) ToSettingMistNacPtrOutput() SettingMistNacPtrOutput {
	return i.ToSettingMistNacPtrOutputWithContext(context.Background())
}

func (i SettingMistNacArgs) ToSettingMistNacPtrOutputWithContext(ctx context.Context) SettingMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacOutput).ToSettingMistNacPtrOutputWithContext(ctx)
}

// SettingMistNacPtrInput is an input type that accepts SettingMistNacArgs, SettingMistNacPtr and SettingMistNacPtrOutput values.
// You can construct a concrete instance of `SettingMistNacPtrInput` via:
//
//	        SettingMistNacArgs{...}
//
//	or:
//
//	        nil
type SettingMistNacPtrInput interface {
	pulumi.Input

	ToSettingMistNacPtrOutput() SettingMistNacPtrOutput
	ToSettingMistNacPtrOutputWithContext(context.Context) SettingMistNacPtrOutput
}

type settingMistNacPtrType SettingMistNacArgs

func SettingMistNacPtr(v *SettingMistNacArgs) SettingMistNacPtrInput {
	return (*settingMistNacPtrType)(v)
}

func (*settingMistNacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMistNac)(nil)).Elem()
}

func (i *settingMistNacPtrType) ToSettingMistNacPtrOutput() SettingMistNacPtrOutput {
	return i.ToSettingMistNacPtrOutputWithContext(context.Background())
}

func (i *settingMistNacPtrType) ToSettingMistNacPtrOutputWithContext(ctx context.Context) SettingMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacPtrOutput)
}

type SettingMistNacOutput struct{ *pulumi.OutputState }

func (SettingMistNacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMistNac)(nil)).Elem()
}

func (o SettingMistNacOutput) ToSettingMistNacOutput() SettingMistNacOutput {
	return o
}

func (o SettingMistNacOutput) ToSettingMistNacOutputWithContext(ctx context.Context) SettingMistNacOutput {
	return o
}

func (o SettingMistNacOutput) ToSettingMistNacPtrOutput() SettingMistNacPtrOutput {
	return o.ToSettingMistNacPtrOutputWithContext(context.Background())
}

func (o SettingMistNacOutput) ToSettingMistNacPtrOutputWithContext(ctx context.Context) SettingMistNacPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingMistNac) *SettingMistNac {
		return &v
	}).(SettingMistNacPtrOutput)
}

// list of PEM-encoded ca certs
func (o SettingMistNacOutput) Cacerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingMistNac) []string { return v.Cacerts }).(pulumi.StringArrayOutput)
}

// use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
func (o SettingMistNacOutput) DefaultIdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMistNac) *string { return v.DefaultIdpId }).(pulumi.StringPtrOutput)
}

// eap ssl security level
// see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
func (o SettingMistNacOutput) EapSslSecurityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingMistNac) *int { return v.EapSslSecurityLevel }).(pulumi.IntPtrOutput)
}

// By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
// For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mistNac enabled
func (o SettingMistNacOutput) EuOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingMistNac) *bool { return v.EuOnly }).(pulumi.BoolPtrOutput)
}

func (o SettingMistNacOutput) Idps() SettingMistNacIdpArrayOutput {
	return o.ApplyT(func(v SettingMistNac) []SettingMistNacIdp { return v.Idps }).(SettingMistNacIdpArrayOutput)
}

// radius server cert to be presented in EAP TLS
func (o SettingMistNacOutput) ServerCert() SettingMistNacServerCertPtrOutput {
	return o.ApplyT(func(v SettingMistNac) *SettingMistNacServerCert { return v.ServerCert }).(SettingMistNacServerCertPtrOutput)
}

// by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
func (o SettingMistNacOutput) UseIpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMistNac) *string { return v.UseIpVersion }).(pulumi.StringPtrOutput)
}

// By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac.
// Set `useSslPort`==`true` to override that port with TCP43 (ssl),
// This is a org level setting that is applicable to wlans, switch_templates, and mxedgeClusters that have mist-nac enabled
func (o SettingMistNacOutput) UseSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingMistNac) *bool { return v.UseSslPort }).(pulumi.BoolPtrOutput)
}

type SettingMistNacPtrOutput struct{ *pulumi.OutputState }

func (SettingMistNacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMistNac)(nil)).Elem()
}

func (o SettingMistNacPtrOutput) ToSettingMistNacPtrOutput() SettingMistNacPtrOutput {
	return o
}

func (o SettingMistNacPtrOutput) ToSettingMistNacPtrOutputWithContext(ctx context.Context) SettingMistNacPtrOutput {
	return o
}

func (o SettingMistNacPtrOutput) Elem() SettingMistNacOutput {
	return o.ApplyT(func(v *SettingMistNac) SettingMistNac {
		if v != nil {
			return *v
		}
		var ret SettingMistNac
		return ret
	}).(SettingMistNacOutput)
}

// list of PEM-encoded ca certs
func (o SettingMistNacPtrOutput) Cacerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingMistNac) []string {
		if v == nil {
			return nil
		}
		return v.Cacerts
	}).(pulumi.StringArrayOutput)
}

// use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
func (o SettingMistNacPtrOutput) DefaultIdpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMistNac) *string {
		if v == nil {
			return nil
		}
		return v.DefaultIdpId
	}).(pulumi.StringPtrOutput)
}

// eap ssl security level
// see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
func (o SettingMistNacPtrOutput) EapSslSecurityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingMistNac) *int {
		if v == nil {
			return nil
		}
		return v.EapSslSecurityLevel
	}).(pulumi.IntPtrOutput)
}

// By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
// For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mistNac enabled
func (o SettingMistNacPtrOutput) EuOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingMistNac) *bool {
		if v == nil {
			return nil
		}
		return v.EuOnly
	}).(pulumi.BoolPtrOutput)
}

func (o SettingMistNacPtrOutput) Idps() SettingMistNacIdpArrayOutput {
	return o.ApplyT(func(v *SettingMistNac) []SettingMistNacIdp {
		if v == nil {
			return nil
		}
		return v.Idps
	}).(SettingMistNacIdpArrayOutput)
}

// radius server cert to be presented in EAP TLS
func (o SettingMistNacPtrOutput) ServerCert() SettingMistNacServerCertPtrOutput {
	return o.ApplyT(func(v *SettingMistNac) *SettingMistNacServerCert {
		if v == nil {
			return nil
		}
		return v.ServerCert
	}).(SettingMistNacServerCertPtrOutput)
}

// by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
func (o SettingMistNacPtrOutput) UseIpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMistNac) *string {
		if v == nil {
			return nil
		}
		return v.UseIpVersion
	}).(pulumi.StringPtrOutput)
}

// By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac.
// Set `useSslPort`==`true` to override that port with TCP43 (ssl),
// This is a org level setting that is applicable to wlans, switch_templates, and mxedgeClusters that have mist-nac enabled
func (o SettingMistNacPtrOutput) UseSslPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingMistNac) *bool {
		if v == nil {
			return nil
		}
		return v.UseSslPort
	}).(pulumi.BoolPtrOutput)
}

type SettingMistNacIdp struct {
	// when the IDP of mxedgeProxy type, exclude the following realms from proxying in addition to other valid home realms in this org
	ExcludeRealms []string `pulumi:"excludeRealms"`
	Id            *string  `pulumi:"id"`
	// which realm should trigger this IDP. User Realm is extracted from:
	//   * Username-AVP (`mist.com` from john@mist.com)
	//   * Cert CN
	UserRealms []string `pulumi:"userRealms"`
}

// SettingMistNacIdpInput is an input type that accepts SettingMistNacIdpArgs and SettingMistNacIdpOutput values.
// You can construct a concrete instance of `SettingMistNacIdpInput` via:
//
//	SettingMistNacIdpArgs{...}
type SettingMistNacIdpInput interface {
	pulumi.Input

	ToSettingMistNacIdpOutput() SettingMistNacIdpOutput
	ToSettingMistNacIdpOutputWithContext(context.Context) SettingMistNacIdpOutput
}

type SettingMistNacIdpArgs struct {
	// when the IDP of mxedgeProxy type, exclude the following realms from proxying in addition to other valid home realms in this org
	ExcludeRealms pulumi.StringArrayInput `pulumi:"excludeRealms"`
	Id            pulumi.StringPtrInput   `pulumi:"id"`
	// which realm should trigger this IDP. User Realm is extracted from:
	//   * Username-AVP (`mist.com` from john@mist.com)
	//   * Cert CN
	UserRealms pulumi.StringArrayInput `pulumi:"userRealms"`
}

func (SettingMistNacIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMistNacIdp)(nil)).Elem()
}

func (i SettingMistNacIdpArgs) ToSettingMistNacIdpOutput() SettingMistNacIdpOutput {
	return i.ToSettingMistNacIdpOutputWithContext(context.Background())
}

func (i SettingMistNacIdpArgs) ToSettingMistNacIdpOutputWithContext(ctx context.Context) SettingMistNacIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacIdpOutput)
}

// SettingMistNacIdpArrayInput is an input type that accepts SettingMistNacIdpArray and SettingMistNacIdpArrayOutput values.
// You can construct a concrete instance of `SettingMistNacIdpArrayInput` via:
//
//	SettingMistNacIdpArray{ SettingMistNacIdpArgs{...} }
type SettingMistNacIdpArrayInput interface {
	pulumi.Input

	ToSettingMistNacIdpArrayOutput() SettingMistNacIdpArrayOutput
	ToSettingMistNacIdpArrayOutputWithContext(context.Context) SettingMistNacIdpArrayOutput
}

type SettingMistNacIdpArray []SettingMistNacIdpInput

func (SettingMistNacIdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingMistNacIdp)(nil)).Elem()
}

func (i SettingMistNacIdpArray) ToSettingMistNacIdpArrayOutput() SettingMistNacIdpArrayOutput {
	return i.ToSettingMistNacIdpArrayOutputWithContext(context.Background())
}

func (i SettingMistNacIdpArray) ToSettingMistNacIdpArrayOutputWithContext(ctx context.Context) SettingMistNacIdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacIdpArrayOutput)
}

type SettingMistNacIdpOutput struct{ *pulumi.OutputState }

func (SettingMistNacIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMistNacIdp)(nil)).Elem()
}

func (o SettingMistNacIdpOutput) ToSettingMistNacIdpOutput() SettingMistNacIdpOutput {
	return o
}

func (o SettingMistNacIdpOutput) ToSettingMistNacIdpOutputWithContext(ctx context.Context) SettingMistNacIdpOutput {
	return o
}

// when the IDP of mxedgeProxy type, exclude the following realms from proxying in addition to other valid home realms in this org
func (o SettingMistNacIdpOutput) ExcludeRealms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingMistNacIdp) []string { return v.ExcludeRealms }).(pulumi.StringArrayOutput)
}

func (o SettingMistNacIdpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMistNacIdp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// which realm should trigger this IDP. User Realm is extracted from:
//   - Username-AVP (`mist.com` from john@mist.com)
//   - Cert CN
func (o SettingMistNacIdpOutput) UserRealms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingMistNacIdp) []string { return v.UserRealms }).(pulumi.StringArrayOutput)
}

type SettingMistNacIdpArrayOutput struct{ *pulumi.OutputState }

func (SettingMistNacIdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingMistNacIdp)(nil)).Elem()
}

func (o SettingMistNacIdpArrayOutput) ToSettingMistNacIdpArrayOutput() SettingMistNacIdpArrayOutput {
	return o
}

func (o SettingMistNacIdpArrayOutput) ToSettingMistNacIdpArrayOutputWithContext(ctx context.Context) SettingMistNacIdpArrayOutput {
	return o
}

func (o SettingMistNacIdpArrayOutput) Index(i pulumi.IntInput) SettingMistNacIdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingMistNacIdp {
		return vs[0].([]SettingMistNacIdp)[vs[1].(int)]
	}).(SettingMistNacIdpOutput)
}

type SettingMistNacServerCert struct {
	Cert *string `pulumi:"cert"`
	Key  *string `pulumi:"key"`
	// private key password (optional)
	Password *string `pulumi:"password"`
}

// SettingMistNacServerCertInput is an input type that accepts SettingMistNacServerCertArgs and SettingMistNacServerCertOutput values.
// You can construct a concrete instance of `SettingMistNacServerCertInput` via:
//
//	SettingMistNacServerCertArgs{...}
type SettingMistNacServerCertInput interface {
	pulumi.Input

	ToSettingMistNacServerCertOutput() SettingMistNacServerCertOutput
	ToSettingMistNacServerCertOutputWithContext(context.Context) SettingMistNacServerCertOutput
}

type SettingMistNacServerCertArgs struct {
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	Key  pulumi.StringPtrInput `pulumi:"key"`
	// private key password (optional)
	Password pulumi.StringPtrInput `pulumi:"password"`
}

func (SettingMistNacServerCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMistNacServerCert)(nil)).Elem()
}

func (i SettingMistNacServerCertArgs) ToSettingMistNacServerCertOutput() SettingMistNacServerCertOutput {
	return i.ToSettingMistNacServerCertOutputWithContext(context.Background())
}

func (i SettingMistNacServerCertArgs) ToSettingMistNacServerCertOutputWithContext(ctx context.Context) SettingMistNacServerCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacServerCertOutput)
}

func (i SettingMistNacServerCertArgs) ToSettingMistNacServerCertPtrOutput() SettingMistNacServerCertPtrOutput {
	return i.ToSettingMistNacServerCertPtrOutputWithContext(context.Background())
}

func (i SettingMistNacServerCertArgs) ToSettingMistNacServerCertPtrOutputWithContext(ctx context.Context) SettingMistNacServerCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacServerCertOutput).ToSettingMistNacServerCertPtrOutputWithContext(ctx)
}

// SettingMistNacServerCertPtrInput is an input type that accepts SettingMistNacServerCertArgs, SettingMistNacServerCertPtr and SettingMistNacServerCertPtrOutput values.
// You can construct a concrete instance of `SettingMistNacServerCertPtrInput` via:
//
//	        SettingMistNacServerCertArgs{...}
//
//	or:
//
//	        nil
type SettingMistNacServerCertPtrInput interface {
	pulumi.Input

	ToSettingMistNacServerCertPtrOutput() SettingMistNacServerCertPtrOutput
	ToSettingMistNacServerCertPtrOutputWithContext(context.Context) SettingMistNacServerCertPtrOutput
}

type settingMistNacServerCertPtrType SettingMistNacServerCertArgs

func SettingMistNacServerCertPtr(v *SettingMistNacServerCertArgs) SettingMistNacServerCertPtrInput {
	return (*settingMistNacServerCertPtrType)(v)
}

func (*settingMistNacServerCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMistNacServerCert)(nil)).Elem()
}

func (i *settingMistNacServerCertPtrType) ToSettingMistNacServerCertPtrOutput() SettingMistNacServerCertPtrOutput {
	return i.ToSettingMistNacServerCertPtrOutputWithContext(context.Background())
}

func (i *settingMistNacServerCertPtrType) ToSettingMistNacServerCertPtrOutputWithContext(ctx context.Context) SettingMistNacServerCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMistNacServerCertPtrOutput)
}

type SettingMistNacServerCertOutput struct{ *pulumi.OutputState }

func (SettingMistNacServerCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMistNacServerCert)(nil)).Elem()
}

func (o SettingMistNacServerCertOutput) ToSettingMistNacServerCertOutput() SettingMistNacServerCertOutput {
	return o
}

func (o SettingMistNacServerCertOutput) ToSettingMistNacServerCertOutputWithContext(ctx context.Context) SettingMistNacServerCertOutput {
	return o
}

func (o SettingMistNacServerCertOutput) ToSettingMistNacServerCertPtrOutput() SettingMistNacServerCertPtrOutput {
	return o.ToSettingMistNacServerCertPtrOutputWithContext(context.Background())
}

func (o SettingMistNacServerCertOutput) ToSettingMistNacServerCertPtrOutputWithContext(ctx context.Context) SettingMistNacServerCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingMistNacServerCert) *SettingMistNacServerCert {
		return &v
	}).(SettingMistNacServerCertPtrOutput)
}

func (o SettingMistNacServerCertOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMistNacServerCert) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

func (o SettingMistNacServerCertOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMistNacServerCert) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// private key password (optional)
func (o SettingMistNacServerCertOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMistNacServerCert) *string { return v.Password }).(pulumi.StringPtrOutput)
}

type SettingMistNacServerCertPtrOutput struct{ *pulumi.OutputState }

func (SettingMistNacServerCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMistNacServerCert)(nil)).Elem()
}

func (o SettingMistNacServerCertPtrOutput) ToSettingMistNacServerCertPtrOutput() SettingMistNacServerCertPtrOutput {
	return o
}

func (o SettingMistNacServerCertPtrOutput) ToSettingMistNacServerCertPtrOutputWithContext(ctx context.Context) SettingMistNacServerCertPtrOutput {
	return o
}

func (o SettingMistNacServerCertPtrOutput) Elem() SettingMistNacServerCertOutput {
	return o.ApplyT(func(v *SettingMistNacServerCert) SettingMistNacServerCert {
		if v != nil {
			return *v
		}
		var ret SettingMistNacServerCert
		return ret
	}).(SettingMistNacServerCertOutput)
}

func (o SettingMistNacServerCertPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMistNacServerCert) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

func (o SettingMistNacServerCertPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMistNacServerCert) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// private key password (optional)
func (o SettingMistNacServerCertPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMistNacServerCert) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

type SettingMxedgeMgmt struct {
	FipsEnabled  *bool   `pulumi:"fipsEnabled"`
	MistPassword *string `pulumi:"mistPassword"`
	// enum: `dhcp`, `disabled`, `static`
	OobIpType *string `pulumi:"oobIpType"`
	// enum: `autoconf`, `dhcp`, `disabled`, `static`
	OobIpType6   *string `pulumi:"oobIpType6"`
	RootPassword *string `pulumi:"rootPassword"`
}

// SettingMxedgeMgmtInput is an input type that accepts SettingMxedgeMgmtArgs and SettingMxedgeMgmtOutput values.
// You can construct a concrete instance of `SettingMxedgeMgmtInput` via:
//
//	SettingMxedgeMgmtArgs{...}
type SettingMxedgeMgmtInput interface {
	pulumi.Input

	ToSettingMxedgeMgmtOutput() SettingMxedgeMgmtOutput
	ToSettingMxedgeMgmtOutputWithContext(context.Context) SettingMxedgeMgmtOutput
}

type SettingMxedgeMgmtArgs struct {
	FipsEnabled  pulumi.BoolPtrInput   `pulumi:"fipsEnabled"`
	MistPassword pulumi.StringPtrInput `pulumi:"mistPassword"`
	// enum: `dhcp`, `disabled`, `static`
	OobIpType pulumi.StringPtrInput `pulumi:"oobIpType"`
	// enum: `autoconf`, `dhcp`, `disabled`, `static`
	OobIpType6   pulumi.StringPtrInput `pulumi:"oobIpType6"`
	RootPassword pulumi.StringPtrInput `pulumi:"rootPassword"`
}

func (SettingMxedgeMgmtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMxedgeMgmt)(nil)).Elem()
}

func (i SettingMxedgeMgmtArgs) ToSettingMxedgeMgmtOutput() SettingMxedgeMgmtOutput {
	return i.ToSettingMxedgeMgmtOutputWithContext(context.Background())
}

func (i SettingMxedgeMgmtArgs) ToSettingMxedgeMgmtOutputWithContext(ctx context.Context) SettingMxedgeMgmtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMxedgeMgmtOutput)
}

func (i SettingMxedgeMgmtArgs) ToSettingMxedgeMgmtPtrOutput() SettingMxedgeMgmtPtrOutput {
	return i.ToSettingMxedgeMgmtPtrOutputWithContext(context.Background())
}

func (i SettingMxedgeMgmtArgs) ToSettingMxedgeMgmtPtrOutputWithContext(ctx context.Context) SettingMxedgeMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMxedgeMgmtOutput).ToSettingMxedgeMgmtPtrOutputWithContext(ctx)
}

// SettingMxedgeMgmtPtrInput is an input type that accepts SettingMxedgeMgmtArgs, SettingMxedgeMgmtPtr and SettingMxedgeMgmtPtrOutput values.
// You can construct a concrete instance of `SettingMxedgeMgmtPtrInput` via:
//
//	        SettingMxedgeMgmtArgs{...}
//
//	or:
//
//	        nil
type SettingMxedgeMgmtPtrInput interface {
	pulumi.Input

	ToSettingMxedgeMgmtPtrOutput() SettingMxedgeMgmtPtrOutput
	ToSettingMxedgeMgmtPtrOutputWithContext(context.Context) SettingMxedgeMgmtPtrOutput
}

type settingMxedgeMgmtPtrType SettingMxedgeMgmtArgs

func SettingMxedgeMgmtPtr(v *SettingMxedgeMgmtArgs) SettingMxedgeMgmtPtrInput {
	return (*settingMxedgeMgmtPtrType)(v)
}

func (*settingMxedgeMgmtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMxedgeMgmt)(nil)).Elem()
}

func (i *settingMxedgeMgmtPtrType) ToSettingMxedgeMgmtPtrOutput() SettingMxedgeMgmtPtrOutput {
	return i.ToSettingMxedgeMgmtPtrOutputWithContext(context.Background())
}

func (i *settingMxedgeMgmtPtrType) ToSettingMxedgeMgmtPtrOutputWithContext(ctx context.Context) SettingMxedgeMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMxedgeMgmtPtrOutput)
}

type SettingMxedgeMgmtOutput struct{ *pulumi.OutputState }

func (SettingMxedgeMgmtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingMxedgeMgmt)(nil)).Elem()
}

func (o SettingMxedgeMgmtOutput) ToSettingMxedgeMgmtOutput() SettingMxedgeMgmtOutput {
	return o
}

func (o SettingMxedgeMgmtOutput) ToSettingMxedgeMgmtOutputWithContext(ctx context.Context) SettingMxedgeMgmtOutput {
	return o
}

func (o SettingMxedgeMgmtOutput) ToSettingMxedgeMgmtPtrOutput() SettingMxedgeMgmtPtrOutput {
	return o.ToSettingMxedgeMgmtPtrOutputWithContext(context.Background())
}

func (o SettingMxedgeMgmtOutput) ToSettingMxedgeMgmtPtrOutputWithContext(ctx context.Context) SettingMxedgeMgmtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingMxedgeMgmt) *SettingMxedgeMgmt {
		return &v
	}).(SettingMxedgeMgmtPtrOutput)
}

func (o SettingMxedgeMgmtOutput) FipsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingMxedgeMgmt) *bool { return v.FipsEnabled }).(pulumi.BoolPtrOutput)
}

func (o SettingMxedgeMgmtOutput) MistPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMxedgeMgmt) *string { return v.MistPassword }).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `disabled`, `static`
func (o SettingMxedgeMgmtOutput) OobIpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMxedgeMgmt) *string { return v.OobIpType }).(pulumi.StringPtrOutput)
}

// enum: `autoconf`, `dhcp`, `disabled`, `static`
func (o SettingMxedgeMgmtOutput) OobIpType6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMxedgeMgmt) *string { return v.OobIpType6 }).(pulumi.StringPtrOutput)
}

func (o SettingMxedgeMgmtOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingMxedgeMgmt) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

type SettingMxedgeMgmtPtrOutput struct{ *pulumi.OutputState }

func (SettingMxedgeMgmtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingMxedgeMgmt)(nil)).Elem()
}

func (o SettingMxedgeMgmtPtrOutput) ToSettingMxedgeMgmtPtrOutput() SettingMxedgeMgmtPtrOutput {
	return o
}

func (o SettingMxedgeMgmtPtrOutput) ToSettingMxedgeMgmtPtrOutputWithContext(ctx context.Context) SettingMxedgeMgmtPtrOutput {
	return o
}

func (o SettingMxedgeMgmtPtrOutput) Elem() SettingMxedgeMgmtOutput {
	return o.ApplyT(func(v *SettingMxedgeMgmt) SettingMxedgeMgmt {
		if v != nil {
			return *v
		}
		var ret SettingMxedgeMgmt
		return ret
	}).(SettingMxedgeMgmtOutput)
}

func (o SettingMxedgeMgmtPtrOutput) FipsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingMxedgeMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.FipsEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o SettingMxedgeMgmtPtrOutput) MistPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMxedgeMgmt) *string {
		if v == nil {
			return nil
		}
		return v.MistPassword
	}).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `disabled`, `static`
func (o SettingMxedgeMgmtPtrOutput) OobIpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMxedgeMgmt) *string {
		if v == nil {
			return nil
		}
		return v.OobIpType
	}).(pulumi.StringPtrOutput)
}

// enum: `autoconf`, `dhcp`, `disabled`, `static`
func (o SettingMxedgeMgmtPtrOutput) OobIpType6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMxedgeMgmt) *string {
		if v == nil {
			return nil
		}
		return v.OobIpType6
	}).(pulumi.StringPtrOutput)
}

func (o SettingMxedgeMgmtPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingMxedgeMgmt) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

type SettingPasswordPolicy struct {
	// whether the policy is enabled
	Enabled *bool `pulumi:"enabled"`
	// days, required if password policy is enabled
	Freshness *int `pulumi:"freshness"`
	// required password length
	MinLength *int `pulumi:"minLength"`
	// whether to require special character
	RequiresSpecialChar *bool `pulumi:"requiresSpecialChar"`
	// whether to require two-factor auth
	RequiresTwoFactorAuth *bool `pulumi:"requiresTwoFactorAuth"`
}

// SettingPasswordPolicyInput is an input type that accepts SettingPasswordPolicyArgs and SettingPasswordPolicyOutput values.
// You can construct a concrete instance of `SettingPasswordPolicyInput` via:
//
//	SettingPasswordPolicyArgs{...}
type SettingPasswordPolicyInput interface {
	pulumi.Input

	ToSettingPasswordPolicyOutput() SettingPasswordPolicyOutput
	ToSettingPasswordPolicyOutputWithContext(context.Context) SettingPasswordPolicyOutput
}

type SettingPasswordPolicyArgs struct {
	// whether the policy is enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// days, required if password policy is enabled
	Freshness pulumi.IntPtrInput `pulumi:"freshness"`
	// required password length
	MinLength pulumi.IntPtrInput `pulumi:"minLength"`
	// whether to require special character
	RequiresSpecialChar pulumi.BoolPtrInput `pulumi:"requiresSpecialChar"`
	// whether to require two-factor auth
	RequiresTwoFactorAuth pulumi.BoolPtrInput `pulumi:"requiresTwoFactorAuth"`
}

func (SettingPasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingPasswordPolicy)(nil)).Elem()
}

func (i SettingPasswordPolicyArgs) ToSettingPasswordPolicyOutput() SettingPasswordPolicyOutput {
	return i.ToSettingPasswordPolicyOutputWithContext(context.Background())
}

func (i SettingPasswordPolicyArgs) ToSettingPasswordPolicyOutputWithContext(ctx context.Context) SettingPasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingPasswordPolicyOutput)
}

func (i SettingPasswordPolicyArgs) ToSettingPasswordPolicyPtrOutput() SettingPasswordPolicyPtrOutput {
	return i.ToSettingPasswordPolicyPtrOutputWithContext(context.Background())
}

func (i SettingPasswordPolicyArgs) ToSettingPasswordPolicyPtrOutputWithContext(ctx context.Context) SettingPasswordPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingPasswordPolicyOutput).ToSettingPasswordPolicyPtrOutputWithContext(ctx)
}

// SettingPasswordPolicyPtrInput is an input type that accepts SettingPasswordPolicyArgs, SettingPasswordPolicyPtr and SettingPasswordPolicyPtrOutput values.
// You can construct a concrete instance of `SettingPasswordPolicyPtrInput` via:
//
//	        SettingPasswordPolicyArgs{...}
//
//	or:
//
//	        nil
type SettingPasswordPolicyPtrInput interface {
	pulumi.Input

	ToSettingPasswordPolicyPtrOutput() SettingPasswordPolicyPtrOutput
	ToSettingPasswordPolicyPtrOutputWithContext(context.Context) SettingPasswordPolicyPtrOutput
}

type settingPasswordPolicyPtrType SettingPasswordPolicyArgs

func SettingPasswordPolicyPtr(v *SettingPasswordPolicyArgs) SettingPasswordPolicyPtrInput {
	return (*settingPasswordPolicyPtrType)(v)
}

func (*settingPasswordPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingPasswordPolicy)(nil)).Elem()
}

func (i *settingPasswordPolicyPtrType) ToSettingPasswordPolicyPtrOutput() SettingPasswordPolicyPtrOutput {
	return i.ToSettingPasswordPolicyPtrOutputWithContext(context.Background())
}

func (i *settingPasswordPolicyPtrType) ToSettingPasswordPolicyPtrOutputWithContext(ctx context.Context) SettingPasswordPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingPasswordPolicyPtrOutput)
}

type SettingPasswordPolicyOutput struct{ *pulumi.OutputState }

func (SettingPasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingPasswordPolicy)(nil)).Elem()
}

func (o SettingPasswordPolicyOutput) ToSettingPasswordPolicyOutput() SettingPasswordPolicyOutput {
	return o
}

func (o SettingPasswordPolicyOutput) ToSettingPasswordPolicyOutputWithContext(ctx context.Context) SettingPasswordPolicyOutput {
	return o
}

func (o SettingPasswordPolicyOutput) ToSettingPasswordPolicyPtrOutput() SettingPasswordPolicyPtrOutput {
	return o.ToSettingPasswordPolicyPtrOutputWithContext(context.Background())
}

func (o SettingPasswordPolicyOutput) ToSettingPasswordPolicyPtrOutputWithContext(ctx context.Context) SettingPasswordPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingPasswordPolicy) *SettingPasswordPolicy {
		return &v
	}).(SettingPasswordPolicyPtrOutput)
}

// whether the policy is enabled
func (o SettingPasswordPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingPasswordPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// days, required if password policy is enabled
func (o SettingPasswordPolicyOutput) Freshness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingPasswordPolicy) *int { return v.Freshness }).(pulumi.IntPtrOutput)
}

// required password length
func (o SettingPasswordPolicyOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingPasswordPolicy) *int { return v.MinLength }).(pulumi.IntPtrOutput)
}

// whether to require special character
func (o SettingPasswordPolicyOutput) RequiresSpecialChar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingPasswordPolicy) *bool { return v.RequiresSpecialChar }).(pulumi.BoolPtrOutput)
}

// whether to require two-factor auth
func (o SettingPasswordPolicyOutput) RequiresTwoFactorAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingPasswordPolicy) *bool { return v.RequiresTwoFactorAuth }).(pulumi.BoolPtrOutput)
}

type SettingPasswordPolicyPtrOutput struct{ *pulumi.OutputState }

func (SettingPasswordPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingPasswordPolicy)(nil)).Elem()
}

func (o SettingPasswordPolicyPtrOutput) ToSettingPasswordPolicyPtrOutput() SettingPasswordPolicyPtrOutput {
	return o
}

func (o SettingPasswordPolicyPtrOutput) ToSettingPasswordPolicyPtrOutputWithContext(ctx context.Context) SettingPasswordPolicyPtrOutput {
	return o
}

func (o SettingPasswordPolicyPtrOutput) Elem() SettingPasswordPolicyOutput {
	return o.ApplyT(func(v *SettingPasswordPolicy) SettingPasswordPolicy {
		if v != nil {
			return *v
		}
		var ret SettingPasswordPolicy
		return ret
	}).(SettingPasswordPolicyOutput)
}

// whether the policy is enabled
func (o SettingPasswordPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingPasswordPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// days, required if password policy is enabled
func (o SettingPasswordPolicyPtrOutput) Freshness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingPasswordPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Freshness
	}).(pulumi.IntPtrOutput)
}

// required password length
func (o SettingPasswordPolicyPtrOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingPasswordPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MinLength
	}).(pulumi.IntPtrOutput)
}

// whether to require special character
func (o SettingPasswordPolicyPtrOutput) RequiresSpecialChar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingPasswordPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresSpecialChar
	}).(pulumi.BoolPtrOutput)
}

// whether to require two-factor auth
func (o SettingPasswordPolicyPtrOutput) RequiresTwoFactorAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingPasswordPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.RequiresTwoFactorAuth
	}).(pulumi.BoolPtrOutput)
}

type SettingPcap struct {
	Bucket *string `pulumi:"bucket"`
	// max_len of non-management packets to capture
	MaxPktLen *int `pulumi:"maxPktLen"`
}

// SettingPcapInput is an input type that accepts SettingPcapArgs and SettingPcapOutput values.
// You can construct a concrete instance of `SettingPcapInput` via:
//
//	SettingPcapArgs{...}
type SettingPcapInput interface {
	pulumi.Input

	ToSettingPcapOutput() SettingPcapOutput
	ToSettingPcapOutputWithContext(context.Context) SettingPcapOutput
}

type SettingPcapArgs struct {
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// max_len of non-management packets to capture
	MaxPktLen pulumi.IntPtrInput `pulumi:"maxPktLen"`
}

func (SettingPcapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingPcap)(nil)).Elem()
}

func (i SettingPcapArgs) ToSettingPcapOutput() SettingPcapOutput {
	return i.ToSettingPcapOutputWithContext(context.Background())
}

func (i SettingPcapArgs) ToSettingPcapOutputWithContext(ctx context.Context) SettingPcapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingPcapOutput)
}

func (i SettingPcapArgs) ToSettingPcapPtrOutput() SettingPcapPtrOutput {
	return i.ToSettingPcapPtrOutputWithContext(context.Background())
}

func (i SettingPcapArgs) ToSettingPcapPtrOutputWithContext(ctx context.Context) SettingPcapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingPcapOutput).ToSettingPcapPtrOutputWithContext(ctx)
}

// SettingPcapPtrInput is an input type that accepts SettingPcapArgs, SettingPcapPtr and SettingPcapPtrOutput values.
// You can construct a concrete instance of `SettingPcapPtrInput` via:
//
//	        SettingPcapArgs{...}
//
//	or:
//
//	        nil
type SettingPcapPtrInput interface {
	pulumi.Input

	ToSettingPcapPtrOutput() SettingPcapPtrOutput
	ToSettingPcapPtrOutputWithContext(context.Context) SettingPcapPtrOutput
}

type settingPcapPtrType SettingPcapArgs

func SettingPcapPtr(v *SettingPcapArgs) SettingPcapPtrInput {
	return (*settingPcapPtrType)(v)
}

func (*settingPcapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingPcap)(nil)).Elem()
}

func (i *settingPcapPtrType) ToSettingPcapPtrOutput() SettingPcapPtrOutput {
	return i.ToSettingPcapPtrOutputWithContext(context.Background())
}

func (i *settingPcapPtrType) ToSettingPcapPtrOutputWithContext(ctx context.Context) SettingPcapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingPcapPtrOutput)
}

type SettingPcapOutput struct{ *pulumi.OutputState }

func (SettingPcapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingPcap)(nil)).Elem()
}

func (o SettingPcapOutput) ToSettingPcapOutput() SettingPcapOutput {
	return o
}

func (o SettingPcapOutput) ToSettingPcapOutputWithContext(ctx context.Context) SettingPcapOutput {
	return o
}

func (o SettingPcapOutput) ToSettingPcapPtrOutput() SettingPcapPtrOutput {
	return o.ToSettingPcapPtrOutputWithContext(context.Background())
}

func (o SettingPcapOutput) ToSettingPcapPtrOutputWithContext(ctx context.Context) SettingPcapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingPcap) *SettingPcap {
		return &v
	}).(SettingPcapPtrOutput)
}

func (o SettingPcapOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingPcap) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// max_len of non-management packets to capture
func (o SettingPcapOutput) MaxPktLen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingPcap) *int { return v.MaxPktLen }).(pulumi.IntPtrOutput)
}

type SettingPcapPtrOutput struct{ *pulumi.OutputState }

func (SettingPcapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingPcap)(nil)).Elem()
}

func (o SettingPcapPtrOutput) ToSettingPcapPtrOutput() SettingPcapPtrOutput {
	return o
}

func (o SettingPcapPtrOutput) ToSettingPcapPtrOutputWithContext(ctx context.Context) SettingPcapPtrOutput {
	return o
}

func (o SettingPcapPtrOutput) Elem() SettingPcapOutput {
	return o.ApplyT(func(v *SettingPcap) SettingPcap {
		if v != nil {
			return *v
		}
		var ret SettingPcap
		return ret
	}).(SettingPcapOutput)
}

func (o SettingPcapPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingPcap) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// max_len of non-management packets to capture
func (o SettingPcapPtrOutput) MaxPktLen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingPcap) *int {
		if v == nil {
			return nil
		}
		return v.MaxPktLen
	}).(pulumi.IntPtrOutput)
}

type SettingSecurity struct {
	// whether to disable local SSH (by default, local SSH is enabled with allowMist in Org is enabled
	DisableLocalSsh *bool `pulumi:"disableLocalSsh"`
	// password required to zeroize devices (FIPS) on site level
	FipsZeroizePassword *string `pulumi:"fipsZeroizePassword"`
	// whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
	LimitSshAccess *bool `pulumi:"limitSshAccess"`
}

// SettingSecurityInput is an input type that accepts SettingSecurityArgs and SettingSecurityOutput values.
// You can construct a concrete instance of `SettingSecurityInput` via:
//
//	SettingSecurityArgs{...}
type SettingSecurityInput interface {
	pulumi.Input

	ToSettingSecurityOutput() SettingSecurityOutput
	ToSettingSecurityOutputWithContext(context.Context) SettingSecurityOutput
}

type SettingSecurityArgs struct {
	// whether to disable local SSH (by default, local SSH is enabled with allowMist in Org is enabled
	DisableLocalSsh pulumi.BoolPtrInput `pulumi:"disableLocalSsh"`
	// password required to zeroize devices (FIPS) on site level
	FipsZeroizePassword pulumi.StringPtrInput `pulumi:"fipsZeroizePassword"`
	// whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
	LimitSshAccess pulumi.BoolPtrInput `pulumi:"limitSshAccess"`
}

func (SettingSecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSecurity)(nil)).Elem()
}

func (i SettingSecurityArgs) ToSettingSecurityOutput() SettingSecurityOutput {
	return i.ToSettingSecurityOutputWithContext(context.Background())
}

func (i SettingSecurityArgs) ToSettingSecurityOutputWithContext(ctx context.Context) SettingSecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSecurityOutput)
}

func (i SettingSecurityArgs) ToSettingSecurityPtrOutput() SettingSecurityPtrOutput {
	return i.ToSettingSecurityPtrOutputWithContext(context.Background())
}

func (i SettingSecurityArgs) ToSettingSecurityPtrOutputWithContext(ctx context.Context) SettingSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSecurityOutput).ToSettingSecurityPtrOutputWithContext(ctx)
}

// SettingSecurityPtrInput is an input type that accepts SettingSecurityArgs, SettingSecurityPtr and SettingSecurityPtrOutput values.
// You can construct a concrete instance of `SettingSecurityPtrInput` via:
//
//	        SettingSecurityArgs{...}
//
//	or:
//
//	        nil
type SettingSecurityPtrInput interface {
	pulumi.Input

	ToSettingSecurityPtrOutput() SettingSecurityPtrOutput
	ToSettingSecurityPtrOutputWithContext(context.Context) SettingSecurityPtrOutput
}

type settingSecurityPtrType SettingSecurityArgs

func SettingSecurityPtr(v *SettingSecurityArgs) SettingSecurityPtrInput {
	return (*settingSecurityPtrType)(v)
}

func (*settingSecurityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSecurity)(nil)).Elem()
}

func (i *settingSecurityPtrType) ToSettingSecurityPtrOutput() SettingSecurityPtrOutput {
	return i.ToSettingSecurityPtrOutputWithContext(context.Background())
}

func (i *settingSecurityPtrType) ToSettingSecurityPtrOutputWithContext(ctx context.Context) SettingSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSecurityPtrOutput)
}

type SettingSecurityOutput struct{ *pulumi.OutputState }

func (SettingSecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSecurity)(nil)).Elem()
}

func (o SettingSecurityOutput) ToSettingSecurityOutput() SettingSecurityOutput {
	return o
}

func (o SettingSecurityOutput) ToSettingSecurityOutputWithContext(ctx context.Context) SettingSecurityOutput {
	return o
}

func (o SettingSecurityOutput) ToSettingSecurityPtrOutput() SettingSecurityPtrOutput {
	return o.ToSettingSecurityPtrOutputWithContext(context.Background())
}

func (o SettingSecurityOutput) ToSettingSecurityPtrOutputWithContext(ctx context.Context) SettingSecurityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSecurity) *SettingSecurity {
		return &v
	}).(SettingSecurityPtrOutput)
}

// whether to disable local SSH (by default, local SSH is enabled with allowMist in Org is enabled
func (o SettingSecurityOutput) DisableLocalSsh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSecurity) *bool { return v.DisableLocalSsh }).(pulumi.BoolPtrOutput)
}

// password required to zeroize devices (FIPS) on site level
func (o SettingSecurityOutput) FipsZeroizePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingSecurity) *string { return v.FipsZeroizePassword }).(pulumi.StringPtrOutput)
}

// whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
func (o SettingSecurityOutput) LimitSshAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSecurity) *bool { return v.LimitSshAccess }).(pulumi.BoolPtrOutput)
}

type SettingSecurityPtrOutput struct{ *pulumi.OutputState }

func (SettingSecurityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSecurity)(nil)).Elem()
}

func (o SettingSecurityPtrOutput) ToSettingSecurityPtrOutput() SettingSecurityPtrOutput {
	return o
}

func (o SettingSecurityPtrOutput) ToSettingSecurityPtrOutputWithContext(ctx context.Context) SettingSecurityPtrOutput {
	return o
}

func (o SettingSecurityPtrOutput) Elem() SettingSecurityOutput {
	return o.ApplyT(func(v *SettingSecurity) SettingSecurity {
		if v != nil {
			return *v
		}
		var ret SettingSecurity
		return ret
	}).(SettingSecurityOutput)
}

// whether to disable local SSH (by default, local SSH is enabled with allowMist in Org is enabled
func (o SettingSecurityPtrOutput) DisableLocalSsh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSecurity) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalSsh
	}).(pulumi.BoolPtrOutput)
}

// password required to zeroize devices (FIPS) on site level
func (o SettingSecurityPtrOutput) FipsZeroizePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingSecurity) *string {
		if v == nil {
			return nil
		}
		return v.FipsZeroizePassword
	}).(pulumi.StringPtrOutput)
}

// whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
func (o SettingSecurityPtrOutput) LimitSshAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSecurity) *bool {
		if v == nil {
			return nil
		}
		return v.LimitSshAccess
	}).(pulumi.BoolPtrOutput)
}

type SettingSwitchMgmt struct {
	// If the field is set in both site/setting and org/setting, the value from site/setting will be used.
	ApAffinityThreshold *int `pulumi:"apAffinityThreshold"`
}

// SettingSwitchMgmtInput is an input type that accepts SettingSwitchMgmtArgs and SettingSwitchMgmtOutput values.
// You can construct a concrete instance of `SettingSwitchMgmtInput` via:
//
//	SettingSwitchMgmtArgs{...}
type SettingSwitchMgmtInput interface {
	pulumi.Input

	ToSettingSwitchMgmtOutput() SettingSwitchMgmtOutput
	ToSettingSwitchMgmtOutputWithContext(context.Context) SettingSwitchMgmtOutput
}

type SettingSwitchMgmtArgs struct {
	// If the field is set in both site/setting and org/setting, the value from site/setting will be used.
	ApAffinityThreshold pulumi.IntPtrInput `pulumi:"apAffinityThreshold"`
}

func (SettingSwitchMgmtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSwitchMgmt)(nil)).Elem()
}

func (i SettingSwitchMgmtArgs) ToSettingSwitchMgmtOutput() SettingSwitchMgmtOutput {
	return i.ToSettingSwitchMgmtOutputWithContext(context.Background())
}

func (i SettingSwitchMgmtArgs) ToSettingSwitchMgmtOutputWithContext(ctx context.Context) SettingSwitchMgmtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSwitchMgmtOutput)
}

func (i SettingSwitchMgmtArgs) ToSettingSwitchMgmtPtrOutput() SettingSwitchMgmtPtrOutput {
	return i.ToSettingSwitchMgmtPtrOutputWithContext(context.Background())
}

func (i SettingSwitchMgmtArgs) ToSettingSwitchMgmtPtrOutputWithContext(ctx context.Context) SettingSwitchMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSwitchMgmtOutput).ToSettingSwitchMgmtPtrOutputWithContext(ctx)
}

// SettingSwitchMgmtPtrInput is an input type that accepts SettingSwitchMgmtArgs, SettingSwitchMgmtPtr and SettingSwitchMgmtPtrOutput values.
// You can construct a concrete instance of `SettingSwitchMgmtPtrInput` via:
//
//	        SettingSwitchMgmtArgs{...}
//
//	or:
//
//	        nil
type SettingSwitchMgmtPtrInput interface {
	pulumi.Input

	ToSettingSwitchMgmtPtrOutput() SettingSwitchMgmtPtrOutput
	ToSettingSwitchMgmtPtrOutputWithContext(context.Context) SettingSwitchMgmtPtrOutput
}

type settingSwitchMgmtPtrType SettingSwitchMgmtArgs

func SettingSwitchMgmtPtr(v *SettingSwitchMgmtArgs) SettingSwitchMgmtPtrInput {
	return (*settingSwitchMgmtPtrType)(v)
}

func (*settingSwitchMgmtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSwitchMgmt)(nil)).Elem()
}

func (i *settingSwitchMgmtPtrType) ToSettingSwitchMgmtPtrOutput() SettingSwitchMgmtPtrOutput {
	return i.ToSettingSwitchMgmtPtrOutputWithContext(context.Background())
}

func (i *settingSwitchMgmtPtrType) ToSettingSwitchMgmtPtrOutputWithContext(ctx context.Context) SettingSwitchMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSwitchMgmtPtrOutput)
}

type SettingSwitchMgmtOutput struct{ *pulumi.OutputState }

func (SettingSwitchMgmtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSwitchMgmt)(nil)).Elem()
}

func (o SettingSwitchMgmtOutput) ToSettingSwitchMgmtOutput() SettingSwitchMgmtOutput {
	return o
}

func (o SettingSwitchMgmtOutput) ToSettingSwitchMgmtOutputWithContext(ctx context.Context) SettingSwitchMgmtOutput {
	return o
}

func (o SettingSwitchMgmtOutput) ToSettingSwitchMgmtPtrOutput() SettingSwitchMgmtPtrOutput {
	return o.ToSettingSwitchMgmtPtrOutputWithContext(context.Background())
}

func (o SettingSwitchMgmtOutput) ToSettingSwitchMgmtPtrOutputWithContext(ctx context.Context) SettingSwitchMgmtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSwitchMgmt) *SettingSwitchMgmt {
		return &v
	}).(SettingSwitchMgmtPtrOutput)
}

// If the field is set in both site/setting and org/setting, the value from site/setting will be used.
func (o SettingSwitchMgmtOutput) ApAffinityThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSwitchMgmt) *int { return v.ApAffinityThreshold }).(pulumi.IntPtrOutput)
}

type SettingSwitchMgmtPtrOutput struct{ *pulumi.OutputState }

func (SettingSwitchMgmtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSwitchMgmt)(nil)).Elem()
}

func (o SettingSwitchMgmtPtrOutput) ToSettingSwitchMgmtPtrOutput() SettingSwitchMgmtPtrOutput {
	return o
}

func (o SettingSwitchMgmtPtrOutput) ToSettingSwitchMgmtPtrOutputWithContext(ctx context.Context) SettingSwitchMgmtPtrOutput {
	return o
}

func (o SettingSwitchMgmtPtrOutput) Elem() SettingSwitchMgmtOutput {
	return o.ApplyT(func(v *SettingSwitchMgmt) SettingSwitchMgmt {
		if v != nil {
			return *v
		}
		var ret SettingSwitchMgmt
		return ret
	}).(SettingSwitchMgmtOutput)
}

// If the field is set in both site/setting and org/setting, the value from site/setting will be used.
func (o SettingSwitchMgmtPtrOutput) ApAffinityThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSwitchMgmt) *int {
		if v == nil {
			return nil
		}
		return v.ApAffinityThreshold
	}).(pulumi.IntPtrOutput)
}

type SettingSyntheticTest struct {
	Disabled     *bool                             `pulumi:"disabled"`
	Vlans        []SettingSyntheticTestVlan        `pulumi:"vlans"`
	WanSpeedtest *SettingSyntheticTestWanSpeedtest `pulumi:"wanSpeedtest"`
}

// SettingSyntheticTestInput is an input type that accepts SettingSyntheticTestArgs and SettingSyntheticTestOutput values.
// You can construct a concrete instance of `SettingSyntheticTestInput` via:
//
//	SettingSyntheticTestArgs{...}
type SettingSyntheticTestInput interface {
	pulumi.Input

	ToSettingSyntheticTestOutput() SettingSyntheticTestOutput
	ToSettingSyntheticTestOutputWithContext(context.Context) SettingSyntheticTestOutput
}

type SettingSyntheticTestArgs struct {
	Disabled     pulumi.BoolPtrInput                      `pulumi:"disabled"`
	Vlans        SettingSyntheticTestVlanArrayInput       `pulumi:"vlans"`
	WanSpeedtest SettingSyntheticTestWanSpeedtestPtrInput `pulumi:"wanSpeedtest"`
}

func (SettingSyntheticTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTest)(nil)).Elem()
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestOutput() SettingSyntheticTestOutput {
	return i.ToSettingSyntheticTestOutputWithContext(context.Background())
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestOutputWithContext(ctx context.Context) SettingSyntheticTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestOutput)
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return i.ToSettingSyntheticTestPtrOutputWithContext(context.Background())
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestOutput).ToSettingSyntheticTestPtrOutputWithContext(ctx)
}

// SettingSyntheticTestPtrInput is an input type that accepts SettingSyntheticTestArgs, SettingSyntheticTestPtr and SettingSyntheticTestPtrOutput values.
// You can construct a concrete instance of `SettingSyntheticTestPtrInput` via:
//
//	        SettingSyntheticTestArgs{...}
//
//	or:
//
//	        nil
type SettingSyntheticTestPtrInput interface {
	pulumi.Input

	ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput
	ToSettingSyntheticTestPtrOutputWithContext(context.Context) SettingSyntheticTestPtrOutput
}

type settingSyntheticTestPtrType SettingSyntheticTestArgs

func SettingSyntheticTestPtr(v *SettingSyntheticTestArgs) SettingSyntheticTestPtrInput {
	return (*settingSyntheticTestPtrType)(v)
}

func (*settingSyntheticTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTest)(nil)).Elem()
}

func (i *settingSyntheticTestPtrType) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return i.ToSettingSyntheticTestPtrOutputWithContext(context.Background())
}

func (i *settingSyntheticTestPtrType) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestPtrOutput)
}

type SettingSyntheticTestOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTest)(nil)).Elem()
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestOutput() SettingSyntheticTestOutput {
	return o
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestOutputWithContext(ctx context.Context) SettingSyntheticTestOutput {
	return o
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return o.ToSettingSyntheticTestPtrOutputWithContext(context.Background())
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSyntheticTest) *SettingSyntheticTest {
		return &v
	}).(SettingSyntheticTestPtrOutput)
}

func (o SettingSyntheticTestOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTest) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o SettingSyntheticTestOutput) Vlans() SettingSyntheticTestVlanArrayOutput {
	return o.ApplyT(func(v SettingSyntheticTest) []SettingSyntheticTestVlan { return v.Vlans }).(SettingSyntheticTestVlanArrayOutput)
}

func (o SettingSyntheticTestOutput) WanSpeedtest() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTest) *SettingSyntheticTestWanSpeedtest { return v.WanSpeedtest }).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

type SettingSyntheticTestPtrOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTest)(nil)).Elem()
}

func (o SettingSyntheticTestPtrOutput) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return o
}

func (o SettingSyntheticTestPtrOutput) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return o
}

func (o SettingSyntheticTestPtrOutput) Elem() SettingSyntheticTestOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) SettingSyntheticTest {
		if v != nil {
			return *v
		}
		var ret SettingSyntheticTest
		return ret
	}).(SettingSyntheticTestOutput)
}

func (o SettingSyntheticTestPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

func (o SettingSyntheticTestPtrOutput) Vlans() SettingSyntheticTestVlanArrayOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) []SettingSyntheticTestVlan {
		if v == nil {
			return nil
		}
		return v.Vlans
	}).(SettingSyntheticTestVlanArrayOutput)
}

func (o SettingSyntheticTestPtrOutput) WanSpeedtest() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) *SettingSyntheticTestWanSpeedtest {
		if v == nil {
			return nil
		}
		return v.WanSpeedtest
	}).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

type SettingSyntheticTestVlan struct {
	CustomTestUrls []string `pulumi:"customTestUrls"`
	// for some vlans where we don't want this to run
	Disabled *bool    `pulumi:"disabled"`
	VlanIds  []string `pulumi:"vlanIds"`
}

// SettingSyntheticTestVlanInput is an input type that accepts SettingSyntheticTestVlanArgs and SettingSyntheticTestVlanOutput values.
// You can construct a concrete instance of `SettingSyntheticTestVlanInput` via:
//
//	SettingSyntheticTestVlanArgs{...}
type SettingSyntheticTestVlanInput interface {
	pulumi.Input

	ToSettingSyntheticTestVlanOutput() SettingSyntheticTestVlanOutput
	ToSettingSyntheticTestVlanOutputWithContext(context.Context) SettingSyntheticTestVlanOutput
}

type SettingSyntheticTestVlanArgs struct {
	CustomTestUrls pulumi.StringArrayInput `pulumi:"customTestUrls"`
	// for some vlans where we don't want this to run
	Disabled pulumi.BoolPtrInput     `pulumi:"disabled"`
	VlanIds  pulumi.StringArrayInput `pulumi:"vlanIds"`
}

func (SettingSyntheticTestVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestVlan)(nil)).Elem()
}

func (i SettingSyntheticTestVlanArgs) ToSettingSyntheticTestVlanOutput() SettingSyntheticTestVlanOutput {
	return i.ToSettingSyntheticTestVlanOutputWithContext(context.Background())
}

func (i SettingSyntheticTestVlanArgs) ToSettingSyntheticTestVlanOutputWithContext(ctx context.Context) SettingSyntheticTestVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestVlanOutput)
}

// SettingSyntheticTestVlanArrayInput is an input type that accepts SettingSyntheticTestVlanArray and SettingSyntheticTestVlanArrayOutput values.
// You can construct a concrete instance of `SettingSyntheticTestVlanArrayInput` via:
//
//	SettingSyntheticTestVlanArray{ SettingSyntheticTestVlanArgs{...} }
type SettingSyntheticTestVlanArrayInput interface {
	pulumi.Input

	ToSettingSyntheticTestVlanArrayOutput() SettingSyntheticTestVlanArrayOutput
	ToSettingSyntheticTestVlanArrayOutputWithContext(context.Context) SettingSyntheticTestVlanArrayOutput
}

type SettingSyntheticTestVlanArray []SettingSyntheticTestVlanInput

func (SettingSyntheticTestVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingSyntheticTestVlan)(nil)).Elem()
}

func (i SettingSyntheticTestVlanArray) ToSettingSyntheticTestVlanArrayOutput() SettingSyntheticTestVlanArrayOutput {
	return i.ToSettingSyntheticTestVlanArrayOutputWithContext(context.Background())
}

func (i SettingSyntheticTestVlanArray) ToSettingSyntheticTestVlanArrayOutputWithContext(ctx context.Context) SettingSyntheticTestVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestVlanArrayOutput)
}

type SettingSyntheticTestVlanOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestVlan)(nil)).Elem()
}

func (o SettingSyntheticTestVlanOutput) ToSettingSyntheticTestVlanOutput() SettingSyntheticTestVlanOutput {
	return o
}

func (o SettingSyntheticTestVlanOutput) ToSettingSyntheticTestVlanOutputWithContext(ctx context.Context) SettingSyntheticTestVlanOutput {
	return o
}

func (o SettingSyntheticTestVlanOutput) CustomTestUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingSyntheticTestVlan) []string { return v.CustomTestUrls }).(pulumi.StringArrayOutput)
}

// for some vlans where we don't want this to run
func (o SettingSyntheticTestVlanOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTestVlan) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o SettingSyntheticTestVlanOutput) VlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingSyntheticTestVlan) []string { return v.VlanIds }).(pulumi.StringArrayOutput)
}

type SettingSyntheticTestVlanArrayOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingSyntheticTestVlan)(nil)).Elem()
}

func (o SettingSyntheticTestVlanArrayOutput) ToSettingSyntheticTestVlanArrayOutput() SettingSyntheticTestVlanArrayOutput {
	return o
}

func (o SettingSyntheticTestVlanArrayOutput) ToSettingSyntheticTestVlanArrayOutputWithContext(ctx context.Context) SettingSyntheticTestVlanArrayOutput {
	return o
}

func (o SettingSyntheticTestVlanArrayOutput) Index(i pulumi.IntInput) SettingSyntheticTestVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingSyntheticTestVlan {
		return vs[0].([]SettingSyntheticTestVlan)[vs[1].(int)]
	}).(SettingSyntheticTestVlanOutput)
}

type SettingSyntheticTestWanSpeedtest struct {
	Enabled *bool `pulumi:"enabled"`
	// any / HH:MM (24-hour format)
	TimeOdFay *string `pulumi:"timeOdFay"`
}

// SettingSyntheticTestWanSpeedtestInput is an input type that accepts SettingSyntheticTestWanSpeedtestArgs and SettingSyntheticTestWanSpeedtestOutput values.
// You can construct a concrete instance of `SettingSyntheticTestWanSpeedtestInput` via:
//
//	SettingSyntheticTestWanSpeedtestArgs{...}
type SettingSyntheticTestWanSpeedtestInput interface {
	pulumi.Input

	ToSettingSyntheticTestWanSpeedtestOutput() SettingSyntheticTestWanSpeedtestOutput
	ToSettingSyntheticTestWanSpeedtestOutputWithContext(context.Context) SettingSyntheticTestWanSpeedtestOutput
}

type SettingSyntheticTestWanSpeedtestArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// any / HH:MM (24-hour format)
	TimeOdFay pulumi.StringPtrInput `pulumi:"timeOdFay"`
}

func (SettingSyntheticTestWanSpeedtestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestOutput() SettingSyntheticTestWanSpeedtestOutput {
	return i.ToSettingSyntheticTestWanSpeedtestOutputWithContext(context.Background())
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestWanSpeedtestOutput)
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return i.ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Background())
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestWanSpeedtestOutput).ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx)
}

// SettingSyntheticTestWanSpeedtestPtrInput is an input type that accepts SettingSyntheticTestWanSpeedtestArgs, SettingSyntheticTestWanSpeedtestPtr and SettingSyntheticTestWanSpeedtestPtrOutput values.
// You can construct a concrete instance of `SettingSyntheticTestWanSpeedtestPtrInput` via:
//
//	        SettingSyntheticTestWanSpeedtestArgs{...}
//
//	or:
//
//	        nil
type SettingSyntheticTestWanSpeedtestPtrInput interface {
	pulumi.Input

	ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput
	ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Context) SettingSyntheticTestWanSpeedtestPtrOutput
}

type settingSyntheticTestWanSpeedtestPtrType SettingSyntheticTestWanSpeedtestArgs

func SettingSyntheticTestWanSpeedtestPtr(v *SettingSyntheticTestWanSpeedtestArgs) SettingSyntheticTestWanSpeedtestPtrInput {
	return (*settingSyntheticTestWanSpeedtestPtrType)(v)
}

func (*settingSyntheticTestWanSpeedtestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (i *settingSyntheticTestWanSpeedtestPtrType) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return i.ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Background())
}

func (i *settingSyntheticTestWanSpeedtestPtrType) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

type SettingSyntheticTestWanSpeedtestOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestWanSpeedtestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestOutput() SettingSyntheticTestWanSpeedtestOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Background())
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSyntheticTestWanSpeedtest) *SettingSyntheticTestWanSpeedtest {
		return &v
	}).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

func (o SettingSyntheticTestWanSpeedtestOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTestWanSpeedtest) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// any / HH:MM (24-hour format)
func (o SettingSyntheticTestWanSpeedtestOutput) TimeOdFay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTestWanSpeedtest) *string { return v.TimeOdFay }).(pulumi.StringPtrOutput)
}

type SettingSyntheticTestWanSpeedtestPtrOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestWanSpeedtestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) Elem() SettingSyntheticTestWanSpeedtestOutput {
	return o.ApplyT(func(v *SettingSyntheticTestWanSpeedtest) SettingSyntheticTestWanSpeedtest {
		if v != nil {
			return *v
		}
		var ret SettingSyntheticTestWanSpeedtest
		return ret
	}).(SettingSyntheticTestWanSpeedtestOutput)
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTestWanSpeedtest) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// any / HH:MM (24-hour format)
func (o SettingSyntheticTestWanSpeedtestPtrOutput) TimeOdFay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTestWanSpeedtest) *string {
		if v == nil {
			return nil
		}
		return v.TimeOdFay
	}).(pulumi.StringPtrOutput)
}

type SettingVpnOptions struct {
	AsBase *int `pulumi:"asBase"`
	// equiring /12 or bigger to support 16 private IPs for 65535 gateways
	StSubnet *string `pulumi:"stSubnet"`
}

// SettingVpnOptionsInput is an input type that accepts SettingVpnOptionsArgs and SettingVpnOptionsOutput values.
// You can construct a concrete instance of `SettingVpnOptionsInput` via:
//
//	SettingVpnOptionsArgs{...}
type SettingVpnOptionsInput interface {
	pulumi.Input

	ToSettingVpnOptionsOutput() SettingVpnOptionsOutput
	ToSettingVpnOptionsOutputWithContext(context.Context) SettingVpnOptionsOutput
}

type SettingVpnOptionsArgs struct {
	AsBase pulumi.IntPtrInput `pulumi:"asBase"`
	// equiring /12 or bigger to support 16 private IPs for 65535 gateways
	StSubnet pulumi.StringPtrInput `pulumi:"stSubnet"`
}

func (SettingVpnOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingVpnOptions)(nil)).Elem()
}

func (i SettingVpnOptionsArgs) ToSettingVpnOptionsOutput() SettingVpnOptionsOutput {
	return i.ToSettingVpnOptionsOutputWithContext(context.Background())
}

func (i SettingVpnOptionsArgs) ToSettingVpnOptionsOutputWithContext(ctx context.Context) SettingVpnOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVpnOptionsOutput)
}

func (i SettingVpnOptionsArgs) ToSettingVpnOptionsPtrOutput() SettingVpnOptionsPtrOutput {
	return i.ToSettingVpnOptionsPtrOutputWithContext(context.Background())
}

func (i SettingVpnOptionsArgs) ToSettingVpnOptionsPtrOutputWithContext(ctx context.Context) SettingVpnOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVpnOptionsOutput).ToSettingVpnOptionsPtrOutputWithContext(ctx)
}

// SettingVpnOptionsPtrInput is an input type that accepts SettingVpnOptionsArgs, SettingVpnOptionsPtr and SettingVpnOptionsPtrOutput values.
// You can construct a concrete instance of `SettingVpnOptionsPtrInput` via:
//
//	        SettingVpnOptionsArgs{...}
//
//	or:
//
//	        nil
type SettingVpnOptionsPtrInput interface {
	pulumi.Input

	ToSettingVpnOptionsPtrOutput() SettingVpnOptionsPtrOutput
	ToSettingVpnOptionsPtrOutputWithContext(context.Context) SettingVpnOptionsPtrOutput
}

type settingVpnOptionsPtrType SettingVpnOptionsArgs

func SettingVpnOptionsPtr(v *SettingVpnOptionsArgs) SettingVpnOptionsPtrInput {
	return (*settingVpnOptionsPtrType)(v)
}

func (*settingVpnOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingVpnOptions)(nil)).Elem()
}

func (i *settingVpnOptionsPtrType) ToSettingVpnOptionsPtrOutput() SettingVpnOptionsPtrOutput {
	return i.ToSettingVpnOptionsPtrOutputWithContext(context.Background())
}

func (i *settingVpnOptionsPtrType) ToSettingVpnOptionsPtrOutputWithContext(ctx context.Context) SettingVpnOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVpnOptionsPtrOutput)
}

type SettingVpnOptionsOutput struct{ *pulumi.OutputState }

func (SettingVpnOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingVpnOptions)(nil)).Elem()
}

func (o SettingVpnOptionsOutput) ToSettingVpnOptionsOutput() SettingVpnOptionsOutput {
	return o
}

func (o SettingVpnOptionsOutput) ToSettingVpnOptionsOutputWithContext(ctx context.Context) SettingVpnOptionsOutput {
	return o
}

func (o SettingVpnOptionsOutput) ToSettingVpnOptionsPtrOutput() SettingVpnOptionsPtrOutput {
	return o.ToSettingVpnOptionsPtrOutputWithContext(context.Background())
}

func (o SettingVpnOptionsOutput) ToSettingVpnOptionsPtrOutputWithContext(ctx context.Context) SettingVpnOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingVpnOptions) *SettingVpnOptions {
		return &v
	}).(SettingVpnOptionsPtrOutput)
}

func (o SettingVpnOptionsOutput) AsBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingVpnOptions) *int { return v.AsBase }).(pulumi.IntPtrOutput)
}

// equiring /12 or bigger to support 16 private IPs for 65535 gateways
func (o SettingVpnOptionsOutput) StSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingVpnOptions) *string { return v.StSubnet }).(pulumi.StringPtrOutput)
}

type SettingVpnOptionsPtrOutput struct{ *pulumi.OutputState }

func (SettingVpnOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingVpnOptions)(nil)).Elem()
}

func (o SettingVpnOptionsPtrOutput) ToSettingVpnOptionsPtrOutput() SettingVpnOptionsPtrOutput {
	return o
}

func (o SettingVpnOptionsPtrOutput) ToSettingVpnOptionsPtrOutputWithContext(ctx context.Context) SettingVpnOptionsPtrOutput {
	return o
}

func (o SettingVpnOptionsPtrOutput) Elem() SettingVpnOptionsOutput {
	return o.ApplyT(func(v *SettingVpnOptions) SettingVpnOptions {
		if v != nil {
			return *v
		}
		var ret SettingVpnOptions
		return ret
	}).(SettingVpnOptionsOutput)
}

func (o SettingVpnOptionsPtrOutput) AsBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingVpnOptions) *int {
		if v == nil {
			return nil
		}
		return v.AsBase
	}).(pulumi.IntPtrOutput)
}

// equiring /12 or bigger to support 16 private IPs for 65535 gateways
func (o SettingVpnOptionsPtrOutput) StSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingVpnOptions) *string {
		if v == nil {
			return nil
		}
		return v.StSubnet
	}).(pulumi.StringPtrOutput)
}

type VpnPaths struct {
	// enum: `broadband`, `lte`
	BfdProfile *string `pulumi:"bfdProfile"`
	// if different from the wan port
	Ip  *string `pulumi:"ip"`
	Pod *int    `pulumi:"pod"`
}

// VpnPathsInput is an input type that accepts VpnPathsArgs and VpnPathsOutput values.
// You can construct a concrete instance of `VpnPathsInput` via:
//
//	VpnPathsArgs{...}
type VpnPathsInput interface {
	pulumi.Input

	ToVpnPathsOutput() VpnPathsOutput
	ToVpnPathsOutputWithContext(context.Context) VpnPathsOutput
}

type VpnPathsArgs struct {
	// enum: `broadband`, `lte`
	BfdProfile pulumi.StringPtrInput `pulumi:"bfdProfile"`
	// if different from the wan port
	Ip  pulumi.StringPtrInput `pulumi:"ip"`
	Pod pulumi.IntPtrInput    `pulumi:"pod"`
}

func (VpnPathsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnPaths)(nil)).Elem()
}

func (i VpnPathsArgs) ToVpnPathsOutput() VpnPathsOutput {
	return i.ToVpnPathsOutputWithContext(context.Background())
}

func (i VpnPathsArgs) ToVpnPathsOutputWithContext(ctx context.Context) VpnPathsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnPathsOutput)
}

// VpnPathsMapInput is an input type that accepts VpnPathsMap and VpnPathsMapOutput values.
// You can construct a concrete instance of `VpnPathsMapInput` via:
//
//	VpnPathsMap{ "key": VpnPathsArgs{...} }
type VpnPathsMapInput interface {
	pulumi.Input

	ToVpnPathsMapOutput() VpnPathsMapOutput
	ToVpnPathsMapOutputWithContext(context.Context) VpnPathsMapOutput
}

type VpnPathsMap map[string]VpnPathsInput

func (VpnPathsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VpnPaths)(nil)).Elem()
}

func (i VpnPathsMap) ToVpnPathsMapOutput() VpnPathsMapOutput {
	return i.ToVpnPathsMapOutputWithContext(context.Background())
}

func (i VpnPathsMap) ToVpnPathsMapOutputWithContext(ctx context.Context) VpnPathsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnPathsMapOutput)
}

type VpnPathsOutput struct{ *pulumi.OutputState }

func (VpnPathsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnPaths)(nil)).Elem()
}

func (o VpnPathsOutput) ToVpnPathsOutput() VpnPathsOutput {
	return o
}

func (o VpnPathsOutput) ToVpnPathsOutputWithContext(ctx context.Context) VpnPathsOutput {
	return o
}

// enum: `broadband`, `lte`
func (o VpnPathsOutput) BfdProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnPaths) *string { return v.BfdProfile }).(pulumi.StringPtrOutput)
}

// if different from the wan port
func (o VpnPathsOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnPaths) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o VpnPathsOutput) Pod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VpnPaths) *int { return v.Pod }).(pulumi.IntPtrOutput)
}

type VpnPathsMapOutput struct{ *pulumi.OutputState }

func (VpnPathsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VpnPaths)(nil)).Elem()
}

func (o VpnPathsMapOutput) ToVpnPathsMapOutput() VpnPathsMapOutput {
	return o
}

func (o VpnPathsMapOutput) ToVpnPathsMapOutputWithContext(ctx context.Context) VpnPathsMapOutput {
	return o
}

func (o VpnPathsMapOutput) MapIndex(k pulumi.StringInput) VpnPathsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VpnPaths {
		return vs[0].(map[string]VpnPaths)[vs[1].(string)]
	}).(VpnPathsOutput)
}

type WlanAcctServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port *int `pulumi:"port"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// WlanAcctServerInput is an input type that accepts WlanAcctServerArgs and WlanAcctServerOutput values.
// You can construct a concrete instance of `WlanAcctServerInput` via:
//
//	WlanAcctServerArgs{...}
type WlanAcctServerInput interface {
	pulumi.Input

	ToWlanAcctServerOutput() WlanAcctServerOutput
	ToWlanAcctServerOutputWithContext(context.Context) WlanAcctServerOutput
}

type WlanAcctServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (WlanAcctServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAcctServer)(nil)).Elem()
}

func (i WlanAcctServerArgs) ToWlanAcctServerOutput() WlanAcctServerOutput {
	return i.ToWlanAcctServerOutputWithContext(context.Background())
}

func (i WlanAcctServerArgs) ToWlanAcctServerOutputWithContext(ctx context.Context) WlanAcctServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAcctServerOutput)
}

// WlanAcctServerArrayInput is an input type that accepts WlanAcctServerArray and WlanAcctServerArrayOutput values.
// You can construct a concrete instance of `WlanAcctServerArrayInput` via:
//
//	WlanAcctServerArray{ WlanAcctServerArgs{...} }
type WlanAcctServerArrayInput interface {
	pulumi.Input

	ToWlanAcctServerArrayOutput() WlanAcctServerArrayOutput
	ToWlanAcctServerArrayOutputWithContext(context.Context) WlanAcctServerArrayOutput
}

type WlanAcctServerArray []WlanAcctServerInput

func (WlanAcctServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAcctServer)(nil)).Elem()
}

func (i WlanAcctServerArray) ToWlanAcctServerArrayOutput() WlanAcctServerArrayOutput {
	return i.ToWlanAcctServerArrayOutputWithContext(context.Background())
}

func (i WlanAcctServerArray) ToWlanAcctServerArrayOutputWithContext(ctx context.Context) WlanAcctServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAcctServerArrayOutput)
}

type WlanAcctServerOutput struct{ *pulumi.OutputState }

func (WlanAcctServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAcctServer)(nil)).Elem()
}

func (o WlanAcctServerOutput) ToWlanAcctServerOutput() WlanAcctServerOutput {
	return o
}

func (o WlanAcctServerOutput) ToWlanAcctServerOutputWithContext(ctx context.Context) WlanAcctServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o WlanAcctServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAcctServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o WlanAcctServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o WlanAcctServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o WlanAcctServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o WlanAcctServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Acct port of RADIUS server
func (o WlanAcctServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// secret of RADIUS server
func (o WlanAcctServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAcctServer) string { return v.Secret }).(pulumi.StringOutput)
}

type WlanAcctServerArrayOutput struct{ *pulumi.OutputState }

func (WlanAcctServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAcctServer)(nil)).Elem()
}

func (o WlanAcctServerArrayOutput) ToWlanAcctServerArrayOutput() WlanAcctServerArrayOutput {
	return o
}

func (o WlanAcctServerArrayOutput) ToWlanAcctServerArrayOutputWithContext(ctx context.Context) WlanAcctServerArrayOutput {
	return o
}

func (o WlanAcctServerArrayOutput) Index(i pulumi.IntInput) WlanAcctServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanAcctServer {
		return vs[0].([]WlanAcctServer)[vs[1].(int)]
	}).(WlanAcctServerOutput)
}

type WlanAirwatch struct {
	// API Key
	ApiKey string `pulumi:"apiKey"`
	// console URL
	ConsoleUrl string `pulumi:"consoleUrl"`
	Enabled    *bool  `pulumi:"enabled"`
	// password
	Password string `pulumi:"password"`
	// username
	Username string `pulumi:"username"`
}

// WlanAirwatchInput is an input type that accepts WlanAirwatchArgs and WlanAirwatchOutput values.
// You can construct a concrete instance of `WlanAirwatchInput` via:
//
//	WlanAirwatchArgs{...}
type WlanAirwatchInput interface {
	pulumi.Input

	ToWlanAirwatchOutput() WlanAirwatchOutput
	ToWlanAirwatchOutputWithContext(context.Context) WlanAirwatchOutput
}

type WlanAirwatchArgs struct {
	// API Key
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// console URL
	ConsoleUrl pulumi.StringInput  `pulumi:"consoleUrl"`
	Enabled    pulumi.BoolPtrInput `pulumi:"enabled"`
	// password
	Password pulumi.StringInput `pulumi:"password"`
	// username
	Username pulumi.StringInput `pulumi:"username"`
}

func (WlanAirwatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAirwatch)(nil)).Elem()
}

func (i WlanAirwatchArgs) ToWlanAirwatchOutput() WlanAirwatchOutput {
	return i.ToWlanAirwatchOutputWithContext(context.Background())
}

func (i WlanAirwatchArgs) ToWlanAirwatchOutputWithContext(ctx context.Context) WlanAirwatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAirwatchOutput)
}

func (i WlanAirwatchArgs) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return i.ToWlanAirwatchPtrOutputWithContext(context.Background())
}

func (i WlanAirwatchArgs) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAirwatchOutput).ToWlanAirwatchPtrOutputWithContext(ctx)
}

// WlanAirwatchPtrInput is an input type that accepts WlanAirwatchArgs, WlanAirwatchPtr and WlanAirwatchPtrOutput values.
// You can construct a concrete instance of `WlanAirwatchPtrInput` via:
//
//	        WlanAirwatchArgs{...}
//
//	or:
//
//	        nil
type WlanAirwatchPtrInput interface {
	pulumi.Input

	ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput
	ToWlanAirwatchPtrOutputWithContext(context.Context) WlanAirwatchPtrOutput
}

type wlanAirwatchPtrType WlanAirwatchArgs

func WlanAirwatchPtr(v *WlanAirwatchArgs) WlanAirwatchPtrInput {
	return (*wlanAirwatchPtrType)(v)
}

func (*wlanAirwatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAirwatch)(nil)).Elem()
}

func (i *wlanAirwatchPtrType) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return i.ToWlanAirwatchPtrOutputWithContext(context.Background())
}

func (i *wlanAirwatchPtrType) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAirwatchPtrOutput)
}

type WlanAirwatchOutput struct{ *pulumi.OutputState }

func (WlanAirwatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAirwatch)(nil)).Elem()
}

func (o WlanAirwatchOutput) ToWlanAirwatchOutput() WlanAirwatchOutput {
	return o
}

func (o WlanAirwatchOutput) ToWlanAirwatchOutputWithContext(ctx context.Context) WlanAirwatchOutput {
	return o
}

func (o WlanAirwatchOutput) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return o.ToWlanAirwatchPtrOutputWithContext(context.Background())
}

func (o WlanAirwatchOutput) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAirwatch) *WlanAirwatch {
		return &v
	}).(WlanAirwatchPtrOutput)
}

// API Key
func (o WlanAirwatchOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAirwatch) string { return v.ApiKey }).(pulumi.StringOutput)
}

// console URL
func (o WlanAirwatchOutput) ConsoleUrl() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAirwatch) string { return v.ConsoleUrl }).(pulumi.StringOutput)
}

func (o WlanAirwatchOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAirwatch) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// password
func (o WlanAirwatchOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAirwatch) string { return v.Password }).(pulumi.StringOutput)
}

// username
func (o WlanAirwatchOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAirwatch) string { return v.Username }).(pulumi.StringOutput)
}

type WlanAirwatchPtrOutput struct{ *pulumi.OutputState }

func (WlanAirwatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAirwatch)(nil)).Elem()
}

func (o WlanAirwatchPtrOutput) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return o
}

func (o WlanAirwatchPtrOutput) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return o
}

func (o WlanAirwatchPtrOutput) Elem() WlanAirwatchOutput {
	return o.ApplyT(func(v *WlanAirwatch) WlanAirwatch {
		if v != nil {
			return *v
		}
		var ret WlanAirwatch
		return ret
	}).(WlanAirwatchOutput)
}

// API Key
func (o WlanAirwatchPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return &v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// console URL
func (o WlanAirwatchPtrOutput) ConsoleUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return &v.ConsoleUrl
	}).(pulumi.StringPtrOutput)
}

func (o WlanAirwatchPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// password
func (o WlanAirwatchPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// username
func (o WlanAirwatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type WlanAppLimit struct {
	// Map from app key to bandwidth in kbps.
	// Property key is the app key, defined in Get Application List
	Apps    map[string]int `pulumi:"apps"`
	Enabled *bool          `pulumi:"enabled"`
	// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps
	// Property key is the wxtag id
	WxtagIds map[string]int `pulumi:"wxtagIds"`
}

// WlanAppLimitInput is an input type that accepts WlanAppLimitArgs and WlanAppLimitOutput values.
// You can construct a concrete instance of `WlanAppLimitInput` via:
//
//	WlanAppLimitArgs{...}
type WlanAppLimitInput interface {
	pulumi.Input

	ToWlanAppLimitOutput() WlanAppLimitOutput
	ToWlanAppLimitOutputWithContext(context.Context) WlanAppLimitOutput
}

type WlanAppLimitArgs struct {
	// Map from app key to bandwidth in kbps.
	// Property key is the app key, defined in Get Application List
	Apps    pulumi.IntMapInput  `pulumi:"apps"`
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps
	// Property key is the wxtag id
	WxtagIds pulumi.IntMapInput `pulumi:"wxtagIds"`
}

func (WlanAppLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppLimit)(nil)).Elem()
}

func (i WlanAppLimitArgs) ToWlanAppLimitOutput() WlanAppLimitOutput {
	return i.ToWlanAppLimitOutputWithContext(context.Background())
}

func (i WlanAppLimitArgs) ToWlanAppLimitOutputWithContext(ctx context.Context) WlanAppLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppLimitOutput)
}

func (i WlanAppLimitArgs) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return i.ToWlanAppLimitPtrOutputWithContext(context.Background())
}

func (i WlanAppLimitArgs) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppLimitOutput).ToWlanAppLimitPtrOutputWithContext(ctx)
}

// WlanAppLimitPtrInput is an input type that accepts WlanAppLimitArgs, WlanAppLimitPtr and WlanAppLimitPtrOutput values.
// You can construct a concrete instance of `WlanAppLimitPtrInput` via:
//
//	        WlanAppLimitArgs{...}
//
//	or:
//
//	        nil
type WlanAppLimitPtrInput interface {
	pulumi.Input

	ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput
	ToWlanAppLimitPtrOutputWithContext(context.Context) WlanAppLimitPtrOutput
}

type wlanAppLimitPtrType WlanAppLimitArgs

func WlanAppLimitPtr(v *WlanAppLimitArgs) WlanAppLimitPtrInput {
	return (*wlanAppLimitPtrType)(v)
}

func (*wlanAppLimitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppLimit)(nil)).Elem()
}

func (i *wlanAppLimitPtrType) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return i.ToWlanAppLimitPtrOutputWithContext(context.Background())
}

func (i *wlanAppLimitPtrType) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppLimitPtrOutput)
}

type WlanAppLimitOutput struct{ *pulumi.OutputState }

func (WlanAppLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppLimit)(nil)).Elem()
}

func (o WlanAppLimitOutput) ToWlanAppLimitOutput() WlanAppLimitOutput {
	return o
}

func (o WlanAppLimitOutput) ToWlanAppLimitOutputWithContext(ctx context.Context) WlanAppLimitOutput {
	return o
}

func (o WlanAppLimitOutput) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return o.ToWlanAppLimitPtrOutputWithContext(context.Background())
}

func (o WlanAppLimitOutput) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAppLimit) *WlanAppLimit {
		return &v
	}).(WlanAppLimitPtrOutput)
}

// Map from app key to bandwidth in kbps.
// Property key is the app key, defined in Get Application List
func (o WlanAppLimitOutput) Apps() pulumi.IntMapOutput {
	return o.ApplyT(func(v WlanAppLimit) map[string]int { return v.Apps }).(pulumi.IntMapOutput)
}

func (o WlanAppLimitOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAppLimit) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps
// Property key is the wxtag id
func (o WlanAppLimitOutput) WxtagIds() pulumi.IntMapOutput {
	return o.ApplyT(func(v WlanAppLimit) map[string]int { return v.WxtagIds }).(pulumi.IntMapOutput)
}

type WlanAppLimitPtrOutput struct{ *pulumi.OutputState }

func (WlanAppLimitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppLimit)(nil)).Elem()
}

func (o WlanAppLimitPtrOutput) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return o
}

func (o WlanAppLimitPtrOutput) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return o
}

func (o WlanAppLimitPtrOutput) Elem() WlanAppLimitOutput {
	return o.ApplyT(func(v *WlanAppLimit) WlanAppLimit {
		if v != nil {
			return *v
		}
		var ret WlanAppLimit
		return ret
	}).(WlanAppLimitOutput)
}

// Map from app key to bandwidth in kbps.
// Property key is the app key, defined in Get Application List
func (o WlanAppLimitPtrOutput) Apps() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WlanAppLimit) map[string]int {
		if v == nil {
			return nil
		}
		return v.Apps
	}).(pulumi.IntMapOutput)
}

func (o WlanAppLimitPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAppLimit) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps
// Property key is the wxtag id
func (o WlanAppLimitPtrOutput) WxtagIds() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WlanAppLimit) map[string]int {
		if v == nil {
			return nil
		}
		return v.WxtagIds
	}).(pulumi.IntMapOutput)
}

type WlanAppQos struct {
	Apps    map[string]WlanAppQosApps `pulumi:"apps"`
	Enabled *bool                     `pulumi:"enabled"`
	Others  []WlanAppQosOther         `pulumi:"others"`
}

// WlanAppQosInput is an input type that accepts WlanAppQosArgs and WlanAppQosOutput values.
// You can construct a concrete instance of `WlanAppQosInput` via:
//
//	WlanAppQosArgs{...}
type WlanAppQosInput interface {
	pulumi.Input

	ToWlanAppQosOutput() WlanAppQosOutput
	ToWlanAppQosOutputWithContext(context.Context) WlanAppQosOutput
}

type WlanAppQosArgs struct {
	Apps    WlanAppQosAppsMapInput    `pulumi:"apps"`
	Enabled pulumi.BoolPtrInput       `pulumi:"enabled"`
	Others  WlanAppQosOtherArrayInput `pulumi:"others"`
}

func (WlanAppQosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQos)(nil)).Elem()
}

func (i WlanAppQosArgs) ToWlanAppQosOutput() WlanAppQosOutput {
	return i.ToWlanAppQosOutputWithContext(context.Background())
}

func (i WlanAppQosArgs) ToWlanAppQosOutputWithContext(ctx context.Context) WlanAppQosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOutput)
}

func (i WlanAppQosArgs) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return i.ToWlanAppQosPtrOutputWithContext(context.Background())
}

func (i WlanAppQosArgs) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOutput).ToWlanAppQosPtrOutputWithContext(ctx)
}

// WlanAppQosPtrInput is an input type that accepts WlanAppQosArgs, WlanAppQosPtr and WlanAppQosPtrOutput values.
// You can construct a concrete instance of `WlanAppQosPtrInput` via:
//
//	        WlanAppQosArgs{...}
//
//	or:
//
//	        nil
type WlanAppQosPtrInput interface {
	pulumi.Input

	ToWlanAppQosPtrOutput() WlanAppQosPtrOutput
	ToWlanAppQosPtrOutputWithContext(context.Context) WlanAppQosPtrOutput
}

type wlanAppQosPtrType WlanAppQosArgs

func WlanAppQosPtr(v *WlanAppQosArgs) WlanAppQosPtrInput {
	return (*wlanAppQosPtrType)(v)
}

func (*wlanAppQosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppQos)(nil)).Elem()
}

func (i *wlanAppQosPtrType) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return i.ToWlanAppQosPtrOutputWithContext(context.Background())
}

func (i *wlanAppQosPtrType) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosPtrOutput)
}

type WlanAppQosOutput struct{ *pulumi.OutputState }

func (WlanAppQosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQos)(nil)).Elem()
}

func (o WlanAppQosOutput) ToWlanAppQosOutput() WlanAppQosOutput {
	return o
}

func (o WlanAppQosOutput) ToWlanAppQosOutputWithContext(ctx context.Context) WlanAppQosOutput {
	return o
}

func (o WlanAppQosOutput) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return o.ToWlanAppQosPtrOutputWithContext(context.Background())
}

func (o WlanAppQosOutput) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAppQos) *WlanAppQos {
		return &v
	}).(WlanAppQosPtrOutput)
}

func (o WlanAppQosOutput) Apps() WlanAppQosAppsMapOutput {
	return o.ApplyT(func(v WlanAppQos) map[string]WlanAppQosApps { return v.Apps }).(WlanAppQosAppsMapOutput)
}

func (o WlanAppQosOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAppQos) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanAppQosOutput) Others() WlanAppQosOtherArrayOutput {
	return o.ApplyT(func(v WlanAppQos) []WlanAppQosOther { return v.Others }).(WlanAppQosOtherArrayOutput)
}

type WlanAppQosPtrOutput struct{ *pulumi.OutputState }

func (WlanAppQosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppQos)(nil)).Elem()
}

func (o WlanAppQosPtrOutput) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return o
}

func (o WlanAppQosPtrOutput) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return o
}

func (o WlanAppQosPtrOutput) Elem() WlanAppQosOutput {
	return o.ApplyT(func(v *WlanAppQos) WlanAppQos {
		if v != nil {
			return *v
		}
		var ret WlanAppQos
		return ret
	}).(WlanAppQosOutput)
}

func (o WlanAppQosPtrOutput) Apps() WlanAppQosAppsMapOutput {
	return o.ApplyT(func(v *WlanAppQos) map[string]WlanAppQosApps {
		if v == nil {
			return nil
		}
		return v.Apps
	}).(WlanAppQosAppsMapOutput)
}

func (o WlanAppQosPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAppQos) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanAppQosPtrOutput) Others() WlanAppQosOtherArrayOutput {
	return o.ApplyT(func(v *WlanAppQos) []WlanAppQosOther {
		if v == nil {
			return nil
		}
		return v.Others
	}).(WlanAppQosOtherArrayOutput)
}

type WlanAppQosApps struct {
	Dscp *int `pulumi:"dscp"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	DstSubnet *string `pulumi:"dstSubnet"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	SrcSubnet *string `pulumi:"srcSubnet"`
}

// WlanAppQosAppsInput is an input type that accepts WlanAppQosAppsArgs and WlanAppQosAppsOutput values.
// You can construct a concrete instance of `WlanAppQosAppsInput` via:
//
//	WlanAppQosAppsArgs{...}
type WlanAppQosAppsInput interface {
	pulumi.Input

	ToWlanAppQosAppsOutput() WlanAppQosAppsOutput
	ToWlanAppQosAppsOutputWithContext(context.Context) WlanAppQosAppsOutput
}

type WlanAppQosAppsArgs struct {
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	DstSubnet pulumi.StringPtrInput `pulumi:"dstSubnet"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	SrcSubnet pulumi.StringPtrInput `pulumi:"srcSubnet"`
}

func (WlanAppQosAppsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosApps)(nil)).Elem()
}

func (i WlanAppQosAppsArgs) ToWlanAppQosAppsOutput() WlanAppQosAppsOutput {
	return i.ToWlanAppQosAppsOutputWithContext(context.Background())
}

func (i WlanAppQosAppsArgs) ToWlanAppQosAppsOutputWithContext(ctx context.Context) WlanAppQosAppsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosAppsOutput)
}

// WlanAppQosAppsMapInput is an input type that accepts WlanAppQosAppsMap and WlanAppQosAppsMapOutput values.
// You can construct a concrete instance of `WlanAppQosAppsMapInput` via:
//
//	WlanAppQosAppsMap{ "key": WlanAppQosAppsArgs{...} }
type WlanAppQosAppsMapInput interface {
	pulumi.Input

	ToWlanAppQosAppsMapOutput() WlanAppQosAppsMapOutput
	ToWlanAppQosAppsMapOutputWithContext(context.Context) WlanAppQosAppsMapOutput
}

type WlanAppQosAppsMap map[string]WlanAppQosAppsInput

func (WlanAppQosAppsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanAppQosApps)(nil)).Elem()
}

func (i WlanAppQosAppsMap) ToWlanAppQosAppsMapOutput() WlanAppQosAppsMapOutput {
	return i.ToWlanAppQosAppsMapOutputWithContext(context.Background())
}

func (i WlanAppQosAppsMap) ToWlanAppQosAppsMapOutputWithContext(ctx context.Context) WlanAppQosAppsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosAppsMapOutput)
}

type WlanAppQosAppsOutput struct{ *pulumi.OutputState }

func (WlanAppQosAppsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosApps)(nil)).Elem()
}

func (o WlanAppQosAppsOutput) ToWlanAppQosAppsOutput() WlanAppQosAppsOutput {
	return o
}

func (o WlanAppQosAppsOutput) ToWlanAppQosAppsOutputWithContext(ctx context.Context) WlanAppQosAppsOutput {
	return o
}

func (o WlanAppQosAppsOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAppQosApps) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
func (o WlanAppQosAppsOutput) DstSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosApps) *string { return v.DstSubnet }).(pulumi.StringPtrOutput)
}

// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
func (o WlanAppQosAppsOutput) SrcSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosApps) *string { return v.SrcSubnet }).(pulumi.StringPtrOutput)
}

type WlanAppQosAppsMapOutput struct{ *pulumi.OutputState }

func (WlanAppQosAppsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanAppQosApps)(nil)).Elem()
}

func (o WlanAppQosAppsMapOutput) ToWlanAppQosAppsMapOutput() WlanAppQosAppsMapOutput {
	return o
}

func (o WlanAppQosAppsMapOutput) ToWlanAppQosAppsMapOutputWithContext(ctx context.Context) WlanAppQosAppsMapOutput {
	return o
}

func (o WlanAppQosAppsMapOutput) MapIndex(k pulumi.StringInput) WlanAppQosAppsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WlanAppQosApps {
		return vs[0].(map[string]WlanAppQosApps)[vs[1].(string)]
	}).(WlanAppQosAppsOutput)
}

type WlanAppQosOther struct {
	Dscp       *int    `pulumi:"dscp"`
	DstSubnet  *string `pulumi:"dstSubnet"`
	PortRanges *string `pulumi:"portRanges"`
	Protocol   *string `pulumi:"protocol"`
	SrcSubnet  *string `pulumi:"srcSubnet"`
}

// WlanAppQosOtherInput is an input type that accepts WlanAppQosOtherArgs and WlanAppQosOtherOutput values.
// You can construct a concrete instance of `WlanAppQosOtherInput` via:
//
//	WlanAppQosOtherArgs{...}
type WlanAppQosOtherInput interface {
	pulumi.Input

	ToWlanAppQosOtherOutput() WlanAppQosOtherOutput
	ToWlanAppQosOtherOutputWithContext(context.Context) WlanAppQosOtherOutput
}

type WlanAppQosOtherArgs struct {
	Dscp       pulumi.IntPtrInput    `pulumi:"dscp"`
	DstSubnet  pulumi.StringPtrInput `pulumi:"dstSubnet"`
	PortRanges pulumi.StringPtrInput `pulumi:"portRanges"`
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	SrcSubnet  pulumi.StringPtrInput `pulumi:"srcSubnet"`
}

func (WlanAppQosOtherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosOther)(nil)).Elem()
}

func (i WlanAppQosOtherArgs) ToWlanAppQosOtherOutput() WlanAppQosOtherOutput {
	return i.ToWlanAppQosOtherOutputWithContext(context.Background())
}

func (i WlanAppQosOtherArgs) ToWlanAppQosOtherOutputWithContext(ctx context.Context) WlanAppQosOtherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOtherOutput)
}

// WlanAppQosOtherArrayInput is an input type that accepts WlanAppQosOtherArray and WlanAppQosOtherArrayOutput values.
// You can construct a concrete instance of `WlanAppQosOtherArrayInput` via:
//
//	WlanAppQosOtherArray{ WlanAppQosOtherArgs{...} }
type WlanAppQosOtherArrayInput interface {
	pulumi.Input

	ToWlanAppQosOtherArrayOutput() WlanAppQosOtherArrayOutput
	ToWlanAppQosOtherArrayOutputWithContext(context.Context) WlanAppQosOtherArrayOutput
}

type WlanAppQosOtherArray []WlanAppQosOtherInput

func (WlanAppQosOtherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAppQosOther)(nil)).Elem()
}

func (i WlanAppQosOtherArray) ToWlanAppQosOtherArrayOutput() WlanAppQosOtherArrayOutput {
	return i.ToWlanAppQosOtherArrayOutputWithContext(context.Background())
}

func (i WlanAppQosOtherArray) ToWlanAppQosOtherArrayOutputWithContext(ctx context.Context) WlanAppQosOtherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOtherArrayOutput)
}

type WlanAppQosOtherOutput struct{ *pulumi.OutputState }

func (WlanAppQosOtherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosOther)(nil)).Elem()
}

func (o WlanAppQosOtherOutput) ToWlanAppQosOtherOutput() WlanAppQosOtherOutput {
	return o
}

func (o WlanAppQosOtherOutput) ToWlanAppQosOtherOutputWithContext(ctx context.Context) WlanAppQosOtherOutput {
	return o
}

func (o WlanAppQosOtherOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

func (o WlanAppQosOtherOutput) DstSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.DstSubnet }).(pulumi.StringPtrOutput)
}

func (o WlanAppQosOtherOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.PortRanges }).(pulumi.StringPtrOutput)
}

func (o WlanAppQosOtherOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o WlanAppQosOtherOutput) SrcSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.SrcSubnet }).(pulumi.StringPtrOutput)
}

type WlanAppQosOtherArrayOutput struct{ *pulumi.OutputState }

func (WlanAppQosOtherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAppQosOther)(nil)).Elem()
}

func (o WlanAppQosOtherArrayOutput) ToWlanAppQosOtherArrayOutput() WlanAppQosOtherArrayOutput {
	return o
}

func (o WlanAppQosOtherArrayOutput) ToWlanAppQosOtherArrayOutputWithContext(ctx context.Context) WlanAppQosOtherArrayOutput {
	return o
}

func (o WlanAppQosOtherArrayOutput) Index(i pulumi.IntInput) WlanAppQosOtherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanAppQosOther {
		return vs[0].([]WlanAppQosOther)[vs[1].(int)]
	}).(WlanAppQosOtherOutput)
}

type WlanAuth struct {
	// SAE anti-clogging token threshold
	AnticlogThreshold *int `pulumi:"anticlogThreshold"`
	// whether to trigger EAP reauth when the session ends
	EapReauth *bool `pulumi:"eapReauth"`
	// whether to enable MAC Auth, uses the same auth_servers
	EnableMacAuth *bool `pulumi:"enableMacAuth"`
	// when `type`==`wep`
	KeyIdx *int `pulumi:"keyIdx"`
	// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
	Keys []string `pulumi:"keys"`
	// when `type`==`psk`, whether to only use multi_psk
	MultiPskOnly *bool `pulumi:"multiPskOnly"`
	// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
	Owe *string `pulumi:"owe"`
	// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
	Pairwises []string `pulumi:"pairwises"`
	// when `multiPskOnly`==`true`, whether private wlan is enabled
	PrivateWlan *bool `pulumi:"privateWlan"`
	// when `type`==`psk`, 8-64 characters, or 64 hex characters
	Psk *string `pulumi:"psk"`
	// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
	Type *string `pulumi:"type"`
	// enable WEP as secondary auth
	WepAsSecondaryAuth *bool `pulumi:"wepAsSecondaryAuth"`
}

// WlanAuthInput is an input type that accepts WlanAuthArgs and WlanAuthOutput values.
// You can construct a concrete instance of `WlanAuthInput` via:
//
//	WlanAuthArgs{...}
type WlanAuthInput interface {
	pulumi.Input

	ToWlanAuthOutput() WlanAuthOutput
	ToWlanAuthOutputWithContext(context.Context) WlanAuthOutput
}

type WlanAuthArgs struct {
	// SAE anti-clogging token threshold
	AnticlogThreshold pulumi.IntPtrInput `pulumi:"anticlogThreshold"`
	// whether to trigger EAP reauth when the session ends
	EapReauth pulumi.BoolPtrInput `pulumi:"eapReauth"`
	// whether to enable MAC Auth, uses the same auth_servers
	EnableMacAuth pulumi.BoolPtrInput `pulumi:"enableMacAuth"`
	// when `type`==`wep`
	KeyIdx pulumi.IntPtrInput `pulumi:"keyIdx"`
	// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// when `type`==`psk`, whether to only use multi_psk
	MultiPskOnly pulumi.BoolPtrInput `pulumi:"multiPskOnly"`
	// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
	Owe pulumi.StringPtrInput `pulumi:"owe"`
	// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
	Pairwises pulumi.StringArrayInput `pulumi:"pairwises"`
	// when `multiPskOnly`==`true`, whether private wlan is enabled
	PrivateWlan pulumi.BoolPtrInput `pulumi:"privateWlan"`
	// when `type`==`psk`, 8-64 characters, or 64 hex characters
	Psk pulumi.StringPtrInput `pulumi:"psk"`
	// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// enable WEP as secondary auth
	WepAsSecondaryAuth pulumi.BoolPtrInput `pulumi:"wepAsSecondaryAuth"`
}

func (WlanAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuth)(nil)).Elem()
}

func (i WlanAuthArgs) ToWlanAuthOutput() WlanAuthOutput {
	return i.ToWlanAuthOutputWithContext(context.Background())
}

func (i WlanAuthArgs) ToWlanAuthOutputWithContext(ctx context.Context) WlanAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthOutput)
}

func (i WlanAuthArgs) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return i.ToWlanAuthPtrOutputWithContext(context.Background())
}

func (i WlanAuthArgs) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthOutput).ToWlanAuthPtrOutputWithContext(ctx)
}

// WlanAuthPtrInput is an input type that accepts WlanAuthArgs, WlanAuthPtr and WlanAuthPtrOutput values.
// You can construct a concrete instance of `WlanAuthPtrInput` via:
//
//	        WlanAuthArgs{...}
//
//	or:
//
//	        nil
type WlanAuthPtrInput interface {
	pulumi.Input

	ToWlanAuthPtrOutput() WlanAuthPtrOutput
	ToWlanAuthPtrOutputWithContext(context.Context) WlanAuthPtrOutput
}

type wlanAuthPtrType WlanAuthArgs

func WlanAuthPtr(v *WlanAuthArgs) WlanAuthPtrInput {
	return (*wlanAuthPtrType)(v)
}

func (*wlanAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAuth)(nil)).Elem()
}

func (i *wlanAuthPtrType) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return i.ToWlanAuthPtrOutputWithContext(context.Background())
}

func (i *wlanAuthPtrType) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthPtrOutput)
}

type WlanAuthOutput struct{ *pulumi.OutputState }

func (WlanAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuth)(nil)).Elem()
}

func (o WlanAuthOutput) ToWlanAuthOutput() WlanAuthOutput {
	return o
}

func (o WlanAuthOutput) ToWlanAuthOutputWithContext(ctx context.Context) WlanAuthOutput {
	return o
}

func (o WlanAuthOutput) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return o.ToWlanAuthPtrOutputWithContext(context.Background())
}

func (o WlanAuthOutput) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAuth) *WlanAuth {
		return &v
	}).(WlanAuthPtrOutput)
}

// SAE anti-clogging token threshold
func (o WlanAuthOutput) AnticlogThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAuth) *int { return v.AnticlogThreshold }).(pulumi.IntPtrOutput)
}

// whether to trigger EAP reauth when the session ends
func (o WlanAuthOutput) EapReauth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.EapReauth }).(pulumi.BoolPtrOutput)
}

// whether to enable MAC Auth, uses the same auth_servers
func (o WlanAuthOutput) EnableMacAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.EnableMacAuth }).(pulumi.BoolPtrOutput)
}

// when `type`==`wep`
func (o WlanAuthOutput) KeyIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAuth) *int { return v.KeyIdx }).(pulumi.IntPtrOutput)
}

// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
func (o WlanAuthOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanAuth) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// when `type`==`psk`, whether to only use multi_psk
func (o WlanAuthOutput) MultiPskOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.MultiPskOnly }).(pulumi.BoolPtrOutput)
}

// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
func (o WlanAuthOutput) Owe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuth) *string { return v.Owe }).(pulumi.StringPtrOutput)
}

// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
func (o WlanAuthOutput) Pairwises() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanAuth) []string { return v.Pairwises }).(pulumi.StringArrayOutput)
}

// when `multiPskOnly`==`true`, whether private wlan is enabled
func (o WlanAuthOutput) PrivateWlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.PrivateWlan }).(pulumi.BoolPtrOutput)
}

// when `type`==`psk`, 8-64 characters, or 64 hex characters
func (o WlanAuthOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuth) *string { return v.Psk }).(pulumi.StringPtrOutput)
}

// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
func (o WlanAuthOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuth) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// enable WEP as secondary auth
func (o WlanAuthOutput) WepAsSecondaryAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.WepAsSecondaryAuth }).(pulumi.BoolPtrOutput)
}

type WlanAuthPtrOutput struct{ *pulumi.OutputState }

func (WlanAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAuth)(nil)).Elem()
}

func (o WlanAuthPtrOutput) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return o
}

func (o WlanAuthPtrOutput) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return o
}

func (o WlanAuthPtrOutput) Elem() WlanAuthOutput {
	return o.ApplyT(func(v *WlanAuth) WlanAuth {
		if v != nil {
			return *v
		}
		var ret WlanAuth
		return ret
	}).(WlanAuthOutput)
}

// SAE anti-clogging token threshold
func (o WlanAuthPtrOutput) AnticlogThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *int {
		if v == nil {
			return nil
		}
		return v.AnticlogThreshold
	}).(pulumi.IntPtrOutput)
}

// whether to trigger EAP reauth when the session ends
func (o WlanAuthPtrOutput) EapReauth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.EapReauth
	}).(pulumi.BoolPtrOutput)
}

// whether to enable MAC Auth, uses the same auth_servers
func (o WlanAuthPtrOutput) EnableMacAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMacAuth
	}).(pulumi.BoolPtrOutput)
}

// when `type`==`wep`
func (o WlanAuthPtrOutput) KeyIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *int {
		if v == nil {
			return nil
		}
		return v.KeyIdx
	}).(pulumi.IntPtrOutput)
}

// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
func (o WlanAuthPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanAuth) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// when `type`==`psk`, whether to only use multi_psk
func (o WlanAuthPtrOutput) MultiPskOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.MultiPskOnly
	}).(pulumi.BoolPtrOutput)
}

// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
func (o WlanAuthPtrOutput) Owe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *string {
		if v == nil {
			return nil
		}
		return v.Owe
	}).(pulumi.StringPtrOutput)
}

// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
func (o WlanAuthPtrOutput) Pairwises() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanAuth) []string {
		if v == nil {
			return nil
		}
		return v.Pairwises
	}).(pulumi.StringArrayOutput)
}

// when `multiPskOnly`==`true`, whether private wlan is enabled
func (o WlanAuthPtrOutput) PrivateWlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.PrivateWlan
	}).(pulumi.BoolPtrOutput)
}

// when `type`==`psk`, 8-64 characters, or 64 hex characters
func (o WlanAuthPtrOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *string {
		if v == nil {
			return nil
		}
		return v.Psk
	}).(pulumi.StringPtrOutput)
}

// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
func (o WlanAuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// enable WEP as secondary auth
func (o WlanAuthPtrOutput) WepAsSecondaryAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.WepAsSecondaryAuth
	}).(pulumi.BoolPtrOutput)
}

type WlanAuthServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port *int `pulumi:"port"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// WlanAuthServerInput is an input type that accepts WlanAuthServerArgs and WlanAuthServerOutput values.
// You can construct a concrete instance of `WlanAuthServerInput` via:
//
//	WlanAuthServerArgs{...}
type WlanAuthServerInput interface {
	pulumi.Input

	ToWlanAuthServerOutput() WlanAuthServerOutput
	ToWlanAuthServerOutputWithContext(context.Context) WlanAuthServerOutput
}

type WlanAuthServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (WlanAuthServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuthServer)(nil)).Elem()
}

func (i WlanAuthServerArgs) ToWlanAuthServerOutput() WlanAuthServerOutput {
	return i.ToWlanAuthServerOutputWithContext(context.Background())
}

func (i WlanAuthServerArgs) ToWlanAuthServerOutputWithContext(ctx context.Context) WlanAuthServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthServerOutput)
}

// WlanAuthServerArrayInput is an input type that accepts WlanAuthServerArray and WlanAuthServerArrayOutput values.
// You can construct a concrete instance of `WlanAuthServerArrayInput` via:
//
//	WlanAuthServerArray{ WlanAuthServerArgs{...} }
type WlanAuthServerArrayInput interface {
	pulumi.Input

	ToWlanAuthServerArrayOutput() WlanAuthServerArrayOutput
	ToWlanAuthServerArrayOutputWithContext(context.Context) WlanAuthServerArrayOutput
}

type WlanAuthServerArray []WlanAuthServerInput

func (WlanAuthServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAuthServer)(nil)).Elem()
}

func (i WlanAuthServerArray) ToWlanAuthServerArrayOutput() WlanAuthServerArrayOutput {
	return i.ToWlanAuthServerArrayOutputWithContext(context.Background())
}

func (i WlanAuthServerArray) ToWlanAuthServerArrayOutputWithContext(ctx context.Context) WlanAuthServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthServerArrayOutput)
}

type WlanAuthServerOutput struct{ *pulumi.OutputState }

func (WlanAuthServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuthServer)(nil)).Elem()
}

func (o WlanAuthServerOutput) ToWlanAuthServerOutput() WlanAuthServerOutput {
	return o
}

func (o WlanAuthServerOutput) ToWlanAuthServerOutputWithContext(ctx context.Context) WlanAuthServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o WlanAuthServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAuthServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o WlanAuthServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o WlanAuthServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o WlanAuthServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o WlanAuthServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Auth port of RADIUS server
func (o WlanAuthServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// secret of RADIUS server
func (o WlanAuthServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAuthServer) string { return v.Secret }).(pulumi.StringOutput)
}

type WlanAuthServerArrayOutput struct{ *pulumi.OutputState }

func (WlanAuthServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAuthServer)(nil)).Elem()
}

func (o WlanAuthServerArrayOutput) ToWlanAuthServerArrayOutput() WlanAuthServerArrayOutput {
	return o
}

func (o WlanAuthServerArrayOutput) ToWlanAuthServerArrayOutputWithContext(ctx context.Context) WlanAuthServerArrayOutput {
	return o
}

func (o WlanAuthServerArrayOutput) Index(i pulumi.IntInput) WlanAuthServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanAuthServer {
		return vs[0].([]WlanAuthServer)[vs[1].(int)]
	}).(WlanAuthServerOutput)
}

type WlanBonjour struct {
	// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
	AdditionalVlanIds []string `pulumi:"additionalVlanIds"`
	// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
	Enabled *bool `pulumi:"enabled"`
	// what services are allowed.
	// Property key is the service name
	Services map[string]WlanBonjourServices `pulumi:"services"`
}

// WlanBonjourInput is an input type that accepts WlanBonjourArgs and WlanBonjourOutput values.
// You can construct a concrete instance of `WlanBonjourInput` via:
//
//	WlanBonjourArgs{...}
type WlanBonjourInput interface {
	pulumi.Input

	ToWlanBonjourOutput() WlanBonjourOutput
	ToWlanBonjourOutputWithContext(context.Context) WlanBonjourOutput
}

type WlanBonjourArgs struct {
	// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
	AdditionalVlanIds pulumi.StringArrayInput `pulumi:"additionalVlanIds"`
	// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// what services are allowed.
	// Property key is the service name
	Services WlanBonjourServicesMapInput `pulumi:"services"`
}

func (WlanBonjourArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjour)(nil)).Elem()
}

func (i WlanBonjourArgs) ToWlanBonjourOutput() WlanBonjourOutput {
	return i.ToWlanBonjourOutputWithContext(context.Background())
}

func (i WlanBonjourArgs) ToWlanBonjourOutputWithContext(ctx context.Context) WlanBonjourOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourOutput)
}

func (i WlanBonjourArgs) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return i.ToWlanBonjourPtrOutputWithContext(context.Background())
}

func (i WlanBonjourArgs) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourOutput).ToWlanBonjourPtrOutputWithContext(ctx)
}

// WlanBonjourPtrInput is an input type that accepts WlanBonjourArgs, WlanBonjourPtr and WlanBonjourPtrOutput values.
// You can construct a concrete instance of `WlanBonjourPtrInput` via:
//
//	        WlanBonjourArgs{...}
//
//	or:
//
//	        nil
type WlanBonjourPtrInput interface {
	pulumi.Input

	ToWlanBonjourPtrOutput() WlanBonjourPtrOutput
	ToWlanBonjourPtrOutputWithContext(context.Context) WlanBonjourPtrOutput
}

type wlanBonjourPtrType WlanBonjourArgs

func WlanBonjourPtr(v *WlanBonjourArgs) WlanBonjourPtrInput {
	return (*wlanBonjourPtrType)(v)
}

func (*wlanBonjourPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanBonjour)(nil)).Elem()
}

func (i *wlanBonjourPtrType) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return i.ToWlanBonjourPtrOutputWithContext(context.Background())
}

func (i *wlanBonjourPtrType) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourPtrOutput)
}

type WlanBonjourOutput struct{ *pulumi.OutputState }

func (WlanBonjourOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjour)(nil)).Elem()
}

func (o WlanBonjourOutput) ToWlanBonjourOutput() WlanBonjourOutput {
	return o
}

func (o WlanBonjourOutput) ToWlanBonjourOutputWithContext(ctx context.Context) WlanBonjourOutput {
	return o
}

func (o WlanBonjourOutput) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return o.ToWlanBonjourPtrOutputWithContext(context.Background())
}

func (o WlanBonjourOutput) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanBonjour) *WlanBonjour {
		return &v
	}).(WlanBonjourPtrOutput)
}

// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
func (o WlanBonjourOutput) AdditionalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanBonjour) []string { return v.AdditionalVlanIds }).(pulumi.StringArrayOutput)
}

// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
func (o WlanBonjourOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanBonjour) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// what services are allowed.
// Property key is the service name
func (o WlanBonjourOutput) Services() WlanBonjourServicesMapOutput {
	return o.ApplyT(func(v WlanBonjour) map[string]WlanBonjourServices { return v.Services }).(WlanBonjourServicesMapOutput)
}

type WlanBonjourPtrOutput struct{ *pulumi.OutputState }

func (WlanBonjourPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanBonjour)(nil)).Elem()
}

func (o WlanBonjourPtrOutput) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return o
}

func (o WlanBonjourPtrOutput) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return o
}

func (o WlanBonjourPtrOutput) Elem() WlanBonjourOutput {
	return o.ApplyT(func(v *WlanBonjour) WlanBonjour {
		if v != nil {
			return *v
		}
		var ret WlanBonjour
		return ret
	}).(WlanBonjourOutput)
}

// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
func (o WlanBonjourPtrOutput) AdditionalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanBonjour) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalVlanIds
	}).(pulumi.StringArrayOutput)
}

// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
func (o WlanBonjourPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanBonjour) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// what services are allowed.
// Property key is the service name
func (o WlanBonjourPtrOutput) Services() WlanBonjourServicesMapOutput {
	return o.ApplyT(func(v *WlanBonjour) map[string]WlanBonjourServices {
		if v == nil {
			return nil
		}
		return v.Services
	}).(WlanBonjourServicesMapOutput)
}

type WlanBonjourServices struct {
	// whether to prevent wireless clients to discover bonjour devices on the same WLAN
	DisableLocal *bool `pulumi:"disableLocal"`
	// optional, if the service is further restricted for certain RADIUS groups
	RadiusGroups []string `pulumi:"radiusGroups"`
	// how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
	Scope *string `pulumi:"scope"`
}

// WlanBonjourServicesInput is an input type that accepts WlanBonjourServicesArgs and WlanBonjourServicesOutput values.
// You can construct a concrete instance of `WlanBonjourServicesInput` via:
//
//	WlanBonjourServicesArgs{...}
type WlanBonjourServicesInput interface {
	pulumi.Input

	ToWlanBonjourServicesOutput() WlanBonjourServicesOutput
	ToWlanBonjourServicesOutputWithContext(context.Context) WlanBonjourServicesOutput
}

type WlanBonjourServicesArgs struct {
	// whether to prevent wireless clients to discover bonjour devices on the same WLAN
	DisableLocal pulumi.BoolPtrInput `pulumi:"disableLocal"`
	// optional, if the service is further restricted for certain RADIUS groups
	RadiusGroups pulumi.StringArrayInput `pulumi:"radiusGroups"`
	// how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (WlanBonjourServicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjourServices)(nil)).Elem()
}

func (i WlanBonjourServicesArgs) ToWlanBonjourServicesOutput() WlanBonjourServicesOutput {
	return i.ToWlanBonjourServicesOutputWithContext(context.Background())
}

func (i WlanBonjourServicesArgs) ToWlanBonjourServicesOutputWithContext(ctx context.Context) WlanBonjourServicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourServicesOutput)
}

// WlanBonjourServicesMapInput is an input type that accepts WlanBonjourServicesMap and WlanBonjourServicesMapOutput values.
// You can construct a concrete instance of `WlanBonjourServicesMapInput` via:
//
//	WlanBonjourServicesMap{ "key": WlanBonjourServicesArgs{...} }
type WlanBonjourServicesMapInput interface {
	pulumi.Input

	ToWlanBonjourServicesMapOutput() WlanBonjourServicesMapOutput
	ToWlanBonjourServicesMapOutputWithContext(context.Context) WlanBonjourServicesMapOutput
}

type WlanBonjourServicesMap map[string]WlanBonjourServicesInput

func (WlanBonjourServicesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanBonjourServices)(nil)).Elem()
}

func (i WlanBonjourServicesMap) ToWlanBonjourServicesMapOutput() WlanBonjourServicesMapOutput {
	return i.ToWlanBonjourServicesMapOutputWithContext(context.Background())
}

func (i WlanBonjourServicesMap) ToWlanBonjourServicesMapOutputWithContext(ctx context.Context) WlanBonjourServicesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourServicesMapOutput)
}

type WlanBonjourServicesOutput struct{ *pulumi.OutputState }

func (WlanBonjourServicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjourServices)(nil)).Elem()
}

func (o WlanBonjourServicesOutput) ToWlanBonjourServicesOutput() WlanBonjourServicesOutput {
	return o
}

func (o WlanBonjourServicesOutput) ToWlanBonjourServicesOutputWithContext(ctx context.Context) WlanBonjourServicesOutput {
	return o
}

// whether to prevent wireless clients to discover bonjour devices on the same WLAN
func (o WlanBonjourServicesOutput) DisableLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanBonjourServices) *bool { return v.DisableLocal }).(pulumi.BoolPtrOutput)
}

// optional, if the service is further restricted for certain RADIUS groups
func (o WlanBonjourServicesOutput) RadiusGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanBonjourServices) []string { return v.RadiusGroups }).(pulumi.StringArrayOutput)
}

// how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
func (o WlanBonjourServicesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanBonjourServices) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type WlanBonjourServicesMapOutput struct{ *pulumi.OutputState }

func (WlanBonjourServicesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanBonjourServices)(nil)).Elem()
}

func (o WlanBonjourServicesMapOutput) ToWlanBonjourServicesMapOutput() WlanBonjourServicesMapOutput {
	return o
}

func (o WlanBonjourServicesMapOutput) ToWlanBonjourServicesMapOutputWithContext(ctx context.Context) WlanBonjourServicesMapOutput {
	return o
}

func (o WlanBonjourServicesMapOutput) MapIndex(k pulumi.StringInput) WlanBonjourServicesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WlanBonjourServices {
		return vs[0].(map[string]WlanBonjourServices)[vs[1].(string)]
	}).(WlanBonjourServicesOutput)
}

type WlanCiscoCwa struct {
	// list of hostnames without http(s):// (matched by substring)
	AllowedHostnames []string `pulumi:"allowedHostnames"`
	// list of CIDRs
	AllowedSubnets []string `pulumi:"allowedSubnets"`
	// list of blocked CIDRs
	BlockedSubnets []string `pulumi:"blockedSubnets"`
	Enabled        *bool    `pulumi:"enabled"`
}

// WlanCiscoCwaInput is an input type that accepts WlanCiscoCwaArgs and WlanCiscoCwaOutput values.
// You can construct a concrete instance of `WlanCiscoCwaInput` via:
//
//	WlanCiscoCwaArgs{...}
type WlanCiscoCwaInput interface {
	pulumi.Input

	ToWlanCiscoCwaOutput() WlanCiscoCwaOutput
	ToWlanCiscoCwaOutputWithContext(context.Context) WlanCiscoCwaOutput
}

type WlanCiscoCwaArgs struct {
	// list of hostnames without http(s):// (matched by substring)
	AllowedHostnames pulumi.StringArrayInput `pulumi:"allowedHostnames"`
	// list of CIDRs
	AllowedSubnets pulumi.StringArrayInput `pulumi:"allowedSubnets"`
	// list of blocked CIDRs
	BlockedSubnets pulumi.StringArrayInput `pulumi:"blockedSubnets"`
	Enabled        pulumi.BoolPtrInput     `pulumi:"enabled"`
}

func (WlanCiscoCwaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCiscoCwa)(nil)).Elem()
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaOutput() WlanCiscoCwaOutput {
	return i.ToWlanCiscoCwaOutputWithContext(context.Background())
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaOutputWithContext(ctx context.Context) WlanCiscoCwaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCiscoCwaOutput)
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return i.ToWlanCiscoCwaPtrOutputWithContext(context.Background())
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCiscoCwaOutput).ToWlanCiscoCwaPtrOutputWithContext(ctx)
}

// WlanCiscoCwaPtrInput is an input type that accepts WlanCiscoCwaArgs, WlanCiscoCwaPtr and WlanCiscoCwaPtrOutput values.
// You can construct a concrete instance of `WlanCiscoCwaPtrInput` via:
//
//	        WlanCiscoCwaArgs{...}
//
//	or:
//
//	        nil
type WlanCiscoCwaPtrInput interface {
	pulumi.Input

	ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput
	ToWlanCiscoCwaPtrOutputWithContext(context.Context) WlanCiscoCwaPtrOutput
}

type wlanCiscoCwaPtrType WlanCiscoCwaArgs

func WlanCiscoCwaPtr(v *WlanCiscoCwaArgs) WlanCiscoCwaPtrInput {
	return (*wlanCiscoCwaPtrType)(v)
}

func (*wlanCiscoCwaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanCiscoCwa)(nil)).Elem()
}

func (i *wlanCiscoCwaPtrType) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return i.ToWlanCiscoCwaPtrOutputWithContext(context.Background())
}

func (i *wlanCiscoCwaPtrType) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCiscoCwaPtrOutput)
}

type WlanCiscoCwaOutput struct{ *pulumi.OutputState }

func (WlanCiscoCwaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCiscoCwa)(nil)).Elem()
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaOutput() WlanCiscoCwaOutput {
	return o
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaOutputWithContext(ctx context.Context) WlanCiscoCwaOutput {
	return o
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return o.ToWlanCiscoCwaPtrOutputWithContext(context.Background())
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanCiscoCwa) *WlanCiscoCwa {
		return &v
	}).(WlanCiscoCwaPtrOutput)
}

// list of hostnames without http(s):// (matched by substring)
func (o WlanCiscoCwaOutput) AllowedHostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanCiscoCwa) []string { return v.AllowedHostnames }).(pulumi.StringArrayOutput)
}

// list of CIDRs
func (o WlanCiscoCwaOutput) AllowedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanCiscoCwa) []string { return v.AllowedSubnets }).(pulumi.StringArrayOutput)
}

// list of blocked CIDRs
func (o WlanCiscoCwaOutput) BlockedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanCiscoCwa) []string { return v.BlockedSubnets }).(pulumi.StringArrayOutput)
}

func (o WlanCiscoCwaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanCiscoCwa) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type WlanCiscoCwaPtrOutput struct{ *pulumi.OutputState }

func (WlanCiscoCwaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanCiscoCwa)(nil)).Elem()
}

func (o WlanCiscoCwaPtrOutput) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return o
}

func (o WlanCiscoCwaPtrOutput) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return o
}

func (o WlanCiscoCwaPtrOutput) Elem() WlanCiscoCwaOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) WlanCiscoCwa {
		if v != nil {
			return *v
		}
		var ret WlanCiscoCwa
		return ret
	}).(WlanCiscoCwaOutput)
}

// list of hostnames without http(s):// (matched by substring)
func (o WlanCiscoCwaPtrOutput) AllowedHostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) []string {
		if v == nil {
			return nil
		}
		return v.AllowedHostnames
	}).(pulumi.StringArrayOutput)
}

// list of CIDRs
func (o WlanCiscoCwaPtrOutput) AllowedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) []string {
		if v == nil {
			return nil
		}
		return v.AllowedSubnets
	}).(pulumi.StringArrayOutput)
}

// list of blocked CIDRs
func (o WlanCiscoCwaPtrOutput) BlockedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) []string {
		if v == nil {
			return nil
		}
		return v.BlockedSubnets
	}).(pulumi.StringArrayOutput)
}

func (o WlanCiscoCwaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type WlanCoaServer struct {
	// whether to disable Event-Timestamp Check
	DisableEventTimestampCheck *bool  `pulumi:"disableEventTimestampCheck"`
	Enabled                    *bool  `pulumi:"enabled"`
	Ip                         string `pulumi:"ip"`
	Port                       *int   `pulumi:"port"`
	Secret                     string `pulumi:"secret"`
}

// WlanCoaServerInput is an input type that accepts WlanCoaServerArgs and WlanCoaServerOutput values.
// You can construct a concrete instance of `WlanCoaServerInput` via:
//
//	WlanCoaServerArgs{...}
type WlanCoaServerInput interface {
	pulumi.Input

	ToWlanCoaServerOutput() WlanCoaServerOutput
	ToWlanCoaServerOutputWithContext(context.Context) WlanCoaServerOutput
}

type WlanCoaServerArgs struct {
	// whether to disable Event-Timestamp Check
	DisableEventTimestampCheck pulumi.BoolPtrInput `pulumi:"disableEventTimestampCheck"`
	Enabled                    pulumi.BoolPtrInput `pulumi:"enabled"`
	Ip                         pulumi.StringInput  `pulumi:"ip"`
	Port                       pulumi.IntPtrInput  `pulumi:"port"`
	Secret                     pulumi.StringInput  `pulumi:"secret"`
}

func (WlanCoaServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCoaServer)(nil)).Elem()
}

func (i WlanCoaServerArgs) ToWlanCoaServerOutput() WlanCoaServerOutput {
	return i.ToWlanCoaServerOutputWithContext(context.Background())
}

func (i WlanCoaServerArgs) ToWlanCoaServerOutputWithContext(ctx context.Context) WlanCoaServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCoaServerOutput)
}

// WlanCoaServerArrayInput is an input type that accepts WlanCoaServerArray and WlanCoaServerArrayOutput values.
// You can construct a concrete instance of `WlanCoaServerArrayInput` via:
//
//	WlanCoaServerArray{ WlanCoaServerArgs{...} }
type WlanCoaServerArrayInput interface {
	pulumi.Input

	ToWlanCoaServerArrayOutput() WlanCoaServerArrayOutput
	ToWlanCoaServerArrayOutputWithContext(context.Context) WlanCoaServerArrayOutput
}

type WlanCoaServerArray []WlanCoaServerInput

func (WlanCoaServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanCoaServer)(nil)).Elem()
}

func (i WlanCoaServerArray) ToWlanCoaServerArrayOutput() WlanCoaServerArrayOutput {
	return i.ToWlanCoaServerArrayOutputWithContext(context.Background())
}

func (i WlanCoaServerArray) ToWlanCoaServerArrayOutputWithContext(ctx context.Context) WlanCoaServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCoaServerArrayOutput)
}

type WlanCoaServerOutput struct{ *pulumi.OutputState }

func (WlanCoaServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCoaServer)(nil)).Elem()
}

func (o WlanCoaServerOutput) ToWlanCoaServerOutput() WlanCoaServerOutput {
	return o
}

func (o WlanCoaServerOutput) ToWlanCoaServerOutputWithContext(ctx context.Context) WlanCoaServerOutput {
	return o
}

// whether to disable Event-Timestamp Check
func (o WlanCoaServerOutput) DisableEventTimestampCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanCoaServer) *bool { return v.DisableEventTimestampCheck }).(pulumi.BoolPtrOutput)
}

func (o WlanCoaServerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanCoaServer) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanCoaServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v WlanCoaServer) string { return v.Ip }).(pulumi.StringOutput)
}

func (o WlanCoaServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanCoaServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o WlanCoaServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WlanCoaServer) string { return v.Secret }).(pulumi.StringOutput)
}

type WlanCoaServerArrayOutput struct{ *pulumi.OutputState }

func (WlanCoaServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanCoaServer)(nil)).Elem()
}

func (o WlanCoaServerArrayOutput) ToWlanCoaServerArrayOutput() WlanCoaServerArrayOutput {
	return o
}

func (o WlanCoaServerArrayOutput) ToWlanCoaServerArrayOutputWithContext(ctx context.Context) WlanCoaServerArrayOutput {
	return o
}

func (o WlanCoaServerArrayOutput) Index(i pulumi.IntInput) WlanCoaServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanCoaServer {
		return vs[0].([]WlanCoaServer)[vs[1].(int)]
	}).(WlanCoaServerOutput)
}

type WlanDnsServerRewrite struct {
	Enabled *bool `pulumi:"enabled"`
	// map between radiusGroup and the desired DNS server (IPv4 only)
	// Property key is the RADIUS group, property value is the desired DNS Server
	RadiusGroups map[string]string `pulumi:"radiusGroups"`
}

// WlanDnsServerRewriteInput is an input type that accepts WlanDnsServerRewriteArgs and WlanDnsServerRewriteOutput values.
// You can construct a concrete instance of `WlanDnsServerRewriteInput` via:
//
//	WlanDnsServerRewriteArgs{...}
type WlanDnsServerRewriteInput interface {
	pulumi.Input

	ToWlanDnsServerRewriteOutput() WlanDnsServerRewriteOutput
	ToWlanDnsServerRewriteOutputWithContext(context.Context) WlanDnsServerRewriteOutput
}

type WlanDnsServerRewriteArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// map between radiusGroup and the desired DNS server (IPv4 only)
	// Property key is the RADIUS group, property value is the desired DNS Server
	RadiusGroups pulumi.StringMapInput `pulumi:"radiusGroups"`
}

func (WlanDnsServerRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDnsServerRewrite)(nil)).Elem()
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewriteOutput() WlanDnsServerRewriteOutput {
	return i.ToWlanDnsServerRewriteOutputWithContext(context.Background())
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewriteOutputWithContext(ctx context.Context) WlanDnsServerRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDnsServerRewriteOutput)
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return i.ToWlanDnsServerRewritePtrOutputWithContext(context.Background())
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDnsServerRewriteOutput).ToWlanDnsServerRewritePtrOutputWithContext(ctx)
}

// WlanDnsServerRewritePtrInput is an input type that accepts WlanDnsServerRewriteArgs, WlanDnsServerRewritePtr and WlanDnsServerRewritePtrOutput values.
// You can construct a concrete instance of `WlanDnsServerRewritePtrInput` via:
//
//	        WlanDnsServerRewriteArgs{...}
//
//	or:
//
//	        nil
type WlanDnsServerRewritePtrInput interface {
	pulumi.Input

	ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput
	ToWlanDnsServerRewritePtrOutputWithContext(context.Context) WlanDnsServerRewritePtrOutput
}

type wlanDnsServerRewritePtrType WlanDnsServerRewriteArgs

func WlanDnsServerRewritePtr(v *WlanDnsServerRewriteArgs) WlanDnsServerRewritePtrInput {
	return (*wlanDnsServerRewritePtrType)(v)
}

func (*wlanDnsServerRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDnsServerRewrite)(nil)).Elem()
}

func (i *wlanDnsServerRewritePtrType) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return i.ToWlanDnsServerRewritePtrOutputWithContext(context.Background())
}

func (i *wlanDnsServerRewritePtrType) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDnsServerRewritePtrOutput)
}

type WlanDnsServerRewriteOutput struct{ *pulumi.OutputState }

func (WlanDnsServerRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDnsServerRewrite)(nil)).Elem()
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewriteOutput() WlanDnsServerRewriteOutput {
	return o
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewriteOutputWithContext(ctx context.Context) WlanDnsServerRewriteOutput {
	return o
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return o.ToWlanDnsServerRewritePtrOutputWithContext(context.Background())
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanDnsServerRewrite) *WlanDnsServerRewrite {
		return &v
	}).(WlanDnsServerRewritePtrOutput)
}

func (o WlanDnsServerRewriteOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDnsServerRewrite) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// map between radiusGroup and the desired DNS server (IPv4 only)
// Property key is the RADIUS group, property value is the desired DNS Server
func (o WlanDnsServerRewriteOutput) RadiusGroups() pulumi.StringMapOutput {
	return o.ApplyT(func(v WlanDnsServerRewrite) map[string]string { return v.RadiusGroups }).(pulumi.StringMapOutput)
}

type WlanDnsServerRewritePtrOutput struct{ *pulumi.OutputState }

func (WlanDnsServerRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDnsServerRewrite)(nil)).Elem()
}

func (o WlanDnsServerRewritePtrOutput) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return o
}

func (o WlanDnsServerRewritePtrOutput) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return o
}

func (o WlanDnsServerRewritePtrOutput) Elem() WlanDnsServerRewriteOutput {
	return o.ApplyT(func(v *WlanDnsServerRewrite) WlanDnsServerRewrite {
		if v != nil {
			return *v
		}
		var ret WlanDnsServerRewrite
		return ret
	}).(WlanDnsServerRewriteOutput)
}

func (o WlanDnsServerRewritePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDnsServerRewrite) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// map between radiusGroup and the desired DNS server (IPv4 only)
// Property key is the RADIUS group, property value is the desired DNS Server
func (o WlanDnsServerRewritePtrOutput) RadiusGroups() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WlanDnsServerRewrite) map[string]string {
		if v == nil {
			return nil
		}
		return v.RadiusGroups
	}).(pulumi.StringMapOutput)
}

type WlanDynamicPsk struct {
	// default PSK to use if cloud WLC is not available, 8-63 characters
	DefaultPsk    *string `pulumi:"defaultPsk"`
	DefaultVlanId *string `pulumi:"defaultVlanId"`
	Enabled       *bool   `pulumi:"enabled"`
	// when 11r is enabled, we'll try to use the cached PMK, this can be disabled
	// `false` means auto
	ForceLookup *bool `pulumi:"forceLookup"`
	// enum: `cloudPsks`, `radius`
	Source  *string  `pulumi:"source"`
	VlanIds []string `pulumi:"vlanIds"`
}

// WlanDynamicPskInput is an input type that accepts WlanDynamicPskArgs and WlanDynamicPskOutput values.
// You can construct a concrete instance of `WlanDynamicPskInput` via:
//
//	WlanDynamicPskArgs{...}
type WlanDynamicPskInput interface {
	pulumi.Input

	ToWlanDynamicPskOutput() WlanDynamicPskOutput
	ToWlanDynamicPskOutputWithContext(context.Context) WlanDynamicPskOutput
}

type WlanDynamicPskArgs struct {
	// default PSK to use if cloud WLC is not available, 8-63 characters
	DefaultPsk    pulumi.StringPtrInput `pulumi:"defaultPsk"`
	DefaultVlanId pulumi.StringPtrInput `pulumi:"defaultVlanId"`
	Enabled       pulumi.BoolPtrInput   `pulumi:"enabled"`
	// when 11r is enabled, we'll try to use the cached PMK, this can be disabled
	// `false` means auto
	ForceLookup pulumi.BoolPtrInput `pulumi:"forceLookup"`
	// enum: `cloudPsks`, `radius`
	Source  pulumi.StringPtrInput   `pulumi:"source"`
	VlanIds pulumi.StringArrayInput `pulumi:"vlanIds"`
}

func (WlanDynamicPskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicPsk)(nil)).Elem()
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskOutput() WlanDynamicPskOutput {
	return i.ToWlanDynamicPskOutputWithContext(context.Background())
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskOutputWithContext(ctx context.Context) WlanDynamicPskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicPskOutput)
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return i.ToWlanDynamicPskPtrOutputWithContext(context.Background())
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicPskOutput).ToWlanDynamicPskPtrOutputWithContext(ctx)
}

// WlanDynamicPskPtrInput is an input type that accepts WlanDynamicPskArgs, WlanDynamicPskPtr and WlanDynamicPskPtrOutput values.
// You can construct a concrete instance of `WlanDynamicPskPtrInput` via:
//
//	        WlanDynamicPskArgs{...}
//
//	or:
//
//	        nil
type WlanDynamicPskPtrInput interface {
	pulumi.Input

	ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput
	ToWlanDynamicPskPtrOutputWithContext(context.Context) WlanDynamicPskPtrOutput
}

type wlanDynamicPskPtrType WlanDynamicPskArgs

func WlanDynamicPskPtr(v *WlanDynamicPskArgs) WlanDynamicPskPtrInput {
	return (*wlanDynamicPskPtrType)(v)
}

func (*wlanDynamicPskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicPsk)(nil)).Elem()
}

func (i *wlanDynamicPskPtrType) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return i.ToWlanDynamicPskPtrOutputWithContext(context.Background())
}

func (i *wlanDynamicPskPtrType) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicPskPtrOutput)
}

type WlanDynamicPskOutput struct{ *pulumi.OutputState }

func (WlanDynamicPskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicPsk)(nil)).Elem()
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskOutput() WlanDynamicPskOutput {
	return o
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskOutputWithContext(ctx context.Context) WlanDynamicPskOutput {
	return o
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return o.ToWlanDynamicPskPtrOutputWithContext(context.Background())
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanDynamicPsk) *WlanDynamicPsk {
		return &v
	}).(WlanDynamicPskPtrOutput)
}

// default PSK to use if cloud WLC is not available, 8-63 characters
func (o WlanDynamicPskOutput) DefaultPsk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *string { return v.DefaultPsk }).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskOutput) DefaultVlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *string { return v.DefaultVlanId }).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// when 11r is enabled, we'll try to use the cached PMK, this can be disabled
// `false` means auto
func (o WlanDynamicPskOutput) ForceLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *bool { return v.ForceLookup }).(pulumi.BoolPtrOutput)
}

// enum: `cloudPsks`, `radius`
func (o WlanDynamicPskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskOutput) VlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanDynamicPsk) []string { return v.VlanIds }).(pulumi.StringArrayOutput)
}

type WlanDynamicPskPtrOutput struct{ *pulumi.OutputState }

func (WlanDynamicPskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicPsk)(nil)).Elem()
}

func (o WlanDynamicPskPtrOutput) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return o
}

func (o WlanDynamicPskPtrOutput) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return o
}

func (o WlanDynamicPskPtrOutput) Elem() WlanDynamicPskOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) WlanDynamicPsk {
		if v != nil {
			return *v
		}
		var ret WlanDynamicPsk
		return ret
	}).(WlanDynamicPskOutput)
}

// default PSK to use if cloud WLC is not available, 8-63 characters
func (o WlanDynamicPskPtrOutput) DefaultPsk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *string {
		if v == nil {
			return nil
		}
		return v.DefaultPsk
	}).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskPtrOutput) DefaultVlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *string {
		if v == nil {
			return nil
		}
		return v.DefaultVlanId
	}).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// when 11r is enabled, we'll try to use the cached PMK, this can be disabled
// `false` means auto
func (o WlanDynamicPskPtrOutput) ForceLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *bool {
		if v == nil {
			return nil
		}
		return v.ForceLookup
	}).(pulumi.BoolPtrOutput)
}

// enum: `cloudPsks`, `radius`
func (o WlanDynamicPskPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskPtrOutput) VlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) []string {
		if v == nil {
			return nil
		}
		return v.VlanIds
	}).(pulumi.StringArrayOutput)
}

type WlanDynamicVlan struct {
	// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
	DefaultVlanIds []string `pulumi:"defaultVlanIds"`
	// whether to enable dynamic vlan
	Enabled *bool `pulumi:"enabled"`
	// vlan_ids to be locally bridged
	LocalVlanIds []string `pulumi:"localVlanIds"`
	// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
	Type *string `pulumi:"type"`
	// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
	//   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
	//   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
	Vlans map[string]string `pulumi:"vlans"`
}

// WlanDynamicVlanInput is an input type that accepts WlanDynamicVlanArgs and WlanDynamicVlanOutput values.
// You can construct a concrete instance of `WlanDynamicVlanInput` via:
//
//	WlanDynamicVlanArgs{...}
type WlanDynamicVlanInput interface {
	pulumi.Input

	ToWlanDynamicVlanOutput() WlanDynamicVlanOutput
	ToWlanDynamicVlanOutputWithContext(context.Context) WlanDynamicVlanOutput
}

type WlanDynamicVlanArgs struct {
	// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
	DefaultVlanIds pulumi.StringArrayInput `pulumi:"defaultVlanIds"`
	// whether to enable dynamic vlan
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// vlan_ids to be locally bridged
	LocalVlanIds pulumi.StringArrayInput `pulumi:"localVlanIds"`
	// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
	//   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
	//   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
	Vlans pulumi.StringMapInput `pulumi:"vlans"`
}

func (WlanDynamicVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicVlan)(nil)).Elem()
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanOutput() WlanDynamicVlanOutput {
	return i.ToWlanDynamicVlanOutputWithContext(context.Background())
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanOutputWithContext(ctx context.Context) WlanDynamicVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicVlanOutput)
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return i.ToWlanDynamicVlanPtrOutputWithContext(context.Background())
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicVlanOutput).ToWlanDynamicVlanPtrOutputWithContext(ctx)
}

// WlanDynamicVlanPtrInput is an input type that accepts WlanDynamicVlanArgs, WlanDynamicVlanPtr and WlanDynamicVlanPtrOutput values.
// You can construct a concrete instance of `WlanDynamicVlanPtrInput` via:
//
//	        WlanDynamicVlanArgs{...}
//
//	or:
//
//	        nil
type WlanDynamicVlanPtrInput interface {
	pulumi.Input

	ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput
	ToWlanDynamicVlanPtrOutputWithContext(context.Context) WlanDynamicVlanPtrOutput
}

type wlanDynamicVlanPtrType WlanDynamicVlanArgs

func WlanDynamicVlanPtr(v *WlanDynamicVlanArgs) WlanDynamicVlanPtrInput {
	return (*wlanDynamicVlanPtrType)(v)
}

func (*wlanDynamicVlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicVlan)(nil)).Elem()
}

func (i *wlanDynamicVlanPtrType) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return i.ToWlanDynamicVlanPtrOutputWithContext(context.Background())
}

func (i *wlanDynamicVlanPtrType) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicVlanPtrOutput)
}

type WlanDynamicVlanOutput struct{ *pulumi.OutputState }

func (WlanDynamicVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicVlan)(nil)).Elem()
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanOutput() WlanDynamicVlanOutput {
	return o
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanOutputWithContext(ctx context.Context) WlanDynamicVlanOutput {
	return o
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return o.ToWlanDynamicVlanPtrOutputWithContext(context.Background())
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanDynamicVlan) *WlanDynamicVlan {
		return &v
	}).(WlanDynamicVlanPtrOutput)
}

// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
func (o WlanDynamicVlanOutput) DefaultVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanDynamicVlan) []string { return v.DefaultVlanIds }).(pulumi.StringArrayOutput)
}

// whether to enable dynamic vlan
func (o WlanDynamicVlanOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDynamicVlan) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// vlan_ids to be locally bridged
func (o WlanDynamicVlanOutput) LocalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanDynamicVlan) []string { return v.LocalVlanIds }).(pulumi.StringArrayOutput)
}

// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
func (o WlanDynamicVlanOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicVlan) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
//   - if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
//   - if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
func (o WlanDynamicVlanOutput) Vlans() pulumi.StringMapOutput {
	return o.ApplyT(func(v WlanDynamicVlan) map[string]string { return v.Vlans }).(pulumi.StringMapOutput)
}

type WlanDynamicVlanPtrOutput struct{ *pulumi.OutputState }

func (WlanDynamicVlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicVlan)(nil)).Elem()
}

func (o WlanDynamicVlanPtrOutput) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return o
}

func (o WlanDynamicVlanPtrOutput) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return o
}

func (o WlanDynamicVlanPtrOutput) Elem() WlanDynamicVlanOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) WlanDynamicVlan {
		if v != nil {
			return *v
		}
		var ret WlanDynamicVlan
		return ret
	}).(WlanDynamicVlanOutput)
}

// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
func (o WlanDynamicVlanPtrOutput) DefaultVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) []string {
		if v == nil {
			return nil
		}
		return v.DefaultVlanIds
	}).(pulumi.StringArrayOutput)
}

// whether to enable dynamic vlan
func (o WlanDynamicVlanPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// vlan_ids to be locally bridged
func (o WlanDynamicVlanPtrOutput) LocalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) []string {
		if v == nil {
			return nil
		}
		return v.LocalVlanIds
	}).(pulumi.StringArrayOutput)
}

// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
func (o WlanDynamicVlanPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
//   - if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
//   - if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
func (o WlanDynamicVlanPtrOutput) Vlans() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) map[string]string {
		if v == nil {
			return nil
		}
		return v.Vlans
	}).(pulumi.StringMapOutput)
}

type WlanHotspot20 struct {
	DomainNames []string `pulumi:"domainNames"`
	// whether to enable hotspot 2.0 config
	Enabled   *bool    `pulumi:"enabled"`
	NaiRealms []string `pulumi:"naiRealms"`
	// list of operators to support
	Operators []string `pulumi:"operators"`
	Rcois     []string `pulumi:"rcois"`
	// venue name, default is site name
	VenueName *string `pulumi:"venueName"`
}

// WlanHotspot20Input is an input type that accepts WlanHotspot20Args and WlanHotspot20Output values.
// You can construct a concrete instance of `WlanHotspot20Input` via:
//
//	WlanHotspot20Args{...}
type WlanHotspot20Input interface {
	pulumi.Input

	ToWlanHotspot20Output() WlanHotspot20Output
	ToWlanHotspot20OutputWithContext(context.Context) WlanHotspot20Output
}

type WlanHotspot20Args struct {
	DomainNames pulumi.StringArrayInput `pulumi:"domainNames"`
	// whether to enable hotspot 2.0 config
	Enabled   pulumi.BoolPtrInput     `pulumi:"enabled"`
	NaiRealms pulumi.StringArrayInput `pulumi:"naiRealms"`
	// list of operators to support
	Operators pulumi.StringArrayInput `pulumi:"operators"`
	Rcois     pulumi.StringArrayInput `pulumi:"rcois"`
	// venue name, default is site name
	VenueName pulumi.StringPtrInput `pulumi:"venueName"`
}

func (WlanHotspot20Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanHotspot20)(nil)).Elem()
}

func (i WlanHotspot20Args) ToWlanHotspot20Output() WlanHotspot20Output {
	return i.ToWlanHotspot20OutputWithContext(context.Background())
}

func (i WlanHotspot20Args) ToWlanHotspot20OutputWithContext(ctx context.Context) WlanHotspot20Output {
	return pulumi.ToOutputWithContext(ctx, i).(WlanHotspot20Output)
}

func (i WlanHotspot20Args) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return i.ToWlanHotspot20PtrOutputWithContext(context.Background())
}

func (i WlanHotspot20Args) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanHotspot20Output).ToWlanHotspot20PtrOutputWithContext(ctx)
}

// WlanHotspot20PtrInput is an input type that accepts WlanHotspot20Args, WlanHotspot20Ptr and WlanHotspot20PtrOutput values.
// You can construct a concrete instance of `WlanHotspot20PtrInput` via:
//
//	        WlanHotspot20Args{...}
//
//	or:
//
//	        nil
type WlanHotspot20PtrInput interface {
	pulumi.Input

	ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput
	ToWlanHotspot20PtrOutputWithContext(context.Context) WlanHotspot20PtrOutput
}

type wlanHotspot20PtrType WlanHotspot20Args

func WlanHotspot20Ptr(v *WlanHotspot20Args) WlanHotspot20PtrInput {
	return (*wlanHotspot20PtrType)(v)
}

func (*wlanHotspot20PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanHotspot20)(nil)).Elem()
}

func (i *wlanHotspot20PtrType) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return i.ToWlanHotspot20PtrOutputWithContext(context.Background())
}

func (i *wlanHotspot20PtrType) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanHotspot20PtrOutput)
}

type WlanHotspot20Output struct{ *pulumi.OutputState }

func (WlanHotspot20Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanHotspot20)(nil)).Elem()
}

func (o WlanHotspot20Output) ToWlanHotspot20Output() WlanHotspot20Output {
	return o
}

func (o WlanHotspot20Output) ToWlanHotspot20OutputWithContext(ctx context.Context) WlanHotspot20Output {
	return o
}

func (o WlanHotspot20Output) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return o.ToWlanHotspot20PtrOutputWithContext(context.Background())
}

func (o WlanHotspot20Output) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanHotspot20) *WlanHotspot20 {
		return &v
	}).(WlanHotspot20PtrOutput)
}

func (o WlanHotspot20Output) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// whether to enable hotspot 2.0 config
func (o WlanHotspot20Output) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanHotspot20) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanHotspot20Output) NaiRealms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.NaiRealms }).(pulumi.StringArrayOutput)
}

// list of operators to support
func (o WlanHotspot20Output) Operators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.Operators }).(pulumi.StringArrayOutput)
}

func (o WlanHotspot20Output) Rcois() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.Rcois }).(pulumi.StringArrayOutput)
}

// venue name, default is site name
func (o WlanHotspot20Output) VenueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanHotspot20) *string { return v.VenueName }).(pulumi.StringPtrOutput)
}

type WlanHotspot20PtrOutput struct{ *pulumi.OutputState }

func (WlanHotspot20PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanHotspot20)(nil)).Elem()
}

func (o WlanHotspot20PtrOutput) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return o
}

func (o WlanHotspot20PtrOutput) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return o
}

func (o WlanHotspot20PtrOutput) Elem() WlanHotspot20Output {
	return o.ApplyT(func(v *WlanHotspot20) WlanHotspot20 {
		if v != nil {
			return *v
		}
		var ret WlanHotspot20
		return ret
	}).(WlanHotspot20Output)
}

func (o WlanHotspot20PtrOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.DomainNames
	}).(pulumi.StringArrayOutput)
}

// whether to enable hotspot 2.0 config
func (o WlanHotspot20PtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanHotspot20) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanHotspot20PtrOutput) NaiRealms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.NaiRealms
	}).(pulumi.StringArrayOutput)
}

// list of operators to support
func (o WlanHotspot20PtrOutput) Operators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.Operators
	}).(pulumi.StringArrayOutput)
}

func (o WlanHotspot20PtrOutput) Rcois() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.Rcois
	}).(pulumi.StringArrayOutput)
}

// venue name, default is site name
func (o WlanHotspot20PtrOutput) VenueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanHotspot20) *string {
		if v == nil {
			return nil
		}
		return v.VenueName
	}).(pulumi.StringPtrOutput)
}

type WlanInjectDhcpOption82 struct {
	CircuitId *string `pulumi:"circuitId"`
	// whether to inject option 82 when forwarding DHCP packets
	Enabled *bool `pulumi:"enabled"`
}

// WlanInjectDhcpOption82Input is an input type that accepts WlanInjectDhcpOption82Args and WlanInjectDhcpOption82Output values.
// You can construct a concrete instance of `WlanInjectDhcpOption82Input` via:
//
//	WlanInjectDhcpOption82Args{...}
type WlanInjectDhcpOption82Input interface {
	pulumi.Input

	ToWlanInjectDhcpOption82Output() WlanInjectDhcpOption82Output
	ToWlanInjectDhcpOption82OutputWithContext(context.Context) WlanInjectDhcpOption82Output
}

type WlanInjectDhcpOption82Args struct {
	CircuitId pulumi.StringPtrInput `pulumi:"circuitId"`
	// whether to inject option 82 when forwarding DHCP packets
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (WlanInjectDhcpOption82Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanInjectDhcpOption82)(nil)).Elem()
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82Output() WlanInjectDhcpOption82Output {
	return i.ToWlanInjectDhcpOption82OutputWithContext(context.Background())
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82OutputWithContext(ctx context.Context) WlanInjectDhcpOption82Output {
	return pulumi.ToOutputWithContext(ctx, i).(WlanInjectDhcpOption82Output)
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return i.ToWlanInjectDhcpOption82PtrOutputWithContext(context.Background())
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanInjectDhcpOption82Output).ToWlanInjectDhcpOption82PtrOutputWithContext(ctx)
}

// WlanInjectDhcpOption82PtrInput is an input type that accepts WlanInjectDhcpOption82Args, WlanInjectDhcpOption82Ptr and WlanInjectDhcpOption82PtrOutput values.
// You can construct a concrete instance of `WlanInjectDhcpOption82PtrInput` via:
//
//	        WlanInjectDhcpOption82Args{...}
//
//	or:
//
//	        nil
type WlanInjectDhcpOption82PtrInput interface {
	pulumi.Input

	ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput
	ToWlanInjectDhcpOption82PtrOutputWithContext(context.Context) WlanInjectDhcpOption82PtrOutput
}

type wlanInjectDhcpOption82PtrType WlanInjectDhcpOption82Args

func WlanInjectDhcpOption82Ptr(v *WlanInjectDhcpOption82Args) WlanInjectDhcpOption82PtrInput {
	return (*wlanInjectDhcpOption82PtrType)(v)
}

func (*wlanInjectDhcpOption82PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanInjectDhcpOption82)(nil)).Elem()
}

func (i *wlanInjectDhcpOption82PtrType) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return i.ToWlanInjectDhcpOption82PtrOutputWithContext(context.Background())
}

func (i *wlanInjectDhcpOption82PtrType) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanInjectDhcpOption82PtrOutput)
}

type WlanInjectDhcpOption82Output struct{ *pulumi.OutputState }

func (WlanInjectDhcpOption82Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanInjectDhcpOption82)(nil)).Elem()
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82Output() WlanInjectDhcpOption82Output {
	return o
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82OutputWithContext(ctx context.Context) WlanInjectDhcpOption82Output {
	return o
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return o.ToWlanInjectDhcpOption82PtrOutputWithContext(context.Background())
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanInjectDhcpOption82) *WlanInjectDhcpOption82 {
		return &v
	}).(WlanInjectDhcpOption82PtrOutput)
}

func (o WlanInjectDhcpOption82Output) CircuitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanInjectDhcpOption82) *string { return v.CircuitId }).(pulumi.StringPtrOutput)
}

// whether to inject option 82 when forwarding DHCP packets
func (o WlanInjectDhcpOption82Output) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanInjectDhcpOption82) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type WlanInjectDhcpOption82PtrOutput struct{ *pulumi.OutputState }

func (WlanInjectDhcpOption82PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanInjectDhcpOption82)(nil)).Elem()
}

func (o WlanInjectDhcpOption82PtrOutput) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return o
}

func (o WlanInjectDhcpOption82PtrOutput) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return o
}

func (o WlanInjectDhcpOption82PtrOutput) Elem() WlanInjectDhcpOption82Output {
	return o.ApplyT(func(v *WlanInjectDhcpOption82) WlanInjectDhcpOption82 {
		if v != nil {
			return *v
		}
		var ret WlanInjectDhcpOption82
		return ret
	}).(WlanInjectDhcpOption82Output)
}

func (o WlanInjectDhcpOption82PtrOutput) CircuitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanInjectDhcpOption82) *string {
		if v == nil {
			return nil
		}
		return v.CircuitId
	}).(pulumi.StringPtrOutput)
}

// whether to inject option 82 when forwarding DHCP packets
func (o WlanInjectDhcpOption82PtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanInjectDhcpOption82) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type WlanMistNac struct {
	// when enabled:
	//   * `authServers` is ignored
	//   * `acctServers` is ignored
	//   * `auth_servers_*` are ignored
	//   * `coaServers` is ignored
	//   * `radsec` is ignored
	//   * `coaEnabled` is assumed'
	Enabled *bool `pulumi:"enabled"`
}

// WlanMistNacInput is an input type that accepts WlanMistNacArgs and WlanMistNacOutput values.
// You can construct a concrete instance of `WlanMistNacInput` via:
//
//	WlanMistNacArgs{...}
type WlanMistNacInput interface {
	pulumi.Input

	ToWlanMistNacOutput() WlanMistNacOutput
	ToWlanMistNacOutputWithContext(context.Context) WlanMistNacOutput
}

type WlanMistNacArgs struct {
	// when enabled:
	//   * `authServers` is ignored
	//   * `acctServers` is ignored
	//   * `auth_servers_*` are ignored
	//   * `coaServers` is ignored
	//   * `radsec` is ignored
	//   * `coaEnabled` is assumed'
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (WlanMistNacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanMistNac)(nil)).Elem()
}

func (i WlanMistNacArgs) ToWlanMistNacOutput() WlanMistNacOutput {
	return i.ToWlanMistNacOutputWithContext(context.Background())
}

func (i WlanMistNacArgs) ToWlanMistNacOutputWithContext(ctx context.Context) WlanMistNacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanMistNacOutput)
}

func (i WlanMistNacArgs) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return i.ToWlanMistNacPtrOutputWithContext(context.Background())
}

func (i WlanMistNacArgs) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanMistNacOutput).ToWlanMistNacPtrOutputWithContext(ctx)
}

// WlanMistNacPtrInput is an input type that accepts WlanMistNacArgs, WlanMistNacPtr and WlanMistNacPtrOutput values.
// You can construct a concrete instance of `WlanMistNacPtrInput` via:
//
//	        WlanMistNacArgs{...}
//
//	or:
//
//	        nil
type WlanMistNacPtrInput interface {
	pulumi.Input

	ToWlanMistNacPtrOutput() WlanMistNacPtrOutput
	ToWlanMistNacPtrOutputWithContext(context.Context) WlanMistNacPtrOutput
}

type wlanMistNacPtrType WlanMistNacArgs

func WlanMistNacPtr(v *WlanMistNacArgs) WlanMistNacPtrInput {
	return (*wlanMistNacPtrType)(v)
}

func (*wlanMistNacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanMistNac)(nil)).Elem()
}

func (i *wlanMistNacPtrType) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return i.ToWlanMistNacPtrOutputWithContext(context.Background())
}

func (i *wlanMistNacPtrType) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanMistNacPtrOutput)
}

type WlanMistNacOutput struct{ *pulumi.OutputState }

func (WlanMistNacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanMistNac)(nil)).Elem()
}

func (o WlanMistNacOutput) ToWlanMistNacOutput() WlanMistNacOutput {
	return o
}

func (o WlanMistNacOutput) ToWlanMistNacOutputWithContext(ctx context.Context) WlanMistNacOutput {
	return o
}

func (o WlanMistNacOutput) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return o.ToWlanMistNacPtrOutputWithContext(context.Background())
}

func (o WlanMistNacOutput) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanMistNac) *WlanMistNac {
		return &v
	}).(WlanMistNacPtrOutput)
}

// when enabled:
//   - `authServers` is ignored
//   - `acctServers` is ignored
//   - `auth_servers_*` are ignored
//   - `coaServers` is ignored
//   - `radsec` is ignored
//   - `coaEnabled` is assumed'
func (o WlanMistNacOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanMistNac) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type WlanMistNacPtrOutput struct{ *pulumi.OutputState }

func (WlanMistNacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanMistNac)(nil)).Elem()
}

func (o WlanMistNacPtrOutput) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return o
}

func (o WlanMistNacPtrOutput) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return o
}

func (o WlanMistNacPtrOutput) Elem() WlanMistNacOutput {
	return o.ApplyT(func(v *WlanMistNac) WlanMistNac {
		if v != nil {
			return *v
		}
		var ret WlanMistNac
		return ret
	}).(WlanMistNacOutput)
}

// when enabled:
//   - `authServers` is ignored
//   - `acctServers` is ignored
//   - `auth_servers_*` are ignored
//   - `coaServers` is ignored
//   - `radsec` is ignored
//   - `coaEnabled` is assumed'
func (o WlanMistNacPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanMistNac) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type WlanPortal struct {
	// amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
	AmazonClientId *string `pulumi:"amazonClientId"`
	// amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
	AmazonClientSecret *string `pulumi:"amazonClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	AmazonEmailDomains []string `pulumi:"amazonEmailDomains"`
	// whether amazon is enabled as a login method
	AmazonEnabled *bool `pulumi:"amazonEnabled"`
	// interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
	AmazonExpire *float64 `pulumi:"amazonExpire"`
	// authentication scheme. enum: `external`, `none`, `sso`
	Auth *string `pulumi:"auth"`
	// Required if `azureEnabled`==`true`.
	// Azure active directory app client id
	AzureClientId *string `pulumi:"azureClientId"`
	// Required if `azureEnabled`==`true`.
	// Azure active directory app client secret
	AzureClientSecret *string `pulumi:"azureClientSecret"`
	// whether Azure Active Directory is enabled as a login method
	AzureEnabled *bool `pulumi:"azureEnabled"`
	// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
	AzureExpire *float64 `pulumi:"azureExpire"`
	// Required if `azureEnabled`==`true`.
	// Azure active directory tenant id.
	AzureTenantId *string `pulumi:"azureTenantId"`
	// when `smsProvider`==`broadnet`
	BroadnetPassword *string `pulumi:"broadnetPassword"`
	// when `smsProvider`==`broadnet`
	BroadnetSid *string `pulumi:"broadnetSid"`
	// when `smsProvider`==`broadnet`
	BroadnetUserId *string `pulumi:"broadnetUserId"`
	// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
	BypassWhenCloudDown *bool `pulumi:"bypassWhenCloudDown"`
	// when `smsProvider`==`clickatell`
	ClickatellApiKey *string `pulumi:"clickatellApiKey"`
	// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
	CrossSite *bool `pulumi:"crossSite"`
	// whether email (access code verification) is enabled as a login method
	EmailEnabled *bool `pulumi:"emailEnabled"`
	// whether guest portal is enabled
	Enabled *bool `pulumi:"enabled"`
	// how long to remain authorized, in minutes
	Expire *float64 `pulumi:"expire"`
	// external portal URL (e.g. https://host/url) where we can append our query parameters to
	ExternalPortalUrl *string `pulumi:"externalPortalUrl"`
	// Required if `facebookEnabled`==`true`.
	// Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
	FacebookClientId *string `pulumi:"facebookClientId"`
	// Required if `facebookEnabled`==`true`.
	// Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
	FacebookClientSecret *string `pulumi:"facebookClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	FacebookEmailDomains []string `pulumi:"facebookEmailDomains"`
	// whether facebook is enabled as a login method
	FacebookEnabled *bool `pulumi:"facebookEnabled"`
	// interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
	FacebookExpire *float64 `pulumi:"facebookExpire"`
	// whether to forward the user to another URL after authorized
	Forward *bool `pulumi:"forward"`
	// the URL to forward the user to
	ForwardUrl *string `pulumi:"forwardUrl"`
	// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
	GoogleClientId *string `pulumi:"googleClientId"`
	// Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
	GoogleClientSecret *string `pulumi:"googleClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	GoogleEmailDomains []string `pulumi:"googleEmailDomains"`
	// whether google is enabled as login method
	GoogleEnabled *bool `pulumi:"googleEnabled"`
	// interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
	GoogleExpire *float64 `pulumi:"googleExpire"`
	// when `smsProvider`==`gupshup`
	GupshupPassword *string `pulumi:"gupshupPassword"`
	// when `smsProvider`==`gupshup`
	GupshupUserid *string `pulumi:"gupshupUserid"`
	// microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
	MicrosoftClientId *string `pulumi:"microsoftClientId"`
	// microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
	MicrosoftClientSecret *string `pulumi:"microsoftClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	MicrosoftEmailDomains []string `pulumi:"microsoftEmailDomains"`
	// whether microsoft 365 is enabled as a login method
	MicrosoftEnabled *bool `pulumi:"microsoftEnabled"`
	// interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
	MicrosoftExpire *float64 `pulumi:"microsoftExpire"`
	// whether password is enabled
	PassphraseEnabled *bool `pulumi:"passphraseEnabled"`
	// interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
	PassphraseExpire *float64 `pulumi:"passphraseExpire"`
	// passphrase
	Password *string `pulumi:"password"`
	// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
	PredefinedSponsorsEnabled *bool `pulumi:"predefinedSponsorsEnabled"`
	Privacy                   *bool `pulumi:"privacy"`
	// when `smsProvider`==`puzzel`
	PuzzelPassword *string `pulumi:"puzzelPassword"`
	// when `smsProvider`==`puzzel`
	PuzzelServiceId *string `pulumi:"puzzelServiceId"`
	// when `smsProvider`==`puzzel`
	PuzzelUsername *string `pulumi:"puzzelUsername"`
	// whether sms is enabled as a login method
	SmsEnabled *bool `pulumi:"smsEnabled"`
	// interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
	SmsExpire        *float64 `pulumi:"smsExpire"`
	SmsMessageFormat *string  `pulumi:"smsMessageFormat"`
	// enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
	SmsProvider *string `pulumi:"smsProvider"`
	// whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
	SponsorAutoApprove *bool `pulumi:"sponsorAutoApprove"`
	// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
	SponsorEmailDomains []string `pulumi:"sponsorEmailDomains"`
	// whether sponsor is enabled
	SponsorEnabled *bool `pulumi:"sponsorEnabled"`
	// interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
	SponsorExpire *float64 `pulumi:"sponsorExpire"`
	// how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
	SponsorLinkValidityDuration *int `pulumi:"sponsorLinkValidityDuration"`
	// whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
	SponsorNotifyAll *bool `pulumi:"sponsorNotifyAll"`
	// if enabled, guest will get email about sponsor's action (approve/deny)
	SponsorStatusNotify *bool `pulumi:"sponsorStatusNotify"`
	// object of allowed sponsors email with name. Required if `sponsorEnabled` is `true` and `sponsorEmailDomains` is empty.
	// Property key is the sponsor email, Property value is the sponsor name
	Sponsors map[string]string `pulumi:"sponsors"`
	// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
	SsoDefaultRole *string `pulumi:"ssoDefaultRole"`
	SsoForcedRole  *string `pulumi:"ssoForcedRole"`
	// IDP Cert (used to verify the signed response)
	SsoIdpCert *string `pulumi:"ssoIdpCert"`
	// signing algorithm for SAML Assertion
	SsoIdpSignAlgo *string `pulumi:"ssoIdpSignAlgo"`
	// IDP Single-Sign-On URL
	SsoIdpSsoUrl *string `pulumi:"ssoIdpSsoUrl"`
	// IDP issuer URL
	SsoIssuer *string `pulumi:"ssoIssuer"`
	// enum: `email`, `unspecified`
	SsoNameidFormat *string `pulumi:"ssoNameidFormat"`
	// when `smsProvider`==`telstra`, Client ID provided by Telstra
	TelstraClientId *string `pulumi:"telstraClientId"`
	// when `smsProvider`==`telstra`, Client secret provided by Telstra
	TelstraClientSecret *string `pulumi:"telstraClientSecret"`
	// when `smsProvider`==`twilio`, Auth token account with twilio account
	TwilioAuthToken *string `pulumi:"twilioAuthToken"`
	// when `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
	TwilioPhoneNumber *string `pulumi:"twilioPhoneNumber"`
	// when `smsProvider`==`twilio`, Account SID provided by Twilio
	TwilioSid *string `pulumi:"twilioSid"`
}

// WlanPortalInput is an input type that accepts WlanPortalArgs and WlanPortalOutput values.
// You can construct a concrete instance of `WlanPortalInput` via:
//
//	WlanPortalArgs{...}
type WlanPortalInput interface {
	pulumi.Input

	ToWlanPortalOutput() WlanPortalOutput
	ToWlanPortalOutputWithContext(context.Context) WlanPortalOutput
}

type WlanPortalArgs struct {
	// amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
	AmazonClientId pulumi.StringPtrInput `pulumi:"amazonClientId"`
	// amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
	AmazonClientSecret pulumi.StringPtrInput `pulumi:"amazonClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	AmazonEmailDomains pulumi.StringArrayInput `pulumi:"amazonEmailDomains"`
	// whether amazon is enabled as a login method
	AmazonEnabled pulumi.BoolPtrInput `pulumi:"amazonEnabled"`
	// interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
	AmazonExpire pulumi.Float64PtrInput `pulumi:"amazonExpire"`
	// authentication scheme. enum: `external`, `none`, `sso`
	Auth pulumi.StringPtrInput `pulumi:"auth"`
	// Required if `azureEnabled`==`true`.
	// Azure active directory app client id
	AzureClientId pulumi.StringPtrInput `pulumi:"azureClientId"`
	// Required if `azureEnabled`==`true`.
	// Azure active directory app client secret
	AzureClientSecret pulumi.StringPtrInput `pulumi:"azureClientSecret"`
	// whether Azure Active Directory is enabled as a login method
	AzureEnabled pulumi.BoolPtrInput `pulumi:"azureEnabled"`
	// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
	AzureExpire pulumi.Float64PtrInput `pulumi:"azureExpire"`
	// Required if `azureEnabled`==`true`.
	// Azure active directory tenant id.
	AzureTenantId pulumi.StringPtrInput `pulumi:"azureTenantId"`
	// when `smsProvider`==`broadnet`
	BroadnetPassword pulumi.StringPtrInput `pulumi:"broadnetPassword"`
	// when `smsProvider`==`broadnet`
	BroadnetSid pulumi.StringPtrInput `pulumi:"broadnetSid"`
	// when `smsProvider`==`broadnet`
	BroadnetUserId pulumi.StringPtrInput `pulumi:"broadnetUserId"`
	// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
	BypassWhenCloudDown pulumi.BoolPtrInput `pulumi:"bypassWhenCloudDown"`
	// when `smsProvider`==`clickatell`
	ClickatellApiKey pulumi.StringPtrInput `pulumi:"clickatellApiKey"`
	// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
	CrossSite pulumi.BoolPtrInput `pulumi:"crossSite"`
	// whether email (access code verification) is enabled as a login method
	EmailEnabled pulumi.BoolPtrInput `pulumi:"emailEnabled"`
	// whether guest portal is enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// how long to remain authorized, in minutes
	Expire pulumi.Float64PtrInput `pulumi:"expire"`
	// external portal URL (e.g. https://host/url) where we can append our query parameters to
	ExternalPortalUrl pulumi.StringPtrInput `pulumi:"externalPortalUrl"`
	// Required if `facebookEnabled`==`true`.
	// Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
	FacebookClientId pulumi.StringPtrInput `pulumi:"facebookClientId"`
	// Required if `facebookEnabled`==`true`.
	// Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
	FacebookClientSecret pulumi.StringPtrInput `pulumi:"facebookClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	FacebookEmailDomains pulumi.StringArrayInput `pulumi:"facebookEmailDomains"`
	// whether facebook is enabled as a login method
	FacebookEnabled pulumi.BoolPtrInput `pulumi:"facebookEnabled"`
	// interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
	FacebookExpire pulumi.Float64PtrInput `pulumi:"facebookExpire"`
	// whether to forward the user to another URL after authorized
	Forward pulumi.BoolPtrInput `pulumi:"forward"`
	// the URL to forward the user to
	ForwardUrl pulumi.StringPtrInput `pulumi:"forwardUrl"`
	// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
	GoogleClientId pulumi.StringPtrInput `pulumi:"googleClientId"`
	// Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
	GoogleClientSecret pulumi.StringPtrInput `pulumi:"googleClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	GoogleEmailDomains pulumi.StringArrayInput `pulumi:"googleEmailDomains"`
	// whether google is enabled as login method
	GoogleEnabled pulumi.BoolPtrInput `pulumi:"googleEnabled"`
	// interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
	GoogleExpire pulumi.Float64PtrInput `pulumi:"googleExpire"`
	// when `smsProvider`==`gupshup`
	GupshupPassword pulumi.StringPtrInput `pulumi:"gupshupPassword"`
	// when `smsProvider`==`gupshup`
	GupshupUserid pulumi.StringPtrInput `pulumi:"gupshupUserid"`
	// microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
	MicrosoftClientId pulumi.StringPtrInput `pulumi:"microsoftClientId"`
	// microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
	MicrosoftClientSecret pulumi.StringPtrInput `pulumi:"microsoftClientSecret"`
	// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	MicrosoftEmailDomains pulumi.StringArrayInput `pulumi:"microsoftEmailDomains"`
	// whether microsoft 365 is enabled as a login method
	MicrosoftEnabled pulumi.BoolPtrInput `pulumi:"microsoftEnabled"`
	// interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
	MicrosoftExpire pulumi.Float64PtrInput `pulumi:"microsoftExpire"`
	// whether password is enabled
	PassphraseEnabled pulumi.BoolPtrInput `pulumi:"passphraseEnabled"`
	// interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
	PassphraseExpire pulumi.Float64PtrInput `pulumi:"passphraseExpire"`
	// passphrase
	Password pulumi.StringPtrInput `pulumi:"password"`
	// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
	PredefinedSponsorsEnabled pulumi.BoolPtrInput `pulumi:"predefinedSponsorsEnabled"`
	Privacy                   pulumi.BoolPtrInput `pulumi:"privacy"`
	// when `smsProvider`==`puzzel`
	PuzzelPassword pulumi.StringPtrInput `pulumi:"puzzelPassword"`
	// when `smsProvider`==`puzzel`
	PuzzelServiceId pulumi.StringPtrInput `pulumi:"puzzelServiceId"`
	// when `smsProvider`==`puzzel`
	PuzzelUsername pulumi.StringPtrInput `pulumi:"puzzelUsername"`
	// whether sms is enabled as a login method
	SmsEnabled pulumi.BoolPtrInput `pulumi:"smsEnabled"`
	// interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
	SmsExpire        pulumi.Float64PtrInput `pulumi:"smsExpire"`
	SmsMessageFormat pulumi.StringPtrInput  `pulumi:"smsMessageFormat"`
	// enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
	SmsProvider pulumi.StringPtrInput `pulumi:"smsProvider"`
	// whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
	SponsorAutoApprove pulumi.BoolPtrInput `pulumi:"sponsorAutoApprove"`
	// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
	SponsorEmailDomains pulumi.StringArrayInput `pulumi:"sponsorEmailDomains"`
	// whether sponsor is enabled
	SponsorEnabled pulumi.BoolPtrInput `pulumi:"sponsorEnabled"`
	// interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
	SponsorExpire pulumi.Float64PtrInput `pulumi:"sponsorExpire"`
	// how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
	SponsorLinkValidityDuration pulumi.IntPtrInput `pulumi:"sponsorLinkValidityDuration"`
	// whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
	SponsorNotifyAll pulumi.BoolPtrInput `pulumi:"sponsorNotifyAll"`
	// if enabled, guest will get email about sponsor's action (approve/deny)
	SponsorStatusNotify pulumi.BoolPtrInput `pulumi:"sponsorStatusNotify"`
	// object of allowed sponsors email with name. Required if `sponsorEnabled` is `true` and `sponsorEmailDomains` is empty.
	// Property key is the sponsor email, Property value is the sponsor name
	Sponsors pulumi.StringMapInput `pulumi:"sponsors"`
	// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
	SsoDefaultRole pulumi.StringPtrInput `pulumi:"ssoDefaultRole"`
	SsoForcedRole  pulumi.StringPtrInput `pulumi:"ssoForcedRole"`
	// IDP Cert (used to verify the signed response)
	SsoIdpCert pulumi.StringPtrInput `pulumi:"ssoIdpCert"`
	// signing algorithm for SAML Assertion
	SsoIdpSignAlgo pulumi.StringPtrInput `pulumi:"ssoIdpSignAlgo"`
	// IDP Single-Sign-On URL
	SsoIdpSsoUrl pulumi.StringPtrInput `pulumi:"ssoIdpSsoUrl"`
	// IDP issuer URL
	SsoIssuer pulumi.StringPtrInput `pulumi:"ssoIssuer"`
	// enum: `email`, `unspecified`
	SsoNameidFormat pulumi.StringPtrInput `pulumi:"ssoNameidFormat"`
	// when `smsProvider`==`telstra`, Client ID provided by Telstra
	TelstraClientId pulumi.StringPtrInput `pulumi:"telstraClientId"`
	// when `smsProvider`==`telstra`, Client secret provided by Telstra
	TelstraClientSecret pulumi.StringPtrInput `pulumi:"telstraClientSecret"`
	// when `smsProvider`==`twilio`, Auth token account with twilio account
	TwilioAuthToken pulumi.StringPtrInput `pulumi:"twilioAuthToken"`
	// when `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
	TwilioPhoneNumber pulumi.StringPtrInput `pulumi:"twilioPhoneNumber"`
	// when `smsProvider`==`twilio`, Account SID provided by Twilio
	TwilioSid pulumi.StringPtrInput `pulumi:"twilioSid"`
}

func (WlanPortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortal)(nil)).Elem()
}

func (i WlanPortalArgs) ToWlanPortalOutput() WlanPortalOutput {
	return i.ToWlanPortalOutputWithContext(context.Background())
}

func (i WlanPortalArgs) ToWlanPortalOutputWithContext(ctx context.Context) WlanPortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalOutput)
}

func (i WlanPortalArgs) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return i.ToWlanPortalPtrOutputWithContext(context.Background())
}

func (i WlanPortalArgs) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalOutput).ToWlanPortalPtrOutputWithContext(ctx)
}

// WlanPortalPtrInput is an input type that accepts WlanPortalArgs, WlanPortalPtr and WlanPortalPtrOutput values.
// You can construct a concrete instance of `WlanPortalPtrInput` via:
//
//	        WlanPortalArgs{...}
//
//	or:
//
//	        nil
type WlanPortalPtrInput interface {
	pulumi.Input

	ToWlanPortalPtrOutput() WlanPortalPtrOutput
	ToWlanPortalPtrOutputWithContext(context.Context) WlanPortalPtrOutput
}

type wlanPortalPtrType WlanPortalArgs

func WlanPortalPtr(v *WlanPortalArgs) WlanPortalPtrInput {
	return (*wlanPortalPtrType)(v)
}

func (*wlanPortalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanPortal)(nil)).Elem()
}

func (i *wlanPortalPtrType) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return i.ToWlanPortalPtrOutputWithContext(context.Background())
}

func (i *wlanPortalPtrType) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalPtrOutput)
}

type WlanPortalOutput struct{ *pulumi.OutputState }

func (WlanPortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortal)(nil)).Elem()
}

func (o WlanPortalOutput) ToWlanPortalOutput() WlanPortalOutput {
	return o
}

func (o WlanPortalOutput) ToWlanPortalOutputWithContext(ctx context.Context) WlanPortalOutput {
	return o
}

func (o WlanPortalOutput) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return o.ToWlanPortalPtrOutputWithContext(context.Background())
}

func (o WlanPortalOutput) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanPortal) *WlanPortal {
		return &v
	}).(WlanPortalPtrOutput)
}

// amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) AmazonClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AmazonClientId }).(pulumi.StringPtrOutput)
}

// amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) AmazonClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AmazonClientSecret }).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) AmazonEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.AmazonEmailDomains }).(pulumi.StringArrayOutput)
}

// whether amazon is enabled as a login method
func (o WlanPortalOutput) AmazonEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.AmazonEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) AmazonExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.AmazonExpire }).(pulumi.Float64PtrOutput)
}

// authentication scheme. enum: `external`, `none`, `sso`
func (o WlanPortalOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.Auth }).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`.
// Azure active directory app client id
func (o WlanPortalOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AzureClientId }).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`.
// Azure active directory app client secret
func (o WlanPortalOutput) AzureClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AzureClientSecret }).(pulumi.StringPtrOutput)
}

// whether Azure Active Directory is enabled as a login method
func (o WlanPortalOutput) AzureEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.AzureEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) AzureExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.AzureExpire }).(pulumi.Float64PtrOutput)
}

// Required if `azureEnabled`==`true`.
// Azure active directory tenant id.
func (o WlanPortalOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AzureTenantId }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`broadnet`
func (o WlanPortalOutput) BroadnetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.BroadnetPassword }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`broadnet`
func (o WlanPortalOutput) BroadnetSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.BroadnetSid }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`broadnet`
func (o WlanPortalOutput) BroadnetUserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.BroadnetUserId }).(pulumi.StringPtrOutput)
}

// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
func (o WlanPortalOutput) BypassWhenCloudDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.BypassWhenCloudDown }).(pulumi.BoolPtrOutput)
}

// when `smsProvider`==`clickatell`
func (o WlanPortalOutput) ClickatellApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.ClickatellApiKey }).(pulumi.StringPtrOutput)
}

// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
func (o WlanPortalOutput) CrossSite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.CrossSite }).(pulumi.BoolPtrOutput)
}

// whether email (access code verification) is enabled as a login method
func (o WlanPortalOutput) EmailEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.EmailEnabled }).(pulumi.BoolPtrOutput)
}

// whether guest portal is enabled
func (o WlanPortalOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// how long to remain authorized, in minutes
func (o WlanPortalOutput) Expire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.Expire }).(pulumi.Float64PtrOutput)
}

// external portal URL (e.g. https://host/url) where we can append our query parameters to
func (o WlanPortalOutput) ExternalPortalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.ExternalPortalUrl }).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`.
// Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) FacebookClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.FacebookClientId }).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`.
// Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) FacebookClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.FacebookClientSecret }).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) FacebookEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.FacebookEmailDomains }).(pulumi.StringArrayOutput)
}

// whether facebook is enabled as a login method
func (o WlanPortalOutput) FacebookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.FacebookEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) FacebookExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.FacebookExpire }).(pulumi.Float64PtrOutput)
}

// whether to forward the user to another URL after authorized
func (o WlanPortalOutput) Forward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.Forward }).(pulumi.BoolPtrOutput)
}

// the URL to forward the user to
func (o WlanPortalOutput) ForwardUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.ForwardUrl }).(pulumi.StringPtrOutput)
}

// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) GoogleClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GoogleClientId }).(pulumi.StringPtrOutput)
}

// Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) GoogleClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GoogleClientSecret }).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) GoogleEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.GoogleEmailDomains }).(pulumi.StringArrayOutput)
}

// whether google is enabled as login method
func (o WlanPortalOutput) GoogleEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.GoogleEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) GoogleExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.GoogleExpire }).(pulumi.Float64PtrOutput)
}

// when `smsProvider`==`gupshup`
func (o WlanPortalOutput) GupshupPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GupshupPassword }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`gupshup`
func (o WlanPortalOutput) GupshupUserid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GupshupUserid }).(pulumi.StringPtrOutput)
}

// microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) MicrosoftClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.MicrosoftClientId }).(pulumi.StringPtrOutput)
}

// microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) MicrosoftClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.MicrosoftClientSecret }).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) MicrosoftEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.MicrosoftEmailDomains }).(pulumi.StringArrayOutput)
}

// whether microsoft 365 is enabled as a login method
func (o WlanPortalOutput) MicrosoftEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.MicrosoftEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) MicrosoftExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.MicrosoftExpire }).(pulumi.Float64PtrOutput)
}

// whether password is enabled
func (o WlanPortalOutput) PassphraseEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.PassphraseEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
func (o WlanPortalOutput) PassphraseExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.PassphraseExpire }).(pulumi.Float64PtrOutput)
}

// passphrase
func (o WlanPortalOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
func (o WlanPortalOutput) PredefinedSponsorsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.PredefinedSponsorsEnabled }).(pulumi.BoolPtrOutput)
}

func (o WlanPortalOutput) Privacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.Privacy }).(pulumi.BoolPtrOutput)
}

// when `smsProvider`==`puzzel`
func (o WlanPortalOutput) PuzzelPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.PuzzelPassword }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`puzzel`
func (o WlanPortalOutput) PuzzelServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.PuzzelServiceId }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`puzzel`
func (o WlanPortalOutput) PuzzelUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.PuzzelUsername }).(pulumi.StringPtrOutput)
}

// whether sms is enabled as a login method
func (o WlanPortalOutput) SmsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SmsEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) SmsExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.SmsExpire }).(pulumi.Float64PtrOutput)
}

func (o WlanPortalOutput) SmsMessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SmsMessageFormat }).(pulumi.StringPtrOutput)
}

// enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
func (o WlanPortalOutput) SmsProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SmsProvider }).(pulumi.StringPtrOutput)
}

// whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
func (o WlanPortalOutput) SponsorAutoApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorAutoApprove }).(pulumi.BoolPtrOutput)
}

// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
func (o WlanPortalOutput) SponsorEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.SponsorEmailDomains }).(pulumi.StringArrayOutput)
}

// whether sponsor is enabled
func (o WlanPortalOutput) SponsorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) SponsorExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WlanPortal) *float64 { return v.SponsorExpire }).(pulumi.Float64PtrOutput)
}

// how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
func (o WlanPortalOutput) SponsorLinkValidityDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.SponsorLinkValidityDuration }).(pulumi.IntPtrOutput)
}

// whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
func (o WlanPortalOutput) SponsorNotifyAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorNotifyAll }).(pulumi.BoolPtrOutput)
}

// if enabled, guest will get email about sponsor's action (approve/deny)
func (o WlanPortalOutput) SponsorStatusNotify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorStatusNotify }).(pulumi.BoolPtrOutput)
}

// object of allowed sponsors email with name. Required if `sponsorEnabled` is `true` and `sponsorEmailDomains` is empty.
// Property key is the sponsor email, Property value is the sponsor name
func (o WlanPortalOutput) Sponsors() pulumi.StringMapOutput {
	return o.ApplyT(func(v WlanPortal) map[string]string { return v.Sponsors }).(pulumi.StringMapOutput)
}

// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
func (o WlanPortalOutput) SsoDefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoDefaultRole }).(pulumi.StringPtrOutput)
}

func (o WlanPortalOutput) SsoForcedRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoForcedRole }).(pulumi.StringPtrOutput)
}

// IDP Cert (used to verify the signed response)
func (o WlanPortalOutput) SsoIdpCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIdpCert }).(pulumi.StringPtrOutput)
}

// signing algorithm for SAML Assertion
func (o WlanPortalOutput) SsoIdpSignAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIdpSignAlgo }).(pulumi.StringPtrOutput)
}

// IDP Single-Sign-On URL
func (o WlanPortalOutput) SsoIdpSsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIdpSsoUrl }).(pulumi.StringPtrOutput)
}

// IDP issuer URL
func (o WlanPortalOutput) SsoIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIssuer }).(pulumi.StringPtrOutput)
}

// enum: `email`, `unspecified`
func (o WlanPortalOutput) SsoNameidFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoNameidFormat }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`telstra`, Client ID provided by Telstra
func (o WlanPortalOutput) TelstraClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TelstraClientId }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`telstra`, Client secret provided by Telstra
func (o WlanPortalOutput) TelstraClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TelstraClientSecret }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`twilio`, Auth token account with twilio account
func (o WlanPortalOutput) TwilioAuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TwilioAuthToken }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
func (o WlanPortalOutput) TwilioPhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TwilioPhoneNumber }).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`twilio`, Account SID provided by Twilio
func (o WlanPortalOutput) TwilioSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TwilioSid }).(pulumi.StringPtrOutput)
}

type WlanPortalPtrOutput struct{ *pulumi.OutputState }

func (WlanPortalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanPortal)(nil)).Elem()
}

func (o WlanPortalPtrOutput) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return o
}

func (o WlanPortalPtrOutput) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return o
}

func (o WlanPortalPtrOutput) Elem() WlanPortalOutput {
	return o.ApplyT(func(v *WlanPortal) WlanPortal {
		if v != nil {
			return *v
		}
		var ret WlanPortal
		return ret
	}).(WlanPortalOutput)
}

// amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) AmazonClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AmazonClientId
	}).(pulumi.StringPtrOutput)
}

// amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) AmazonClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AmazonClientSecret
	}).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) AmazonEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.AmazonEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether amazon is enabled as a login method
func (o WlanPortalPtrOutput) AmazonEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.AmazonEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) AmazonExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.AmazonExpire
	}).(pulumi.Float64PtrOutput)
}

// authentication scheme. enum: `external`, `none`, `sso`
func (o WlanPortalPtrOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`.
// Azure active directory app client id
func (o WlanPortalPtrOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientId
	}).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`.
// Azure active directory app client secret
func (o WlanPortalPtrOutput) AzureClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientSecret
	}).(pulumi.StringPtrOutput)
}

// whether Azure Active Directory is enabled as a login method
func (o WlanPortalPtrOutput) AzureEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.AzureEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) AzureExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.AzureExpire
	}).(pulumi.Float64PtrOutput)
}

// Required if `azureEnabled`==`true`.
// Azure active directory tenant id.
func (o WlanPortalPtrOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AzureTenantId
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`broadnet`
func (o WlanPortalPtrOutput) BroadnetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.BroadnetPassword
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`broadnet`
func (o WlanPortalPtrOutput) BroadnetSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.BroadnetSid
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`broadnet`
func (o WlanPortalPtrOutput) BroadnetUserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.BroadnetUserId
	}).(pulumi.StringPtrOutput)
}

// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
func (o WlanPortalPtrOutput) BypassWhenCloudDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.BypassWhenCloudDown
	}).(pulumi.BoolPtrOutput)
}

// when `smsProvider`==`clickatell`
func (o WlanPortalPtrOutput) ClickatellApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.ClickatellApiKey
	}).(pulumi.StringPtrOutput)
}

// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
func (o WlanPortalPtrOutput) CrossSite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.CrossSite
	}).(pulumi.BoolPtrOutput)
}

// whether email (access code verification) is enabled as a login method
func (o WlanPortalPtrOutput) EmailEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.EmailEnabled
	}).(pulumi.BoolPtrOutput)
}

// whether guest portal is enabled
func (o WlanPortalPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// how long to remain authorized, in minutes
func (o WlanPortalPtrOutput) Expire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.Expire
	}).(pulumi.Float64PtrOutput)
}

// external portal URL (e.g. https://host/url) where we can append our query parameters to
func (o WlanPortalPtrOutput) ExternalPortalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.ExternalPortalUrl
	}).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`.
// Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) FacebookClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.FacebookClientId
	}).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`.
// Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) FacebookClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.FacebookClientSecret
	}).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) FacebookEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.FacebookEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether facebook is enabled as a login method
func (o WlanPortalPtrOutput) FacebookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.FacebookEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) FacebookExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.FacebookExpire
	}).(pulumi.Float64PtrOutput)
}

// whether to forward the user to another URL after authorized
func (o WlanPortalPtrOutput) Forward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.Forward
	}).(pulumi.BoolPtrOutput)
}

// the URL to forward the user to
func (o WlanPortalPtrOutput) ForwardUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.ForwardUrl
	}).(pulumi.StringPtrOutput)
}

// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) GoogleClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GoogleClientId
	}).(pulumi.StringPtrOutput)
}

// Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) GoogleClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GoogleClientSecret
	}).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) GoogleEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.GoogleEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether google is enabled as login method
func (o WlanPortalPtrOutput) GoogleEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.GoogleEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) GoogleExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.GoogleExpire
	}).(pulumi.Float64PtrOutput)
}

// when `smsProvider`==`gupshup`
func (o WlanPortalPtrOutput) GupshupPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GupshupPassword
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`gupshup`
func (o WlanPortalPtrOutput) GupshupUserid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GupshupUserid
	}).(pulumi.StringPtrOutput)
}

// microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) MicrosoftClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftClientId
	}).(pulumi.StringPtrOutput)
}

// microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) MicrosoftClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftClientSecret
	}).(pulumi.StringPtrOutput)
}

// Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) MicrosoftEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.MicrosoftEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether microsoft 365 is enabled as a login method
func (o WlanPortalPtrOutput) MicrosoftEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.MicrosoftEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) MicrosoftExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.MicrosoftExpire
	}).(pulumi.Float64PtrOutput)
}

// whether password is enabled
func (o WlanPortalPtrOutput) PassphraseEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.PassphraseEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
func (o WlanPortalPtrOutput) PassphraseExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.PassphraseExpire
	}).(pulumi.Float64PtrOutput)
}

// passphrase
func (o WlanPortalPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
func (o WlanPortalPtrOutput) PredefinedSponsorsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.PredefinedSponsorsEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanPortalPtrOutput) Privacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.Privacy
	}).(pulumi.BoolPtrOutput)
}

// when `smsProvider`==`puzzel`
func (o WlanPortalPtrOutput) PuzzelPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.PuzzelPassword
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`puzzel`
func (o WlanPortalPtrOutput) PuzzelServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.PuzzelServiceId
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`puzzel`
func (o WlanPortalPtrOutput) PuzzelUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.PuzzelUsername
	}).(pulumi.StringPtrOutput)
}

// whether sms is enabled as a login method
func (o WlanPortalPtrOutput) SmsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SmsEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) SmsExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.SmsExpire
	}).(pulumi.Float64PtrOutput)
}

func (o WlanPortalPtrOutput) SmsMessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SmsMessageFormat
	}).(pulumi.StringPtrOutput)
}

// enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
func (o WlanPortalPtrOutput) SmsProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SmsProvider
	}).(pulumi.StringPtrOutput)
}

// whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
func (o WlanPortalPtrOutput) SponsorAutoApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorAutoApprove
	}).(pulumi.BoolPtrOutput)
}

// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
func (o WlanPortalPtrOutput) SponsorEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.SponsorEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether sponsor is enabled
func (o WlanPortalPtrOutput) SponsorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) SponsorExpire() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WlanPortal) *float64 {
		if v == nil {
			return nil
		}
		return v.SponsorExpire
	}).(pulumi.Float64PtrOutput)
}

// how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
func (o WlanPortalPtrOutput) SponsorLinkValidityDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.SponsorLinkValidityDuration
	}).(pulumi.IntPtrOutput)
}

// whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
func (o WlanPortalPtrOutput) SponsorNotifyAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorNotifyAll
	}).(pulumi.BoolPtrOutput)
}

// if enabled, guest will get email about sponsor's action (approve/deny)
func (o WlanPortalPtrOutput) SponsorStatusNotify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorStatusNotify
	}).(pulumi.BoolPtrOutput)
}

// object of allowed sponsors email with name. Required if `sponsorEnabled` is `true` and `sponsorEmailDomains` is empty.
// Property key is the sponsor email, Property value is the sponsor name
func (o WlanPortalPtrOutput) Sponsors() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WlanPortal) map[string]string {
		if v == nil {
			return nil
		}
		return v.Sponsors
	}).(pulumi.StringMapOutput)
}

// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
func (o WlanPortalPtrOutput) SsoDefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoDefaultRole
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalPtrOutput) SsoForcedRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoForcedRole
	}).(pulumi.StringPtrOutput)
}

// IDP Cert (used to verify the signed response)
func (o WlanPortalPtrOutput) SsoIdpCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIdpCert
	}).(pulumi.StringPtrOutput)
}

// signing algorithm for SAML Assertion
func (o WlanPortalPtrOutput) SsoIdpSignAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIdpSignAlgo
	}).(pulumi.StringPtrOutput)
}

// IDP Single-Sign-On URL
func (o WlanPortalPtrOutput) SsoIdpSsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIdpSsoUrl
	}).(pulumi.StringPtrOutput)
}

// IDP issuer URL
func (o WlanPortalPtrOutput) SsoIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIssuer
	}).(pulumi.StringPtrOutput)
}

// enum: `email`, `unspecified`
func (o WlanPortalPtrOutput) SsoNameidFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoNameidFormat
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`telstra`, Client ID provided by Telstra
func (o WlanPortalPtrOutput) TelstraClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TelstraClientId
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`telstra`, Client secret provided by Telstra
func (o WlanPortalPtrOutput) TelstraClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TelstraClientSecret
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`twilio`, Auth token account with twilio account
func (o WlanPortalPtrOutput) TwilioAuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TwilioAuthToken
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
func (o WlanPortalPtrOutput) TwilioPhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TwilioPhoneNumber
	}).(pulumi.StringPtrOutput)
}

// when `smsProvider`==`twilio`, Account SID provided by Twilio
func (o WlanPortalPtrOutput) TwilioSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TwilioSid
	}).(pulumi.StringPtrOutput)
}

type WlanQos struct {
	// enum: `background`, `bestEffort`, `video`, `voice`
	Class *string `pulumi:"class"`
	// whether to overwrite QoS
	Overwrite *bool `pulumi:"overwrite"`
}

// WlanQosInput is an input type that accepts WlanQosArgs and WlanQosOutput values.
// You can construct a concrete instance of `WlanQosInput` via:
//
//	WlanQosArgs{...}
type WlanQosInput interface {
	pulumi.Input

	ToWlanQosOutput() WlanQosOutput
	ToWlanQosOutputWithContext(context.Context) WlanQosOutput
}

type WlanQosArgs struct {
	// enum: `background`, `bestEffort`, `video`, `voice`
	Class pulumi.StringPtrInput `pulumi:"class"`
	// whether to overwrite QoS
	Overwrite pulumi.BoolPtrInput `pulumi:"overwrite"`
}

func (WlanQosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanQos)(nil)).Elem()
}

func (i WlanQosArgs) ToWlanQosOutput() WlanQosOutput {
	return i.ToWlanQosOutputWithContext(context.Background())
}

func (i WlanQosArgs) ToWlanQosOutputWithContext(ctx context.Context) WlanQosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanQosOutput)
}

func (i WlanQosArgs) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return i.ToWlanQosPtrOutputWithContext(context.Background())
}

func (i WlanQosArgs) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanQosOutput).ToWlanQosPtrOutputWithContext(ctx)
}

// WlanQosPtrInput is an input type that accepts WlanQosArgs, WlanQosPtr and WlanQosPtrOutput values.
// You can construct a concrete instance of `WlanQosPtrInput` via:
//
//	        WlanQosArgs{...}
//
//	or:
//
//	        nil
type WlanQosPtrInput interface {
	pulumi.Input

	ToWlanQosPtrOutput() WlanQosPtrOutput
	ToWlanQosPtrOutputWithContext(context.Context) WlanQosPtrOutput
}

type wlanQosPtrType WlanQosArgs

func WlanQosPtr(v *WlanQosArgs) WlanQosPtrInput {
	return (*wlanQosPtrType)(v)
}

func (*wlanQosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanQos)(nil)).Elem()
}

func (i *wlanQosPtrType) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return i.ToWlanQosPtrOutputWithContext(context.Background())
}

func (i *wlanQosPtrType) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanQosPtrOutput)
}

type WlanQosOutput struct{ *pulumi.OutputState }

func (WlanQosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanQos)(nil)).Elem()
}

func (o WlanQosOutput) ToWlanQosOutput() WlanQosOutput {
	return o
}

func (o WlanQosOutput) ToWlanQosOutputWithContext(ctx context.Context) WlanQosOutput {
	return o
}

func (o WlanQosOutput) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return o.ToWlanQosPtrOutputWithContext(context.Background())
}

func (o WlanQosOutput) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanQos) *WlanQos {
		return &v
	}).(WlanQosPtrOutput)
}

// enum: `background`, `bestEffort`, `video`, `voice`
func (o WlanQosOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanQos) *string { return v.Class }).(pulumi.StringPtrOutput)
}

// whether to overwrite QoS
func (o WlanQosOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanQos) *bool { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

type WlanQosPtrOutput struct{ *pulumi.OutputState }

func (WlanQosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanQos)(nil)).Elem()
}

func (o WlanQosPtrOutput) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return o
}

func (o WlanQosPtrOutput) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return o
}

func (o WlanQosPtrOutput) Elem() WlanQosOutput {
	return o.ApplyT(func(v *WlanQos) WlanQos {
		if v != nil {
			return *v
		}
		var ret WlanQos
		return ret
	}).(WlanQosOutput)
}

// enum: `background`, `bestEffort`, `video`, `voice`
func (o WlanQosPtrOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanQos) *string {
		if v == nil {
			return nil
		}
		return v.Class
	}).(pulumi.StringPtrOutput)
}

// whether to overwrite QoS
func (o WlanQosPtrOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanQos) *bool {
		if v == nil {
			return nil
		}
		return v.Overwrite
	}).(pulumi.BoolPtrOutput)
}

type WlanRadsec struct {
	CoaEnabled  *bool `pulumi:"coaEnabled"`
	Enabled     *bool `pulumi:"enabled"`
	IdleTimeout *int  `pulumi:"idleTimeout"`
	// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
	// Org mxedge(s) identified by mxcluster_ids
	MxclusterIds []string `pulumi:"mxclusterIds"`
	// default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
	// when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
	ProxyHosts []string `pulumi:"proxyHosts"`
	// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
	ServerName *string `pulumi:"serverName"`
	// List of Radsec Servers. Only if not Mist Edge.
	Servers []WlanRadsecServer `pulumi:"servers"`
	// use mxedge(s) as radsecproxy
	UseMxedge *bool `pulumi:"useMxedge"`
	// To use Site mxedges when this WLAN does not use mxtunnel
	UseSiteMxedge *bool `pulumi:"useSiteMxedge"`
}

// WlanRadsecInput is an input type that accepts WlanRadsecArgs and WlanRadsecOutput values.
// You can construct a concrete instance of `WlanRadsecInput` via:
//
//	WlanRadsecArgs{...}
type WlanRadsecInput interface {
	pulumi.Input

	ToWlanRadsecOutput() WlanRadsecOutput
	ToWlanRadsecOutputWithContext(context.Context) WlanRadsecOutput
}

type WlanRadsecArgs struct {
	CoaEnabled  pulumi.BoolPtrInput `pulumi:"coaEnabled"`
	Enabled     pulumi.BoolPtrInput `pulumi:"enabled"`
	IdleTimeout pulumi.IntPtrInput  `pulumi:"idleTimeout"`
	// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
	// Org mxedge(s) identified by mxcluster_ids
	MxclusterIds pulumi.StringArrayInput `pulumi:"mxclusterIds"`
	// default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
	// when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
	ProxyHosts pulumi.StringArrayInput `pulumi:"proxyHosts"`
	// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// List of Radsec Servers. Only if not Mist Edge.
	Servers WlanRadsecServerArrayInput `pulumi:"servers"`
	// use mxedge(s) as radsecproxy
	UseMxedge pulumi.BoolPtrInput `pulumi:"useMxedge"`
	// To use Site mxedges when this WLAN does not use mxtunnel
	UseSiteMxedge pulumi.BoolPtrInput `pulumi:"useSiteMxedge"`
}

func (WlanRadsecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsec)(nil)).Elem()
}

func (i WlanRadsecArgs) ToWlanRadsecOutput() WlanRadsecOutput {
	return i.ToWlanRadsecOutputWithContext(context.Background())
}

func (i WlanRadsecArgs) ToWlanRadsecOutputWithContext(ctx context.Context) WlanRadsecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecOutput)
}

func (i WlanRadsecArgs) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return i.ToWlanRadsecPtrOutputWithContext(context.Background())
}

func (i WlanRadsecArgs) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecOutput).ToWlanRadsecPtrOutputWithContext(ctx)
}

// WlanRadsecPtrInput is an input type that accepts WlanRadsecArgs, WlanRadsecPtr and WlanRadsecPtrOutput values.
// You can construct a concrete instance of `WlanRadsecPtrInput` via:
//
//	        WlanRadsecArgs{...}
//
//	or:
//
//	        nil
type WlanRadsecPtrInput interface {
	pulumi.Input

	ToWlanRadsecPtrOutput() WlanRadsecPtrOutput
	ToWlanRadsecPtrOutputWithContext(context.Context) WlanRadsecPtrOutput
}

type wlanRadsecPtrType WlanRadsecArgs

func WlanRadsecPtr(v *WlanRadsecArgs) WlanRadsecPtrInput {
	return (*wlanRadsecPtrType)(v)
}

func (*wlanRadsecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanRadsec)(nil)).Elem()
}

func (i *wlanRadsecPtrType) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return i.ToWlanRadsecPtrOutputWithContext(context.Background())
}

func (i *wlanRadsecPtrType) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecPtrOutput)
}

type WlanRadsecOutput struct{ *pulumi.OutputState }

func (WlanRadsecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsec)(nil)).Elem()
}

func (o WlanRadsecOutput) ToWlanRadsecOutput() WlanRadsecOutput {
	return o
}

func (o WlanRadsecOutput) ToWlanRadsecOutputWithContext(ctx context.Context) WlanRadsecOutput {
	return o
}

func (o WlanRadsecOutput) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return o.ToWlanRadsecPtrOutputWithContext(context.Background())
}

func (o WlanRadsecOutput) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanRadsec) *WlanRadsec {
		return &v
	}).(WlanRadsecPtrOutput)
}

func (o WlanRadsecOutput) CoaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.CoaEnabled }).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *int { return v.IdleTimeout }).(pulumi.IntPtrOutput)
}

// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
// Org mxedge(s) identified by mxcluster_ids
func (o WlanRadsecOutput) MxclusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanRadsec) []string { return v.MxclusterIds }).(pulumi.StringArrayOutput)
}

// default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
// when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
func (o WlanRadsecOutput) ProxyHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanRadsec) []string { return v.ProxyHosts }).(pulumi.StringArrayOutput)
}

// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
func (o WlanRadsecOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// List of Radsec Servers. Only if not Mist Edge.
func (o WlanRadsecOutput) Servers() WlanRadsecServerArrayOutput {
	return o.ApplyT(func(v WlanRadsec) []WlanRadsecServer { return v.Servers }).(WlanRadsecServerArrayOutput)
}

// use mxedge(s) as radsecproxy
func (o WlanRadsecOutput) UseMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.UseMxedge }).(pulumi.BoolPtrOutput)
}

// To use Site mxedges when this WLAN does not use mxtunnel
func (o WlanRadsecOutput) UseSiteMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.UseSiteMxedge }).(pulumi.BoolPtrOutput)
}

type WlanRadsecPtrOutput struct{ *pulumi.OutputState }

func (WlanRadsecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanRadsec)(nil)).Elem()
}

func (o WlanRadsecPtrOutput) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return o
}

func (o WlanRadsecPtrOutput) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return o
}

func (o WlanRadsecPtrOutput) Elem() WlanRadsecOutput {
	return o.ApplyT(func(v *WlanRadsec) WlanRadsec {
		if v != nil {
			return *v
		}
		var ret WlanRadsec
		return ret
	}).(WlanRadsecOutput)
}

func (o WlanRadsecPtrOutput) CoaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.CoaEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecPtrOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.IntPtrOutput)
}

// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
// Org mxedge(s) identified by mxcluster_ids
func (o WlanRadsecPtrOutput) MxclusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanRadsec) []string {
		if v == nil {
			return nil
		}
		return v.MxclusterIds
	}).(pulumi.StringArrayOutput)
}

// default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
// when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
func (o WlanRadsecPtrOutput) ProxyHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanRadsec) []string {
		if v == nil {
			return nil
		}
		return v.ProxyHosts
	}).(pulumi.StringArrayOutput)
}

// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
func (o WlanRadsecPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// List of Radsec Servers. Only if not Mist Edge.
func (o WlanRadsecPtrOutput) Servers() WlanRadsecServerArrayOutput {
	return o.ApplyT(func(v *WlanRadsec) []WlanRadsecServer {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(WlanRadsecServerArrayOutput)
}

// use mxedge(s) as radsecproxy
func (o WlanRadsecPtrOutput) UseMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.UseMxedge
	}).(pulumi.BoolPtrOutput)
}

// To use Site mxedges when this WLAN does not use mxtunnel
func (o WlanRadsecPtrOutput) UseSiteMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.UseSiteMxedge
	}).(pulumi.BoolPtrOutput)
}

type WlanRadsecServer struct {
	Host *string `pulumi:"host"`
	Port *int    `pulumi:"port"`
}

// WlanRadsecServerInput is an input type that accepts WlanRadsecServerArgs and WlanRadsecServerOutput values.
// You can construct a concrete instance of `WlanRadsecServerInput` via:
//
//	WlanRadsecServerArgs{...}
type WlanRadsecServerInput interface {
	pulumi.Input

	ToWlanRadsecServerOutput() WlanRadsecServerOutput
	ToWlanRadsecServerOutputWithContext(context.Context) WlanRadsecServerOutput
}

type WlanRadsecServerArgs struct {
	Host pulumi.StringPtrInput `pulumi:"host"`
	Port pulumi.IntPtrInput    `pulumi:"port"`
}

func (WlanRadsecServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsecServer)(nil)).Elem()
}

func (i WlanRadsecServerArgs) ToWlanRadsecServerOutput() WlanRadsecServerOutput {
	return i.ToWlanRadsecServerOutputWithContext(context.Background())
}

func (i WlanRadsecServerArgs) ToWlanRadsecServerOutputWithContext(ctx context.Context) WlanRadsecServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecServerOutput)
}

// WlanRadsecServerArrayInput is an input type that accepts WlanRadsecServerArray and WlanRadsecServerArrayOutput values.
// You can construct a concrete instance of `WlanRadsecServerArrayInput` via:
//
//	WlanRadsecServerArray{ WlanRadsecServerArgs{...} }
type WlanRadsecServerArrayInput interface {
	pulumi.Input

	ToWlanRadsecServerArrayOutput() WlanRadsecServerArrayOutput
	ToWlanRadsecServerArrayOutputWithContext(context.Context) WlanRadsecServerArrayOutput
}

type WlanRadsecServerArray []WlanRadsecServerInput

func (WlanRadsecServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanRadsecServer)(nil)).Elem()
}

func (i WlanRadsecServerArray) ToWlanRadsecServerArrayOutput() WlanRadsecServerArrayOutput {
	return i.ToWlanRadsecServerArrayOutputWithContext(context.Background())
}

func (i WlanRadsecServerArray) ToWlanRadsecServerArrayOutputWithContext(ctx context.Context) WlanRadsecServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecServerArrayOutput)
}

type WlanRadsecServerOutput struct{ *pulumi.OutputState }

func (WlanRadsecServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsecServer)(nil)).Elem()
}

func (o WlanRadsecServerOutput) ToWlanRadsecServerOutput() WlanRadsecServerOutput {
	return o
}

func (o WlanRadsecServerOutput) ToWlanRadsecServerOutputWithContext(ctx context.Context) WlanRadsecServerOutput {
	return o
}

func (o WlanRadsecServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanRadsecServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o WlanRadsecServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanRadsecServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type WlanRadsecServerArrayOutput struct{ *pulumi.OutputState }

func (WlanRadsecServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanRadsecServer)(nil)).Elem()
}

func (o WlanRadsecServerArrayOutput) ToWlanRadsecServerArrayOutput() WlanRadsecServerArrayOutput {
	return o
}

func (o WlanRadsecServerArrayOutput) ToWlanRadsecServerArrayOutputWithContext(ctx context.Context) WlanRadsecServerArrayOutput {
	return o
}

func (o WlanRadsecServerArrayOutput) Index(i pulumi.IntInput) WlanRadsecServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanRadsecServer {
		return vs[0].([]WlanRadsecServer)[vs[1].(int)]
	}).(WlanRadsecServerOutput)
}

type WlanSchedule struct {
	Enabled *bool `pulumi:"enabled"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours *WlanScheduleHours `pulumi:"hours"`
}

// WlanScheduleInput is an input type that accepts WlanScheduleArgs and WlanScheduleOutput values.
// You can construct a concrete instance of `WlanScheduleInput` via:
//
//	WlanScheduleArgs{...}
type WlanScheduleInput interface {
	pulumi.Input

	ToWlanScheduleOutput() WlanScheduleOutput
	ToWlanScheduleOutputWithContext(context.Context) WlanScheduleOutput
}

type WlanScheduleArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours WlanScheduleHoursPtrInput `pulumi:"hours"`
}

func (WlanScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanSchedule)(nil)).Elem()
}

func (i WlanScheduleArgs) ToWlanScheduleOutput() WlanScheduleOutput {
	return i.ToWlanScheduleOutputWithContext(context.Background())
}

func (i WlanScheduleArgs) ToWlanScheduleOutputWithContext(ctx context.Context) WlanScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleOutput)
}

func (i WlanScheduleArgs) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return i.ToWlanSchedulePtrOutputWithContext(context.Background())
}

func (i WlanScheduleArgs) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleOutput).ToWlanSchedulePtrOutputWithContext(ctx)
}

// WlanSchedulePtrInput is an input type that accepts WlanScheduleArgs, WlanSchedulePtr and WlanSchedulePtrOutput values.
// You can construct a concrete instance of `WlanSchedulePtrInput` via:
//
//	        WlanScheduleArgs{...}
//
//	or:
//
//	        nil
type WlanSchedulePtrInput interface {
	pulumi.Input

	ToWlanSchedulePtrOutput() WlanSchedulePtrOutput
	ToWlanSchedulePtrOutputWithContext(context.Context) WlanSchedulePtrOutput
}

type wlanSchedulePtrType WlanScheduleArgs

func WlanSchedulePtr(v *WlanScheduleArgs) WlanSchedulePtrInput {
	return (*wlanSchedulePtrType)(v)
}

func (*wlanSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanSchedule)(nil)).Elem()
}

func (i *wlanSchedulePtrType) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return i.ToWlanSchedulePtrOutputWithContext(context.Background())
}

func (i *wlanSchedulePtrType) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanSchedulePtrOutput)
}

type WlanScheduleOutput struct{ *pulumi.OutputState }

func (WlanScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanSchedule)(nil)).Elem()
}

func (o WlanScheduleOutput) ToWlanScheduleOutput() WlanScheduleOutput {
	return o
}

func (o WlanScheduleOutput) ToWlanScheduleOutputWithContext(ctx context.Context) WlanScheduleOutput {
	return o
}

func (o WlanScheduleOutput) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return o.ToWlanSchedulePtrOutputWithContext(context.Background())
}

func (o WlanScheduleOutput) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanSchedule) *WlanSchedule {
		return &v
	}).(WlanSchedulePtrOutput)
}

func (o WlanScheduleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanSchedule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o WlanScheduleOutput) Hours() WlanScheduleHoursPtrOutput {
	return o.ApplyT(func(v WlanSchedule) *WlanScheduleHours { return v.Hours }).(WlanScheduleHoursPtrOutput)
}

type WlanSchedulePtrOutput struct{ *pulumi.OutputState }

func (WlanSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanSchedule)(nil)).Elem()
}

func (o WlanSchedulePtrOutput) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return o
}

func (o WlanSchedulePtrOutput) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return o
}

func (o WlanSchedulePtrOutput) Elem() WlanScheduleOutput {
	return o.ApplyT(func(v *WlanSchedule) WlanSchedule {
		if v != nil {
			return *v
		}
		var ret WlanSchedule
		return ret
	}).(WlanScheduleOutput)
}

func (o WlanSchedulePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o WlanSchedulePtrOutput) Hours() WlanScheduleHoursPtrOutput {
	return o.ApplyT(func(v *WlanSchedule) *WlanScheduleHours {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(WlanScheduleHoursPtrOutput)
}

type WlanScheduleHours struct {
	Fri *string `pulumi:"fri"`
	Mon *string `pulumi:"mon"`
	Sat *string `pulumi:"sat"`
	Sun *string `pulumi:"sun"`
	Thu *string `pulumi:"thu"`
	Tue *string `pulumi:"tue"`
	Wed *string `pulumi:"wed"`
}

// WlanScheduleHoursInput is an input type that accepts WlanScheduleHoursArgs and WlanScheduleHoursOutput values.
// You can construct a concrete instance of `WlanScheduleHoursInput` via:
//
//	WlanScheduleHoursArgs{...}
type WlanScheduleHoursInput interface {
	pulumi.Input

	ToWlanScheduleHoursOutput() WlanScheduleHoursOutput
	ToWlanScheduleHoursOutputWithContext(context.Context) WlanScheduleHoursOutput
}

type WlanScheduleHoursArgs struct {
	Fri pulumi.StringPtrInput `pulumi:"fri"`
	Mon pulumi.StringPtrInput `pulumi:"mon"`
	Sat pulumi.StringPtrInput `pulumi:"sat"`
	Sun pulumi.StringPtrInput `pulumi:"sun"`
	Thu pulumi.StringPtrInput `pulumi:"thu"`
	Tue pulumi.StringPtrInput `pulumi:"tue"`
	Wed pulumi.StringPtrInput `pulumi:"wed"`
}

func (WlanScheduleHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanScheduleHours)(nil)).Elem()
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursOutput() WlanScheduleHoursOutput {
	return i.ToWlanScheduleHoursOutputWithContext(context.Background())
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursOutputWithContext(ctx context.Context) WlanScheduleHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleHoursOutput)
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return i.ToWlanScheduleHoursPtrOutputWithContext(context.Background())
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleHoursOutput).ToWlanScheduleHoursPtrOutputWithContext(ctx)
}

// WlanScheduleHoursPtrInput is an input type that accepts WlanScheduleHoursArgs, WlanScheduleHoursPtr and WlanScheduleHoursPtrOutput values.
// You can construct a concrete instance of `WlanScheduleHoursPtrInput` via:
//
//	        WlanScheduleHoursArgs{...}
//
//	or:
//
//	        nil
type WlanScheduleHoursPtrInput interface {
	pulumi.Input

	ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput
	ToWlanScheduleHoursPtrOutputWithContext(context.Context) WlanScheduleHoursPtrOutput
}

type wlanScheduleHoursPtrType WlanScheduleHoursArgs

func WlanScheduleHoursPtr(v *WlanScheduleHoursArgs) WlanScheduleHoursPtrInput {
	return (*wlanScheduleHoursPtrType)(v)
}

func (*wlanScheduleHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanScheduleHours)(nil)).Elem()
}

func (i *wlanScheduleHoursPtrType) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return i.ToWlanScheduleHoursPtrOutputWithContext(context.Background())
}

func (i *wlanScheduleHoursPtrType) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleHoursPtrOutput)
}

type WlanScheduleHoursOutput struct{ *pulumi.OutputState }

func (WlanScheduleHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanScheduleHours)(nil)).Elem()
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursOutput() WlanScheduleHoursOutput {
	return o
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursOutputWithContext(ctx context.Context) WlanScheduleHoursOutput {
	return o
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return o.ToWlanScheduleHoursPtrOutputWithContext(context.Background())
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanScheduleHours) *WlanScheduleHours {
		return &v
	}).(WlanScheduleHoursPtrOutput)
}

func (o WlanScheduleHoursOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Fri }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Mon }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Sat }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Sun }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Thu }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Tue }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Wed }).(pulumi.StringPtrOutput)
}

type WlanScheduleHoursPtrOutput struct{ *pulumi.OutputState }

func (WlanScheduleHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanScheduleHours)(nil)).Elem()
}

func (o WlanScheduleHoursPtrOutput) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return o
}

func (o WlanScheduleHoursPtrOutput) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return o
}

func (o WlanScheduleHoursPtrOutput) Elem() WlanScheduleHoursOutput {
	return o.ApplyT(func(v *WlanScheduleHours) WlanScheduleHours {
		if v != nil {
			return *v
		}
		var ret WlanScheduleHours
		return ret
	}).(WlanScheduleHoursOutput)
}

func (o WlanScheduleHoursPtrOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Fri
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Mon
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Sat
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Sun
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Thu
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Tue
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Wed
	}).(pulumi.StringPtrOutput)
}

type WlantemplateApplies struct {
	OrgId *string `pulumi:"orgId"`
	// list of site ids
	SiteIds []string `pulumi:"siteIds"`
	// list of sitegroup ids
	SitegroupIds []string `pulumi:"sitegroupIds"`
}

// WlantemplateAppliesInput is an input type that accepts WlantemplateAppliesArgs and WlantemplateAppliesOutput values.
// You can construct a concrete instance of `WlantemplateAppliesInput` via:
//
//	WlantemplateAppliesArgs{...}
type WlantemplateAppliesInput interface {
	pulumi.Input

	ToWlantemplateAppliesOutput() WlantemplateAppliesOutput
	ToWlantemplateAppliesOutputWithContext(context.Context) WlantemplateAppliesOutput
}

type WlantemplateAppliesArgs struct {
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// list of site ids
	SiteIds pulumi.StringArrayInput `pulumi:"siteIds"`
	// list of sitegroup ids
	SitegroupIds pulumi.StringArrayInput `pulumi:"sitegroupIds"`
}

func (WlantemplateAppliesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlantemplateApplies)(nil)).Elem()
}

func (i WlantemplateAppliesArgs) ToWlantemplateAppliesOutput() WlantemplateAppliesOutput {
	return i.ToWlantemplateAppliesOutputWithContext(context.Background())
}

func (i WlantemplateAppliesArgs) ToWlantemplateAppliesOutputWithContext(ctx context.Context) WlantemplateAppliesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlantemplateAppliesOutput)
}

func (i WlantemplateAppliesArgs) ToWlantemplateAppliesPtrOutput() WlantemplateAppliesPtrOutput {
	return i.ToWlantemplateAppliesPtrOutputWithContext(context.Background())
}

func (i WlantemplateAppliesArgs) ToWlantemplateAppliesPtrOutputWithContext(ctx context.Context) WlantemplateAppliesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlantemplateAppliesOutput).ToWlantemplateAppliesPtrOutputWithContext(ctx)
}

// WlantemplateAppliesPtrInput is an input type that accepts WlantemplateAppliesArgs, WlantemplateAppliesPtr and WlantemplateAppliesPtrOutput values.
// You can construct a concrete instance of `WlantemplateAppliesPtrInput` via:
//
//	        WlantemplateAppliesArgs{...}
//
//	or:
//
//	        nil
type WlantemplateAppliesPtrInput interface {
	pulumi.Input

	ToWlantemplateAppliesPtrOutput() WlantemplateAppliesPtrOutput
	ToWlantemplateAppliesPtrOutputWithContext(context.Context) WlantemplateAppliesPtrOutput
}

type wlantemplateAppliesPtrType WlantemplateAppliesArgs

func WlantemplateAppliesPtr(v *WlantemplateAppliesArgs) WlantemplateAppliesPtrInput {
	return (*wlantemplateAppliesPtrType)(v)
}

func (*wlantemplateAppliesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlantemplateApplies)(nil)).Elem()
}

func (i *wlantemplateAppliesPtrType) ToWlantemplateAppliesPtrOutput() WlantemplateAppliesPtrOutput {
	return i.ToWlantemplateAppliesPtrOutputWithContext(context.Background())
}

func (i *wlantemplateAppliesPtrType) ToWlantemplateAppliesPtrOutputWithContext(ctx context.Context) WlantemplateAppliesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlantemplateAppliesPtrOutput)
}

type WlantemplateAppliesOutput struct{ *pulumi.OutputState }

func (WlantemplateAppliesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlantemplateApplies)(nil)).Elem()
}

func (o WlantemplateAppliesOutput) ToWlantemplateAppliesOutput() WlantemplateAppliesOutput {
	return o
}

func (o WlantemplateAppliesOutput) ToWlantemplateAppliesOutputWithContext(ctx context.Context) WlantemplateAppliesOutput {
	return o
}

func (o WlantemplateAppliesOutput) ToWlantemplateAppliesPtrOutput() WlantemplateAppliesPtrOutput {
	return o.ToWlantemplateAppliesPtrOutputWithContext(context.Background())
}

func (o WlantemplateAppliesOutput) ToWlantemplateAppliesPtrOutputWithContext(ctx context.Context) WlantemplateAppliesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlantemplateApplies) *WlantemplateApplies {
		return &v
	}).(WlantemplateAppliesPtrOutput)
}

func (o WlantemplateAppliesOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlantemplateApplies) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// list of site ids
func (o WlantemplateAppliesOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlantemplateApplies) []string { return v.SiteIds }).(pulumi.StringArrayOutput)
}

// list of sitegroup ids
func (o WlantemplateAppliesOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlantemplateApplies) []string { return v.SitegroupIds }).(pulumi.StringArrayOutput)
}

type WlantemplateAppliesPtrOutput struct{ *pulumi.OutputState }

func (WlantemplateAppliesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlantemplateApplies)(nil)).Elem()
}

func (o WlantemplateAppliesPtrOutput) ToWlantemplateAppliesPtrOutput() WlantemplateAppliesPtrOutput {
	return o
}

func (o WlantemplateAppliesPtrOutput) ToWlantemplateAppliesPtrOutputWithContext(ctx context.Context) WlantemplateAppliesPtrOutput {
	return o
}

func (o WlantemplateAppliesPtrOutput) Elem() WlantemplateAppliesOutput {
	return o.ApplyT(func(v *WlantemplateApplies) WlantemplateApplies {
		if v != nil {
			return *v
		}
		var ret WlantemplateApplies
		return ret
	}).(WlantemplateAppliesOutput)
}

func (o WlantemplateAppliesPtrOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlantemplateApplies) *string {
		if v == nil {
			return nil
		}
		return v.OrgId
	}).(pulumi.StringPtrOutput)
}

// list of site ids
func (o WlantemplateAppliesPtrOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlantemplateApplies) []string {
		if v == nil {
			return nil
		}
		return v.SiteIds
	}).(pulumi.StringArrayOutput)
}

// list of sitegroup ids
func (o WlantemplateAppliesPtrOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlantemplateApplies) []string {
		if v == nil {
			return nil
		}
		return v.SitegroupIds
	}).(pulumi.StringArrayOutput)
}

type WlantemplateExceptions struct {
	// list of site ids
	SiteIds []string `pulumi:"siteIds"`
	// list of sitegroup ids
	SitegroupIds []string `pulumi:"sitegroupIds"`
}

// WlantemplateExceptionsInput is an input type that accepts WlantemplateExceptionsArgs and WlantemplateExceptionsOutput values.
// You can construct a concrete instance of `WlantemplateExceptionsInput` via:
//
//	WlantemplateExceptionsArgs{...}
type WlantemplateExceptionsInput interface {
	pulumi.Input

	ToWlantemplateExceptionsOutput() WlantemplateExceptionsOutput
	ToWlantemplateExceptionsOutputWithContext(context.Context) WlantemplateExceptionsOutput
}

type WlantemplateExceptionsArgs struct {
	// list of site ids
	SiteIds pulumi.StringArrayInput `pulumi:"siteIds"`
	// list of sitegroup ids
	SitegroupIds pulumi.StringArrayInput `pulumi:"sitegroupIds"`
}

func (WlantemplateExceptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlantemplateExceptions)(nil)).Elem()
}

func (i WlantemplateExceptionsArgs) ToWlantemplateExceptionsOutput() WlantemplateExceptionsOutput {
	return i.ToWlantemplateExceptionsOutputWithContext(context.Background())
}

func (i WlantemplateExceptionsArgs) ToWlantemplateExceptionsOutputWithContext(ctx context.Context) WlantemplateExceptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlantemplateExceptionsOutput)
}

func (i WlantemplateExceptionsArgs) ToWlantemplateExceptionsPtrOutput() WlantemplateExceptionsPtrOutput {
	return i.ToWlantemplateExceptionsPtrOutputWithContext(context.Background())
}

func (i WlantemplateExceptionsArgs) ToWlantemplateExceptionsPtrOutputWithContext(ctx context.Context) WlantemplateExceptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlantemplateExceptionsOutput).ToWlantemplateExceptionsPtrOutputWithContext(ctx)
}

// WlantemplateExceptionsPtrInput is an input type that accepts WlantemplateExceptionsArgs, WlantemplateExceptionsPtr and WlantemplateExceptionsPtrOutput values.
// You can construct a concrete instance of `WlantemplateExceptionsPtrInput` via:
//
//	        WlantemplateExceptionsArgs{...}
//
//	or:
//
//	        nil
type WlantemplateExceptionsPtrInput interface {
	pulumi.Input

	ToWlantemplateExceptionsPtrOutput() WlantemplateExceptionsPtrOutput
	ToWlantemplateExceptionsPtrOutputWithContext(context.Context) WlantemplateExceptionsPtrOutput
}

type wlantemplateExceptionsPtrType WlantemplateExceptionsArgs

func WlantemplateExceptionsPtr(v *WlantemplateExceptionsArgs) WlantemplateExceptionsPtrInput {
	return (*wlantemplateExceptionsPtrType)(v)
}

func (*wlantemplateExceptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlantemplateExceptions)(nil)).Elem()
}

func (i *wlantemplateExceptionsPtrType) ToWlantemplateExceptionsPtrOutput() WlantemplateExceptionsPtrOutput {
	return i.ToWlantemplateExceptionsPtrOutputWithContext(context.Background())
}

func (i *wlantemplateExceptionsPtrType) ToWlantemplateExceptionsPtrOutputWithContext(ctx context.Context) WlantemplateExceptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlantemplateExceptionsPtrOutput)
}

type WlantemplateExceptionsOutput struct{ *pulumi.OutputState }

func (WlantemplateExceptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlantemplateExceptions)(nil)).Elem()
}

func (o WlantemplateExceptionsOutput) ToWlantemplateExceptionsOutput() WlantemplateExceptionsOutput {
	return o
}

func (o WlantemplateExceptionsOutput) ToWlantemplateExceptionsOutputWithContext(ctx context.Context) WlantemplateExceptionsOutput {
	return o
}

func (o WlantemplateExceptionsOutput) ToWlantemplateExceptionsPtrOutput() WlantemplateExceptionsPtrOutput {
	return o.ToWlantemplateExceptionsPtrOutputWithContext(context.Background())
}

func (o WlantemplateExceptionsOutput) ToWlantemplateExceptionsPtrOutputWithContext(ctx context.Context) WlantemplateExceptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlantemplateExceptions) *WlantemplateExceptions {
		return &v
	}).(WlantemplateExceptionsPtrOutput)
}

// list of site ids
func (o WlantemplateExceptionsOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlantemplateExceptions) []string { return v.SiteIds }).(pulumi.StringArrayOutput)
}

// list of sitegroup ids
func (o WlantemplateExceptionsOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlantemplateExceptions) []string { return v.SitegroupIds }).(pulumi.StringArrayOutput)
}

type WlantemplateExceptionsPtrOutput struct{ *pulumi.OutputState }

func (WlantemplateExceptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlantemplateExceptions)(nil)).Elem()
}

func (o WlantemplateExceptionsPtrOutput) ToWlantemplateExceptionsPtrOutput() WlantemplateExceptionsPtrOutput {
	return o
}

func (o WlantemplateExceptionsPtrOutput) ToWlantemplateExceptionsPtrOutputWithContext(ctx context.Context) WlantemplateExceptionsPtrOutput {
	return o
}

func (o WlantemplateExceptionsPtrOutput) Elem() WlantemplateExceptionsOutput {
	return o.ApplyT(func(v *WlantemplateExceptions) WlantemplateExceptions {
		if v != nil {
			return *v
		}
		var ret WlantemplateExceptions
		return ret
	}).(WlantemplateExceptionsOutput)
}

// list of site ids
func (o WlantemplateExceptionsPtrOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlantemplateExceptions) []string {
		if v == nil {
			return nil
		}
		return v.SiteIds
	}).(pulumi.StringArrayOutput)
}

// list of sitegroup ids
func (o WlantemplateExceptionsPtrOutput) SitegroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlantemplateExceptions) []string {
		if v == nil {
			return nil
		}
		return v.SitegroupIds
	}).(pulumi.StringArrayOutput)
}

type WxtagSpec struct {
	// matched destination port, "0" means any
	PortRange *string `pulumi:"portRange"`
	// tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
	Protocol *string `pulumi:"protocol"`
	// matched destination subnets and/or IP Addresses
	Subnets []string `pulumi:"subnets"`
}

// WxtagSpecInput is an input type that accepts WxtagSpecArgs and WxtagSpecOutput values.
// You can construct a concrete instance of `WxtagSpecInput` via:
//
//	WxtagSpecArgs{...}
type WxtagSpecInput interface {
	pulumi.Input

	ToWxtagSpecOutput() WxtagSpecOutput
	ToWxtagSpecOutputWithContext(context.Context) WxtagSpecOutput
}

type WxtagSpecArgs struct {
	// matched destination port, "0" means any
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// matched destination subnets and/or IP Addresses
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (WxtagSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WxtagSpec)(nil)).Elem()
}

func (i WxtagSpecArgs) ToWxtagSpecOutput() WxtagSpecOutput {
	return i.ToWxtagSpecOutputWithContext(context.Background())
}

func (i WxtagSpecArgs) ToWxtagSpecOutputWithContext(ctx context.Context) WxtagSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WxtagSpecOutput)
}

// WxtagSpecArrayInput is an input type that accepts WxtagSpecArray and WxtagSpecArrayOutput values.
// You can construct a concrete instance of `WxtagSpecArrayInput` via:
//
//	WxtagSpecArray{ WxtagSpecArgs{...} }
type WxtagSpecArrayInput interface {
	pulumi.Input

	ToWxtagSpecArrayOutput() WxtagSpecArrayOutput
	ToWxtagSpecArrayOutputWithContext(context.Context) WxtagSpecArrayOutput
}

type WxtagSpecArray []WxtagSpecInput

func (WxtagSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WxtagSpec)(nil)).Elem()
}

func (i WxtagSpecArray) ToWxtagSpecArrayOutput() WxtagSpecArrayOutput {
	return i.ToWxtagSpecArrayOutputWithContext(context.Background())
}

func (i WxtagSpecArray) ToWxtagSpecArrayOutputWithContext(ctx context.Context) WxtagSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WxtagSpecArrayOutput)
}

type WxtagSpecOutput struct{ *pulumi.OutputState }

func (WxtagSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WxtagSpec)(nil)).Elem()
}

func (o WxtagSpecOutput) ToWxtagSpecOutput() WxtagSpecOutput {
	return o
}

func (o WxtagSpecOutput) ToWxtagSpecOutputWithContext(ctx context.Context) WxtagSpecOutput {
	return o
}

// matched destination port, "0" means any
func (o WxtagSpecOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WxtagSpec) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
func (o WxtagSpecOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WxtagSpec) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// matched destination subnets and/or IP Addresses
func (o WxtagSpecOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WxtagSpec) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type WxtagSpecArrayOutput struct{ *pulumi.OutputState }

func (WxtagSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WxtagSpec)(nil)).Elem()
}

func (o WxtagSpecArrayOutput) ToWxtagSpecArrayOutput() WxtagSpecArrayOutput {
	return o
}

func (o WxtagSpecArrayOutput) ToWxtagSpecArrayOutputWithContext(ctx context.Context) WxtagSpecArrayOutput {
	return o
}

func (o WxtagSpecArrayOutput) Index(i pulumi.IntInput) WxtagSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WxtagSpec {
		return vs[0].([]WxtagSpec)[vs[1].(int)]
	}).(WxtagSpecOutput)
}

type GetDeviceprofilesApDeviceprofile struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetDeviceprofilesApDeviceprofileInput is an input type that accepts GetDeviceprofilesApDeviceprofileArgs and GetDeviceprofilesApDeviceprofileOutput values.
// You can construct a concrete instance of `GetDeviceprofilesApDeviceprofileInput` via:
//
//	GetDeviceprofilesApDeviceprofileArgs{...}
type GetDeviceprofilesApDeviceprofileInput interface {
	pulumi.Input

	ToGetDeviceprofilesApDeviceprofileOutput() GetDeviceprofilesApDeviceprofileOutput
	ToGetDeviceprofilesApDeviceprofileOutputWithContext(context.Context) GetDeviceprofilesApDeviceprofileOutput
}

type GetDeviceprofilesApDeviceprofileArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetDeviceprofilesApDeviceprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceprofilesApDeviceprofile)(nil)).Elem()
}

func (i GetDeviceprofilesApDeviceprofileArgs) ToGetDeviceprofilesApDeviceprofileOutput() GetDeviceprofilesApDeviceprofileOutput {
	return i.ToGetDeviceprofilesApDeviceprofileOutputWithContext(context.Background())
}

func (i GetDeviceprofilesApDeviceprofileArgs) ToGetDeviceprofilesApDeviceprofileOutputWithContext(ctx context.Context) GetDeviceprofilesApDeviceprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceprofilesApDeviceprofileOutput)
}

// GetDeviceprofilesApDeviceprofileArrayInput is an input type that accepts GetDeviceprofilesApDeviceprofileArray and GetDeviceprofilesApDeviceprofileArrayOutput values.
// You can construct a concrete instance of `GetDeviceprofilesApDeviceprofileArrayInput` via:
//
//	GetDeviceprofilesApDeviceprofileArray{ GetDeviceprofilesApDeviceprofileArgs{...} }
type GetDeviceprofilesApDeviceprofileArrayInput interface {
	pulumi.Input

	ToGetDeviceprofilesApDeviceprofileArrayOutput() GetDeviceprofilesApDeviceprofileArrayOutput
	ToGetDeviceprofilesApDeviceprofileArrayOutputWithContext(context.Context) GetDeviceprofilesApDeviceprofileArrayOutput
}

type GetDeviceprofilesApDeviceprofileArray []GetDeviceprofilesApDeviceprofileInput

func (GetDeviceprofilesApDeviceprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceprofilesApDeviceprofile)(nil)).Elem()
}

func (i GetDeviceprofilesApDeviceprofileArray) ToGetDeviceprofilesApDeviceprofileArrayOutput() GetDeviceprofilesApDeviceprofileArrayOutput {
	return i.ToGetDeviceprofilesApDeviceprofileArrayOutputWithContext(context.Background())
}

func (i GetDeviceprofilesApDeviceprofileArray) ToGetDeviceprofilesApDeviceprofileArrayOutputWithContext(ctx context.Context) GetDeviceprofilesApDeviceprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceprofilesApDeviceprofileArrayOutput)
}

type GetDeviceprofilesApDeviceprofileOutput struct{ *pulumi.OutputState }

func (GetDeviceprofilesApDeviceprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceprofilesApDeviceprofile)(nil)).Elem()
}

func (o GetDeviceprofilesApDeviceprofileOutput) ToGetDeviceprofilesApDeviceprofileOutput() GetDeviceprofilesApDeviceprofileOutput {
	return o
}

func (o GetDeviceprofilesApDeviceprofileOutput) ToGetDeviceprofilesApDeviceprofileOutputWithContext(ctx context.Context) GetDeviceprofilesApDeviceprofileOutput {
	return o
}

func (o GetDeviceprofilesApDeviceprofileOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetDeviceprofilesApDeviceprofile) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetDeviceprofilesApDeviceprofileOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceprofilesApDeviceprofile) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDeviceprofilesApDeviceprofileOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetDeviceprofilesApDeviceprofile) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetDeviceprofilesApDeviceprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceprofilesApDeviceprofile) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDeviceprofilesApDeviceprofileOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceprofilesApDeviceprofile) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetDeviceprofilesApDeviceprofileArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceprofilesApDeviceprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceprofilesApDeviceprofile)(nil)).Elem()
}

func (o GetDeviceprofilesApDeviceprofileArrayOutput) ToGetDeviceprofilesApDeviceprofileArrayOutput() GetDeviceprofilesApDeviceprofileArrayOutput {
	return o
}

func (o GetDeviceprofilesApDeviceprofileArrayOutput) ToGetDeviceprofilesApDeviceprofileArrayOutputWithContext(ctx context.Context) GetDeviceprofilesApDeviceprofileArrayOutput {
	return o
}

func (o GetDeviceprofilesApDeviceprofileArrayOutput) Index(i pulumi.IntInput) GetDeviceprofilesApDeviceprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceprofilesApDeviceprofile {
		return vs[0].([]GetDeviceprofilesApDeviceprofile)[vs[1].(int)]
	}).(GetDeviceprofilesApDeviceprofileOutput)
}

type GetDeviceprofilesGatewayDeviceprofile struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetDeviceprofilesGatewayDeviceprofileInput is an input type that accepts GetDeviceprofilesGatewayDeviceprofileArgs and GetDeviceprofilesGatewayDeviceprofileOutput values.
// You can construct a concrete instance of `GetDeviceprofilesGatewayDeviceprofileInput` via:
//
//	GetDeviceprofilesGatewayDeviceprofileArgs{...}
type GetDeviceprofilesGatewayDeviceprofileInput interface {
	pulumi.Input

	ToGetDeviceprofilesGatewayDeviceprofileOutput() GetDeviceprofilesGatewayDeviceprofileOutput
	ToGetDeviceprofilesGatewayDeviceprofileOutputWithContext(context.Context) GetDeviceprofilesGatewayDeviceprofileOutput
}

type GetDeviceprofilesGatewayDeviceprofileArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetDeviceprofilesGatewayDeviceprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceprofilesGatewayDeviceprofile)(nil)).Elem()
}

func (i GetDeviceprofilesGatewayDeviceprofileArgs) ToGetDeviceprofilesGatewayDeviceprofileOutput() GetDeviceprofilesGatewayDeviceprofileOutput {
	return i.ToGetDeviceprofilesGatewayDeviceprofileOutputWithContext(context.Background())
}

func (i GetDeviceprofilesGatewayDeviceprofileArgs) ToGetDeviceprofilesGatewayDeviceprofileOutputWithContext(ctx context.Context) GetDeviceprofilesGatewayDeviceprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceprofilesGatewayDeviceprofileOutput)
}

// GetDeviceprofilesGatewayDeviceprofileArrayInput is an input type that accepts GetDeviceprofilesGatewayDeviceprofileArray and GetDeviceprofilesGatewayDeviceprofileArrayOutput values.
// You can construct a concrete instance of `GetDeviceprofilesGatewayDeviceprofileArrayInput` via:
//
//	GetDeviceprofilesGatewayDeviceprofileArray{ GetDeviceprofilesGatewayDeviceprofileArgs{...} }
type GetDeviceprofilesGatewayDeviceprofileArrayInput interface {
	pulumi.Input

	ToGetDeviceprofilesGatewayDeviceprofileArrayOutput() GetDeviceprofilesGatewayDeviceprofileArrayOutput
	ToGetDeviceprofilesGatewayDeviceprofileArrayOutputWithContext(context.Context) GetDeviceprofilesGatewayDeviceprofileArrayOutput
}

type GetDeviceprofilesGatewayDeviceprofileArray []GetDeviceprofilesGatewayDeviceprofileInput

func (GetDeviceprofilesGatewayDeviceprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceprofilesGatewayDeviceprofile)(nil)).Elem()
}

func (i GetDeviceprofilesGatewayDeviceprofileArray) ToGetDeviceprofilesGatewayDeviceprofileArrayOutput() GetDeviceprofilesGatewayDeviceprofileArrayOutput {
	return i.ToGetDeviceprofilesGatewayDeviceprofileArrayOutputWithContext(context.Background())
}

func (i GetDeviceprofilesGatewayDeviceprofileArray) ToGetDeviceprofilesGatewayDeviceprofileArrayOutputWithContext(ctx context.Context) GetDeviceprofilesGatewayDeviceprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeviceprofilesGatewayDeviceprofileArrayOutput)
}

type GetDeviceprofilesGatewayDeviceprofileOutput struct{ *pulumi.OutputState }

func (GetDeviceprofilesGatewayDeviceprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceprofilesGatewayDeviceprofile)(nil)).Elem()
}

func (o GetDeviceprofilesGatewayDeviceprofileOutput) ToGetDeviceprofilesGatewayDeviceprofileOutput() GetDeviceprofilesGatewayDeviceprofileOutput {
	return o
}

func (o GetDeviceprofilesGatewayDeviceprofileOutput) ToGetDeviceprofilesGatewayDeviceprofileOutputWithContext(ctx context.Context) GetDeviceprofilesGatewayDeviceprofileOutput {
	return o
}

func (o GetDeviceprofilesGatewayDeviceprofileOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetDeviceprofilesGatewayDeviceprofile) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetDeviceprofilesGatewayDeviceprofileOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceprofilesGatewayDeviceprofile) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDeviceprofilesGatewayDeviceprofileOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetDeviceprofilesGatewayDeviceprofile) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetDeviceprofilesGatewayDeviceprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceprofilesGatewayDeviceprofile) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDeviceprofilesGatewayDeviceprofileOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceprofilesGatewayDeviceprofile) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetDeviceprofilesGatewayDeviceprofileArrayOutput struct{ *pulumi.OutputState }

func (GetDeviceprofilesGatewayDeviceprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeviceprofilesGatewayDeviceprofile)(nil)).Elem()
}

func (o GetDeviceprofilesGatewayDeviceprofileArrayOutput) ToGetDeviceprofilesGatewayDeviceprofileArrayOutput() GetDeviceprofilesGatewayDeviceprofileArrayOutput {
	return o
}

func (o GetDeviceprofilesGatewayDeviceprofileArrayOutput) ToGetDeviceprofilesGatewayDeviceprofileArrayOutputWithContext(ctx context.Context) GetDeviceprofilesGatewayDeviceprofileArrayOutput {
	return o
}

func (o GetDeviceprofilesGatewayDeviceprofileArrayOutput) Index(i pulumi.IntInput) GetDeviceprofilesGatewayDeviceprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeviceprofilesGatewayDeviceprofile {
		return vs[0].([]GetDeviceprofilesGatewayDeviceprofile)[vs[1].(int)]
	}).(GetDeviceprofilesGatewayDeviceprofileOutput)
}

type GetGatewaytemplatesOrgGatewaytemplate struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetGatewaytemplatesOrgGatewaytemplateInput is an input type that accepts GetGatewaytemplatesOrgGatewaytemplateArgs and GetGatewaytemplatesOrgGatewaytemplateOutput values.
// You can construct a concrete instance of `GetGatewaytemplatesOrgGatewaytemplateInput` via:
//
//	GetGatewaytemplatesOrgGatewaytemplateArgs{...}
type GetGatewaytemplatesOrgGatewaytemplateInput interface {
	pulumi.Input

	ToGetGatewaytemplatesOrgGatewaytemplateOutput() GetGatewaytemplatesOrgGatewaytemplateOutput
	ToGetGatewaytemplatesOrgGatewaytemplateOutputWithContext(context.Context) GetGatewaytemplatesOrgGatewaytemplateOutput
}

type GetGatewaytemplatesOrgGatewaytemplateArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetGatewaytemplatesOrgGatewaytemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewaytemplatesOrgGatewaytemplate)(nil)).Elem()
}

func (i GetGatewaytemplatesOrgGatewaytemplateArgs) ToGetGatewaytemplatesOrgGatewaytemplateOutput() GetGatewaytemplatesOrgGatewaytemplateOutput {
	return i.ToGetGatewaytemplatesOrgGatewaytemplateOutputWithContext(context.Background())
}

func (i GetGatewaytemplatesOrgGatewaytemplateArgs) ToGetGatewaytemplatesOrgGatewaytemplateOutputWithContext(ctx context.Context) GetGatewaytemplatesOrgGatewaytemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewaytemplatesOrgGatewaytemplateOutput)
}

// GetGatewaytemplatesOrgGatewaytemplateArrayInput is an input type that accepts GetGatewaytemplatesOrgGatewaytemplateArray and GetGatewaytemplatesOrgGatewaytemplateArrayOutput values.
// You can construct a concrete instance of `GetGatewaytemplatesOrgGatewaytemplateArrayInput` via:
//
//	GetGatewaytemplatesOrgGatewaytemplateArray{ GetGatewaytemplatesOrgGatewaytemplateArgs{...} }
type GetGatewaytemplatesOrgGatewaytemplateArrayInput interface {
	pulumi.Input

	ToGetGatewaytemplatesOrgGatewaytemplateArrayOutput() GetGatewaytemplatesOrgGatewaytemplateArrayOutput
	ToGetGatewaytemplatesOrgGatewaytemplateArrayOutputWithContext(context.Context) GetGatewaytemplatesOrgGatewaytemplateArrayOutput
}

type GetGatewaytemplatesOrgGatewaytemplateArray []GetGatewaytemplatesOrgGatewaytemplateInput

func (GetGatewaytemplatesOrgGatewaytemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGatewaytemplatesOrgGatewaytemplate)(nil)).Elem()
}

func (i GetGatewaytemplatesOrgGatewaytemplateArray) ToGetGatewaytemplatesOrgGatewaytemplateArrayOutput() GetGatewaytemplatesOrgGatewaytemplateArrayOutput {
	return i.ToGetGatewaytemplatesOrgGatewaytemplateArrayOutputWithContext(context.Background())
}

func (i GetGatewaytemplatesOrgGatewaytemplateArray) ToGetGatewaytemplatesOrgGatewaytemplateArrayOutputWithContext(ctx context.Context) GetGatewaytemplatesOrgGatewaytemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGatewaytemplatesOrgGatewaytemplateArrayOutput)
}

type GetGatewaytemplatesOrgGatewaytemplateOutput struct{ *pulumi.OutputState }

func (GetGatewaytemplatesOrgGatewaytemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewaytemplatesOrgGatewaytemplate)(nil)).Elem()
}

func (o GetGatewaytemplatesOrgGatewaytemplateOutput) ToGetGatewaytemplatesOrgGatewaytemplateOutput() GetGatewaytemplatesOrgGatewaytemplateOutput {
	return o
}

func (o GetGatewaytemplatesOrgGatewaytemplateOutput) ToGetGatewaytemplatesOrgGatewaytemplateOutputWithContext(ctx context.Context) GetGatewaytemplatesOrgGatewaytemplateOutput {
	return o
}

func (o GetGatewaytemplatesOrgGatewaytemplateOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetGatewaytemplatesOrgGatewaytemplate) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetGatewaytemplatesOrgGatewaytemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGatewaytemplatesOrgGatewaytemplate) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGatewaytemplatesOrgGatewaytemplateOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetGatewaytemplatesOrgGatewaytemplate) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetGatewaytemplatesOrgGatewaytemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGatewaytemplatesOrgGatewaytemplate) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGatewaytemplatesOrgGatewaytemplateOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGatewaytemplatesOrgGatewaytemplate) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetGatewaytemplatesOrgGatewaytemplateArrayOutput struct{ *pulumi.OutputState }

func (GetGatewaytemplatesOrgGatewaytemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGatewaytemplatesOrgGatewaytemplate)(nil)).Elem()
}

func (o GetGatewaytemplatesOrgGatewaytemplateArrayOutput) ToGetGatewaytemplatesOrgGatewaytemplateArrayOutput() GetGatewaytemplatesOrgGatewaytemplateArrayOutput {
	return o
}

func (o GetGatewaytemplatesOrgGatewaytemplateArrayOutput) ToGetGatewaytemplatesOrgGatewaytemplateArrayOutputWithContext(ctx context.Context) GetGatewaytemplatesOrgGatewaytemplateArrayOutput {
	return o
}

func (o GetGatewaytemplatesOrgGatewaytemplateArrayOutput) Index(i pulumi.IntInput) GetGatewaytemplatesOrgGatewaytemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGatewaytemplatesOrgGatewaytemplate {
		return vs[0].([]GetGatewaytemplatesOrgGatewaytemplate)[vs[1].(int)]
	}).(GetGatewaytemplatesOrgGatewaytemplateOutput)
}

type GetIdpprofilesOrgIdpprofile struct {
	// enum: `critical`, `standard`, `strict`
	BaseProfile  string                                 `pulumi:"baseProfile"`
	CreatedTime  float64                                `pulumi:"createdTime"`
	Id           string                                 `pulumi:"id"`
	ModifiedTime float64                                `pulumi:"modifiedTime"`
	Name         string                                 `pulumi:"name"`
	OrgId        string                                 `pulumi:"orgId"`
	Overwrites   []GetIdpprofilesOrgIdpprofileOverwrite `pulumi:"overwrites"`
}

// GetIdpprofilesOrgIdpprofileInput is an input type that accepts GetIdpprofilesOrgIdpprofileArgs and GetIdpprofilesOrgIdpprofileOutput values.
// You can construct a concrete instance of `GetIdpprofilesOrgIdpprofileInput` via:
//
//	GetIdpprofilesOrgIdpprofileArgs{...}
type GetIdpprofilesOrgIdpprofileInput interface {
	pulumi.Input

	ToGetIdpprofilesOrgIdpprofileOutput() GetIdpprofilesOrgIdpprofileOutput
	ToGetIdpprofilesOrgIdpprofileOutputWithContext(context.Context) GetIdpprofilesOrgIdpprofileOutput
}

type GetIdpprofilesOrgIdpprofileArgs struct {
	// enum: `critical`, `standard`, `strict`
	BaseProfile  pulumi.StringInput                             `pulumi:"baseProfile"`
	CreatedTime  pulumi.Float64Input                            `pulumi:"createdTime"`
	Id           pulumi.StringInput                             `pulumi:"id"`
	ModifiedTime pulumi.Float64Input                            `pulumi:"modifiedTime"`
	Name         pulumi.StringInput                             `pulumi:"name"`
	OrgId        pulumi.StringInput                             `pulumi:"orgId"`
	Overwrites   GetIdpprofilesOrgIdpprofileOverwriteArrayInput `pulumi:"overwrites"`
}

func (GetIdpprofilesOrgIdpprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdpprofilesOrgIdpprofile)(nil)).Elem()
}

func (i GetIdpprofilesOrgIdpprofileArgs) ToGetIdpprofilesOrgIdpprofileOutput() GetIdpprofilesOrgIdpprofileOutput {
	return i.ToGetIdpprofilesOrgIdpprofileOutputWithContext(context.Background())
}

func (i GetIdpprofilesOrgIdpprofileArgs) ToGetIdpprofilesOrgIdpprofileOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdpprofilesOrgIdpprofileOutput)
}

// GetIdpprofilesOrgIdpprofileArrayInput is an input type that accepts GetIdpprofilesOrgIdpprofileArray and GetIdpprofilesOrgIdpprofileArrayOutput values.
// You can construct a concrete instance of `GetIdpprofilesOrgIdpprofileArrayInput` via:
//
//	GetIdpprofilesOrgIdpprofileArray{ GetIdpprofilesOrgIdpprofileArgs{...} }
type GetIdpprofilesOrgIdpprofileArrayInput interface {
	pulumi.Input

	ToGetIdpprofilesOrgIdpprofileArrayOutput() GetIdpprofilesOrgIdpprofileArrayOutput
	ToGetIdpprofilesOrgIdpprofileArrayOutputWithContext(context.Context) GetIdpprofilesOrgIdpprofileArrayOutput
}

type GetIdpprofilesOrgIdpprofileArray []GetIdpprofilesOrgIdpprofileInput

func (GetIdpprofilesOrgIdpprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdpprofilesOrgIdpprofile)(nil)).Elem()
}

func (i GetIdpprofilesOrgIdpprofileArray) ToGetIdpprofilesOrgIdpprofileArrayOutput() GetIdpprofilesOrgIdpprofileArrayOutput {
	return i.ToGetIdpprofilesOrgIdpprofileArrayOutputWithContext(context.Background())
}

func (i GetIdpprofilesOrgIdpprofileArray) ToGetIdpprofilesOrgIdpprofileArrayOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdpprofilesOrgIdpprofileArrayOutput)
}

type GetIdpprofilesOrgIdpprofileOutput struct{ *pulumi.OutputState }

func (GetIdpprofilesOrgIdpprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdpprofilesOrgIdpprofile)(nil)).Elem()
}

func (o GetIdpprofilesOrgIdpprofileOutput) ToGetIdpprofilesOrgIdpprofileOutput() GetIdpprofilesOrgIdpprofileOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileOutput) ToGetIdpprofilesOrgIdpprofileOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOutput {
	return o
}

// enum: `critical`, `standard`, `strict`
func (o GetIdpprofilesOrgIdpprofileOutput) BaseProfile() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofile) string { return v.BaseProfile }).(pulumi.StringOutput)
}

func (o GetIdpprofilesOrgIdpprofileOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofile) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetIdpprofilesOrgIdpprofileOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofile) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetIdpprofilesOrgIdpprofileOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofile) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetIdpprofilesOrgIdpprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofile) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetIdpprofilesOrgIdpprofileOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofile) string { return v.OrgId }).(pulumi.StringOutput)
}

func (o GetIdpprofilesOrgIdpprofileOutput) Overwrites() GetIdpprofilesOrgIdpprofileOverwriteArrayOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofile) []GetIdpprofilesOrgIdpprofileOverwrite { return v.Overwrites }).(GetIdpprofilesOrgIdpprofileOverwriteArrayOutput)
}

type GetIdpprofilesOrgIdpprofileArrayOutput struct{ *pulumi.OutputState }

func (GetIdpprofilesOrgIdpprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdpprofilesOrgIdpprofile)(nil)).Elem()
}

func (o GetIdpprofilesOrgIdpprofileArrayOutput) ToGetIdpprofilesOrgIdpprofileArrayOutput() GetIdpprofilesOrgIdpprofileArrayOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileArrayOutput) ToGetIdpprofilesOrgIdpprofileArrayOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileArrayOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileArrayOutput) Index(i pulumi.IntInput) GetIdpprofilesOrgIdpprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIdpprofilesOrgIdpprofile {
		return vs[0].([]GetIdpprofilesOrgIdpprofile)[vs[1].(int)]
	}).(GetIdpprofilesOrgIdpprofileOutput)
}

type GetIdpprofilesOrgIdpprofileOverwrite struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   string                                       `pulumi:"action"`
	Matching GetIdpprofilesOrgIdpprofileOverwriteMatching `pulumi:"matching"`
	Name     string                                       `pulumi:"name"`
}

// GetIdpprofilesOrgIdpprofileOverwriteInput is an input type that accepts GetIdpprofilesOrgIdpprofileOverwriteArgs and GetIdpprofilesOrgIdpprofileOverwriteOutput values.
// You can construct a concrete instance of `GetIdpprofilesOrgIdpprofileOverwriteInput` via:
//
//	GetIdpprofilesOrgIdpprofileOverwriteArgs{...}
type GetIdpprofilesOrgIdpprofileOverwriteInput interface {
	pulumi.Input

	ToGetIdpprofilesOrgIdpprofileOverwriteOutput() GetIdpprofilesOrgIdpprofileOverwriteOutput
	ToGetIdpprofilesOrgIdpprofileOverwriteOutputWithContext(context.Context) GetIdpprofilesOrgIdpprofileOverwriteOutput
}

type GetIdpprofilesOrgIdpprofileOverwriteArgs struct {
	// enum:
	//   * alert (default)
	//   * drop: siliently dropping packets
	//   * close: notify client/server to close connection
	Action   pulumi.StringInput                                `pulumi:"action"`
	Matching GetIdpprofilesOrgIdpprofileOverwriteMatchingInput `pulumi:"matching"`
	Name     pulumi.StringInput                                `pulumi:"name"`
}

func (GetIdpprofilesOrgIdpprofileOverwriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdpprofilesOrgIdpprofileOverwrite)(nil)).Elem()
}

func (i GetIdpprofilesOrgIdpprofileOverwriteArgs) ToGetIdpprofilesOrgIdpprofileOverwriteOutput() GetIdpprofilesOrgIdpprofileOverwriteOutput {
	return i.ToGetIdpprofilesOrgIdpprofileOverwriteOutputWithContext(context.Background())
}

func (i GetIdpprofilesOrgIdpprofileOverwriteArgs) ToGetIdpprofilesOrgIdpprofileOverwriteOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOverwriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdpprofilesOrgIdpprofileOverwriteOutput)
}

// GetIdpprofilesOrgIdpprofileOverwriteArrayInput is an input type that accepts GetIdpprofilesOrgIdpprofileOverwriteArray and GetIdpprofilesOrgIdpprofileOverwriteArrayOutput values.
// You can construct a concrete instance of `GetIdpprofilesOrgIdpprofileOverwriteArrayInput` via:
//
//	GetIdpprofilesOrgIdpprofileOverwriteArray{ GetIdpprofilesOrgIdpprofileOverwriteArgs{...} }
type GetIdpprofilesOrgIdpprofileOverwriteArrayInput interface {
	pulumi.Input

	ToGetIdpprofilesOrgIdpprofileOverwriteArrayOutput() GetIdpprofilesOrgIdpprofileOverwriteArrayOutput
	ToGetIdpprofilesOrgIdpprofileOverwriteArrayOutputWithContext(context.Context) GetIdpprofilesOrgIdpprofileOverwriteArrayOutput
}

type GetIdpprofilesOrgIdpprofileOverwriteArray []GetIdpprofilesOrgIdpprofileOverwriteInput

func (GetIdpprofilesOrgIdpprofileOverwriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdpprofilesOrgIdpprofileOverwrite)(nil)).Elem()
}

func (i GetIdpprofilesOrgIdpprofileOverwriteArray) ToGetIdpprofilesOrgIdpprofileOverwriteArrayOutput() GetIdpprofilesOrgIdpprofileOverwriteArrayOutput {
	return i.ToGetIdpprofilesOrgIdpprofileOverwriteArrayOutputWithContext(context.Background())
}

func (i GetIdpprofilesOrgIdpprofileOverwriteArray) ToGetIdpprofilesOrgIdpprofileOverwriteArrayOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOverwriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdpprofilesOrgIdpprofileOverwriteArrayOutput)
}

type GetIdpprofilesOrgIdpprofileOverwriteOutput struct{ *pulumi.OutputState }

func (GetIdpprofilesOrgIdpprofileOverwriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdpprofilesOrgIdpprofileOverwrite)(nil)).Elem()
}

func (o GetIdpprofilesOrgIdpprofileOverwriteOutput) ToGetIdpprofilesOrgIdpprofileOverwriteOutput() GetIdpprofilesOrgIdpprofileOverwriteOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileOverwriteOutput) ToGetIdpprofilesOrgIdpprofileOverwriteOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOverwriteOutput {
	return o
}

// enum:
//   - alert (default)
//   - drop: siliently dropping packets
//   - close: notify client/server to close connection
func (o GetIdpprofilesOrgIdpprofileOverwriteOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofileOverwrite) string { return v.Action }).(pulumi.StringOutput)
}

func (o GetIdpprofilesOrgIdpprofileOverwriteOutput) Matching() GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofileOverwrite) GetIdpprofilesOrgIdpprofileOverwriteMatching {
		return v.Matching
	}).(GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput)
}

func (o GetIdpprofilesOrgIdpprofileOverwriteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofileOverwrite) string { return v.Name }).(pulumi.StringOutput)
}

type GetIdpprofilesOrgIdpprofileOverwriteArrayOutput struct{ *pulumi.OutputState }

func (GetIdpprofilesOrgIdpprofileOverwriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdpprofilesOrgIdpprofileOverwrite)(nil)).Elem()
}

func (o GetIdpprofilesOrgIdpprofileOverwriteArrayOutput) ToGetIdpprofilesOrgIdpprofileOverwriteArrayOutput() GetIdpprofilesOrgIdpprofileOverwriteArrayOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileOverwriteArrayOutput) ToGetIdpprofilesOrgIdpprofileOverwriteArrayOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOverwriteArrayOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileOverwriteArrayOutput) Index(i pulumi.IntInput) GetIdpprofilesOrgIdpprofileOverwriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIdpprofilesOrgIdpprofileOverwrite {
		return vs[0].([]GetIdpprofilesOrgIdpprofileOverwrite)[vs[1].(int)]
	}).(GetIdpprofilesOrgIdpprofileOverwriteOutput)
}

type GetIdpprofilesOrgIdpprofileOverwriteMatching struct {
	AttackNames []string `pulumi:"attackNames"`
	DstSubnets  []string `pulumi:"dstSubnets"`
	Severities  []string `pulumi:"severities"`
}

// GetIdpprofilesOrgIdpprofileOverwriteMatchingInput is an input type that accepts GetIdpprofilesOrgIdpprofileOverwriteMatchingArgs and GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput values.
// You can construct a concrete instance of `GetIdpprofilesOrgIdpprofileOverwriteMatchingInput` via:
//
//	GetIdpprofilesOrgIdpprofileOverwriteMatchingArgs{...}
type GetIdpprofilesOrgIdpprofileOverwriteMatchingInput interface {
	pulumi.Input

	ToGetIdpprofilesOrgIdpprofileOverwriteMatchingOutput() GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput
	ToGetIdpprofilesOrgIdpprofileOverwriteMatchingOutputWithContext(context.Context) GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput
}

type GetIdpprofilesOrgIdpprofileOverwriteMatchingArgs struct {
	AttackNames pulumi.StringArrayInput `pulumi:"attackNames"`
	DstSubnets  pulumi.StringArrayInput `pulumi:"dstSubnets"`
	Severities  pulumi.StringArrayInput `pulumi:"severities"`
}

func (GetIdpprofilesOrgIdpprofileOverwriteMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdpprofilesOrgIdpprofileOverwriteMatching)(nil)).Elem()
}

func (i GetIdpprofilesOrgIdpprofileOverwriteMatchingArgs) ToGetIdpprofilesOrgIdpprofileOverwriteMatchingOutput() GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput {
	return i.ToGetIdpprofilesOrgIdpprofileOverwriteMatchingOutputWithContext(context.Background())
}

func (i GetIdpprofilesOrgIdpprofileOverwriteMatchingArgs) ToGetIdpprofilesOrgIdpprofileOverwriteMatchingOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput)
}

type GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput struct{ *pulumi.OutputState }

func (GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdpprofilesOrgIdpprofileOverwriteMatching)(nil)).Elem()
}

func (o GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput) ToGetIdpprofilesOrgIdpprofileOverwriteMatchingOutput() GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput) ToGetIdpprofilesOrgIdpprofileOverwriteMatchingOutputWithContext(ctx context.Context) GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput {
	return o
}

func (o GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput) AttackNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofileOverwriteMatching) []string { return v.AttackNames }).(pulumi.StringArrayOutput)
}

func (o GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput) DstSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofileOverwriteMatching) []string { return v.DstSubnets }).(pulumi.StringArrayOutput)
}

func (o GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIdpprofilesOrgIdpprofileOverwriteMatching) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

type GetInventoryOrgInventory struct {
	// only if `type`==`switch` or `type`==`gateway`
	// whether the switch/gateway is adopted
	Adopted bool `pulumi:"adopted"`
	// device claim code
	ClaimCode string `pulumi:"claimCode"`
	// whether the device is connected
	Connected bool `pulumi:"connected"`
	// inventory created time, in epoch
	CreatedTime int `pulumi:"createdTime"`
	// deviceprofile id if assigned, null if not assigned
	DeviceprofileId string `pulumi:"deviceprofileId"`
	// hostname reported by the device
	Hostname string `pulumi:"hostname"`
	// device hardware revision number
	HwRev string `pulumi:"hwRev"`
	// device id
	Id  string `pulumi:"id"`
	Jsi bool   `pulumi:"jsi"`
	// device MAC address
	Mac string `pulumi:"mac"`
	// device model
	Model string `pulumi:"model"`
	// inventory last modified time, in epoch
	ModifiedTime int `pulumi:"modifiedTime"`
	// device name if configured
	Name  string `pulumi:"name"`
	OrgId string `pulumi:"orgId"`
	// device serial
	Serial string `pulumi:"serial"`
	SiteId string `pulumi:"siteId"`
	// device stock keeping unit
	Sku string `pulumi:"sku"`
	// only if `type`==`switch`, MAC Address of the Virtual Chassis
	VcMac string `pulumi:"vcMac"`
}

// GetInventoryOrgInventoryInput is an input type that accepts GetInventoryOrgInventoryArgs and GetInventoryOrgInventoryOutput values.
// You can construct a concrete instance of `GetInventoryOrgInventoryInput` via:
//
//	GetInventoryOrgInventoryArgs{...}
type GetInventoryOrgInventoryInput interface {
	pulumi.Input

	ToGetInventoryOrgInventoryOutput() GetInventoryOrgInventoryOutput
	ToGetInventoryOrgInventoryOutputWithContext(context.Context) GetInventoryOrgInventoryOutput
}

type GetInventoryOrgInventoryArgs struct {
	// only if `type`==`switch` or `type`==`gateway`
	// whether the switch/gateway is adopted
	Adopted pulumi.BoolInput `pulumi:"adopted"`
	// device claim code
	ClaimCode pulumi.StringInput `pulumi:"claimCode"`
	// whether the device is connected
	Connected pulumi.BoolInput `pulumi:"connected"`
	// inventory created time, in epoch
	CreatedTime pulumi.IntInput `pulumi:"createdTime"`
	// deviceprofile id if assigned, null if not assigned
	DeviceprofileId pulumi.StringInput `pulumi:"deviceprofileId"`
	// hostname reported by the device
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// device hardware revision number
	HwRev pulumi.StringInput `pulumi:"hwRev"`
	// device id
	Id  pulumi.StringInput `pulumi:"id"`
	Jsi pulumi.BoolInput   `pulumi:"jsi"`
	// device MAC address
	Mac pulumi.StringInput `pulumi:"mac"`
	// device model
	Model pulumi.StringInput `pulumi:"model"`
	// inventory last modified time, in epoch
	ModifiedTime pulumi.IntInput `pulumi:"modifiedTime"`
	// device name if configured
	Name  pulumi.StringInput `pulumi:"name"`
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// device serial
	Serial pulumi.StringInput `pulumi:"serial"`
	SiteId pulumi.StringInput `pulumi:"siteId"`
	// device stock keeping unit
	Sku pulumi.StringInput `pulumi:"sku"`
	// only if `type`==`switch`, MAC Address of the Virtual Chassis
	VcMac pulumi.StringInput `pulumi:"vcMac"`
}

func (GetInventoryOrgInventoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInventoryOrgInventory)(nil)).Elem()
}

func (i GetInventoryOrgInventoryArgs) ToGetInventoryOrgInventoryOutput() GetInventoryOrgInventoryOutput {
	return i.ToGetInventoryOrgInventoryOutputWithContext(context.Background())
}

func (i GetInventoryOrgInventoryArgs) ToGetInventoryOrgInventoryOutputWithContext(ctx context.Context) GetInventoryOrgInventoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInventoryOrgInventoryOutput)
}

// GetInventoryOrgInventoryArrayInput is an input type that accepts GetInventoryOrgInventoryArray and GetInventoryOrgInventoryArrayOutput values.
// You can construct a concrete instance of `GetInventoryOrgInventoryArrayInput` via:
//
//	GetInventoryOrgInventoryArray{ GetInventoryOrgInventoryArgs{...} }
type GetInventoryOrgInventoryArrayInput interface {
	pulumi.Input

	ToGetInventoryOrgInventoryArrayOutput() GetInventoryOrgInventoryArrayOutput
	ToGetInventoryOrgInventoryArrayOutputWithContext(context.Context) GetInventoryOrgInventoryArrayOutput
}

type GetInventoryOrgInventoryArray []GetInventoryOrgInventoryInput

func (GetInventoryOrgInventoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInventoryOrgInventory)(nil)).Elem()
}

func (i GetInventoryOrgInventoryArray) ToGetInventoryOrgInventoryArrayOutput() GetInventoryOrgInventoryArrayOutput {
	return i.ToGetInventoryOrgInventoryArrayOutputWithContext(context.Background())
}

func (i GetInventoryOrgInventoryArray) ToGetInventoryOrgInventoryArrayOutputWithContext(ctx context.Context) GetInventoryOrgInventoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInventoryOrgInventoryArrayOutput)
}

type GetInventoryOrgInventoryOutput struct{ *pulumi.OutputState }

func (GetInventoryOrgInventoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInventoryOrgInventory)(nil)).Elem()
}

func (o GetInventoryOrgInventoryOutput) ToGetInventoryOrgInventoryOutput() GetInventoryOrgInventoryOutput {
	return o
}

func (o GetInventoryOrgInventoryOutput) ToGetInventoryOrgInventoryOutputWithContext(ctx context.Context) GetInventoryOrgInventoryOutput {
	return o
}

// only if `type`==`switch` or `type`==`gateway`
// whether the switch/gateway is adopted
func (o GetInventoryOrgInventoryOutput) Adopted() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) bool { return v.Adopted }).(pulumi.BoolOutput)
}

// device claim code
func (o GetInventoryOrgInventoryOutput) ClaimCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.ClaimCode }).(pulumi.StringOutput)
}

// whether the device is connected
func (o GetInventoryOrgInventoryOutput) Connected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) bool { return v.Connected }).(pulumi.BoolOutput)
}

// inventory created time, in epoch
func (o GetInventoryOrgInventoryOutput) CreatedTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) int { return v.CreatedTime }).(pulumi.IntOutput)
}

// deviceprofile id if assigned, null if not assigned
func (o GetInventoryOrgInventoryOutput) DeviceprofileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.DeviceprofileId }).(pulumi.StringOutput)
}

// hostname reported by the device
func (o GetInventoryOrgInventoryOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.Hostname }).(pulumi.StringOutput)
}

// device hardware revision number
func (o GetInventoryOrgInventoryOutput) HwRev() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.HwRev }).(pulumi.StringOutput)
}

// device id
func (o GetInventoryOrgInventoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInventoryOrgInventoryOutput) Jsi() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) bool { return v.Jsi }).(pulumi.BoolOutput)
}

// device MAC address
func (o GetInventoryOrgInventoryOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.Mac }).(pulumi.StringOutput)
}

// device model
func (o GetInventoryOrgInventoryOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.Model }).(pulumi.StringOutput)
}

// inventory last modified time, in epoch
func (o GetInventoryOrgInventoryOutput) ModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) int { return v.ModifiedTime }).(pulumi.IntOutput)
}

// device name if configured
func (o GetInventoryOrgInventoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInventoryOrgInventoryOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.OrgId }).(pulumi.StringOutput)
}

// device serial
func (o GetInventoryOrgInventoryOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.Serial }).(pulumi.StringOutput)
}

func (o GetInventoryOrgInventoryOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.SiteId }).(pulumi.StringOutput)
}

// device stock keeping unit
func (o GetInventoryOrgInventoryOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.Sku }).(pulumi.StringOutput)
}

// only if `type`==`switch`, MAC Address of the Virtual Chassis
func (o GetInventoryOrgInventoryOutput) VcMac() pulumi.StringOutput {
	return o.ApplyT(func(v GetInventoryOrgInventory) string { return v.VcMac }).(pulumi.StringOutput)
}

type GetInventoryOrgInventoryArrayOutput struct{ *pulumi.OutputState }

func (GetInventoryOrgInventoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInventoryOrgInventory)(nil)).Elem()
}

func (o GetInventoryOrgInventoryArrayOutput) ToGetInventoryOrgInventoryArrayOutput() GetInventoryOrgInventoryArrayOutput {
	return o
}

func (o GetInventoryOrgInventoryArrayOutput) ToGetInventoryOrgInventoryArrayOutputWithContext(ctx context.Context) GetInventoryOrgInventoryArrayOutput {
	return o
}

func (o GetInventoryOrgInventoryArrayOutput) Index(i pulumi.IntInput) GetInventoryOrgInventoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInventoryOrgInventory {
		return vs[0].([]GetInventoryOrgInventory)[vs[1].(int)]
	}).(GetInventoryOrgInventoryOutput)
}

type GetNacrulesOrgNacrule struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetNacrulesOrgNacruleInput is an input type that accepts GetNacrulesOrgNacruleArgs and GetNacrulesOrgNacruleOutput values.
// You can construct a concrete instance of `GetNacrulesOrgNacruleInput` via:
//
//	GetNacrulesOrgNacruleArgs{...}
type GetNacrulesOrgNacruleInput interface {
	pulumi.Input

	ToGetNacrulesOrgNacruleOutput() GetNacrulesOrgNacruleOutput
	ToGetNacrulesOrgNacruleOutputWithContext(context.Context) GetNacrulesOrgNacruleOutput
}

type GetNacrulesOrgNacruleArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetNacrulesOrgNacruleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNacrulesOrgNacrule)(nil)).Elem()
}

func (i GetNacrulesOrgNacruleArgs) ToGetNacrulesOrgNacruleOutput() GetNacrulesOrgNacruleOutput {
	return i.ToGetNacrulesOrgNacruleOutputWithContext(context.Background())
}

func (i GetNacrulesOrgNacruleArgs) ToGetNacrulesOrgNacruleOutputWithContext(ctx context.Context) GetNacrulesOrgNacruleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNacrulesOrgNacruleOutput)
}

// GetNacrulesOrgNacruleArrayInput is an input type that accepts GetNacrulesOrgNacruleArray and GetNacrulesOrgNacruleArrayOutput values.
// You can construct a concrete instance of `GetNacrulesOrgNacruleArrayInput` via:
//
//	GetNacrulesOrgNacruleArray{ GetNacrulesOrgNacruleArgs{...} }
type GetNacrulesOrgNacruleArrayInput interface {
	pulumi.Input

	ToGetNacrulesOrgNacruleArrayOutput() GetNacrulesOrgNacruleArrayOutput
	ToGetNacrulesOrgNacruleArrayOutputWithContext(context.Context) GetNacrulesOrgNacruleArrayOutput
}

type GetNacrulesOrgNacruleArray []GetNacrulesOrgNacruleInput

func (GetNacrulesOrgNacruleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNacrulesOrgNacrule)(nil)).Elem()
}

func (i GetNacrulesOrgNacruleArray) ToGetNacrulesOrgNacruleArrayOutput() GetNacrulesOrgNacruleArrayOutput {
	return i.ToGetNacrulesOrgNacruleArrayOutputWithContext(context.Background())
}

func (i GetNacrulesOrgNacruleArray) ToGetNacrulesOrgNacruleArrayOutputWithContext(ctx context.Context) GetNacrulesOrgNacruleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNacrulesOrgNacruleArrayOutput)
}

type GetNacrulesOrgNacruleOutput struct{ *pulumi.OutputState }

func (GetNacrulesOrgNacruleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNacrulesOrgNacrule)(nil)).Elem()
}

func (o GetNacrulesOrgNacruleOutput) ToGetNacrulesOrgNacruleOutput() GetNacrulesOrgNacruleOutput {
	return o
}

func (o GetNacrulesOrgNacruleOutput) ToGetNacrulesOrgNacruleOutputWithContext(ctx context.Context) GetNacrulesOrgNacruleOutput {
	return o
}

func (o GetNacrulesOrgNacruleOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNacrulesOrgNacrule) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetNacrulesOrgNacruleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNacrulesOrgNacrule) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNacrulesOrgNacruleOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNacrulesOrgNacrule) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetNacrulesOrgNacruleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNacrulesOrgNacrule) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNacrulesOrgNacruleOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNacrulesOrgNacrule) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetNacrulesOrgNacruleArrayOutput struct{ *pulumi.OutputState }

func (GetNacrulesOrgNacruleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNacrulesOrgNacrule)(nil)).Elem()
}

func (o GetNacrulesOrgNacruleArrayOutput) ToGetNacrulesOrgNacruleArrayOutput() GetNacrulesOrgNacruleArrayOutput {
	return o
}

func (o GetNacrulesOrgNacruleArrayOutput) ToGetNacrulesOrgNacruleArrayOutputWithContext(ctx context.Context) GetNacrulesOrgNacruleArrayOutput {
	return o
}

func (o GetNacrulesOrgNacruleArrayOutput) Index(i pulumi.IntInput) GetNacrulesOrgNacruleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNacrulesOrgNacrule {
		return vs[0].([]GetNacrulesOrgNacrule)[vs[1].(int)]
	}).(GetNacrulesOrgNacruleOutput)
}

type GetNactagsOrgNactag struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetNactagsOrgNactagInput is an input type that accepts GetNactagsOrgNactagArgs and GetNactagsOrgNactagOutput values.
// You can construct a concrete instance of `GetNactagsOrgNactagInput` via:
//
//	GetNactagsOrgNactagArgs{...}
type GetNactagsOrgNactagInput interface {
	pulumi.Input

	ToGetNactagsOrgNactagOutput() GetNactagsOrgNactagOutput
	ToGetNactagsOrgNactagOutputWithContext(context.Context) GetNactagsOrgNactagOutput
}

type GetNactagsOrgNactagArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetNactagsOrgNactagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNactagsOrgNactag)(nil)).Elem()
}

func (i GetNactagsOrgNactagArgs) ToGetNactagsOrgNactagOutput() GetNactagsOrgNactagOutput {
	return i.ToGetNactagsOrgNactagOutputWithContext(context.Background())
}

func (i GetNactagsOrgNactagArgs) ToGetNactagsOrgNactagOutputWithContext(ctx context.Context) GetNactagsOrgNactagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNactagsOrgNactagOutput)
}

// GetNactagsOrgNactagArrayInput is an input type that accepts GetNactagsOrgNactagArray and GetNactagsOrgNactagArrayOutput values.
// You can construct a concrete instance of `GetNactagsOrgNactagArrayInput` via:
//
//	GetNactagsOrgNactagArray{ GetNactagsOrgNactagArgs{...} }
type GetNactagsOrgNactagArrayInput interface {
	pulumi.Input

	ToGetNactagsOrgNactagArrayOutput() GetNactagsOrgNactagArrayOutput
	ToGetNactagsOrgNactagArrayOutputWithContext(context.Context) GetNactagsOrgNactagArrayOutput
}

type GetNactagsOrgNactagArray []GetNactagsOrgNactagInput

func (GetNactagsOrgNactagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNactagsOrgNactag)(nil)).Elem()
}

func (i GetNactagsOrgNactagArray) ToGetNactagsOrgNactagArrayOutput() GetNactagsOrgNactagArrayOutput {
	return i.ToGetNactagsOrgNactagArrayOutputWithContext(context.Background())
}

func (i GetNactagsOrgNactagArray) ToGetNactagsOrgNactagArrayOutputWithContext(ctx context.Context) GetNactagsOrgNactagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNactagsOrgNactagArrayOutput)
}

type GetNactagsOrgNactagOutput struct{ *pulumi.OutputState }

func (GetNactagsOrgNactagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNactagsOrgNactag)(nil)).Elem()
}

func (o GetNactagsOrgNactagOutput) ToGetNactagsOrgNactagOutput() GetNactagsOrgNactagOutput {
	return o
}

func (o GetNactagsOrgNactagOutput) ToGetNactagsOrgNactagOutputWithContext(ctx context.Context) GetNactagsOrgNactagOutput {
	return o
}

func (o GetNactagsOrgNactagOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNactagsOrgNactag) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetNactagsOrgNactagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNactagsOrgNactag) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNactagsOrgNactagOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNactagsOrgNactag) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetNactagsOrgNactagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNactagsOrgNactag) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNactagsOrgNactagOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNactagsOrgNactag) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetNactagsOrgNactagArrayOutput struct{ *pulumi.OutputState }

func (GetNactagsOrgNactagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNactagsOrgNactag)(nil)).Elem()
}

func (o GetNactagsOrgNactagArrayOutput) ToGetNactagsOrgNactagArrayOutput() GetNactagsOrgNactagArrayOutput {
	return o
}

func (o GetNactagsOrgNactagArrayOutput) ToGetNactagsOrgNactagArrayOutputWithContext(ctx context.Context) GetNactagsOrgNactagArrayOutput {
	return o
}

func (o GetNactagsOrgNactagArrayOutput) Index(i pulumi.IntInput) GetNactagsOrgNactagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNactagsOrgNactag {
		return vs[0].([]GetNactagsOrgNactag)[vs[1].(int)]
	}).(GetNactagsOrgNactagOutput)
}

type GetNetworksOrgNetwork struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetNetworksOrgNetworkInput is an input type that accepts GetNetworksOrgNetworkArgs and GetNetworksOrgNetworkOutput values.
// You can construct a concrete instance of `GetNetworksOrgNetworkInput` via:
//
//	GetNetworksOrgNetworkArgs{...}
type GetNetworksOrgNetworkInput interface {
	pulumi.Input

	ToGetNetworksOrgNetworkOutput() GetNetworksOrgNetworkOutput
	ToGetNetworksOrgNetworkOutputWithContext(context.Context) GetNetworksOrgNetworkOutput
}

type GetNetworksOrgNetworkArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetNetworksOrgNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksOrgNetwork)(nil)).Elem()
}

func (i GetNetworksOrgNetworkArgs) ToGetNetworksOrgNetworkOutput() GetNetworksOrgNetworkOutput {
	return i.ToGetNetworksOrgNetworkOutputWithContext(context.Background())
}

func (i GetNetworksOrgNetworkArgs) ToGetNetworksOrgNetworkOutputWithContext(ctx context.Context) GetNetworksOrgNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksOrgNetworkOutput)
}

// GetNetworksOrgNetworkArrayInput is an input type that accepts GetNetworksOrgNetworkArray and GetNetworksOrgNetworkArrayOutput values.
// You can construct a concrete instance of `GetNetworksOrgNetworkArrayInput` via:
//
//	GetNetworksOrgNetworkArray{ GetNetworksOrgNetworkArgs{...} }
type GetNetworksOrgNetworkArrayInput interface {
	pulumi.Input

	ToGetNetworksOrgNetworkArrayOutput() GetNetworksOrgNetworkArrayOutput
	ToGetNetworksOrgNetworkArrayOutputWithContext(context.Context) GetNetworksOrgNetworkArrayOutput
}

type GetNetworksOrgNetworkArray []GetNetworksOrgNetworkInput

func (GetNetworksOrgNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksOrgNetwork)(nil)).Elem()
}

func (i GetNetworksOrgNetworkArray) ToGetNetworksOrgNetworkArrayOutput() GetNetworksOrgNetworkArrayOutput {
	return i.ToGetNetworksOrgNetworkArrayOutputWithContext(context.Background())
}

func (i GetNetworksOrgNetworkArray) ToGetNetworksOrgNetworkArrayOutputWithContext(ctx context.Context) GetNetworksOrgNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksOrgNetworkArrayOutput)
}

type GetNetworksOrgNetworkOutput struct{ *pulumi.OutputState }

func (GetNetworksOrgNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksOrgNetwork)(nil)).Elem()
}

func (o GetNetworksOrgNetworkOutput) ToGetNetworksOrgNetworkOutput() GetNetworksOrgNetworkOutput {
	return o
}

func (o GetNetworksOrgNetworkOutput) ToGetNetworksOrgNetworkOutputWithContext(ctx context.Context) GetNetworksOrgNetworkOutput {
	return o
}

func (o GetNetworksOrgNetworkOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNetworksOrgNetwork) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetNetworksOrgNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksOrgNetwork) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNetworksOrgNetworkOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNetworksOrgNetwork) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetNetworksOrgNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksOrgNetwork) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNetworksOrgNetworkOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworksOrgNetwork) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetNetworksOrgNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetNetworksOrgNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksOrgNetwork)(nil)).Elem()
}

func (o GetNetworksOrgNetworkArrayOutput) ToGetNetworksOrgNetworkArrayOutput() GetNetworksOrgNetworkArrayOutput {
	return o
}

func (o GetNetworksOrgNetworkArrayOutput) ToGetNetworksOrgNetworkArrayOutputWithContext(ctx context.Context) GetNetworksOrgNetworkArrayOutput {
	return o
}

func (o GetNetworksOrgNetworkArrayOutput) Index(i pulumi.IntInput) GetNetworksOrgNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworksOrgNetwork {
		return vs[0].([]GetNetworksOrgNetwork)[vs[1].(int)]
	}).(GetNetworksOrgNetworkOutput)
}

type GetNetworktemplatesOrgNetworktemplate struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetNetworktemplatesOrgNetworktemplateInput is an input type that accepts GetNetworktemplatesOrgNetworktemplateArgs and GetNetworktemplatesOrgNetworktemplateOutput values.
// You can construct a concrete instance of `GetNetworktemplatesOrgNetworktemplateInput` via:
//
//	GetNetworktemplatesOrgNetworktemplateArgs{...}
type GetNetworktemplatesOrgNetworktemplateInput interface {
	pulumi.Input

	ToGetNetworktemplatesOrgNetworktemplateOutput() GetNetworktemplatesOrgNetworktemplateOutput
	ToGetNetworktemplatesOrgNetworktemplateOutputWithContext(context.Context) GetNetworktemplatesOrgNetworktemplateOutput
}

type GetNetworktemplatesOrgNetworktemplateArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetNetworktemplatesOrgNetworktemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworktemplatesOrgNetworktemplate)(nil)).Elem()
}

func (i GetNetworktemplatesOrgNetworktemplateArgs) ToGetNetworktemplatesOrgNetworktemplateOutput() GetNetworktemplatesOrgNetworktemplateOutput {
	return i.ToGetNetworktemplatesOrgNetworktemplateOutputWithContext(context.Background())
}

func (i GetNetworktemplatesOrgNetworktemplateArgs) ToGetNetworktemplatesOrgNetworktemplateOutputWithContext(ctx context.Context) GetNetworktemplatesOrgNetworktemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworktemplatesOrgNetworktemplateOutput)
}

// GetNetworktemplatesOrgNetworktemplateArrayInput is an input type that accepts GetNetworktemplatesOrgNetworktemplateArray and GetNetworktemplatesOrgNetworktemplateArrayOutput values.
// You can construct a concrete instance of `GetNetworktemplatesOrgNetworktemplateArrayInput` via:
//
//	GetNetworktemplatesOrgNetworktemplateArray{ GetNetworktemplatesOrgNetworktemplateArgs{...} }
type GetNetworktemplatesOrgNetworktemplateArrayInput interface {
	pulumi.Input

	ToGetNetworktemplatesOrgNetworktemplateArrayOutput() GetNetworktemplatesOrgNetworktemplateArrayOutput
	ToGetNetworktemplatesOrgNetworktemplateArrayOutputWithContext(context.Context) GetNetworktemplatesOrgNetworktemplateArrayOutput
}

type GetNetworktemplatesOrgNetworktemplateArray []GetNetworktemplatesOrgNetworktemplateInput

func (GetNetworktemplatesOrgNetworktemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworktemplatesOrgNetworktemplate)(nil)).Elem()
}

func (i GetNetworktemplatesOrgNetworktemplateArray) ToGetNetworktemplatesOrgNetworktemplateArrayOutput() GetNetworktemplatesOrgNetworktemplateArrayOutput {
	return i.ToGetNetworktemplatesOrgNetworktemplateArrayOutputWithContext(context.Background())
}

func (i GetNetworktemplatesOrgNetworktemplateArray) ToGetNetworktemplatesOrgNetworktemplateArrayOutputWithContext(ctx context.Context) GetNetworktemplatesOrgNetworktemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworktemplatesOrgNetworktemplateArrayOutput)
}

type GetNetworktemplatesOrgNetworktemplateOutput struct{ *pulumi.OutputState }

func (GetNetworktemplatesOrgNetworktemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworktemplatesOrgNetworktemplate)(nil)).Elem()
}

func (o GetNetworktemplatesOrgNetworktemplateOutput) ToGetNetworktemplatesOrgNetworktemplateOutput() GetNetworktemplatesOrgNetworktemplateOutput {
	return o
}

func (o GetNetworktemplatesOrgNetworktemplateOutput) ToGetNetworktemplatesOrgNetworktemplateOutputWithContext(ctx context.Context) GetNetworktemplatesOrgNetworktemplateOutput {
	return o
}

func (o GetNetworktemplatesOrgNetworktemplateOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNetworktemplatesOrgNetworktemplate) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetNetworktemplatesOrgNetworktemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworktemplatesOrgNetworktemplate) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNetworktemplatesOrgNetworktemplateOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetNetworktemplatesOrgNetworktemplate) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetNetworktemplatesOrgNetworktemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworktemplatesOrgNetworktemplate) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNetworktemplatesOrgNetworktemplateOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworktemplatesOrgNetworktemplate) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetNetworktemplatesOrgNetworktemplateArrayOutput struct{ *pulumi.OutputState }

func (GetNetworktemplatesOrgNetworktemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworktemplatesOrgNetworktemplate)(nil)).Elem()
}

func (o GetNetworktemplatesOrgNetworktemplateArrayOutput) ToGetNetworktemplatesOrgNetworktemplateArrayOutput() GetNetworktemplatesOrgNetworktemplateArrayOutput {
	return o
}

func (o GetNetworktemplatesOrgNetworktemplateArrayOutput) ToGetNetworktemplatesOrgNetworktemplateArrayOutputWithContext(ctx context.Context) GetNetworktemplatesOrgNetworktemplateArrayOutput {
	return o
}

func (o GetNetworktemplatesOrgNetworktemplateArrayOutput) Index(i pulumi.IntInput) GetNetworktemplatesOrgNetworktemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworktemplatesOrgNetworktemplate {
		return vs[0].([]GetNetworktemplatesOrgNetworktemplate)[vs[1].(int)]
	}).(GetNetworktemplatesOrgNetworktemplateOutput)
}

type GetRftemplatesOrgRftemplate struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetRftemplatesOrgRftemplateInput is an input type that accepts GetRftemplatesOrgRftemplateArgs and GetRftemplatesOrgRftemplateOutput values.
// You can construct a concrete instance of `GetRftemplatesOrgRftemplateInput` via:
//
//	GetRftemplatesOrgRftemplateArgs{...}
type GetRftemplatesOrgRftemplateInput interface {
	pulumi.Input

	ToGetRftemplatesOrgRftemplateOutput() GetRftemplatesOrgRftemplateOutput
	ToGetRftemplatesOrgRftemplateOutputWithContext(context.Context) GetRftemplatesOrgRftemplateOutput
}

type GetRftemplatesOrgRftemplateArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetRftemplatesOrgRftemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRftemplatesOrgRftemplate)(nil)).Elem()
}

func (i GetRftemplatesOrgRftemplateArgs) ToGetRftemplatesOrgRftemplateOutput() GetRftemplatesOrgRftemplateOutput {
	return i.ToGetRftemplatesOrgRftemplateOutputWithContext(context.Background())
}

func (i GetRftemplatesOrgRftemplateArgs) ToGetRftemplatesOrgRftemplateOutputWithContext(ctx context.Context) GetRftemplatesOrgRftemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRftemplatesOrgRftemplateOutput)
}

// GetRftemplatesOrgRftemplateArrayInput is an input type that accepts GetRftemplatesOrgRftemplateArray and GetRftemplatesOrgRftemplateArrayOutput values.
// You can construct a concrete instance of `GetRftemplatesOrgRftemplateArrayInput` via:
//
//	GetRftemplatesOrgRftemplateArray{ GetRftemplatesOrgRftemplateArgs{...} }
type GetRftemplatesOrgRftemplateArrayInput interface {
	pulumi.Input

	ToGetRftemplatesOrgRftemplateArrayOutput() GetRftemplatesOrgRftemplateArrayOutput
	ToGetRftemplatesOrgRftemplateArrayOutputWithContext(context.Context) GetRftemplatesOrgRftemplateArrayOutput
}

type GetRftemplatesOrgRftemplateArray []GetRftemplatesOrgRftemplateInput

func (GetRftemplatesOrgRftemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRftemplatesOrgRftemplate)(nil)).Elem()
}

func (i GetRftemplatesOrgRftemplateArray) ToGetRftemplatesOrgRftemplateArrayOutput() GetRftemplatesOrgRftemplateArrayOutput {
	return i.ToGetRftemplatesOrgRftemplateArrayOutputWithContext(context.Background())
}

func (i GetRftemplatesOrgRftemplateArray) ToGetRftemplatesOrgRftemplateArrayOutputWithContext(ctx context.Context) GetRftemplatesOrgRftemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRftemplatesOrgRftemplateArrayOutput)
}

type GetRftemplatesOrgRftemplateOutput struct{ *pulumi.OutputState }

func (GetRftemplatesOrgRftemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRftemplatesOrgRftemplate)(nil)).Elem()
}

func (o GetRftemplatesOrgRftemplateOutput) ToGetRftemplatesOrgRftemplateOutput() GetRftemplatesOrgRftemplateOutput {
	return o
}

func (o GetRftemplatesOrgRftemplateOutput) ToGetRftemplatesOrgRftemplateOutputWithContext(ctx context.Context) GetRftemplatesOrgRftemplateOutput {
	return o
}

func (o GetRftemplatesOrgRftemplateOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetRftemplatesOrgRftemplate) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetRftemplatesOrgRftemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRftemplatesOrgRftemplate) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRftemplatesOrgRftemplateOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetRftemplatesOrgRftemplate) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetRftemplatesOrgRftemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRftemplatesOrgRftemplate) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRftemplatesOrgRftemplateOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRftemplatesOrgRftemplate) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetRftemplatesOrgRftemplateArrayOutput struct{ *pulumi.OutputState }

func (GetRftemplatesOrgRftemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRftemplatesOrgRftemplate)(nil)).Elem()
}

func (o GetRftemplatesOrgRftemplateArrayOutput) ToGetRftemplatesOrgRftemplateArrayOutput() GetRftemplatesOrgRftemplateArrayOutput {
	return o
}

func (o GetRftemplatesOrgRftemplateArrayOutput) ToGetRftemplatesOrgRftemplateArrayOutputWithContext(ctx context.Context) GetRftemplatesOrgRftemplateArrayOutput {
	return o
}

func (o GetRftemplatesOrgRftemplateArrayOutput) Index(i pulumi.IntInput) GetRftemplatesOrgRftemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRftemplatesOrgRftemplate {
		return vs[0].([]GetRftemplatesOrgRftemplate)[vs[1].(int)]
	}).(GetRftemplatesOrgRftemplateOutput)
}

type GetServicepoliciesOrgServicepolicy struct {
	// enum: `allow`, `deny`
	Action string `pulumi:"action"`
	// For SRX Only
	Appqoe      GetServicepoliciesOrgServicepolicyAppqoe `pulumi:"appqoe"`
	CreatedTime float64                                  `pulumi:"createdTime"`
	Ewfs        []GetServicepoliciesOrgServicepolicyEwf  `pulumi:"ewfs"`
	Id          string                                   `pulumi:"id"`
	Idp         GetServicepoliciesOrgServicepolicyIdp    `pulumi:"idp"`
	// access within the same VRF
	LocalRouting bool    `pulumi:"localRouting"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
	// by default, we derive all paths available and use them
	// optionally, you can customize by using `pathPreference`
	PathPreference string   `pulumi:"pathPreference"`
	Services       []string `pulumi:"services"`
	Tenants        []string `pulumi:"tenants"`
}

// GetServicepoliciesOrgServicepolicyInput is an input type that accepts GetServicepoliciesOrgServicepolicyArgs and GetServicepoliciesOrgServicepolicyOutput values.
// You can construct a concrete instance of `GetServicepoliciesOrgServicepolicyInput` via:
//
//	GetServicepoliciesOrgServicepolicyArgs{...}
type GetServicepoliciesOrgServicepolicyInput interface {
	pulumi.Input

	ToGetServicepoliciesOrgServicepolicyOutput() GetServicepoliciesOrgServicepolicyOutput
	ToGetServicepoliciesOrgServicepolicyOutputWithContext(context.Context) GetServicepoliciesOrgServicepolicyOutput
}

type GetServicepoliciesOrgServicepolicyArgs struct {
	// enum: `allow`, `deny`
	Action pulumi.StringInput `pulumi:"action"`
	// For SRX Only
	Appqoe      GetServicepoliciesOrgServicepolicyAppqoeInput   `pulumi:"appqoe"`
	CreatedTime pulumi.Float64Input                             `pulumi:"createdTime"`
	Ewfs        GetServicepoliciesOrgServicepolicyEwfArrayInput `pulumi:"ewfs"`
	Id          pulumi.StringInput                              `pulumi:"id"`
	Idp         GetServicepoliciesOrgServicepolicyIdpInput      `pulumi:"idp"`
	// access within the same VRF
	LocalRouting pulumi.BoolInput    `pulumi:"localRouting"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
	// by default, we derive all paths available and use them
	// optionally, you can customize by using `pathPreference`
	PathPreference pulumi.StringInput      `pulumi:"pathPreference"`
	Services       pulumi.StringArrayInput `pulumi:"services"`
	Tenants        pulumi.StringArrayInput `pulumi:"tenants"`
}

func (GetServicepoliciesOrgServicepolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicy)(nil)).Elem()
}

func (i GetServicepoliciesOrgServicepolicyArgs) ToGetServicepoliciesOrgServicepolicyOutput() GetServicepoliciesOrgServicepolicyOutput {
	return i.ToGetServicepoliciesOrgServicepolicyOutputWithContext(context.Background())
}

func (i GetServicepoliciesOrgServicepolicyArgs) ToGetServicepoliciesOrgServicepolicyOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicepoliciesOrgServicepolicyOutput)
}

// GetServicepoliciesOrgServicepolicyArrayInput is an input type that accepts GetServicepoliciesOrgServicepolicyArray and GetServicepoliciesOrgServicepolicyArrayOutput values.
// You can construct a concrete instance of `GetServicepoliciesOrgServicepolicyArrayInput` via:
//
//	GetServicepoliciesOrgServicepolicyArray{ GetServicepoliciesOrgServicepolicyArgs{...} }
type GetServicepoliciesOrgServicepolicyArrayInput interface {
	pulumi.Input

	ToGetServicepoliciesOrgServicepolicyArrayOutput() GetServicepoliciesOrgServicepolicyArrayOutput
	ToGetServicepoliciesOrgServicepolicyArrayOutputWithContext(context.Context) GetServicepoliciesOrgServicepolicyArrayOutput
}

type GetServicepoliciesOrgServicepolicyArray []GetServicepoliciesOrgServicepolicyInput

func (GetServicepoliciesOrgServicepolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicepoliciesOrgServicepolicy)(nil)).Elem()
}

func (i GetServicepoliciesOrgServicepolicyArray) ToGetServicepoliciesOrgServicepolicyArrayOutput() GetServicepoliciesOrgServicepolicyArrayOutput {
	return i.ToGetServicepoliciesOrgServicepolicyArrayOutputWithContext(context.Background())
}

func (i GetServicepoliciesOrgServicepolicyArray) ToGetServicepoliciesOrgServicepolicyArrayOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicepoliciesOrgServicepolicyArrayOutput)
}

type GetServicepoliciesOrgServicepolicyOutput struct{ *pulumi.OutputState }

func (GetServicepoliciesOrgServicepolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicy)(nil)).Elem()
}

func (o GetServicepoliciesOrgServicepolicyOutput) ToGetServicepoliciesOrgServicepolicyOutput() GetServicepoliciesOrgServicepolicyOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyOutput) ToGetServicepoliciesOrgServicepolicyOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyOutput {
	return o
}

// enum: `allow`, `deny`
func (o GetServicepoliciesOrgServicepolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) string { return v.Action }).(pulumi.StringOutput)
}

// For SRX Only
func (o GetServicepoliciesOrgServicepolicyOutput) Appqoe() GetServicepoliciesOrgServicepolicyAppqoeOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) GetServicepoliciesOrgServicepolicyAppqoe { return v.Appqoe }).(GetServicepoliciesOrgServicepolicyAppqoeOutput)
}

func (o GetServicepoliciesOrgServicepolicyOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetServicepoliciesOrgServicepolicyOutput) Ewfs() GetServicepoliciesOrgServicepolicyEwfArrayOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) []GetServicepoliciesOrgServicepolicyEwf { return v.Ewfs }).(GetServicepoliciesOrgServicepolicyEwfArrayOutput)
}

func (o GetServicepoliciesOrgServicepolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServicepoliciesOrgServicepolicyOutput) Idp() GetServicepoliciesOrgServicepolicyIdpOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) GetServicepoliciesOrgServicepolicyIdp { return v.Idp }).(GetServicepoliciesOrgServicepolicyIdpOutput)
}

// access within the same VRF
func (o GetServicepoliciesOrgServicepolicyOutput) LocalRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) bool { return v.LocalRouting }).(pulumi.BoolOutput)
}

func (o GetServicepoliciesOrgServicepolicyOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetServicepoliciesOrgServicepolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServicepoliciesOrgServicepolicyOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) string { return v.OrgId }).(pulumi.StringOutput)
}

// by default, we derive all paths available and use them
// optionally, you can customize by using `pathPreference`
func (o GetServicepoliciesOrgServicepolicyOutput) PathPreference() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) string { return v.PathPreference }).(pulumi.StringOutput)
}

func (o GetServicepoliciesOrgServicepolicyOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) []string { return v.Services }).(pulumi.StringArrayOutput)
}

func (o GetServicepoliciesOrgServicepolicyOutput) Tenants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicy) []string { return v.Tenants }).(pulumi.StringArrayOutput)
}

type GetServicepoliciesOrgServicepolicyArrayOutput struct{ *pulumi.OutputState }

func (GetServicepoliciesOrgServicepolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicepoliciesOrgServicepolicy)(nil)).Elem()
}

func (o GetServicepoliciesOrgServicepolicyArrayOutput) ToGetServicepoliciesOrgServicepolicyArrayOutput() GetServicepoliciesOrgServicepolicyArrayOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyArrayOutput) ToGetServicepoliciesOrgServicepolicyArrayOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyArrayOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyArrayOutput) Index(i pulumi.IntInput) GetServicepoliciesOrgServicepolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicepoliciesOrgServicepolicy {
		return vs[0].([]GetServicepoliciesOrgServicepolicy)[vs[1].(int)]
	}).(GetServicepoliciesOrgServicepolicyOutput)
}

type GetServicepoliciesOrgServicepolicyAppqoe struct {
	Enabled bool `pulumi:"enabled"`
}

// GetServicepoliciesOrgServicepolicyAppqoeInput is an input type that accepts GetServicepoliciesOrgServicepolicyAppqoeArgs and GetServicepoliciesOrgServicepolicyAppqoeOutput values.
// You can construct a concrete instance of `GetServicepoliciesOrgServicepolicyAppqoeInput` via:
//
//	GetServicepoliciesOrgServicepolicyAppqoeArgs{...}
type GetServicepoliciesOrgServicepolicyAppqoeInput interface {
	pulumi.Input

	ToGetServicepoliciesOrgServicepolicyAppqoeOutput() GetServicepoliciesOrgServicepolicyAppqoeOutput
	ToGetServicepoliciesOrgServicepolicyAppqoeOutputWithContext(context.Context) GetServicepoliciesOrgServicepolicyAppqoeOutput
}

type GetServicepoliciesOrgServicepolicyAppqoeArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetServicepoliciesOrgServicepolicyAppqoeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicyAppqoe)(nil)).Elem()
}

func (i GetServicepoliciesOrgServicepolicyAppqoeArgs) ToGetServicepoliciesOrgServicepolicyAppqoeOutput() GetServicepoliciesOrgServicepolicyAppqoeOutput {
	return i.ToGetServicepoliciesOrgServicepolicyAppqoeOutputWithContext(context.Background())
}

func (i GetServicepoliciesOrgServicepolicyAppqoeArgs) ToGetServicepoliciesOrgServicepolicyAppqoeOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyAppqoeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicepoliciesOrgServicepolicyAppqoeOutput)
}

type GetServicepoliciesOrgServicepolicyAppqoeOutput struct{ *pulumi.OutputState }

func (GetServicepoliciesOrgServicepolicyAppqoeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicyAppqoe)(nil)).Elem()
}

func (o GetServicepoliciesOrgServicepolicyAppqoeOutput) ToGetServicepoliciesOrgServicepolicyAppqoeOutput() GetServicepoliciesOrgServicepolicyAppqoeOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyAppqoeOutput) ToGetServicepoliciesOrgServicepolicyAppqoeOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyAppqoeOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyAppqoeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyAppqoe) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetServicepoliciesOrgServicepolicyEwf struct {
	AlertOnly    bool   `pulumi:"alertOnly"`
	BlockMessage string `pulumi:"blockMessage"`
	Enabled      bool   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile string `pulumi:"profile"`
}

// GetServicepoliciesOrgServicepolicyEwfInput is an input type that accepts GetServicepoliciesOrgServicepolicyEwfArgs and GetServicepoliciesOrgServicepolicyEwfOutput values.
// You can construct a concrete instance of `GetServicepoliciesOrgServicepolicyEwfInput` via:
//
//	GetServicepoliciesOrgServicepolicyEwfArgs{...}
type GetServicepoliciesOrgServicepolicyEwfInput interface {
	pulumi.Input

	ToGetServicepoliciesOrgServicepolicyEwfOutput() GetServicepoliciesOrgServicepolicyEwfOutput
	ToGetServicepoliciesOrgServicepolicyEwfOutputWithContext(context.Context) GetServicepoliciesOrgServicepolicyEwfOutput
}

type GetServicepoliciesOrgServicepolicyEwfArgs struct {
	AlertOnly    pulumi.BoolInput   `pulumi:"alertOnly"`
	BlockMessage pulumi.StringInput `pulumi:"blockMessage"`
	Enabled      pulumi.BoolInput   `pulumi:"enabled"`
	// enum: `critical`, `standard`, `strict`
	Profile pulumi.StringInput `pulumi:"profile"`
}

func (GetServicepoliciesOrgServicepolicyEwfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicyEwf)(nil)).Elem()
}

func (i GetServicepoliciesOrgServicepolicyEwfArgs) ToGetServicepoliciesOrgServicepolicyEwfOutput() GetServicepoliciesOrgServicepolicyEwfOutput {
	return i.ToGetServicepoliciesOrgServicepolicyEwfOutputWithContext(context.Background())
}

func (i GetServicepoliciesOrgServicepolicyEwfArgs) ToGetServicepoliciesOrgServicepolicyEwfOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyEwfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicepoliciesOrgServicepolicyEwfOutput)
}

// GetServicepoliciesOrgServicepolicyEwfArrayInput is an input type that accepts GetServicepoliciesOrgServicepolicyEwfArray and GetServicepoliciesOrgServicepolicyEwfArrayOutput values.
// You can construct a concrete instance of `GetServicepoliciesOrgServicepolicyEwfArrayInput` via:
//
//	GetServicepoliciesOrgServicepolicyEwfArray{ GetServicepoliciesOrgServicepolicyEwfArgs{...} }
type GetServicepoliciesOrgServicepolicyEwfArrayInput interface {
	pulumi.Input

	ToGetServicepoliciesOrgServicepolicyEwfArrayOutput() GetServicepoliciesOrgServicepolicyEwfArrayOutput
	ToGetServicepoliciesOrgServicepolicyEwfArrayOutputWithContext(context.Context) GetServicepoliciesOrgServicepolicyEwfArrayOutput
}

type GetServicepoliciesOrgServicepolicyEwfArray []GetServicepoliciesOrgServicepolicyEwfInput

func (GetServicepoliciesOrgServicepolicyEwfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicepoliciesOrgServicepolicyEwf)(nil)).Elem()
}

func (i GetServicepoliciesOrgServicepolicyEwfArray) ToGetServicepoliciesOrgServicepolicyEwfArrayOutput() GetServicepoliciesOrgServicepolicyEwfArrayOutput {
	return i.ToGetServicepoliciesOrgServicepolicyEwfArrayOutputWithContext(context.Background())
}

func (i GetServicepoliciesOrgServicepolicyEwfArray) ToGetServicepoliciesOrgServicepolicyEwfArrayOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyEwfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicepoliciesOrgServicepolicyEwfArrayOutput)
}

type GetServicepoliciesOrgServicepolicyEwfOutput struct{ *pulumi.OutputState }

func (GetServicepoliciesOrgServicepolicyEwfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicyEwf)(nil)).Elem()
}

func (o GetServicepoliciesOrgServicepolicyEwfOutput) ToGetServicepoliciesOrgServicepolicyEwfOutput() GetServicepoliciesOrgServicepolicyEwfOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyEwfOutput) ToGetServicepoliciesOrgServicepolicyEwfOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyEwfOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyEwfOutput) AlertOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyEwf) bool { return v.AlertOnly }).(pulumi.BoolOutput)
}

func (o GetServicepoliciesOrgServicepolicyEwfOutput) BlockMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyEwf) string { return v.BlockMessage }).(pulumi.StringOutput)
}

func (o GetServicepoliciesOrgServicepolicyEwfOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyEwf) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// enum: `critical`, `standard`, `strict`
func (o GetServicepoliciesOrgServicepolicyEwfOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyEwf) string { return v.Profile }).(pulumi.StringOutput)
}

type GetServicepoliciesOrgServicepolicyEwfArrayOutput struct{ *pulumi.OutputState }

func (GetServicepoliciesOrgServicepolicyEwfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicepoliciesOrgServicepolicyEwf)(nil)).Elem()
}

func (o GetServicepoliciesOrgServicepolicyEwfArrayOutput) ToGetServicepoliciesOrgServicepolicyEwfArrayOutput() GetServicepoliciesOrgServicepolicyEwfArrayOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyEwfArrayOutput) ToGetServicepoliciesOrgServicepolicyEwfArrayOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyEwfArrayOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyEwfArrayOutput) Index(i pulumi.IntInput) GetServicepoliciesOrgServicepolicyEwfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicepoliciesOrgServicepolicyEwf {
		return vs[0].([]GetServicepoliciesOrgServicepolicyEwf)[vs[1].(int)]
	}).(GetServicepoliciesOrgServicepolicyEwfOutput)
}

type GetServicepoliciesOrgServicepolicyIdp struct {
	AlertOnly bool `pulumi:"alertOnly"`
	Enabled   bool `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId string `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile string `pulumi:"profile"`
}

// GetServicepoliciesOrgServicepolicyIdpInput is an input type that accepts GetServicepoliciesOrgServicepolicyIdpArgs and GetServicepoliciesOrgServicepolicyIdpOutput values.
// You can construct a concrete instance of `GetServicepoliciesOrgServicepolicyIdpInput` via:
//
//	GetServicepoliciesOrgServicepolicyIdpArgs{...}
type GetServicepoliciesOrgServicepolicyIdpInput interface {
	pulumi.Input

	ToGetServicepoliciesOrgServicepolicyIdpOutput() GetServicepoliciesOrgServicepolicyIdpOutput
	ToGetServicepoliciesOrgServicepolicyIdpOutputWithContext(context.Context) GetServicepoliciesOrgServicepolicyIdpOutput
}

type GetServicepoliciesOrgServicepolicyIdpArgs struct {
	AlertOnly pulumi.BoolInput `pulumi:"alertOnly"`
	Enabled   pulumi.BoolInput `pulumi:"enabled"`
	// org_level IDP Profile can be used, this takes precedence over `profile`
	IdpprofileId pulumi.StringInput `pulumi:"idpprofileId"`
	// `strict` (default) / `standard` / or keys from from idp_profiles
	Profile pulumi.StringInput `pulumi:"profile"`
}

func (GetServicepoliciesOrgServicepolicyIdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicyIdp)(nil)).Elem()
}

func (i GetServicepoliciesOrgServicepolicyIdpArgs) ToGetServicepoliciesOrgServicepolicyIdpOutput() GetServicepoliciesOrgServicepolicyIdpOutput {
	return i.ToGetServicepoliciesOrgServicepolicyIdpOutputWithContext(context.Background())
}

func (i GetServicepoliciesOrgServicepolicyIdpArgs) ToGetServicepoliciesOrgServicepolicyIdpOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyIdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicepoliciesOrgServicepolicyIdpOutput)
}

type GetServicepoliciesOrgServicepolicyIdpOutput struct{ *pulumi.OutputState }

func (GetServicepoliciesOrgServicepolicyIdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicepoliciesOrgServicepolicyIdp)(nil)).Elem()
}

func (o GetServicepoliciesOrgServicepolicyIdpOutput) ToGetServicepoliciesOrgServicepolicyIdpOutput() GetServicepoliciesOrgServicepolicyIdpOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyIdpOutput) ToGetServicepoliciesOrgServicepolicyIdpOutputWithContext(ctx context.Context) GetServicepoliciesOrgServicepolicyIdpOutput {
	return o
}

func (o GetServicepoliciesOrgServicepolicyIdpOutput) AlertOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyIdp) bool { return v.AlertOnly }).(pulumi.BoolOutput)
}

func (o GetServicepoliciesOrgServicepolicyIdpOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyIdp) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// org_level IDP Profile can be used, this takes precedence over `profile`
func (o GetServicepoliciesOrgServicepolicyIdpOutput) IdpprofileId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyIdp) string { return v.IdpprofileId }).(pulumi.StringOutput)
}

// `strict` (default) / `standard` / or keys from from idp_profiles
func (o GetServicepoliciesOrgServicepolicyIdpOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicepoliciesOrgServicepolicyIdp) string { return v.Profile }).(pulumi.StringOutput)
}

type GetServicesOrgService struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetServicesOrgServiceInput is an input type that accepts GetServicesOrgServiceArgs and GetServicesOrgServiceOutput values.
// You can construct a concrete instance of `GetServicesOrgServiceInput` via:
//
//	GetServicesOrgServiceArgs{...}
type GetServicesOrgServiceInput interface {
	pulumi.Input

	ToGetServicesOrgServiceOutput() GetServicesOrgServiceOutput
	ToGetServicesOrgServiceOutputWithContext(context.Context) GetServicesOrgServiceOutput
}

type GetServicesOrgServiceArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetServicesOrgServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicesOrgService)(nil)).Elem()
}

func (i GetServicesOrgServiceArgs) ToGetServicesOrgServiceOutput() GetServicesOrgServiceOutput {
	return i.ToGetServicesOrgServiceOutputWithContext(context.Background())
}

func (i GetServicesOrgServiceArgs) ToGetServicesOrgServiceOutputWithContext(ctx context.Context) GetServicesOrgServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicesOrgServiceOutput)
}

// GetServicesOrgServiceArrayInput is an input type that accepts GetServicesOrgServiceArray and GetServicesOrgServiceArrayOutput values.
// You can construct a concrete instance of `GetServicesOrgServiceArrayInput` via:
//
//	GetServicesOrgServiceArray{ GetServicesOrgServiceArgs{...} }
type GetServicesOrgServiceArrayInput interface {
	pulumi.Input

	ToGetServicesOrgServiceArrayOutput() GetServicesOrgServiceArrayOutput
	ToGetServicesOrgServiceArrayOutputWithContext(context.Context) GetServicesOrgServiceArrayOutput
}

type GetServicesOrgServiceArray []GetServicesOrgServiceInput

func (GetServicesOrgServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicesOrgService)(nil)).Elem()
}

func (i GetServicesOrgServiceArray) ToGetServicesOrgServiceArrayOutput() GetServicesOrgServiceArrayOutput {
	return i.ToGetServicesOrgServiceArrayOutputWithContext(context.Background())
}

func (i GetServicesOrgServiceArray) ToGetServicesOrgServiceArrayOutputWithContext(ctx context.Context) GetServicesOrgServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicesOrgServiceArrayOutput)
}

type GetServicesOrgServiceOutput struct{ *pulumi.OutputState }

func (GetServicesOrgServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicesOrgService)(nil)).Elem()
}

func (o GetServicesOrgServiceOutput) ToGetServicesOrgServiceOutput() GetServicesOrgServiceOutput {
	return o
}

func (o GetServicesOrgServiceOutput) ToGetServicesOrgServiceOutputWithContext(ctx context.Context) GetServicesOrgServiceOutput {
	return o
}

func (o GetServicesOrgServiceOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetServicesOrgService) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetServicesOrgServiceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesOrgService) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServicesOrgServiceOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetServicesOrgService) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetServicesOrgServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesOrgService) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServicesOrgServiceOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesOrgService) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetServicesOrgServiceArrayOutput struct{ *pulumi.OutputState }

func (GetServicesOrgServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicesOrgService)(nil)).Elem()
}

func (o GetServicesOrgServiceArrayOutput) ToGetServicesOrgServiceArrayOutput() GetServicesOrgServiceArrayOutput {
	return o
}

func (o GetServicesOrgServiceArrayOutput) ToGetServicesOrgServiceArrayOutputWithContext(ctx context.Context) GetServicesOrgServiceArrayOutput {
	return o
}

func (o GetServicesOrgServiceArrayOutput) Index(i pulumi.IntInput) GetServicesOrgServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicesOrgService {
		return vs[0].([]GetServicesOrgService)[vs[1].(int)]
	}).(GetServicesOrgServiceOutput)
}

type GetSitegroupsOrgSitegroup struct {
	CreatedTime  float64  `pulumi:"createdTime"`
	Id           string   `pulumi:"id"`
	ModifiedTime float64  `pulumi:"modifiedTime"`
	Name         string   `pulumi:"name"`
	OrgId        string   `pulumi:"orgId"`
	SiteIds      []string `pulumi:"siteIds"`
}

// GetSitegroupsOrgSitegroupInput is an input type that accepts GetSitegroupsOrgSitegroupArgs and GetSitegroupsOrgSitegroupOutput values.
// You can construct a concrete instance of `GetSitegroupsOrgSitegroupInput` via:
//
//	GetSitegroupsOrgSitegroupArgs{...}
type GetSitegroupsOrgSitegroupInput interface {
	pulumi.Input

	ToGetSitegroupsOrgSitegroupOutput() GetSitegroupsOrgSitegroupOutput
	ToGetSitegroupsOrgSitegroupOutputWithContext(context.Context) GetSitegroupsOrgSitegroupOutput
}

type GetSitegroupsOrgSitegroupArgs struct {
	CreatedTime  pulumi.Float64Input     `pulumi:"createdTime"`
	Id           pulumi.StringInput      `pulumi:"id"`
	ModifiedTime pulumi.Float64Input     `pulumi:"modifiedTime"`
	Name         pulumi.StringInput      `pulumi:"name"`
	OrgId        pulumi.StringInput      `pulumi:"orgId"`
	SiteIds      pulumi.StringArrayInput `pulumi:"siteIds"`
}

func (GetSitegroupsOrgSitegroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitegroupsOrgSitegroup)(nil)).Elem()
}

func (i GetSitegroupsOrgSitegroupArgs) ToGetSitegroupsOrgSitegroupOutput() GetSitegroupsOrgSitegroupOutput {
	return i.ToGetSitegroupsOrgSitegroupOutputWithContext(context.Background())
}

func (i GetSitegroupsOrgSitegroupArgs) ToGetSitegroupsOrgSitegroupOutputWithContext(ctx context.Context) GetSitegroupsOrgSitegroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitegroupsOrgSitegroupOutput)
}

// GetSitegroupsOrgSitegroupArrayInput is an input type that accepts GetSitegroupsOrgSitegroupArray and GetSitegroupsOrgSitegroupArrayOutput values.
// You can construct a concrete instance of `GetSitegroupsOrgSitegroupArrayInput` via:
//
//	GetSitegroupsOrgSitegroupArray{ GetSitegroupsOrgSitegroupArgs{...} }
type GetSitegroupsOrgSitegroupArrayInput interface {
	pulumi.Input

	ToGetSitegroupsOrgSitegroupArrayOutput() GetSitegroupsOrgSitegroupArrayOutput
	ToGetSitegroupsOrgSitegroupArrayOutputWithContext(context.Context) GetSitegroupsOrgSitegroupArrayOutput
}

type GetSitegroupsOrgSitegroupArray []GetSitegroupsOrgSitegroupInput

func (GetSitegroupsOrgSitegroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitegroupsOrgSitegroup)(nil)).Elem()
}

func (i GetSitegroupsOrgSitegroupArray) ToGetSitegroupsOrgSitegroupArrayOutput() GetSitegroupsOrgSitegroupArrayOutput {
	return i.ToGetSitegroupsOrgSitegroupArrayOutputWithContext(context.Background())
}

func (i GetSitegroupsOrgSitegroupArray) ToGetSitegroupsOrgSitegroupArrayOutputWithContext(ctx context.Context) GetSitegroupsOrgSitegroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSitegroupsOrgSitegroupArrayOutput)
}

type GetSitegroupsOrgSitegroupOutput struct{ *pulumi.OutputState }

func (GetSitegroupsOrgSitegroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSitegroupsOrgSitegroup)(nil)).Elem()
}

func (o GetSitegroupsOrgSitegroupOutput) ToGetSitegroupsOrgSitegroupOutput() GetSitegroupsOrgSitegroupOutput {
	return o
}

func (o GetSitegroupsOrgSitegroupOutput) ToGetSitegroupsOrgSitegroupOutputWithContext(ctx context.Context) GetSitegroupsOrgSitegroupOutput {
	return o
}

func (o GetSitegroupsOrgSitegroupOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetSitegroupsOrgSitegroup) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetSitegroupsOrgSitegroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitegroupsOrgSitegroup) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSitegroupsOrgSitegroupOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetSitegroupsOrgSitegroup) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetSitegroupsOrgSitegroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitegroupsOrgSitegroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSitegroupsOrgSitegroupOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSitegroupsOrgSitegroup) string { return v.OrgId }).(pulumi.StringOutput)
}

func (o GetSitegroupsOrgSitegroupOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSitegroupsOrgSitegroup) []string { return v.SiteIds }).(pulumi.StringArrayOutput)
}

type GetSitegroupsOrgSitegroupArrayOutput struct{ *pulumi.OutputState }

func (GetSitegroupsOrgSitegroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSitegroupsOrgSitegroup)(nil)).Elem()
}

func (o GetSitegroupsOrgSitegroupArrayOutput) ToGetSitegroupsOrgSitegroupArrayOutput() GetSitegroupsOrgSitegroupArrayOutput {
	return o
}

func (o GetSitegroupsOrgSitegroupArrayOutput) ToGetSitegroupsOrgSitegroupArrayOutputWithContext(ctx context.Context) GetSitegroupsOrgSitegroupArrayOutput {
	return o
}

func (o GetSitegroupsOrgSitegroupArrayOutput) Index(i pulumi.IntInput) GetSitegroupsOrgSitegroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSitegroupsOrgSitegroup {
		return vs[0].([]GetSitegroupsOrgSitegroup)[vs[1].(int)]
	}).(GetSitegroupsOrgSitegroupOutput)
}

type GetVpnsOrgVpn struct {
	CreatedTime  float64                       `pulumi:"createdTime"`
	Id           string                        `pulumi:"id"`
	ModifiedTime float64                       `pulumi:"modifiedTime"`
	Name         string                        `pulumi:"name"`
	OrgId        string                        `pulumi:"orgId"`
	Paths        map[string]GetVpnsOrgVpnPaths `pulumi:"paths"`
}

// GetVpnsOrgVpnInput is an input type that accepts GetVpnsOrgVpnArgs and GetVpnsOrgVpnOutput values.
// You can construct a concrete instance of `GetVpnsOrgVpnInput` via:
//
//	GetVpnsOrgVpnArgs{...}
type GetVpnsOrgVpnInput interface {
	pulumi.Input

	ToGetVpnsOrgVpnOutput() GetVpnsOrgVpnOutput
	ToGetVpnsOrgVpnOutputWithContext(context.Context) GetVpnsOrgVpnOutput
}

type GetVpnsOrgVpnArgs struct {
	CreatedTime  pulumi.Float64Input        `pulumi:"createdTime"`
	Id           pulumi.StringInput         `pulumi:"id"`
	ModifiedTime pulumi.Float64Input        `pulumi:"modifiedTime"`
	Name         pulumi.StringInput         `pulumi:"name"`
	OrgId        pulumi.StringInput         `pulumi:"orgId"`
	Paths        GetVpnsOrgVpnPathsMapInput `pulumi:"paths"`
}

func (GetVpnsOrgVpnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnsOrgVpn)(nil)).Elem()
}

func (i GetVpnsOrgVpnArgs) ToGetVpnsOrgVpnOutput() GetVpnsOrgVpnOutput {
	return i.ToGetVpnsOrgVpnOutputWithContext(context.Background())
}

func (i GetVpnsOrgVpnArgs) ToGetVpnsOrgVpnOutputWithContext(ctx context.Context) GetVpnsOrgVpnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpnsOrgVpnOutput)
}

// GetVpnsOrgVpnArrayInput is an input type that accepts GetVpnsOrgVpnArray and GetVpnsOrgVpnArrayOutput values.
// You can construct a concrete instance of `GetVpnsOrgVpnArrayInput` via:
//
//	GetVpnsOrgVpnArray{ GetVpnsOrgVpnArgs{...} }
type GetVpnsOrgVpnArrayInput interface {
	pulumi.Input

	ToGetVpnsOrgVpnArrayOutput() GetVpnsOrgVpnArrayOutput
	ToGetVpnsOrgVpnArrayOutputWithContext(context.Context) GetVpnsOrgVpnArrayOutput
}

type GetVpnsOrgVpnArray []GetVpnsOrgVpnInput

func (GetVpnsOrgVpnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpnsOrgVpn)(nil)).Elem()
}

func (i GetVpnsOrgVpnArray) ToGetVpnsOrgVpnArrayOutput() GetVpnsOrgVpnArrayOutput {
	return i.ToGetVpnsOrgVpnArrayOutputWithContext(context.Background())
}

func (i GetVpnsOrgVpnArray) ToGetVpnsOrgVpnArrayOutputWithContext(ctx context.Context) GetVpnsOrgVpnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpnsOrgVpnArrayOutput)
}

type GetVpnsOrgVpnOutput struct{ *pulumi.OutputState }

func (GetVpnsOrgVpnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnsOrgVpn)(nil)).Elem()
}

func (o GetVpnsOrgVpnOutput) ToGetVpnsOrgVpnOutput() GetVpnsOrgVpnOutput {
	return o
}

func (o GetVpnsOrgVpnOutput) ToGetVpnsOrgVpnOutputWithContext(ctx context.Context) GetVpnsOrgVpnOutput {
	return o
}

func (o GetVpnsOrgVpnOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetVpnsOrgVpn) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetVpnsOrgVpnOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnsOrgVpn) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpnsOrgVpnOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetVpnsOrgVpn) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetVpnsOrgVpnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnsOrgVpn) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetVpnsOrgVpnOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnsOrgVpn) string { return v.OrgId }).(pulumi.StringOutput)
}

func (o GetVpnsOrgVpnOutput) Paths() GetVpnsOrgVpnPathsMapOutput {
	return o.ApplyT(func(v GetVpnsOrgVpn) map[string]GetVpnsOrgVpnPaths { return v.Paths }).(GetVpnsOrgVpnPathsMapOutput)
}

type GetVpnsOrgVpnArrayOutput struct{ *pulumi.OutputState }

func (GetVpnsOrgVpnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpnsOrgVpn)(nil)).Elem()
}

func (o GetVpnsOrgVpnArrayOutput) ToGetVpnsOrgVpnArrayOutput() GetVpnsOrgVpnArrayOutput {
	return o
}

func (o GetVpnsOrgVpnArrayOutput) ToGetVpnsOrgVpnArrayOutputWithContext(ctx context.Context) GetVpnsOrgVpnArrayOutput {
	return o
}

func (o GetVpnsOrgVpnArrayOutput) Index(i pulumi.IntInput) GetVpnsOrgVpnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpnsOrgVpn {
		return vs[0].([]GetVpnsOrgVpn)[vs[1].(int)]
	}).(GetVpnsOrgVpnOutput)
}

type GetVpnsOrgVpnPaths struct {
	// enum: `broadband`, `lte`
	BfdProfile string `pulumi:"bfdProfile"`
	// if different from the wan port
	Ip  string `pulumi:"ip"`
	Pod int    `pulumi:"pod"`
}

// GetVpnsOrgVpnPathsInput is an input type that accepts GetVpnsOrgVpnPathsArgs and GetVpnsOrgVpnPathsOutput values.
// You can construct a concrete instance of `GetVpnsOrgVpnPathsInput` via:
//
//	GetVpnsOrgVpnPathsArgs{...}
type GetVpnsOrgVpnPathsInput interface {
	pulumi.Input

	ToGetVpnsOrgVpnPathsOutput() GetVpnsOrgVpnPathsOutput
	ToGetVpnsOrgVpnPathsOutputWithContext(context.Context) GetVpnsOrgVpnPathsOutput
}

type GetVpnsOrgVpnPathsArgs struct {
	// enum: `broadband`, `lte`
	BfdProfile pulumi.StringInput `pulumi:"bfdProfile"`
	// if different from the wan port
	Ip  pulumi.StringInput `pulumi:"ip"`
	Pod pulumi.IntInput    `pulumi:"pod"`
}

func (GetVpnsOrgVpnPathsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnsOrgVpnPaths)(nil)).Elem()
}

func (i GetVpnsOrgVpnPathsArgs) ToGetVpnsOrgVpnPathsOutput() GetVpnsOrgVpnPathsOutput {
	return i.ToGetVpnsOrgVpnPathsOutputWithContext(context.Background())
}

func (i GetVpnsOrgVpnPathsArgs) ToGetVpnsOrgVpnPathsOutputWithContext(ctx context.Context) GetVpnsOrgVpnPathsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpnsOrgVpnPathsOutput)
}

// GetVpnsOrgVpnPathsMapInput is an input type that accepts GetVpnsOrgVpnPathsMap and GetVpnsOrgVpnPathsMapOutput values.
// You can construct a concrete instance of `GetVpnsOrgVpnPathsMapInput` via:
//
//	GetVpnsOrgVpnPathsMap{ "key": GetVpnsOrgVpnPathsArgs{...} }
type GetVpnsOrgVpnPathsMapInput interface {
	pulumi.Input

	ToGetVpnsOrgVpnPathsMapOutput() GetVpnsOrgVpnPathsMapOutput
	ToGetVpnsOrgVpnPathsMapOutputWithContext(context.Context) GetVpnsOrgVpnPathsMapOutput
}

type GetVpnsOrgVpnPathsMap map[string]GetVpnsOrgVpnPathsInput

func (GetVpnsOrgVpnPathsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GetVpnsOrgVpnPaths)(nil)).Elem()
}

func (i GetVpnsOrgVpnPathsMap) ToGetVpnsOrgVpnPathsMapOutput() GetVpnsOrgVpnPathsMapOutput {
	return i.ToGetVpnsOrgVpnPathsMapOutputWithContext(context.Background())
}

func (i GetVpnsOrgVpnPathsMap) ToGetVpnsOrgVpnPathsMapOutputWithContext(ctx context.Context) GetVpnsOrgVpnPathsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpnsOrgVpnPathsMapOutput)
}

type GetVpnsOrgVpnPathsOutput struct{ *pulumi.OutputState }

func (GetVpnsOrgVpnPathsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnsOrgVpnPaths)(nil)).Elem()
}

func (o GetVpnsOrgVpnPathsOutput) ToGetVpnsOrgVpnPathsOutput() GetVpnsOrgVpnPathsOutput {
	return o
}

func (o GetVpnsOrgVpnPathsOutput) ToGetVpnsOrgVpnPathsOutputWithContext(ctx context.Context) GetVpnsOrgVpnPathsOutput {
	return o
}

// enum: `broadband`, `lte`
func (o GetVpnsOrgVpnPathsOutput) BfdProfile() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnsOrgVpnPaths) string { return v.BfdProfile }).(pulumi.StringOutput)
}

// if different from the wan port
func (o GetVpnsOrgVpnPathsOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnsOrgVpnPaths) string { return v.Ip }).(pulumi.StringOutput)
}

func (o GetVpnsOrgVpnPathsOutput) Pod() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpnsOrgVpnPaths) int { return v.Pod }).(pulumi.IntOutput)
}

type GetVpnsOrgVpnPathsMapOutput struct{ *pulumi.OutputState }

func (GetVpnsOrgVpnPathsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GetVpnsOrgVpnPaths)(nil)).Elem()
}

func (o GetVpnsOrgVpnPathsMapOutput) ToGetVpnsOrgVpnPathsMapOutput() GetVpnsOrgVpnPathsMapOutput {
	return o
}

func (o GetVpnsOrgVpnPathsMapOutput) ToGetVpnsOrgVpnPathsMapOutputWithContext(ctx context.Context) GetVpnsOrgVpnPathsMapOutput {
	return o
}

func (o GetVpnsOrgVpnPathsMapOutput) MapIndex(k pulumi.StringInput) GetVpnsOrgVpnPathsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GetVpnsOrgVpnPaths {
		return vs[0].(map[string]GetVpnsOrgVpnPaths)[vs[1].(string)]
	}).(GetVpnsOrgVpnPathsOutput)
}

type GetWlantemplatesOrgWlantemplate struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetWlantemplatesOrgWlantemplateInput is an input type that accepts GetWlantemplatesOrgWlantemplateArgs and GetWlantemplatesOrgWlantemplateOutput values.
// You can construct a concrete instance of `GetWlantemplatesOrgWlantemplateInput` via:
//
//	GetWlantemplatesOrgWlantemplateArgs{...}
type GetWlantemplatesOrgWlantemplateInput interface {
	pulumi.Input

	ToGetWlantemplatesOrgWlantemplateOutput() GetWlantemplatesOrgWlantemplateOutput
	ToGetWlantemplatesOrgWlantemplateOutputWithContext(context.Context) GetWlantemplatesOrgWlantemplateOutput
}

type GetWlantemplatesOrgWlantemplateArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetWlantemplatesOrgWlantemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWlantemplatesOrgWlantemplate)(nil)).Elem()
}

func (i GetWlantemplatesOrgWlantemplateArgs) ToGetWlantemplatesOrgWlantemplateOutput() GetWlantemplatesOrgWlantemplateOutput {
	return i.ToGetWlantemplatesOrgWlantemplateOutputWithContext(context.Background())
}

func (i GetWlantemplatesOrgWlantemplateArgs) ToGetWlantemplatesOrgWlantemplateOutputWithContext(ctx context.Context) GetWlantemplatesOrgWlantemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWlantemplatesOrgWlantemplateOutput)
}

// GetWlantemplatesOrgWlantemplateArrayInput is an input type that accepts GetWlantemplatesOrgWlantemplateArray and GetWlantemplatesOrgWlantemplateArrayOutput values.
// You can construct a concrete instance of `GetWlantemplatesOrgWlantemplateArrayInput` via:
//
//	GetWlantemplatesOrgWlantemplateArray{ GetWlantemplatesOrgWlantemplateArgs{...} }
type GetWlantemplatesOrgWlantemplateArrayInput interface {
	pulumi.Input

	ToGetWlantemplatesOrgWlantemplateArrayOutput() GetWlantemplatesOrgWlantemplateArrayOutput
	ToGetWlantemplatesOrgWlantemplateArrayOutputWithContext(context.Context) GetWlantemplatesOrgWlantemplateArrayOutput
}

type GetWlantemplatesOrgWlantemplateArray []GetWlantemplatesOrgWlantemplateInput

func (GetWlantemplatesOrgWlantemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWlantemplatesOrgWlantemplate)(nil)).Elem()
}

func (i GetWlantemplatesOrgWlantemplateArray) ToGetWlantemplatesOrgWlantemplateArrayOutput() GetWlantemplatesOrgWlantemplateArrayOutput {
	return i.ToGetWlantemplatesOrgWlantemplateArrayOutputWithContext(context.Background())
}

func (i GetWlantemplatesOrgWlantemplateArray) ToGetWlantemplatesOrgWlantemplateArrayOutputWithContext(ctx context.Context) GetWlantemplatesOrgWlantemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWlantemplatesOrgWlantemplateArrayOutput)
}

type GetWlantemplatesOrgWlantemplateOutput struct{ *pulumi.OutputState }

func (GetWlantemplatesOrgWlantemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWlantemplatesOrgWlantemplate)(nil)).Elem()
}

func (o GetWlantemplatesOrgWlantemplateOutput) ToGetWlantemplatesOrgWlantemplateOutput() GetWlantemplatesOrgWlantemplateOutput {
	return o
}

func (o GetWlantemplatesOrgWlantemplateOutput) ToGetWlantemplatesOrgWlantemplateOutputWithContext(ctx context.Context) GetWlantemplatesOrgWlantemplateOutput {
	return o
}

func (o GetWlantemplatesOrgWlantemplateOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetWlantemplatesOrgWlantemplate) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetWlantemplatesOrgWlantemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWlantemplatesOrgWlantemplate) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetWlantemplatesOrgWlantemplateOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetWlantemplatesOrgWlantemplate) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetWlantemplatesOrgWlantemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWlantemplatesOrgWlantemplate) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetWlantemplatesOrgWlantemplateOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWlantemplatesOrgWlantemplate) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetWlantemplatesOrgWlantemplateArrayOutput struct{ *pulumi.OutputState }

func (GetWlantemplatesOrgWlantemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWlantemplatesOrgWlantemplate)(nil)).Elem()
}

func (o GetWlantemplatesOrgWlantemplateArrayOutput) ToGetWlantemplatesOrgWlantemplateArrayOutput() GetWlantemplatesOrgWlantemplateArrayOutput {
	return o
}

func (o GetWlantemplatesOrgWlantemplateArrayOutput) ToGetWlantemplatesOrgWlantemplateArrayOutputWithContext(ctx context.Context) GetWlantemplatesOrgWlantemplateArrayOutput {
	return o
}

func (o GetWlantemplatesOrgWlantemplateArrayOutput) Index(i pulumi.IntInput) GetWlantemplatesOrgWlantemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWlantemplatesOrgWlantemplate {
		return vs[0].([]GetWlantemplatesOrgWlantemplate)[vs[1].(int)]
	}).(GetWlantemplatesOrgWlantemplateOutput)
}

type GetWxtagsOrgWxtag struct {
	CreatedTime  float64 `pulumi:"createdTime"`
	Id           string  `pulumi:"id"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	OrgId        string  `pulumi:"orgId"`
}

// GetWxtagsOrgWxtagInput is an input type that accepts GetWxtagsOrgWxtagArgs and GetWxtagsOrgWxtagOutput values.
// You can construct a concrete instance of `GetWxtagsOrgWxtagInput` via:
//
//	GetWxtagsOrgWxtagArgs{...}
type GetWxtagsOrgWxtagInput interface {
	pulumi.Input

	ToGetWxtagsOrgWxtagOutput() GetWxtagsOrgWxtagOutput
	ToGetWxtagsOrgWxtagOutputWithContext(context.Context) GetWxtagsOrgWxtagOutput
}

type GetWxtagsOrgWxtagArgs struct {
	CreatedTime  pulumi.Float64Input `pulumi:"createdTime"`
	Id           pulumi.StringInput  `pulumi:"id"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	OrgId        pulumi.StringInput  `pulumi:"orgId"`
}

func (GetWxtagsOrgWxtagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWxtagsOrgWxtag)(nil)).Elem()
}

func (i GetWxtagsOrgWxtagArgs) ToGetWxtagsOrgWxtagOutput() GetWxtagsOrgWxtagOutput {
	return i.ToGetWxtagsOrgWxtagOutputWithContext(context.Background())
}

func (i GetWxtagsOrgWxtagArgs) ToGetWxtagsOrgWxtagOutputWithContext(ctx context.Context) GetWxtagsOrgWxtagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWxtagsOrgWxtagOutput)
}

// GetWxtagsOrgWxtagArrayInput is an input type that accepts GetWxtagsOrgWxtagArray and GetWxtagsOrgWxtagArrayOutput values.
// You can construct a concrete instance of `GetWxtagsOrgWxtagArrayInput` via:
//
//	GetWxtagsOrgWxtagArray{ GetWxtagsOrgWxtagArgs{...} }
type GetWxtagsOrgWxtagArrayInput interface {
	pulumi.Input

	ToGetWxtagsOrgWxtagArrayOutput() GetWxtagsOrgWxtagArrayOutput
	ToGetWxtagsOrgWxtagArrayOutputWithContext(context.Context) GetWxtagsOrgWxtagArrayOutput
}

type GetWxtagsOrgWxtagArray []GetWxtagsOrgWxtagInput

func (GetWxtagsOrgWxtagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWxtagsOrgWxtag)(nil)).Elem()
}

func (i GetWxtagsOrgWxtagArray) ToGetWxtagsOrgWxtagArrayOutput() GetWxtagsOrgWxtagArrayOutput {
	return i.ToGetWxtagsOrgWxtagArrayOutputWithContext(context.Background())
}

func (i GetWxtagsOrgWxtagArray) ToGetWxtagsOrgWxtagArrayOutputWithContext(ctx context.Context) GetWxtagsOrgWxtagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWxtagsOrgWxtagArrayOutput)
}

type GetWxtagsOrgWxtagOutput struct{ *pulumi.OutputState }

func (GetWxtagsOrgWxtagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWxtagsOrgWxtag)(nil)).Elem()
}

func (o GetWxtagsOrgWxtagOutput) ToGetWxtagsOrgWxtagOutput() GetWxtagsOrgWxtagOutput {
	return o
}

func (o GetWxtagsOrgWxtagOutput) ToGetWxtagsOrgWxtagOutputWithContext(ctx context.Context) GetWxtagsOrgWxtagOutput {
	return o
}

func (o GetWxtagsOrgWxtagOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetWxtagsOrgWxtag) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

func (o GetWxtagsOrgWxtagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWxtagsOrgWxtag) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetWxtagsOrgWxtagOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetWxtagsOrgWxtag) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetWxtagsOrgWxtagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWxtagsOrgWxtag) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetWxtagsOrgWxtagOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWxtagsOrgWxtag) string { return v.OrgId }).(pulumi.StringOutput)
}

type GetWxtagsOrgWxtagArrayOutput struct{ *pulumi.OutputState }

func (GetWxtagsOrgWxtagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWxtagsOrgWxtag)(nil)).Elem()
}

func (o GetWxtagsOrgWxtagArrayOutput) ToGetWxtagsOrgWxtagArrayOutput() GetWxtagsOrgWxtagArrayOutput {
	return o
}

func (o GetWxtagsOrgWxtagArrayOutput) ToGetWxtagsOrgWxtagArrayOutputWithContext(ctx context.Context) GetWxtagsOrgWxtagArrayOutput {
	return o
}

func (o GetWxtagsOrgWxtagArrayOutput) Index(i pulumi.IntInput) GetWxtagsOrgWxtagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWxtagsOrgWxtag {
		return vs[0].([]GetWxtagsOrgWxtag)[vs[1].(int)]
	}).(GetWxtagsOrgWxtagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApAeroscoutInput)(nil)).Elem(), DeviceprofileApAeroscoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApAeroscoutPtrInput)(nil)).Elem(), DeviceprofileApAeroscoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApBleConfigInput)(nil)).Elem(), DeviceprofileApBleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApBleConfigPtrInput)(nil)).Elem(), DeviceprofileApBleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApEslConfigInput)(nil)).Elem(), DeviceprofileApEslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApEslConfigPtrInput)(nil)).Elem(), DeviceprofileApEslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApIpConfigInput)(nil)).Elem(), DeviceprofileApIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApIpConfigPtrInput)(nil)).Elem(), DeviceprofileApIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApLedInput)(nil)).Elem(), DeviceprofileApLedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApLedPtrInput)(nil)).Elem(), DeviceprofileApLedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApMeshInput)(nil)).Elem(), DeviceprofileApMeshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApMeshPtrInput)(nil)).Elem(), DeviceprofileApMeshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApPwrConfigInput)(nil)).Elem(), DeviceprofileApPwrConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApPwrConfigPtrInput)(nil)).Elem(), DeviceprofileApPwrConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigInput)(nil)).Elem(), DeviceprofileApRadioConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigPtrInput)(nil)).Elem(), DeviceprofileApRadioConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand24Input)(nil)).Elem(), DeviceprofileApRadioConfigBand24Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand24PtrInput)(nil)).Elem(), DeviceprofileApRadioConfigBand24Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand5Input)(nil)).Elem(), DeviceprofileApRadioConfigBand5Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand5PtrInput)(nil)).Elem(), DeviceprofileApRadioConfigBand5Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand5On24RadioInput)(nil)).Elem(), DeviceprofileApRadioConfigBand5On24RadioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand5On24RadioPtrInput)(nil)).Elem(), DeviceprofileApRadioConfigBand5On24RadioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand6Input)(nil)).Elem(), DeviceprofileApRadioConfigBand6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApRadioConfigBand6PtrInput)(nil)).Elem(), DeviceprofileApRadioConfigBand6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApUplinkPortConfigInput)(nil)).Elem(), DeviceprofileApUplinkPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApUplinkPortConfigPtrInput)(nil)).Elem(), DeviceprofileApUplinkPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApUsbConfigInput)(nil)).Elem(), DeviceprofileApUsbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileApUsbConfigPtrInput)(nil)).Elem(), DeviceprofileApUsbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayBgpConfigInput)(nil)).Elem(), DeviceprofileGatewayBgpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayBgpConfigMapInput)(nil)).Elem(), DeviceprofileGatewayBgpConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayBgpConfigCommunityInput)(nil)).Elem(), DeviceprofileGatewayBgpConfigCommunityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayBgpConfigCommunityArrayInput)(nil)).Elem(), DeviceprofileGatewayBgpConfigCommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayBgpConfigNeighborsInput)(nil)).Elem(), DeviceprofileGatewayBgpConfigNeighborsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayBgpConfigNeighborsMapInput)(nil)).Elem(), DeviceprofileGatewayBgpConfigNeighborsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigPtrInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigMapInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigFixedBindingsInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigOptionsInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigOptionsMapInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigOptionsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapInput)(nil)).Elem(), DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayExtraRoutes6Input)(nil)).Elem(), DeviceprofileGatewayExtraRoutes6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayExtraRoutes6MapInput)(nil)).Elem(), DeviceprofileGatewayExtraRoutes6Map{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayExtraRoutesInput)(nil)).Elem(), DeviceprofileGatewayExtraRoutesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayExtraRoutesMapInput)(nil)).Elem(), DeviceprofileGatewayExtraRoutesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIdpProfilesInput)(nil)).Elem(), DeviceprofileGatewayIdpProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIdpProfilesMapInput)(nil)).Elem(), DeviceprofileGatewayIdpProfilesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwriteInput)(nil)).Elem(), DeviceprofileGatewayIdpProfilesOverwriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwriteArrayInput)(nil)).Elem(), DeviceprofileGatewayIdpProfilesOverwriteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwriteMatchingInput)(nil)).Elem(), DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrInput)(nil)).Elem(), DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIpConfigsInput)(nil)).Elem(), DeviceprofileGatewayIpConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayIpConfigsMapInput)(nil)).Elem(), DeviceprofileGatewayIpConfigsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInput)(nil)).Elem(), DeviceprofileGatewayNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkArrayInput)(nil)).Elem(), DeviceprofileGatewayNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternalAccessInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternalAccessPtrInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternetAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessPtrInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternetAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessDestinationNatInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessDestinationNatMapInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternetAccessDestinationNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessStaticNatInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternetAccessStaticNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkInternetAccessStaticNatMapInput)(nil)).Elem(), DeviceprofileGatewayNetworkInternetAccessStaticNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkTenantsInput)(nil)).Elem(), DeviceprofileGatewayNetworkTenantsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkTenantsMapInput)(nil)).Elem(), DeviceprofileGatewayNetworkTenantsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessMapInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessDestinationNatInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessDestinationNatMapInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessDestinationNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessSourceNatInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessSourceNatPtrInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessStaticNatInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessStaticNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayNetworkVpnAccessStaticNatMapInput)(nil)).Elem(), DeviceprofileGatewayNetworkVpnAccessStaticNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayOobIpConfigInput)(nil)).Elem(), DeviceprofileGatewayOobIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayOobIpConfigPtrInput)(nil)).Elem(), DeviceprofileGatewayOobIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayOobIpConfigNode1Input)(nil)).Elem(), DeviceprofileGatewayOobIpConfigNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayOobIpConfigNode1PtrInput)(nil)).Elem(), DeviceprofileGatewayOobIpConfigNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPathPreferencesInput)(nil)).Elem(), DeviceprofileGatewayPathPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPathPreferencesMapInput)(nil)).Elem(), DeviceprofileGatewayPathPreferencesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPathPreferencesPathInput)(nil)).Elem(), DeviceprofileGatewayPathPreferencesPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPathPreferencesPathArrayInput)(nil)).Elem(), DeviceprofileGatewayPathPreferencesPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigInput)(nil)).Elem(), DeviceprofileGatewayPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigMapInput)(nil)).Elem(), DeviceprofileGatewayPortConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigIpConfigInput)(nil)).Elem(), DeviceprofileGatewayPortConfigIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigIpConfigPtrInput)(nil)).Elem(), DeviceprofileGatewayPortConfigIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigTrafficShapingInput)(nil)).Elem(), DeviceprofileGatewayPortConfigTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigTrafficShapingPtrInput)(nil)).Elem(), DeviceprofileGatewayPortConfigTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPathsInput)(nil)).Elem(), DeviceprofileGatewayPortConfigVpnPathsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPathsMapInput)(nil)).Elem(), DeviceprofileGatewayPortConfigVpnPathsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPathsTrafficShapingInput)(nil)).Elem(), DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrInput)(nil)).Elem(), DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigWanSourceNatInput)(nil)).Elem(), DeviceprofileGatewayPortConfigWanSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayPortConfigWanSourceNatPtrInput)(nil)).Elem(), DeviceprofileGatewayPortConfigWanSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesMapInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermArrayInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermActionInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermActionPtrInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingPtrInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrInput)(nil)).Elem(), DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyArrayInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyAppqoeInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyAppqoeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyAppqoePtrInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyAppqoeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyEwfInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyEwfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyEwfArrayInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyEwfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyIdpInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayServicePolicyIdpPtrInput)(nil)).Elem(), DeviceprofileGatewayServicePolicyIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsMapInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIkeProposalInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsIkeProposalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIkeProposalArrayInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsIkeProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIpsecProposalInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsIpsecProposalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsIpsecProposalArrayInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsIpsecProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsPrimaryInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsPrimaryPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsProbeInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsProbePtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsSecondaryInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelConfigsSecondaryPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelConfigsSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsJseInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsJseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsJsePtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsJseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscalerInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsZscalerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscalerPtrInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsZscalerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayInput)(nil)).Elem(), DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayVrfConfigInput)(nil)).Elem(), DeviceprofileGatewayVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayVrfConfigPtrInput)(nil)).Elem(), DeviceprofileGatewayVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayVrfInstancesInput)(nil)).Elem(), DeviceprofileGatewayVrfInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceprofileGatewayVrfInstancesMapInput)(nil)).Elem(), DeviceprofileGatewayVrfInstancesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateBgpConfigInput)(nil)).Elem(), GatewaytemplateBgpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateBgpConfigMapInput)(nil)).Elem(), GatewaytemplateBgpConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateBgpConfigCommunityInput)(nil)).Elem(), GatewaytemplateBgpConfigCommunityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateBgpConfigCommunityArrayInput)(nil)).Elem(), GatewaytemplateBgpConfigCommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateBgpConfigNeighborsInput)(nil)).Elem(), GatewaytemplateBgpConfigNeighborsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateBgpConfigNeighborsMapInput)(nil)).Elem(), GatewaytemplateBgpConfigNeighborsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigInput)(nil)).Elem(), GatewaytemplateDhcpdConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigPtrInput)(nil)).Elem(), GatewaytemplateDhcpdConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigMapInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigFixedBindingsInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigFixedBindingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigFixedBindingsMapInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigFixedBindingsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigOptionsInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigOptionsMapInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigOptionsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigVendorEncapulatedInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapInput)(nil)).Elem(), GatewaytemplateDhcpdConfigConfigVendorEncapulatedMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateExtraRoutes6Input)(nil)).Elem(), GatewaytemplateExtraRoutes6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateExtraRoutes6MapInput)(nil)).Elem(), GatewaytemplateExtraRoutes6Map{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateExtraRoutesInput)(nil)).Elem(), GatewaytemplateExtraRoutesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateExtraRoutesMapInput)(nil)).Elem(), GatewaytemplateExtraRoutesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIdpProfilesInput)(nil)).Elem(), GatewaytemplateIdpProfilesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIdpProfilesMapInput)(nil)).Elem(), GatewaytemplateIdpProfilesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIdpProfilesOverwriteInput)(nil)).Elem(), GatewaytemplateIdpProfilesOverwriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIdpProfilesOverwriteArrayInput)(nil)).Elem(), GatewaytemplateIdpProfilesOverwriteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIdpProfilesOverwriteMatchingInput)(nil)).Elem(), GatewaytemplateIdpProfilesOverwriteMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIdpProfilesOverwriteMatchingPtrInput)(nil)).Elem(), GatewaytemplateIdpProfilesOverwriteMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIpConfigsInput)(nil)).Elem(), GatewaytemplateIpConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateIpConfigsMapInput)(nil)).Elem(), GatewaytemplateIpConfigsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInput)(nil)).Elem(), GatewaytemplateNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkArrayInput)(nil)).Elem(), GatewaytemplateNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternalAccessInput)(nil)).Elem(), GatewaytemplateNetworkInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternalAccessPtrInput)(nil)).Elem(), GatewaytemplateNetworkInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternetAccessInput)(nil)).Elem(), GatewaytemplateNetworkInternetAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternetAccessPtrInput)(nil)).Elem(), GatewaytemplateNetworkInternetAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternetAccessDestinationNatInput)(nil)).Elem(), GatewaytemplateNetworkInternetAccessDestinationNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternetAccessDestinationNatMapInput)(nil)).Elem(), GatewaytemplateNetworkInternetAccessDestinationNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternetAccessStaticNatInput)(nil)).Elem(), GatewaytemplateNetworkInternetAccessStaticNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkInternetAccessStaticNatMapInput)(nil)).Elem(), GatewaytemplateNetworkInternetAccessStaticNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkTenantsInput)(nil)).Elem(), GatewaytemplateNetworkTenantsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkTenantsMapInput)(nil)).Elem(), GatewaytemplateNetworkTenantsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessMapInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessDestinationNatInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessDestinationNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessDestinationNatMapInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessDestinationNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessSourceNatInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessSourceNatPtrInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessStaticNatInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessStaticNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateNetworkVpnAccessStaticNatMapInput)(nil)).Elem(), GatewaytemplateNetworkVpnAccessStaticNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateOobIpConfigInput)(nil)).Elem(), GatewaytemplateOobIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateOobIpConfigPtrInput)(nil)).Elem(), GatewaytemplateOobIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateOobIpConfigNode1Input)(nil)).Elem(), GatewaytemplateOobIpConfigNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateOobIpConfigNode1PtrInput)(nil)).Elem(), GatewaytemplateOobIpConfigNode1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePathPreferencesInput)(nil)).Elem(), GatewaytemplatePathPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePathPreferencesMapInput)(nil)).Elem(), GatewaytemplatePathPreferencesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePathPreferencesPathInput)(nil)).Elem(), GatewaytemplatePathPreferencesPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePathPreferencesPathArrayInput)(nil)).Elem(), GatewaytemplatePathPreferencesPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigInput)(nil)).Elem(), GatewaytemplatePortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigMapInput)(nil)).Elem(), GatewaytemplatePortConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigIpConfigInput)(nil)).Elem(), GatewaytemplatePortConfigIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigIpConfigPtrInput)(nil)).Elem(), GatewaytemplatePortConfigIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigTrafficShapingInput)(nil)).Elem(), GatewaytemplatePortConfigTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigTrafficShapingPtrInput)(nil)).Elem(), GatewaytemplatePortConfigTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigVpnPathsInput)(nil)).Elem(), GatewaytemplatePortConfigVpnPathsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigVpnPathsMapInput)(nil)).Elem(), GatewaytemplatePortConfigVpnPathsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigVpnPathsTrafficShapingInput)(nil)).Elem(), GatewaytemplatePortConfigVpnPathsTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigVpnPathsTrafficShapingPtrInput)(nil)).Elem(), GatewaytemplatePortConfigVpnPathsTrafficShapingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigWanSourceNatInput)(nil)).Elem(), GatewaytemplatePortConfigWanSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplatePortConfigWanSourceNatPtrInput)(nil)).Elem(), GatewaytemplatePortConfigWanSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesMapInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermArrayInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermActionInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermActionPtrInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingPtrInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingRouteExistsInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrInput)(nil)).Elem(), GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyInput)(nil)).Elem(), GatewaytemplateServicePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyArrayInput)(nil)).Elem(), GatewaytemplateServicePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyAppqoeInput)(nil)).Elem(), GatewaytemplateServicePolicyAppqoeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyAppqoePtrInput)(nil)).Elem(), GatewaytemplateServicePolicyAppqoeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyEwfInput)(nil)).Elem(), GatewaytemplateServicePolicyEwfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyEwfArrayInput)(nil)).Elem(), GatewaytemplateServicePolicyEwfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyIdpInput)(nil)).Elem(), GatewaytemplateServicePolicyIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateServicePolicyIdpPtrInput)(nil)).Elem(), GatewaytemplateServicePolicyIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsInput)(nil)).Elem(), GatewaytemplateTunnelConfigsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsMapInput)(nil)).Elem(), GatewaytemplateTunnelConfigsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionPtrInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionLatlngInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionPrimaryInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionSecondaryInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrInput)(nil)).Elem(), GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsIkeProposalInput)(nil)).Elem(), GatewaytemplateTunnelConfigsIkeProposalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsIkeProposalArrayInput)(nil)).Elem(), GatewaytemplateTunnelConfigsIkeProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsIpsecProposalInput)(nil)).Elem(), GatewaytemplateTunnelConfigsIpsecProposalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsIpsecProposalArrayInput)(nil)).Elem(), GatewaytemplateTunnelConfigsIpsecProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsPrimaryInput)(nil)).Elem(), GatewaytemplateTunnelConfigsPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsPrimaryPtrInput)(nil)).Elem(), GatewaytemplateTunnelConfigsPrimaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsProbeInput)(nil)).Elem(), GatewaytemplateTunnelConfigsProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsProbePtrInput)(nil)).Elem(), GatewaytemplateTunnelConfigsProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsSecondaryInput)(nil)).Elem(), GatewaytemplateTunnelConfigsSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelConfigsSecondaryPtrInput)(nil)).Elem(), GatewaytemplateTunnelConfigsSecondaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsPtrInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsJseInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsJseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsJsePtrInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsJseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscalerInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsZscalerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscalerPtrInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsZscalerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscalerSubLocationInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayInput)(nil)).Elem(), GatewaytemplateTunnelProviderOptionsZscalerSubLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateVrfConfigInput)(nil)).Elem(), GatewaytemplateVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateVrfConfigPtrInput)(nil)).Elem(), GatewaytemplateVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateVrfInstancesInput)(nil)).Elem(), GatewaytemplateVrfInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaytemplateVrfInstancesMapInput)(nil)).Elem(), GatewaytemplateVrfInstancesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpprofileOverwriteInput)(nil)).Elem(), IdpprofileOverwriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpprofileOverwriteArrayInput)(nil)).Elem(), IdpprofileOverwriteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpprofileOverwriteMatchingInput)(nil)).Elem(), IdpprofileOverwriteMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpprofileOverwriteMatchingPtrInput)(nil)).Elem(), IdpprofileOverwriteMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryDeviceInput)(nil)).Elem(), InventoryDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryDeviceArrayInput)(nil)).Elem(), InventoryDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacruleMatchingInput)(nil)).Elem(), NacruleMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacruleMatchingPtrInput)(nil)).Elem(), NacruleMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacruleNotMatchingInput)(nil)).Elem(), NacruleNotMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacruleNotMatchingPtrInput)(nil)).Elem(), NacruleNotMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternalAccessInput)(nil)).Elem(), NetworkInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternalAccessPtrInput)(nil)).Elem(), NetworkInternalAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternetAccessInput)(nil)).Elem(), NetworkInternetAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternetAccessPtrInput)(nil)).Elem(), NetworkInternetAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternetAccessDestinationNatInput)(nil)).Elem(), NetworkInternetAccessDestinationNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternetAccessDestinationNatMapInput)(nil)).Elem(), NetworkInternetAccessDestinationNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternetAccessStaticNatInput)(nil)).Elem(), NetworkInternetAccessStaticNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInternetAccessStaticNatMapInput)(nil)).Elem(), NetworkInternetAccessStaticNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkTenantsInput)(nil)).Elem(), NetworkTenantsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkTenantsMapInput)(nil)).Elem(), NetworkTenantsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessInput)(nil)).Elem(), NetworkVpnAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessMapInput)(nil)).Elem(), NetworkVpnAccessMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessDestinationNatInput)(nil)).Elem(), NetworkVpnAccessDestinationNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessDestinationNatMapInput)(nil)).Elem(), NetworkVpnAccessDestinationNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessSourceNatInput)(nil)).Elem(), NetworkVpnAccessSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessSourceNatPtrInput)(nil)).Elem(), NetworkVpnAccessSourceNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessStaticNatInput)(nil)).Elem(), NetworkVpnAccessStaticNatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkVpnAccessStaticNatMapInput)(nil)).Elem(), NetworkVpnAccessStaticNatMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyInput)(nil)).Elem(), NetworktemplateAclPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyArrayInput)(nil)).Elem(), NetworktemplateAclPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyActionInput)(nil)).Elem(), NetworktemplateAclPolicyActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyActionArrayInput)(nil)).Elem(), NetworktemplateAclPolicyActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsInput)(nil)).Elem(), NetworktemplateAclTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsMapInput)(nil)).Elem(), NetworktemplateAclTagsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsSpecInput)(nil)).Elem(), NetworktemplateAclTagsSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsSpecArrayInput)(nil)).Elem(), NetworktemplateAclTagsSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateDhcpSnoopingInput)(nil)).Elem(), NetworktemplateDhcpSnoopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateDhcpSnoopingPtrInput)(nil)).Elem(), NetworktemplateDhcpSnoopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6Input)(nil)).Elem(), NetworktemplateExtraRoutes6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6MapInput)(nil)).Elem(), NetworktemplateExtraRoutes6Map{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualifiedInput)(nil)).Elem(), NetworktemplateExtraRoutes6NextQualifiedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualifiedMapInput)(nil)).Elem(), NetworktemplateExtraRoutes6NextQualifiedMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesInput)(nil)).Elem(), NetworktemplateExtraRoutesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesMapInput)(nil)).Elem(), NetworktemplateExtraRoutesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesNextQualifiedInput)(nil)).Elem(), NetworktemplateExtraRoutesNextQualifiedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesNextQualifiedMapInput)(nil)).Elem(), NetworktemplateExtraRoutesNextQualifiedMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateMistNacInput)(nil)).Elem(), NetworktemplateMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateMistNacPtrInput)(nil)).Elem(), NetworktemplateMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateNetworksInput)(nil)).Elem(), NetworktemplateNetworksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateNetworksMapInput)(nil)).Elem(), NetworktemplateNetworksMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortMirroringInput)(nil)).Elem(), NetworktemplatePortMirroringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortMirroringMapInput)(nil)).Elem(), NetworktemplatePortMirroringMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesInput)(nil)).Elem(), NetworktemplatePortUsagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesMapInput)(nil)).Elem(), NetworktemplatePortUsagesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesRuleInput)(nil)).Elem(), NetworktemplatePortUsagesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesRuleArrayInput)(nil)).Elem(), NetworktemplatePortUsagesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesStormControlInput)(nil)).Elem(), NetworktemplatePortUsagesStormControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesStormControlPtrInput)(nil)).Elem(), NetworktemplatePortUsagesStormControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigInput)(nil)).Elem(), NetworktemplateRadiusConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigPtrInput)(nil)).Elem(), NetworktemplateRadiusConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAcctServerInput)(nil)).Elem(), NetworktemplateRadiusConfigAcctServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAcctServerArrayInput)(nil)).Elem(), NetworktemplateRadiusConfigAcctServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAuthServerInput)(nil)).Elem(), NetworktemplateRadiusConfigAuthServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAuthServerArrayInput)(nil)).Elem(), NetworktemplateRadiusConfigAuthServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogInput)(nil)).Elem(), NetworktemplateRemoteSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogPtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogArchiveInput)(nil)).Elem(), NetworktemplateRemoteSyslogArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogArchivePtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsolePtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchiveInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchivePtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigInput)(nil)).Elem(), NetworktemplateSnmpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigClientListInput)(nil)).Elem(), NetworktemplateSnmpConfigClientListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigClientListArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigClientListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroupInput)(nil)).Elem(), NetworktemplateSnmpConfigTrapGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroupArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigTrapGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfigInput)(nil)).Elem(), NetworktemplateSnmpConfigV2cConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfigArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV2cConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddressInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameterInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUserInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigViewInput)(nil)).Elem(), NetworktemplateSnmpConfigViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigViewArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingInput)(nil)).Elem(), NetworktemplateSwitchMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingPtrInput)(nil)).Elem(), NetworktemplateSwitchMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleArrayInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfigInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfigMapInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroringInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortMirroringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroringMapInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortMirroringMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtInput)(nil)).Elem(), NetworktemplateSwitchMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtPtrInput)(nil)).Elem(), NetworktemplateSwitchMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectRePtrInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustomInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustomArrayInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsPtrInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServerInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsAcctServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServerArrayInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsAcctServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServerInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsTacplusServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsTacplusServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfConfigInput)(nil)).Elem(), NetworktemplateVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfConfigPtrInput)(nil)).Elem(), NetworktemplateVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesInput)(nil)).Elem(), NetworktemplateVrfInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesMapInput)(nil)).Elem(), NetworktemplateVrfInstancesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutesInput)(nil)).Elem(), NetworktemplateVrfInstancesExtraRoutesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutesMapInput)(nil)).Elem(), NetworktemplateVrfInstancesExtraRoutesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand24Input)(nil)).Elem(), RftemplateBand24Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand24PtrInput)(nil)).Elem(), RftemplateBand24Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand5Input)(nil)).Elem(), RftemplateBand5Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand5PtrInput)(nil)).Elem(), RftemplateBand5Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand5On24RadioInput)(nil)).Elem(), RftemplateBand5On24RadioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand5On24RadioPtrInput)(nil)).Elem(), RftemplateBand5On24RadioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand6Input)(nil)).Elem(), RftemplateBand6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateBand6PtrInput)(nil)).Elem(), RftemplateBand6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificInput)(nil)).Elem(), RftemplateModelSpecificArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificMapInput)(nil)).Elem(), RftemplateModelSpecificMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand24Input)(nil)).Elem(), RftemplateModelSpecificBand24Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand24PtrInput)(nil)).Elem(), RftemplateModelSpecificBand24Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand5Input)(nil)).Elem(), RftemplateModelSpecificBand5Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand5PtrInput)(nil)).Elem(), RftemplateModelSpecificBand5Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand5On24RadioInput)(nil)).Elem(), RftemplateModelSpecificBand5On24RadioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand5On24RadioPtrInput)(nil)).Elem(), RftemplateModelSpecificBand5On24RadioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand6Input)(nil)).Elem(), RftemplateModelSpecificBand6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*RftemplateModelSpecificBand6PtrInput)(nil)).Elem(), RftemplateModelSpecificBand6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecInput)(nil)).Elem(), ServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecArrayInput)(nil)).Elem(), ServiceSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicepolicyAppqoeInput)(nil)).Elem(), ServicepolicyAppqoeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicepolicyAppqoePtrInput)(nil)).Elem(), ServicepolicyAppqoeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicepolicyEwfInput)(nil)).Elem(), ServicepolicyEwfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicepolicyEwfArrayInput)(nil)).Elem(), ServicepolicyEwfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicepolicyIdpInput)(nil)).Elem(), ServicepolicyIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicepolicyIdpPtrInput)(nil)).Elem(), ServicepolicyIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingApiPolicyInput)(nil)).Elem(), SettingApiPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingApiPolicyPtrInput)(nil)).Elem(), SettingApiPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCelonaInput)(nil)).Elem(), SettingCelonaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCelonaPtrInput)(nil)).Elem(), SettingCelonaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCloudsharkInput)(nil)).Elem(), SettingCloudsharkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCloudsharkPtrInput)(nil)).Elem(), SettingCloudsharkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCradlepointInput)(nil)).Elem(), SettingCradlepointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCradlepointPtrInput)(nil)).Elem(), SettingCradlepointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingDeviceCertInput)(nil)).Elem(), SettingDeviceCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingDeviceCertPtrInput)(nil)).Elem(), SettingDeviceCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingInstallerInput)(nil)).Elem(), SettingInstallerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingInstallerPtrInput)(nil)).Elem(), SettingInstallerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingJcloudInput)(nil)).Elem(), SettingJcloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingJcloudPtrInput)(nil)).Elem(), SettingJcloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingJuniperInput)(nil)).Elem(), SettingJuniperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingJuniperPtrInput)(nil)).Elem(), SettingJuniperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingJuniperAccountInput)(nil)).Elem(), SettingJuniperAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingJuniperAccountArrayInput)(nil)).Elem(), SettingJuniperAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMgmtInput)(nil)).Elem(), SettingMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMgmtPtrInput)(nil)).Elem(), SettingMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMistNacInput)(nil)).Elem(), SettingMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMistNacPtrInput)(nil)).Elem(), SettingMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMistNacIdpInput)(nil)).Elem(), SettingMistNacIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMistNacIdpArrayInput)(nil)).Elem(), SettingMistNacIdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMistNacServerCertInput)(nil)).Elem(), SettingMistNacServerCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMistNacServerCertPtrInput)(nil)).Elem(), SettingMistNacServerCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMxedgeMgmtInput)(nil)).Elem(), SettingMxedgeMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMxedgeMgmtPtrInput)(nil)).Elem(), SettingMxedgeMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingPasswordPolicyInput)(nil)).Elem(), SettingPasswordPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingPasswordPolicyPtrInput)(nil)).Elem(), SettingPasswordPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingPcapInput)(nil)).Elem(), SettingPcapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingPcapPtrInput)(nil)).Elem(), SettingPcapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSecurityInput)(nil)).Elem(), SettingSecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSecurityPtrInput)(nil)).Elem(), SettingSecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSwitchMgmtInput)(nil)).Elem(), SettingSwitchMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSwitchMgmtPtrInput)(nil)).Elem(), SettingSwitchMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestInput)(nil)).Elem(), SettingSyntheticTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestPtrInput)(nil)).Elem(), SettingSyntheticTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestVlanInput)(nil)).Elem(), SettingSyntheticTestVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestVlanArrayInput)(nil)).Elem(), SettingSyntheticTestVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestWanSpeedtestInput)(nil)).Elem(), SettingSyntheticTestWanSpeedtestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestWanSpeedtestPtrInput)(nil)).Elem(), SettingSyntheticTestWanSpeedtestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingVpnOptionsInput)(nil)).Elem(), SettingVpnOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingVpnOptionsPtrInput)(nil)).Elem(), SettingVpnOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnPathsInput)(nil)).Elem(), VpnPathsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnPathsMapInput)(nil)).Elem(), VpnPathsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAcctServerInput)(nil)).Elem(), WlanAcctServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAcctServerArrayInput)(nil)).Elem(), WlanAcctServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAirwatchInput)(nil)).Elem(), WlanAirwatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAirwatchPtrInput)(nil)).Elem(), WlanAirwatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppLimitInput)(nil)).Elem(), WlanAppLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppLimitPtrInput)(nil)).Elem(), WlanAppLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosInput)(nil)).Elem(), WlanAppQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosPtrInput)(nil)).Elem(), WlanAppQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosAppsInput)(nil)).Elem(), WlanAppQosAppsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosAppsMapInput)(nil)).Elem(), WlanAppQosAppsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosOtherInput)(nil)).Elem(), WlanAppQosOtherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosOtherArrayInput)(nil)).Elem(), WlanAppQosOtherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthInput)(nil)).Elem(), WlanAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthPtrInput)(nil)).Elem(), WlanAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthServerInput)(nil)).Elem(), WlanAuthServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthServerArrayInput)(nil)).Elem(), WlanAuthServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourInput)(nil)).Elem(), WlanBonjourArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourPtrInput)(nil)).Elem(), WlanBonjourArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourServicesInput)(nil)).Elem(), WlanBonjourServicesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourServicesMapInput)(nil)).Elem(), WlanBonjourServicesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCiscoCwaInput)(nil)).Elem(), WlanCiscoCwaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCiscoCwaPtrInput)(nil)).Elem(), WlanCiscoCwaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCoaServerInput)(nil)).Elem(), WlanCoaServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCoaServerArrayInput)(nil)).Elem(), WlanCoaServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDnsServerRewriteInput)(nil)).Elem(), WlanDnsServerRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDnsServerRewritePtrInput)(nil)).Elem(), WlanDnsServerRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicPskInput)(nil)).Elem(), WlanDynamicPskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicPskPtrInput)(nil)).Elem(), WlanDynamicPskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicVlanInput)(nil)).Elem(), WlanDynamicVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicVlanPtrInput)(nil)).Elem(), WlanDynamicVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanHotspot20Input)(nil)).Elem(), WlanHotspot20Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanHotspot20PtrInput)(nil)).Elem(), WlanHotspot20Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanInjectDhcpOption82Input)(nil)).Elem(), WlanInjectDhcpOption82Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanInjectDhcpOption82PtrInput)(nil)).Elem(), WlanInjectDhcpOption82Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanMistNacInput)(nil)).Elem(), WlanMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanMistNacPtrInput)(nil)).Elem(), WlanMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalInput)(nil)).Elem(), WlanPortalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalPtrInput)(nil)).Elem(), WlanPortalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanQosInput)(nil)).Elem(), WlanQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanQosPtrInput)(nil)).Elem(), WlanQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecInput)(nil)).Elem(), WlanRadsecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecPtrInput)(nil)).Elem(), WlanRadsecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecServerInput)(nil)).Elem(), WlanRadsecServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecServerArrayInput)(nil)).Elem(), WlanRadsecServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanScheduleInput)(nil)).Elem(), WlanScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanSchedulePtrInput)(nil)).Elem(), WlanScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanScheduleHoursInput)(nil)).Elem(), WlanScheduleHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanScheduleHoursPtrInput)(nil)).Elem(), WlanScheduleHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlantemplateAppliesInput)(nil)).Elem(), WlantemplateAppliesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlantemplateAppliesPtrInput)(nil)).Elem(), WlantemplateAppliesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlantemplateExceptionsInput)(nil)).Elem(), WlantemplateExceptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlantemplateExceptionsPtrInput)(nil)).Elem(), WlantemplateExceptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WxtagSpecInput)(nil)).Elem(), WxtagSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WxtagSpecArrayInput)(nil)).Elem(), WxtagSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceprofilesApDeviceprofileInput)(nil)).Elem(), GetDeviceprofilesApDeviceprofileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceprofilesApDeviceprofileArrayInput)(nil)).Elem(), GetDeviceprofilesApDeviceprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceprofilesGatewayDeviceprofileInput)(nil)).Elem(), GetDeviceprofilesGatewayDeviceprofileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeviceprofilesGatewayDeviceprofileArrayInput)(nil)).Elem(), GetDeviceprofilesGatewayDeviceprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGatewaytemplatesOrgGatewaytemplateInput)(nil)).Elem(), GetGatewaytemplatesOrgGatewaytemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGatewaytemplatesOrgGatewaytemplateArrayInput)(nil)).Elem(), GetGatewaytemplatesOrgGatewaytemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdpprofilesOrgIdpprofileInput)(nil)).Elem(), GetIdpprofilesOrgIdpprofileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdpprofilesOrgIdpprofileArrayInput)(nil)).Elem(), GetIdpprofilesOrgIdpprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdpprofilesOrgIdpprofileOverwriteInput)(nil)).Elem(), GetIdpprofilesOrgIdpprofileOverwriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdpprofilesOrgIdpprofileOverwriteArrayInput)(nil)).Elem(), GetIdpprofilesOrgIdpprofileOverwriteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdpprofilesOrgIdpprofileOverwriteMatchingInput)(nil)).Elem(), GetIdpprofilesOrgIdpprofileOverwriteMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInventoryOrgInventoryInput)(nil)).Elem(), GetInventoryOrgInventoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInventoryOrgInventoryArrayInput)(nil)).Elem(), GetInventoryOrgInventoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNacrulesOrgNacruleInput)(nil)).Elem(), GetNacrulesOrgNacruleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNacrulesOrgNacruleArrayInput)(nil)).Elem(), GetNacrulesOrgNacruleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNactagsOrgNactagInput)(nil)).Elem(), GetNactagsOrgNactagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNactagsOrgNactagArrayInput)(nil)).Elem(), GetNactagsOrgNactagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworksOrgNetworkInput)(nil)).Elem(), GetNetworksOrgNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworksOrgNetworkArrayInput)(nil)).Elem(), GetNetworksOrgNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworktemplatesOrgNetworktemplateInput)(nil)).Elem(), GetNetworktemplatesOrgNetworktemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworktemplatesOrgNetworktemplateArrayInput)(nil)).Elem(), GetNetworktemplatesOrgNetworktemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRftemplatesOrgRftemplateInput)(nil)).Elem(), GetRftemplatesOrgRftemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRftemplatesOrgRftemplateArrayInput)(nil)).Elem(), GetRftemplatesOrgRftemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicepoliciesOrgServicepolicyInput)(nil)).Elem(), GetServicepoliciesOrgServicepolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicepoliciesOrgServicepolicyArrayInput)(nil)).Elem(), GetServicepoliciesOrgServicepolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicepoliciesOrgServicepolicyAppqoeInput)(nil)).Elem(), GetServicepoliciesOrgServicepolicyAppqoeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicepoliciesOrgServicepolicyEwfInput)(nil)).Elem(), GetServicepoliciesOrgServicepolicyEwfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicepoliciesOrgServicepolicyEwfArrayInput)(nil)).Elem(), GetServicepoliciesOrgServicepolicyEwfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicepoliciesOrgServicepolicyIdpInput)(nil)).Elem(), GetServicepoliciesOrgServicepolicyIdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicesOrgServiceInput)(nil)).Elem(), GetServicesOrgServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicesOrgServiceArrayInput)(nil)).Elem(), GetServicesOrgServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitegroupsOrgSitegroupInput)(nil)).Elem(), GetSitegroupsOrgSitegroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSitegroupsOrgSitegroupArrayInput)(nil)).Elem(), GetSitegroupsOrgSitegroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpnsOrgVpnInput)(nil)).Elem(), GetVpnsOrgVpnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpnsOrgVpnArrayInput)(nil)).Elem(), GetVpnsOrgVpnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpnsOrgVpnPathsInput)(nil)).Elem(), GetVpnsOrgVpnPathsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpnsOrgVpnPathsMapInput)(nil)).Elem(), GetVpnsOrgVpnPathsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWlantemplatesOrgWlantemplateInput)(nil)).Elem(), GetWlantemplatesOrgWlantemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWlantemplatesOrgWlantemplateArrayInput)(nil)).Elem(), GetWlantemplatesOrgWlantemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWxtagsOrgWxtagInput)(nil)).Elem(), GetWxtagsOrgWxtagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWxtagsOrgWxtagArrayInput)(nil)).Elem(), GetWxtagsOrgWxtagArray{})
	pulumi.RegisterOutputType(DeviceprofileApAeroscoutOutput{})
	pulumi.RegisterOutputType(DeviceprofileApAeroscoutPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApBleConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileApBleConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApEslConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileApEslConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApIpConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileApIpConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApLedOutput{})
	pulumi.RegisterOutputType(DeviceprofileApLedPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApMeshOutput{})
	pulumi.RegisterOutputType(DeviceprofileApMeshPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApPwrConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileApPwrConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand24Output{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand24PtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand5Output{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand5PtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand5On24RadioOutput{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand5On24RadioPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand6Output{})
	pulumi.RegisterOutputType(DeviceprofileApRadioConfigBand6PtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApUplinkPortConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileApUplinkPortConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileApUsbConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileApUsbConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayBgpConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayBgpConfigMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayBgpConfigCommunityOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayBgpConfigCommunityArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayBgpConfigNeighborsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayBgpConfigNeighborsMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigFixedBindingsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigFixedBindingsMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigOptionsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigOptionsMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayExtraRoutes6Output{})
	pulumi.RegisterOutputType(DeviceprofileGatewayExtraRoutes6MapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayExtraRoutesOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayExtraRoutesMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIdpProfilesOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIdpProfilesMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIdpProfilesOverwriteOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIdpProfilesOverwriteArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIdpProfilesOverwriteMatchingOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIdpProfilesOverwriteMatchingPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIpConfigsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayIpConfigsMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternalAccessOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternalAccessPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternetAccessOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternetAccessPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternetAccessDestinationNatOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternetAccessDestinationNatMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternetAccessStaticNatOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkInternetAccessStaticNatMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkTenantsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkTenantsMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessDestinationNatOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessDestinationNatMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessSourceNatOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessSourceNatPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessStaticNatOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayNetworkVpnAccessStaticNatMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayOobIpConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayOobIpConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayOobIpConfigNode1Output{})
	pulumi.RegisterOutputType(DeviceprofileGatewayOobIpConfigNode1PtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPathPreferencesOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPathPreferencesMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPathPreferencesPathOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPathPreferencesPathArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigIpConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigIpConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigTrafficShapingOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigTrafficShapingPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigVpnPathsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigVpnPathsMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigVpnPathsTrafficShapingPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigWanSourceNatOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayPortConfigWanSourceNatPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermActionOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermActionPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermMatchingOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermMatchingPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyAppqoeOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyAppqoePtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyEwfOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyEwfArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyIdpOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayServicePolicyIdpPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsMapOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsIkeProposalOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsIkeProposalArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsIpsecProposalOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsIpsecProposalArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsPrimaryOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsPrimaryPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsProbeOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsProbePtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsSecondaryOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelConfigsSecondaryPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsJseOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsJsePtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsZscalerOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsZscalerPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArrayOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayVrfConfigOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayVrfConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayVrfInstancesOutput{})
	pulumi.RegisterOutputType(DeviceprofileGatewayVrfInstancesMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateBgpConfigOutput{})
	pulumi.RegisterOutputType(GatewaytemplateBgpConfigMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateBgpConfigCommunityOutput{})
	pulumi.RegisterOutputType(GatewaytemplateBgpConfigCommunityArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateBgpConfigNeighborsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateBgpConfigNeighborsMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigFixedBindingsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigFixedBindingsMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigOptionsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigOptionsMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigVendorEncapulatedOutput{})
	pulumi.RegisterOutputType(GatewaytemplateDhcpdConfigConfigVendorEncapulatedMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateExtraRoutes6Output{})
	pulumi.RegisterOutputType(GatewaytemplateExtraRoutes6MapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateExtraRoutesOutput{})
	pulumi.RegisterOutputType(GatewaytemplateExtraRoutesMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIdpProfilesOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIdpProfilesMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIdpProfilesOverwriteOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIdpProfilesOverwriteArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIdpProfilesOverwriteMatchingOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIdpProfilesOverwriteMatchingPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIpConfigsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateIpConfigsMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternalAccessOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternalAccessPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternetAccessOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternetAccessPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternetAccessDestinationNatOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternetAccessDestinationNatMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternetAccessStaticNatOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkInternetAccessStaticNatMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkTenantsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkTenantsMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessDestinationNatOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessDestinationNatMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessSourceNatOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessSourceNatPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessStaticNatOutput{})
	pulumi.RegisterOutputType(GatewaytemplateNetworkVpnAccessStaticNatMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateOobIpConfigOutput{})
	pulumi.RegisterOutputType(GatewaytemplateOobIpConfigPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateOobIpConfigNode1Output{})
	pulumi.RegisterOutputType(GatewaytemplateOobIpConfigNode1PtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePathPreferencesOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePathPreferencesMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePathPreferencesPathOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePathPreferencesPathArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigIpConfigOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigIpConfigPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigTrafficShapingOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigTrafficShapingPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigVpnPathsOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigVpnPathsMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigVpnPathsTrafficShapingOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigVpnPathsTrafficShapingPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigWanSourceNatOutput{})
	pulumi.RegisterOutputType(GatewaytemplatePortConfigWanSourceNatPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermActionOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermActionPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermMatchingOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermMatchingPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermMatchingRouteExistsPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaOutput{})
	pulumi.RegisterOutputType(GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyAppqoeOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyAppqoePtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyEwfOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyEwfArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyIdpOutput{})
	pulumi.RegisterOutputType(GatewaytemplateServicePolicyIdpPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsMapOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionLatlngOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionLatlngPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionPrimaryOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionPrimaryPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionSecondaryOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsAutoProvisionSecondaryPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsIkeProposalOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsIkeProposalArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsIpsecProposalOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsIpsecProposalArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsPrimaryOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsPrimaryPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsProbeOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsProbePtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsSecondaryOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelConfigsSecondaryPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsJseOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsJsePtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsZscalerOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsZscalerPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsZscalerSubLocationOutput{})
	pulumi.RegisterOutputType(GatewaytemplateTunnelProviderOptionsZscalerSubLocationArrayOutput{})
	pulumi.RegisterOutputType(GatewaytemplateVrfConfigOutput{})
	pulumi.RegisterOutputType(GatewaytemplateVrfConfigPtrOutput{})
	pulumi.RegisterOutputType(GatewaytemplateVrfInstancesOutput{})
	pulumi.RegisterOutputType(GatewaytemplateVrfInstancesMapOutput{})
	pulumi.RegisterOutputType(IdpprofileOverwriteOutput{})
	pulumi.RegisterOutputType(IdpprofileOverwriteArrayOutput{})
	pulumi.RegisterOutputType(IdpprofileOverwriteMatchingOutput{})
	pulumi.RegisterOutputType(IdpprofileOverwriteMatchingPtrOutput{})
	pulumi.RegisterOutputType(InventoryDeviceOutput{})
	pulumi.RegisterOutputType(InventoryDeviceArrayOutput{})
	pulumi.RegisterOutputType(NacruleMatchingOutput{})
	pulumi.RegisterOutputType(NacruleMatchingPtrOutput{})
	pulumi.RegisterOutputType(NacruleNotMatchingOutput{})
	pulumi.RegisterOutputType(NacruleNotMatchingPtrOutput{})
	pulumi.RegisterOutputType(NetworkInternalAccessOutput{})
	pulumi.RegisterOutputType(NetworkInternalAccessPtrOutput{})
	pulumi.RegisterOutputType(NetworkInternetAccessOutput{})
	pulumi.RegisterOutputType(NetworkInternetAccessPtrOutput{})
	pulumi.RegisterOutputType(NetworkInternetAccessDestinationNatOutput{})
	pulumi.RegisterOutputType(NetworkInternetAccessDestinationNatMapOutput{})
	pulumi.RegisterOutputType(NetworkInternetAccessStaticNatOutput{})
	pulumi.RegisterOutputType(NetworkInternetAccessStaticNatMapOutput{})
	pulumi.RegisterOutputType(NetworkTenantsOutput{})
	pulumi.RegisterOutputType(NetworkTenantsMapOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessMapOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessDestinationNatOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessDestinationNatMapOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessSourceNatOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessSourceNatPtrOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessStaticNatOutput{})
	pulumi.RegisterOutputType(NetworkVpnAccessStaticNatMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyActionOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyActionArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsSpecOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsSpecArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateDhcpSnoopingOutput{})
	pulumi.RegisterOutputType(NetworktemplateDhcpSnoopingPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6Output{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6MapOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6NextQualifiedOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6NextQualifiedMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesNextQualifiedOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesNextQualifiedMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateMistNacOutput{})
	pulumi.RegisterOutputType(NetworktemplateMistNacPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateNetworksOutput{})
	pulumi.RegisterOutputType(NetworktemplateNetworksMapOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortMirroringOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortMirroringMapOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesMapOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesRuleOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesStormControlOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesStormControlPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAcctServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAcctServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAuthServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAuthServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogArchiveOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogArchivePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsoleOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsolePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsoleContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsoleContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileArchiveOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileArchivePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigClientListOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigClientListArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigTrapGroupOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigTrapGroupArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV2cConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV2cConfigArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetAddressOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetParameterOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmUserOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigViewOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigViewArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortConfigMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortMirroringOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortMirroringMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectReOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectRePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectReCustomOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectReCustomArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsAcctServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsTacplusServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesExtraRoutesOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesExtraRoutesMapOutput{})
	pulumi.RegisterOutputType(RftemplateBand24Output{})
	pulumi.RegisterOutputType(RftemplateBand24PtrOutput{})
	pulumi.RegisterOutputType(RftemplateBand5Output{})
	pulumi.RegisterOutputType(RftemplateBand5PtrOutput{})
	pulumi.RegisterOutputType(RftemplateBand5On24RadioOutput{})
	pulumi.RegisterOutputType(RftemplateBand5On24RadioPtrOutput{})
	pulumi.RegisterOutputType(RftemplateBand6Output{})
	pulumi.RegisterOutputType(RftemplateBand6PtrOutput{})
	pulumi.RegisterOutputType(RftemplateModelSpecificOutput{})
	pulumi.RegisterOutputType(RftemplateModelSpecificMapOutput{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand24Output{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand24PtrOutput{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand5Output{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand5PtrOutput{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand5On24RadioOutput{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand5On24RadioPtrOutput{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand6Output{})
	pulumi.RegisterOutputType(RftemplateModelSpecificBand6PtrOutput{})
	pulumi.RegisterOutputType(ServiceSpecOutput{})
	pulumi.RegisterOutputType(ServiceSpecArrayOutput{})
	pulumi.RegisterOutputType(ServicepolicyAppqoeOutput{})
	pulumi.RegisterOutputType(ServicepolicyAppqoePtrOutput{})
	pulumi.RegisterOutputType(ServicepolicyEwfOutput{})
	pulumi.RegisterOutputType(ServicepolicyEwfArrayOutput{})
	pulumi.RegisterOutputType(ServicepolicyIdpOutput{})
	pulumi.RegisterOutputType(ServicepolicyIdpPtrOutput{})
	pulumi.RegisterOutputType(SettingApiPolicyOutput{})
	pulumi.RegisterOutputType(SettingApiPolicyPtrOutput{})
	pulumi.RegisterOutputType(SettingCelonaOutput{})
	pulumi.RegisterOutputType(SettingCelonaPtrOutput{})
	pulumi.RegisterOutputType(SettingCloudsharkOutput{})
	pulumi.RegisterOutputType(SettingCloudsharkPtrOutput{})
	pulumi.RegisterOutputType(SettingCradlepointOutput{})
	pulumi.RegisterOutputType(SettingCradlepointPtrOutput{})
	pulumi.RegisterOutputType(SettingDeviceCertOutput{})
	pulumi.RegisterOutputType(SettingDeviceCertPtrOutput{})
	pulumi.RegisterOutputType(SettingInstallerOutput{})
	pulumi.RegisterOutputType(SettingInstallerPtrOutput{})
	pulumi.RegisterOutputType(SettingJcloudOutput{})
	pulumi.RegisterOutputType(SettingJcloudPtrOutput{})
	pulumi.RegisterOutputType(SettingJuniperOutput{})
	pulumi.RegisterOutputType(SettingJuniperPtrOutput{})
	pulumi.RegisterOutputType(SettingJuniperAccountOutput{})
	pulumi.RegisterOutputType(SettingJuniperAccountArrayOutput{})
	pulumi.RegisterOutputType(SettingMgmtOutput{})
	pulumi.RegisterOutputType(SettingMgmtPtrOutput{})
	pulumi.RegisterOutputType(SettingMistNacOutput{})
	pulumi.RegisterOutputType(SettingMistNacPtrOutput{})
	pulumi.RegisterOutputType(SettingMistNacIdpOutput{})
	pulumi.RegisterOutputType(SettingMistNacIdpArrayOutput{})
	pulumi.RegisterOutputType(SettingMistNacServerCertOutput{})
	pulumi.RegisterOutputType(SettingMistNacServerCertPtrOutput{})
	pulumi.RegisterOutputType(SettingMxedgeMgmtOutput{})
	pulumi.RegisterOutputType(SettingMxedgeMgmtPtrOutput{})
	pulumi.RegisterOutputType(SettingPasswordPolicyOutput{})
	pulumi.RegisterOutputType(SettingPasswordPolicyPtrOutput{})
	pulumi.RegisterOutputType(SettingPcapOutput{})
	pulumi.RegisterOutputType(SettingPcapPtrOutput{})
	pulumi.RegisterOutputType(SettingSecurityOutput{})
	pulumi.RegisterOutputType(SettingSecurityPtrOutput{})
	pulumi.RegisterOutputType(SettingSwitchMgmtOutput{})
	pulumi.RegisterOutputType(SettingSwitchMgmtPtrOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestPtrOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestVlanOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestVlanArrayOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestWanSpeedtestOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestWanSpeedtestPtrOutput{})
	pulumi.RegisterOutputType(SettingVpnOptionsOutput{})
	pulumi.RegisterOutputType(SettingVpnOptionsPtrOutput{})
	pulumi.RegisterOutputType(VpnPathsOutput{})
	pulumi.RegisterOutputType(VpnPathsMapOutput{})
	pulumi.RegisterOutputType(WlanAcctServerOutput{})
	pulumi.RegisterOutputType(WlanAcctServerArrayOutput{})
	pulumi.RegisterOutputType(WlanAirwatchOutput{})
	pulumi.RegisterOutputType(WlanAirwatchPtrOutput{})
	pulumi.RegisterOutputType(WlanAppLimitOutput{})
	pulumi.RegisterOutputType(WlanAppLimitPtrOutput{})
	pulumi.RegisterOutputType(WlanAppQosOutput{})
	pulumi.RegisterOutputType(WlanAppQosPtrOutput{})
	pulumi.RegisterOutputType(WlanAppQosAppsOutput{})
	pulumi.RegisterOutputType(WlanAppQosAppsMapOutput{})
	pulumi.RegisterOutputType(WlanAppQosOtherOutput{})
	pulumi.RegisterOutputType(WlanAppQosOtherArrayOutput{})
	pulumi.RegisterOutputType(WlanAuthOutput{})
	pulumi.RegisterOutputType(WlanAuthPtrOutput{})
	pulumi.RegisterOutputType(WlanAuthServerOutput{})
	pulumi.RegisterOutputType(WlanAuthServerArrayOutput{})
	pulumi.RegisterOutputType(WlanBonjourOutput{})
	pulumi.RegisterOutputType(WlanBonjourPtrOutput{})
	pulumi.RegisterOutputType(WlanBonjourServicesOutput{})
	pulumi.RegisterOutputType(WlanBonjourServicesMapOutput{})
	pulumi.RegisterOutputType(WlanCiscoCwaOutput{})
	pulumi.RegisterOutputType(WlanCiscoCwaPtrOutput{})
	pulumi.RegisterOutputType(WlanCoaServerOutput{})
	pulumi.RegisterOutputType(WlanCoaServerArrayOutput{})
	pulumi.RegisterOutputType(WlanDnsServerRewriteOutput{})
	pulumi.RegisterOutputType(WlanDnsServerRewritePtrOutput{})
	pulumi.RegisterOutputType(WlanDynamicPskOutput{})
	pulumi.RegisterOutputType(WlanDynamicPskPtrOutput{})
	pulumi.RegisterOutputType(WlanDynamicVlanOutput{})
	pulumi.RegisterOutputType(WlanDynamicVlanPtrOutput{})
	pulumi.RegisterOutputType(WlanHotspot20Output{})
	pulumi.RegisterOutputType(WlanHotspot20PtrOutput{})
	pulumi.RegisterOutputType(WlanInjectDhcpOption82Output{})
	pulumi.RegisterOutputType(WlanInjectDhcpOption82PtrOutput{})
	pulumi.RegisterOutputType(WlanMistNacOutput{})
	pulumi.RegisterOutputType(WlanMistNacPtrOutput{})
	pulumi.RegisterOutputType(WlanPortalOutput{})
	pulumi.RegisterOutputType(WlanPortalPtrOutput{})
	pulumi.RegisterOutputType(WlanQosOutput{})
	pulumi.RegisterOutputType(WlanQosPtrOutput{})
	pulumi.RegisterOutputType(WlanRadsecOutput{})
	pulumi.RegisterOutputType(WlanRadsecPtrOutput{})
	pulumi.RegisterOutputType(WlanRadsecServerOutput{})
	pulumi.RegisterOutputType(WlanRadsecServerArrayOutput{})
	pulumi.RegisterOutputType(WlanScheduleOutput{})
	pulumi.RegisterOutputType(WlanSchedulePtrOutput{})
	pulumi.RegisterOutputType(WlanScheduleHoursOutput{})
	pulumi.RegisterOutputType(WlanScheduleHoursPtrOutput{})
	pulumi.RegisterOutputType(WlantemplateAppliesOutput{})
	pulumi.RegisterOutputType(WlantemplateAppliesPtrOutput{})
	pulumi.RegisterOutputType(WlantemplateExceptionsOutput{})
	pulumi.RegisterOutputType(WlantemplateExceptionsPtrOutput{})
	pulumi.RegisterOutputType(WxtagSpecOutput{})
	pulumi.RegisterOutputType(WxtagSpecArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceprofilesApDeviceprofileOutput{})
	pulumi.RegisterOutputType(GetDeviceprofilesApDeviceprofileArrayOutput{})
	pulumi.RegisterOutputType(GetDeviceprofilesGatewayDeviceprofileOutput{})
	pulumi.RegisterOutputType(GetDeviceprofilesGatewayDeviceprofileArrayOutput{})
	pulumi.RegisterOutputType(GetGatewaytemplatesOrgGatewaytemplateOutput{})
	pulumi.RegisterOutputType(GetGatewaytemplatesOrgGatewaytemplateArrayOutput{})
	pulumi.RegisterOutputType(GetIdpprofilesOrgIdpprofileOutput{})
	pulumi.RegisterOutputType(GetIdpprofilesOrgIdpprofileArrayOutput{})
	pulumi.RegisterOutputType(GetIdpprofilesOrgIdpprofileOverwriteOutput{})
	pulumi.RegisterOutputType(GetIdpprofilesOrgIdpprofileOverwriteArrayOutput{})
	pulumi.RegisterOutputType(GetIdpprofilesOrgIdpprofileOverwriteMatchingOutput{})
	pulumi.RegisterOutputType(GetInventoryOrgInventoryOutput{})
	pulumi.RegisterOutputType(GetInventoryOrgInventoryArrayOutput{})
	pulumi.RegisterOutputType(GetNacrulesOrgNacruleOutput{})
	pulumi.RegisterOutputType(GetNacrulesOrgNacruleArrayOutput{})
	pulumi.RegisterOutputType(GetNactagsOrgNactagOutput{})
	pulumi.RegisterOutputType(GetNactagsOrgNactagArrayOutput{})
	pulumi.RegisterOutputType(GetNetworksOrgNetworkOutput{})
	pulumi.RegisterOutputType(GetNetworksOrgNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetNetworktemplatesOrgNetworktemplateOutput{})
	pulumi.RegisterOutputType(GetNetworktemplatesOrgNetworktemplateArrayOutput{})
	pulumi.RegisterOutputType(GetRftemplatesOrgRftemplateOutput{})
	pulumi.RegisterOutputType(GetRftemplatesOrgRftemplateArrayOutput{})
	pulumi.RegisterOutputType(GetServicepoliciesOrgServicepolicyOutput{})
	pulumi.RegisterOutputType(GetServicepoliciesOrgServicepolicyArrayOutput{})
	pulumi.RegisterOutputType(GetServicepoliciesOrgServicepolicyAppqoeOutput{})
	pulumi.RegisterOutputType(GetServicepoliciesOrgServicepolicyEwfOutput{})
	pulumi.RegisterOutputType(GetServicepoliciesOrgServicepolicyEwfArrayOutput{})
	pulumi.RegisterOutputType(GetServicepoliciesOrgServicepolicyIdpOutput{})
	pulumi.RegisterOutputType(GetServicesOrgServiceOutput{})
	pulumi.RegisterOutputType(GetServicesOrgServiceArrayOutput{})
	pulumi.RegisterOutputType(GetSitegroupsOrgSitegroupOutput{})
	pulumi.RegisterOutputType(GetSitegroupsOrgSitegroupArrayOutput{})
	pulumi.RegisterOutputType(GetVpnsOrgVpnOutput{})
	pulumi.RegisterOutputType(GetVpnsOrgVpnArrayOutput{})
	pulumi.RegisterOutputType(GetVpnsOrgVpnPathsOutput{})
	pulumi.RegisterOutputType(GetVpnsOrgVpnPathsMapOutput{})
	pulumi.RegisterOutputType(GetWlantemplatesOrgWlantemplateOutput{})
	pulumi.RegisterOutputType(GetWlantemplatesOrgWlantemplateArrayOutput{})
	pulumi.RegisterOutputType(GetWxtagsOrgWxtagOutput{})
	pulumi.RegisterOutputType(GetWxtagsOrgWxtagArrayOutput{})
}
