// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages the Org Antivirus Profile.
//
// An Antivirus Profile is used to configure the Antivirus feature on SRX devices. It specifies which content the Antivirus should analyse and which content should be ignored.
//
// The Antivirus profiles can be used within the following resources:
//   - `mist_org_servicepolicy.antivirus`
//   - `mist_org_gatewaytemplate.service_policies.antivirus`
//   - `mist_org_deviceprofile_gateway.service_policies.antivirus`
//   - `mist_device_gateway.service_policies.antivirus`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := org.NewAvprofile(ctx, "avprofile_one", &org.AvprofileArgs{
//				OrgId:          pulumi.Any(terraformTest.Id),
//				FallbackAction: pulumi.String("block"),
//				MaxFilesize:    pulumi.Int(5000),
//				MimeWhitelists: pulumi.StringArray{
//					pulumi.String("image/png"),
//				},
//				Name: pulumi.String("avprofile_one"),
//				Protocols: pulumi.StringArray{
//					pulumi.String("ftp"),
//					pulumi.String("http"),
//					pulumi.String("imap"),
//					pulumi.String("pop3"),
//					pulumi.String("smtp"),
//				},
//				UrlWhitelists: pulumi.StringArray{
//					pulumi.String("www.google.fr"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `mist_org_avprofile` with:
//
// IDP Profile can be imported by specifying the org_id and the avprofile_id
//
// ```sh
// $ pulumi import junipermist:org/avprofile:Avprofile avprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
// ```
type Avprofile struct {
	pulumi.CustomResourceState

	// enum: `block`, `log-and-permit`, `permit`
	FallbackAction pulumi.StringPtrOutput `pulumi:"fallbackAction"`
	// In KB
	MaxFilesize    pulumi.IntOutput         `pulumi:"maxFilesize"`
	MimeWhitelists pulumi.StringArrayOutput `pulumi:"mimeWhitelists"`
	Name           pulumi.StringOutput      `pulumi:"name"`
	OrgId          pulumi.StringOutput      `pulumi:"orgId"`
	// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
	Protocols     pulumi.StringArrayOutput `pulumi:"protocols"`
	UrlWhitelists pulumi.StringArrayOutput `pulumi:"urlWhitelists"`
}

// NewAvprofile registers a new resource with the given unique name, arguments, and options.
func NewAvprofile(ctx *pulumi.Context,
	name string, args *AvprofileArgs, opts ...pulumi.ResourceOption) (*Avprofile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Avprofile
	err := ctx.RegisterResource("junipermist:org/avprofile:Avprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAvprofile gets an existing Avprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAvprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AvprofileState, opts ...pulumi.ResourceOption) (*Avprofile, error) {
	var resource Avprofile
	err := ctx.ReadResource("junipermist:org/avprofile:Avprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Avprofile resources.
type avprofileState struct {
	// enum: `block`, `log-and-permit`, `permit`
	FallbackAction *string `pulumi:"fallbackAction"`
	// In KB
	MaxFilesize    *int     `pulumi:"maxFilesize"`
	MimeWhitelists []string `pulumi:"mimeWhitelists"`
	Name           *string  `pulumi:"name"`
	OrgId          *string  `pulumi:"orgId"`
	// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
	Protocols     []string `pulumi:"protocols"`
	UrlWhitelists []string `pulumi:"urlWhitelists"`
}

type AvprofileState struct {
	// enum: `block`, `log-and-permit`, `permit`
	FallbackAction pulumi.StringPtrInput
	// In KB
	MaxFilesize    pulumi.IntPtrInput
	MimeWhitelists pulumi.StringArrayInput
	Name           pulumi.StringPtrInput
	OrgId          pulumi.StringPtrInput
	// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
	Protocols     pulumi.StringArrayInput
	UrlWhitelists pulumi.StringArrayInput
}

func (AvprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*avprofileState)(nil)).Elem()
}

type avprofileArgs struct {
	// enum: `block`, `log-and-permit`, `permit`
	FallbackAction *string `pulumi:"fallbackAction"`
	// In KB
	MaxFilesize    *int     `pulumi:"maxFilesize"`
	MimeWhitelists []string `pulumi:"mimeWhitelists"`
	Name           *string  `pulumi:"name"`
	OrgId          string   `pulumi:"orgId"`
	// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
	Protocols     []string `pulumi:"protocols"`
	UrlWhitelists []string `pulumi:"urlWhitelists"`
}

// The set of arguments for constructing a Avprofile resource.
type AvprofileArgs struct {
	// enum: `block`, `log-and-permit`, `permit`
	FallbackAction pulumi.StringPtrInput
	// In KB
	MaxFilesize    pulumi.IntPtrInput
	MimeWhitelists pulumi.StringArrayInput
	Name           pulumi.StringPtrInput
	OrgId          pulumi.StringInput
	// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
	Protocols     pulumi.StringArrayInput
	UrlWhitelists pulumi.StringArrayInput
}

func (AvprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*avprofileArgs)(nil)).Elem()
}

type AvprofileInput interface {
	pulumi.Input

	ToAvprofileOutput() AvprofileOutput
	ToAvprofileOutputWithContext(ctx context.Context) AvprofileOutput
}

func (*Avprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**Avprofile)(nil)).Elem()
}

func (i *Avprofile) ToAvprofileOutput() AvprofileOutput {
	return i.ToAvprofileOutputWithContext(context.Background())
}

func (i *Avprofile) ToAvprofileOutputWithContext(ctx context.Context) AvprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvprofileOutput)
}

// AvprofileArrayInput is an input type that accepts AvprofileArray and AvprofileArrayOutput values.
// You can construct a concrete instance of `AvprofileArrayInput` via:
//
//	AvprofileArray{ AvprofileArgs{...} }
type AvprofileArrayInput interface {
	pulumi.Input

	ToAvprofileArrayOutput() AvprofileArrayOutput
	ToAvprofileArrayOutputWithContext(context.Context) AvprofileArrayOutput
}

type AvprofileArray []AvprofileInput

func (AvprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Avprofile)(nil)).Elem()
}

func (i AvprofileArray) ToAvprofileArrayOutput() AvprofileArrayOutput {
	return i.ToAvprofileArrayOutputWithContext(context.Background())
}

func (i AvprofileArray) ToAvprofileArrayOutputWithContext(ctx context.Context) AvprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvprofileArrayOutput)
}

// AvprofileMapInput is an input type that accepts AvprofileMap and AvprofileMapOutput values.
// You can construct a concrete instance of `AvprofileMapInput` via:
//
//	AvprofileMap{ "key": AvprofileArgs{...} }
type AvprofileMapInput interface {
	pulumi.Input

	ToAvprofileMapOutput() AvprofileMapOutput
	ToAvprofileMapOutputWithContext(context.Context) AvprofileMapOutput
}

type AvprofileMap map[string]AvprofileInput

func (AvprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Avprofile)(nil)).Elem()
}

func (i AvprofileMap) ToAvprofileMapOutput() AvprofileMapOutput {
	return i.ToAvprofileMapOutputWithContext(context.Background())
}

func (i AvprofileMap) ToAvprofileMapOutputWithContext(ctx context.Context) AvprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvprofileMapOutput)
}

type AvprofileOutput struct{ *pulumi.OutputState }

func (AvprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Avprofile)(nil)).Elem()
}

func (o AvprofileOutput) ToAvprofileOutput() AvprofileOutput {
	return o
}

func (o AvprofileOutput) ToAvprofileOutputWithContext(ctx context.Context) AvprofileOutput {
	return o
}

// enum: `block`, `log-and-permit`, `permit`
func (o AvprofileOutput) FallbackAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Avprofile) pulumi.StringPtrOutput { return v.FallbackAction }).(pulumi.StringPtrOutput)
}

// In KB
func (o AvprofileOutput) MaxFilesize() pulumi.IntOutput {
	return o.ApplyT(func(v *Avprofile) pulumi.IntOutput { return v.MaxFilesize }).(pulumi.IntOutput)
}

func (o AvprofileOutput) MimeWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Avprofile) pulumi.StringArrayOutput { return v.MimeWhitelists }).(pulumi.StringArrayOutput)
}

func (o AvprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Avprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AvprofileOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Avprofile) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
func (o AvprofileOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Avprofile) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

func (o AvprofileOutput) UrlWhitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Avprofile) pulumi.StringArrayOutput { return v.UrlWhitelists }).(pulumi.StringArrayOutput)
}

type AvprofileArrayOutput struct{ *pulumi.OutputState }

func (AvprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Avprofile)(nil)).Elem()
}

func (o AvprofileArrayOutput) ToAvprofileArrayOutput() AvprofileArrayOutput {
	return o
}

func (o AvprofileArrayOutput) ToAvprofileArrayOutputWithContext(ctx context.Context) AvprofileArrayOutput {
	return o
}

func (o AvprofileArrayOutput) Index(i pulumi.IntInput) AvprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Avprofile {
		return vs[0].([]*Avprofile)[vs[1].(int)]
	}).(AvprofileOutput)
}

type AvprofileMapOutput struct{ *pulumi.OutputState }

func (AvprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Avprofile)(nil)).Elem()
}

func (o AvprofileMapOutput) ToAvprofileMapOutput() AvprofileMapOutput {
	return o
}

func (o AvprofileMapOutput) ToAvprofileMapOutputWithContext(ctx context.Context) AvprofileMapOutput {
	return o
}

func (o AvprofileMapOutput) MapIndex(k pulumi.StringInput) AvprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Avprofile {
		return vs[0].(map[string]*Avprofile)[vs[1].(string)]
	}).(AvprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvprofileInput)(nil)).Elem(), &Avprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvprofileArrayInput)(nil)).Elem(), AvprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvprofileMapInput)(nil)).Elem(), AvprofileMap{})
	pulumi.RegisterOutputType(AvprofileOutput{})
	pulumi.RegisterOutputType(AvprofileArrayOutput{})
	pulumi.RegisterOutputType(AvprofileMapOutput{})
}
