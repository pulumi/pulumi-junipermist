// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.junipermist.org.outputs.GatewaytemplateRoutingPoliciesTermMatchingRouteExists;
import com.pulumi.junipermist.org.outputs.GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GatewaytemplateRoutingPoliciesTermMatching {
    /**
     * @return takes regular expression
     * 
     */
    private @Nullable List<String> asPaths;
    private @Nullable List<String> communities;
    private @Nullable List<String> networks;
    /**
     * @return zero or more criteria/filter can be specified to match the term, all criteria have to be met
     * 
     */
    private @Nullable List<String> prefixes;
    /**
     * @return `direct`, `bgp`, `osp`, `static`, `aggregate`...
     * 
     */
    private @Nullable List<String> protocols;
    private @Nullable GatewaytemplateRoutingPoliciesTermMatchingRouteExists routeExists;
    /**
     * @return overlay-facing criteria (used for bgp_config where via=vpn)
     * 
     */
    private @Nullable List<String> vpnNeighborMacs;
    private @Nullable GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla vpnPathSla;
    /**
     * @return overlay-facing criteria (used for bgp_config where via=vpn). ordered-
     * 
     */
    private @Nullable List<String> vpnPaths;

    private GatewaytemplateRoutingPoliciesTermMatching() {}
    /**
     * @return takes regular expression
     * 
     */
    public List<String> asPaths() {
        return this.asPaths == null ? List.of() : this.asPaths;
    }
    public List<String> communities() {
        return this.communities == null ? List.of() : this.communities;
    }
    public List<String> networks() {
        return this.networks == null ? List.of() : this.networks;
    }
    /**
     * @return zero or more criteria/filter can be specified to match the term, all criteria have to be met
     * 
     */
    public List<String> prefixes() {
        return this.prefixes == null ? List.of() : this.prefixes;
    }
    /**
     * @return `direct`, `bgp`, `osp`, `static`, `aggregate`...
     * 
     */
    public List<String> protocols() {
        return this.protocols == null ? List.of() : this.protocols;
    }
    public Optional<GatewaytemplateRoutingPoliciesTermMatchingRouteExists> routeExists() {
        return Optional.ofNullable(this.routeExists);
    }
    /**
     * @return overlay-facing criteria (used for bgp_config where via=vpn)
     * 
     */
    public List<String> vpnNeighborMacs() {
        return this.vpnNeighborMacs == null ? List.of() : this.vpnNeighborMacs;
    }
    public Optional<GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla> vpnPathSla() {
        return Optional.ofNullable(this.vpnPathSla);
    }
    /**
     * @return overlay-facing criteria (used for bgp_config where via=vpn). ordered-
     * 
     */
    public List<String> vpnPaths() {
        return this.vpnPaths == null ? List.of() : this.vpnPaths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GatewaytemplateRoutingPoliciesTermMatching defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> asPaths;
        private @Nullable List<String> communities;
        private @Nullable List<String> networks;
        private @Nullable List<String> prefixes;
        private @Nullable List<String> protocols;
        private @Nullable GatewaytemplateRoutingPoliciesTermMatchingRouteExists routeExists;
        private @Nullable List<String> vpnNeighborMacs;
        private @Nullable GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla vpnPathSla;
        private @Nullable List<String> vpnPaths;
        public Builder() {}
        public Builder(GatewaytemplateRoutingPoliciesTermMatching defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asPaths = defaults.asPaths;
    	      this.communities = defaults.communities;
    	      this.networks = defaults.networks;
    	      this.prefixes = defaults.prefixes;
    	      this.protocols = defaults.protocols;
    	      this.routeExists = defaults.routeExists;
    	      this.vpnNeighborMacs = defaults.vpnNeighborMacs;
    	      this.vpnPathSla = defaults.vpnPathSla;
    	      this.vpnPaths = defaults.vpnPaths;
        }

        @CustomType.Setter
        public Builder asPaths(@Nullable List<String> asPaths) {

            this.asPaths = asPaths;
            return this;
        }
        public Builder asPaths(String... asPaths) {
            return asPaths(List.of(asPaths));
        }
        @CustomType.Setter
        public Builder communities(@Nullable List<String> communities) {

            this.communities = communities;
            return this;
        }
        public Builder communities(String... communities) {
            return communities(List.of(communities));
        }
        @CustomType.Setter
        public Builder networks(@Nullable List<String> networks) {

            this.networks = networks;
            return this;
        }
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder prefixes(@Nullable List<String> prefixes) {

            this.prefixes = prefixes;
            return this;
        }
        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }
        @CustomType.Setter
        public Builder protocols(@Nullable List<String> protocols) {

            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder routeExists(@Nullable GatewaytemplateRoutingPoliciesTermMatchingRouteExists routeExists) {

            this.routeExists = routeExists;
            return this;
        }
        @CustomType.Setter
        public Builder vpnNeighborMacs(@Nullable List<String> vpnNeighborMacs) {

            this.vpnNeighborMacs = vpnNeighborMacs;
            return this;
        }
        public Builder vpnNeighborMacs(String... vpnNeighborMacs) {
            return vpnNeighborMacs(List.of(vpnNeighborMacs));
        }
        @CustomType.Setter
        public Builder vpnPathSla(@Nullable GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla vpnPathSla) {

            this.vpnPathSla = vpnPathSla;
            return this;
        }
        @CustomType.Setter
        public Builder vpnPaths(@Nullable List<String> vpnPaths) {

            this.vpnPaths = vpnPaths;
            return this;
        }
        public Builder vpnPaths(String... vpnPaths) {
            return vpnPaths(List.of(vpnPaths));
        }
        public GatewaytemplateRoutingPoliciesTermMatching build() {
            final var _resultValue = new GatewaytemplateRoutingPoliciesTermMatching();
            _resultValue.asPaths = asPaths;
            _resultValue.communities = communities;
            _resultValue.networks = networks;
            _resultValue.prefixes = prefixes;
            _resultValue.protocols = protocols;
            _resultValue.routeExists = routeExists;
            _resultValue.vpnNeighborMacs = vpnNeighborMacs;
            _resultValue.vpnPathSla = vpnPathSla;
            _resultValue.vpnPaths = vpnPaths;
            return _resultValue;
        }
    }
}
