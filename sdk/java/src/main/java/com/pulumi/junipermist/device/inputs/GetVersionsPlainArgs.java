// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetVersionsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVersionsPlainArgs Empty = new GetVersionsPlainArgs();

    /**
     * Fetch version for device model, use/combine with `type` as needed (for switch and gateway devices)
     * 
     */
    @Import(name="model", required=true)
    private String model;

    /**
     * @return Fetch version for device model, use/combine with `type` as needed (for switch and gateway devices)
     * 
     */
    public String model() {
        return this.model;
    }

    @Import(name="orgId", required=true)
    private String orgId;

    public String orgId() {
        return this.orgId;
    }

    /**
     * enum: `ap`, `gateway`, `switch`
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return enum: `ap`, `gateway`, `switch`
     * 
     */
    public String type() {
        return this.type;
    }

    private GetVersionsPlainArgs() {}

    private GetVersionsPlainArgs(GetVersionsPlainArgs $) {
        this.model = $.model;
        this.orgId = $.orgId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVersionsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVersionsPlainArgs $;

        public Builder() {
            $ = new GetVersionsPlainArgs();
        }

        public Builder(GetVersionsPlainArgs defaults) {
            $ = new GetVersionsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param model Fetch version for device model, use/combine with `type` as needed (for switch and gateway devices)
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            $.model = model;
            return this;
        }

        public Builder orgId(String orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param type enum: `ap`, `gateway`, `switch`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetVersionsPlainArgs build() {
            if ($.model == null) {
                throw new MissingRequiredPropertyException("GetVersionsPlainArgs", "model");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("GetVersionsPlainArgs", "orgId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetVersionsPlainArgs", "type");
            }
            return $;
        }
    }

}
