// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWebhooksOrgWebhook {
    /**
     * @return When the object has been created, in epoch
     * 
     */
    private Double createdTime;
    /**
     * @return Whether webhook is enabled
     * 
     */
    private Boolean enabled;
    /**
     * @return If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000
     * 
     */
    private Map<String,String> headers;
    /**
     * @return Unique ID of the object instance in the Mist Organnization
     * 
     */
    private String id;
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    private Double modifiedTime;
    /**
     * @return Name of the webhook
     * 
     */
    private String name;
    /**
     * @return Required when `oauth2_grant_type`==`client_credentials`
     * 
     */
    private String oauth2ClientId;
    /**
     * @return Required when `oauth2_grant_type`==`client_credentials`
     * 
     */
    private String oauth2ClientSecret;
    /**
     * @return required when `type`==`oauth2`. enum: `client_credentials`, `password`
     * 
     */
    private String oauth2GrantType;
    /**
     * @return Required when `oauth2_grant_type`==`password`
     * 
     */
    private String oauth2Password;
    /**
     * @return Required when `type`==`oauth2`, if provided, will be used in the token request
     * 
     */
    private List<String> oauth2Scopes;
    /**
     * @return Required when `type`==`oauth2`
     * 
     */
    private String oauth2TokenUrl;
    /**
     * @return Required when `oauth2_grant_type`==`password`
     * 
     */
    private String oauth2Username;
    private String orgId;
    /**
     * @return Only if `type`=`http-post`
     * 
     */
    private String secret;
    /**
     * @return Required if `type`=`splunk`. If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.
     * 
     */
    private String splunkToken;
    /**
     * @return List of supported webhook topics available with the API Call List Webhook Topics
     * 
     */
    private List<String> topics;
    /**
     * @return enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
     * 
     */
    private String type;
    private String url;
    /**
     * @return When url uses HTTPS, whether to verify the certificate
     * 
     */
    private Boolean verifyCert;

    private GetWebhooksOrgWebhook() {}
    /**
     * @return When the object has been created, in epoch
     * 
     */
    public Double createdTime() {
        return this.createdTime;
    }
    /**
     * @return Whether webhook is enabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000
     * 
     */
    public Map<String,String> headers() {
        return this.headers;
    }
    /**
     * @return Unique ID of the object instance in the Mist Organnization
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    public Double modifiedTime() {
        return this.modifiedTime;
    }
    /**
     * @return Name of the webhook
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Required when `oauth2_grant_type`==`client_credentials`
     * 
     */
    public String oauth2ClientId() {
        return this.oauth2ClientId;
    }
    /**
     * @return Required when `oauth2_grant_type`==`client_credentials`
     * 
     */
    public String oauth2ClientSecret() {
        return this.oauth2ClientSecret;
    }
    /**
     * @return required when `type`==`oauth2`. enum: `client_credentials`, `password`
     * 
     */
    public String oauth2GrantType() {
        return this.oauth2GrantType;
    }
    /**
     * @return Required when `oauth2_grant_type`==`password`
     * 
     */
    public String oauth2Password() {
        return this.oauth2Password;
    }
    /**
     * @return Required when `type`==`oauth2`, if provided, will be used in the token request
     * 
     */
    public List<String> oauth2Scopes() {
        return this.oauth2Scopes;
    }
    /**
     * @return Required when `type`==`oauth2`
     * 
     */
    public String oauth2TokenUrl() {
        return this.oauth2TokenUrl;
    }
    /**
     * @return Required when `oauth2_grant_type`==`password`
     * 
     */
    public String oauth2Username() {
        return this.oauth2Username;
    }
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Only if `type`=`http-post`
     * 
     */
    public String secret() {
        return this.secret;
    }
    /**
     * @return Required if `type`=`splunk`. If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.
     * 
     */
    public String splunkToken() {
        return this.splunkToken;
    }
    /**
     * @return List of supported webhook topics available with the API Call List Webhook Topics
     * 
     */
    public List<String> topics() {
        return this.topics;
    }
    /**
     * @return enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
     * 
     */
    public String type() {
        return this.type;
    }
    public String url() {
        return this.url;
    }
    /**
     * @return When url uses HTTPS, whether to verify the certificate
     * 
     */
    public Boolean verifyCert() {
        return this.verifyCert;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebhooksOrgWebhook defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double createdTime;
        private Boolean enabled;
        private Map<String,String> headers;
        private String id;
        private Double modifiedTime;
        private String name;
        private String oauth2ClientId;
        private String oauth2ClientSecret;
        private String oauth2GrantType;
        private String oauth2Password;
        private List<String> oauth2Scopes;
        private String oauth2TokenUrl;
        private String oauth2Username;
        private String orgId;
        private String secret;
        private String splunkToken;
        private List<String> topics;
        private String type;
        private String url;
        private Boolean verifyCert;
        public Builder() {}
        public Builder(GetWebhooksOrgWebhook defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdTime = defaults.createdTime;
    	      this.enabled = defaults.enabled;
    	      this.headers = defaults.headers;
    	      this.id = defaults.id;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.name = defaults.name;
    	      this.oauth2ClientId = defaults.oauth2ClientId;
    	      this.oauth2ClientSecret = defaults.oauth2ClientSecret;
    	      this.oauth2GrantType = defaults.oauth2GrantType;
    	      this.oauth2Password = defaults.oauth2Password;
    	      this.oauth2Scopes = defaults.oauth2Scopes;
    	      this.oauth2TokenUrl = defaults.oauth2TokenUrl;
    	      this.oauth2Username = defaults.oauth2Username;
    	      this.orgId = defaults.orgId;
    	      this.secret = defaults.secret;
    	      this.splunkToken = defaults.splunkToken;
    	      this.topics = defaults.topics;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
    	      this.verifyCert = defaults.verifyCert;
        }

        @CustomType.Setter
        public Builder createdTime(Double createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder headers(Map<String,String> headers) {
            if (headers == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "headers");
            }
            this.headers = headers;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedTime(Double modifiedTime) {
            if (modifiedTime == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "modifiedTime");
            }
            this.modifiedTime = modifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2ClientId(String oauth2ClientId) {
            if (oauth2ClientId == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "oauth2ClientId");
            }
            this.oauth2ClientId = oauth2ClientId;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2ClientSecret(String oauth2ClientSecret) {
            if (oauth2ClientSecret == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "oauth2ClientSecret");
            }
            this.oauth2ClientSecret = oauth2ClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2GrantType(String oauth2GrantType) {
            if (oauth2GrantType == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "oauth2GrantType");
            }
            this.oauth2GrantType = oauth2GrantType;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2Password(String oauth2Password) {
            if (oauth2Password == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "oauth2Password");
            }
            this.oauth2Password = oauth2Password;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2Scopes(List<String> oauth2Scopes) {
            if (oauth2Scopes == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "oauth2Scopes");
            }
            this.oauth2Scopes = oauth2Scopes;
            return this;
        }
        public Builder oauth2Scopes(String... oauth2Scopes) {
            return oauth2Scopes(List.of(oauth2Scopes));
        }
        @CustomType.Setter
        public Builder oauth2TokenUrl(String oauth2TokenUrl) {
            if (oauth2TokenUrl == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "oauth2TokenUrl");
            }
            this.oauth2TokenUrl = oauth2TokenUrl;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2Username(String oauth2Username) {
            if (oauth2Username == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "oauth2Username");
            }
            this.oauth2Username = oauth2Username;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            if (secret == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "secret");
            }
            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder splunkToken(String splunkToken) {
            if (splunkToken == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "splunkToken");
            }
            this.splunkToken = splunkToken;
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<String> topics) {
            if (topics == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "topics");
            }
            this.topics = topics;
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder verifyCert(Boolean verifyCert) {
            if (verifyCert == null) {
              throw new MissingRequiredPropertyException("GetWebhooksOrgWebhook", "verifyCert");
            }
            this.verifyCert = verifyCert;
            return this;
        }
        public GetWebhooksOrgWebhook build() {
            final var _resultValue = new GetWebhooksOrgWebhook();
            _resultValue.createdTime = createdTime;
            _resultValue.enabled = enabled;
            _resultValue.headers = headers;
            _resultValue.id = id;
            _resultValue.modifiedTime = modifiedTime;
            _resultValue.name = name;
            _resultValue.oauth2ClientId = oauth2ClientId;
            _resultValue.oauth2ClientSecret = oauth2ClientSecret;
            _resultValue.oauth2GrantType = oauth2GrantType;
            _resultValue.oauth2Password = oauth2Password;
            _resultValue.oauth2Scopes = oauth2Scopes;
            _resultValue.oauth2TokenUrl = oauth2TokenUrl;
            _resultValue.oauth2Username = oauth2Username;
            _resultValue.orgId = orgId;
            _resultValue.secret = secret;
            _resultValue.splunkToken = splunkToken;
            _resultValue.topics = topics;
            _resultValue.type = type;
            _resultValue.url = url;
            _resultValue.verifyCert = verifyCert;
            return _resultValue;
        }
    }
}
