// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConstApplicationsConstApplication {
    private Boolean appId;
    private String appImageUrl;
    private Boolean appProbe;
    private String category;
    private String group;
    private String key;
    private String name;
    private Boolean signatureBased;
    private Boolean ssrAppId;

    private GetConstApplicationsConstApplication() {}
    public Boolean appId() {
        return this.appId;
    }
    public String appImageUrl() {
        return this.appImageUrl;
    }
    public Boolean appProbe() {
        return this.appProbe;
    }
    public String category() {
        return this.category;
    }
    public String group() {
        return this.group;
    }
    public String key() {
        return this.key;
    }
    public String name() {
        return this.name;
    }
    public Boolean signatureBased() {
        return this.signatureBased;
    }
    public Boolean ssrAppId() {
        return this.ssrAppId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConstApplicationsConstApplication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean appId;
        private String appImageUrl;
        private Boolean appProbe;
        private String category;
        private String group;
        private String key;
        private String name;
        private Boolean signatureBased;
        private Boolean ssrAppId;
        public Builder() {}
        public Builder(GetConstApplicationsConstApplication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appId = defaults.appId;
    	      this.appImageUrl = defaults.appImageUrl;
    	      this.appProbe = defaults.appProbe;
    	      this.category = defaults.category;
    	      this.group = defaults.group;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.signatureBased = defaults.signatureBased;
    	      this.ssrAppId = defaults.ssrAppId;
        }

        @CustomType.Setter
        public Builder appId(Boolean appId) {
            if (appId == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "appId");
            }
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder appImageUrl(String appImageUrl) {
            if (appImageUrl == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "appImageUrl");
            }
            this.appImageUrl = appImageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder appProbe(Boolean appProbe) {
            if (appProbe == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "appProbe");
            }
            this.appProbe = appProbe;
            return this;
        }
        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            if (group == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "group");
            }
            this.group = group;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder signatureBased(Boolean signatureBased) {
            if (signatureBased == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "signatureBased");
            }
            this.signatureBased = signatureBased;
            return this;
        }
        @CustomType.Setter
        public Builder ssrAppId(Boolean ssrAppId) {
            if (ssrAppId == null) {
              throw new MissingRequiredPropertyException("GetConstApplicationsConstApplication", "ssrAppId");
            }
            this.ssrAppId = ssrAppId;
            return this;
        }
        public GetConstApplicationsConstApplication build() {
            final var _resultValue = new GetConstApplicationsConstApplication();
            _resultValue.appId = appId;
            _resultValue.appImageUrl = appImageUrl;
            _resultValue.appProbe = appProbe;
            _resultValue.category = category;
            _resultValue.group = group;
            _resultValue.key = key;
            _resultValue.name = name;
            _resultValue.signatureBased = signatureBased;
            _resultValue.ssrAppId = ssrAppId;
            return _resultValue;
        }
    }
}
