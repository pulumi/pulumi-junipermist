// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.outputs.GetNetworksOrgNetworkVpnAccessDestinationNat;
import com.pulumi.junipermist.org.outputs.GetNetworksOrgNetworkVpnAccessSourceNat;
import com.pulumi.junipermist.org.outputs.GetNetworksOrgNetworkVpnAccessStaticNat;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworksOrgNetworkVpnAccess {
    /**
     * @return If `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE&#39;s side
     * 
     */
    private String advertisedSubnet;
    /**
     * @return Whether to allow ping from vpn into this routed network
     * 
     */
    private Boolean allowPing;
    /**
     * @return Property key can be an External IP (i.e. &#34;63.16.0.3&#34;), an External IP:Port (i.e. &#34;63.16.0.3:443&#34;), an External Port (i.e. &#34;:443&#34;), an External CIDR (i.e. &#34;63.16.0.0/30&#34;), an External CIDR:Port (i.e. &#34;63.16.0.0/30:443&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;). At least one of the `internalIp` or `port` must be defined
     * 
     */
    private Map<String,GetNetworksOrgNetworkVpnAccessDestinationNat> destinationNat;
    /**
     * @return If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
     * 
     */
    private String natPool;
    /**
     * @return toward LAN-side BGP peers
     * 
     */
    private Boolean noReadvertiseToLanBgp;
    /**
     * @return toward LAN-side OSPF peers
     * 
     */
    private Boolean noReadvertiseToLanOspf;
    /**
     * @return toward overlay, how HUB should deal with routes it received from Spokes
     * 
     */
    private Boolean noReadvertiseToOverlay;
    /**
     * @return By default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs
     * 
     */
    private List<String> otherVrfs;
    /**
     * @return Whether this network is routable
     * 
     */
    private Boolean routed;
    /**
     * @return If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
     * 
     */
    private GetNetworksOrgNetworkVpnAccessSourceNat sourceNat;
    /**
     * @return Property key may be an External IP Address (i.e. &#34;63.16.0.3&#34;), a CIDR (i.e. &#34;63.16.0.12/20&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;)
     * 
     */
    private Map<String,GetNetworksOrgNetworkVpnAccessStaticNat> staticNat;
    /**
     * @return toward overlay, how HUB should deal with routes it received from Spokes
     * 
     */
    private String summarizedSubnet;
    /**
     * @return toward LAN-side BGP peers
     * 
     */
    private String summarizedSubnetToLanBgp;
    /**
     * @return toward LAN-side OSPF peers
     * 
     */
    private String summarizedSubnetToLanOspf;

    private GetNetworksOrgNetworkVpnAccess() {}
    /**
     * @return If `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE&#39;s side
     * 
     */
    public String advertisedSubnet() {
        return this.advertisedSubnet;
    }
    /**
     * @return Whether to allow ping from vpn into this routed network
     * 
     */
    public Boolean allowPing() {
        return this.allowPing;
    }
    /**
     * @return Property key can be an External IP (i.e. &#34;63.16.0.3&#34;), an External IP:Port (i.e. &#34;63.16.0.3:443&#34;), an External Port (i.e. &#34;:443&#34;), an External CIDR (i.e. &#34;63.16.0.0/30&#34;), an External CIDR:Port (i.e. &#34;63.16.0.0/30:443&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;). At least one of the `internalIp` or `port` must be defined
     * 
     */
    public Map<String,GetNetworksOrgNetworkVpnAccessDestinationNat> destinationNat() {
        return this.destinationNat;
    }
    /**
     * @return If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
     * 
     */
    public String natPool() {
        return this.natPool;
    }
    /**
     * @return toward LAN-side BGP peers
     * 
     */
    public Boolean noReadvertiseToLanBgp() {
        return this.noReadvertiseToLanBgp;
    }
    /**
     * @return toward LAN-side OSPF peers
     * 
     */
    public Boolean noReadvertiseToLanOspf() {
        return this.noReadvertiseToLanOspf;
    }
    /**
     * @return toward overlay, how HUB should deal with routes it received from Spokes
     * 
     */
    public Boolean noReadvertiseToOverlay() {
        return this.noReadvertiseToOverlay;
    }
    /**
     * @return By default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs
     * 
     */
    public List<String> otherVrfs() {
        return this.otherVrfs;
    }
    /**
     * @return Whether this network is routable
     * 
     */
    public Boolean routed() {
        return this.routed;
    }
    /**
     * @return If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
     * 
     */
    public GetNetworksOrgNetworkVpnAccessSourceNat sourceNat() {
        return this.sourceNat;
    }
    /**
     * @return Property key may be an External IP Address (i.e. &#34;63.16.0.3&#34;), a CIDR (i.e. &#34;63.16.0.12/20&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;)
     * 
     */
    public Map<String,GetNetworksOrgNetworkVpnAccessStaticNat> staticNat() {
        return this.staticNat;
    }
    /**
     * @return toward overlay, how HUB should deal with routes it received from Spokes
     * 
     */
    public String summarizedSubnet() {
        return this.summarizedSubnet;
    }
    /**
     * @return toward LAN-side BGP peers
     * 
     */
    public String summarizedSubnetToLanBgp() {
        return this.summarizedSubnetToLanBgp;
    }
    /**
     * @return toward LAN-side OSPF peers
     * 
     */
    public String summarizedSubnetToLanOspf() {
        return this.summarizedSubnetToLanOspf;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworksOrgNetworkVpnAccess defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String advertisedSubnet;
        private Boolean allowPing;
        private Map<String,GetNetworksOrgNetworkVpnAccessDestinationNat> destinationNat;
        private String natPool;
        private Boolean noReadvertiseToLanBgp;
        private Boolean noReadvertiseToLanOspf;
        private Boolean noReadvertiseToOverlay;
        private List<String> otherVrfs;
        private Boolean routed;
        private GetNetworksOrgNetworkVpnAccessSourceNat sourceNat;
        private Map<String,GetNetworksOrgNetworkVpnAccessStaticNat> staticNat;
        private String summarizedSubnet;
        private String summarizedSubnetToLanBgp;
        private String summarizedSubnetToLanOspf;
        public Builder() {}
        public Builder(GetNetworksOrgNetworkVpnAccess defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advertisedSubnet = defaults.advertisedSubnet;
    	      this.allowPing = defaults.allowPing;
    	      this.destinationNat = defaults.destinationNat;
    	      this.natPool = defaults.natPool;
    	      this.noReadvertiseToLanBgp = defaults.noReadvertiseToLanBgp;
    	      this.noReadvertiseToLanOspf = defaults.noReadvertiseToLanOspf;
    	      this.noReadvertiseToOverlay = defaults.noReadvertiseToOverlay;
    	      this.otherVrfs = defaults.otherVrfs;
    	      this.routed = defaults.routed;
    	      this.sourceNat = defaults.sourceNat;
    	      this.staticNat = defaults.staticNat;
    	      this.summarizedSubnet = defaults.summarizedSubnet;
    	      this.summarizedSubnetToLanBgp = defaults.summarizedSubnetToLanBgp;
    	      this.summarizedSubnetToLanOspf = defaults.summarizedSubnetToLanOspf;
        }

        @CustomType.Setter
        public Builder advertisedSubnet(String advertisedSubnet) {
            if (advertisedSubnet == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "advertisedSubnet");
            }
            this.advertisedSubnet = advertisedSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder allowPing(Boolean allowPing) {
            if (allowPing == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "allowPing");
            }
            this.allowPing = allowPing;
            return this;
        }
        @CustomType.Setter
        public Builder destinationNat(Map<String,GetNetworksOrgNetworkVpnAccessDestinationNat> destinationNat) {
            if (destinationNat == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "destinationNat");
            }
            this.destinationNat = destinationNat;
            return this;
        }
        @CustomType.Setter
        public Builder natPool(String natPool) {
            if (natPool == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "natPool");
            }
            this.natPool = natPool;
            return this;
        }
        @CustomType.Setter
        public Builder noReadvertiseToLanBgp(Boolean noReadvertiseToLanBgp) {
            if (noReadvertiseToLanBgp == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "noReadvertiseToLanBgp");
            }
            this.noReadvertiseToLanBgp = noReadvertiseToLanBgp;
            return this;
        }
        @CustomType.Setter
        public Builder noReadvertiseToLanOspf(Boolean noReadvertiseToLanOspf) {
            if (noReadvertiseToLanOspf == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "noReadvertiseToLanOspf");
            }
            this.noReadvertiseToLanOspf = noReadvertiseToLanOspf;
            return this;
        }
        @CustomType.Setter
        public Builder noReadvertiseToOverlay(Boolean noReadvertiseToOverlay) {
            if (noReadvertiseToOverlay == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "noReadvertiseToOverlay");
            }
            this.noReadvertiseToOverlay = noReadvertiseToOverlay;
            return this;
        }
        @CustomType.Setter
        public Builder otherVrfs(List<String> otherVrfs) {
            if (otherVrfs == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "otherVrfs");
            }
            this.otherVrfs = otherVrfs;
            return this;
        }
        public Builder otherVrfs(String... otherVrfs) {
            return otherVrfs(List.of(otherVrfs));
        }
        @CustomType.Setter
        public Builder routed(Boolean routed) {
            if (routed == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "routed");
            }
            this.routed = routed;
            return this;
        }
        @CustomType.Setter
        public Builder sourceNat(GetNetworksOrgNetworkVpnAccessSourceNat sourceNat) {
            if (sourceNat == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "sourceNat");
            }
            this.sourceNat = sourceNat;
            return this;
        }
        @CustomType.Setter
        public Builder staticNat(Map<String,GetNetworksOrgNetworkVpnAccessStaticNat> staticNat) {
            if (staticNat == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "staticNat");
            }
            this.staticNat = staticNat;
            return this;
        }
        @CustomType.Setter
        public Builder summarizedSubnet(String summarizedSubnet) {
            if (summarizedSubnet == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "summarizedSubnet");
            }
            this.summarizedSubnet = summarizedSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder summarizedSubnetToLanBgp(String summarizedSubnetToLanBgp) {
            if (summarizedSubnetToLanBgp == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "summarizedSubnetToLanBgp");
            }
            this.summarizedSubnetToLanBgp = summarizedSubnetToLanBgp;
            return this;
        }
        @CustomType.Setter
        public Builder summarizedSubnetToLanOspf(String summarizedSubnetToLanOspf) {
            if (summarizedSubnetToLanOspf == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkVpnAccess", "summarizedSubnetToLanOspf");
            }
            this.summarizedSubnetToLanOspf = summarizedSubnetToLanOspf;
            return this;
        }
        public GetNetworksOrgNetworkVpnAccess build() {
            final var _resultValue = new GetNetworksOrgNetworkVpnAccess();
            _resultValue.advertisedSubnet = advertisedSubnet;
            _resultValue.allowPing = allowPing;
            _resultValue.destinationNat = destinationNat;
            _resultValue.natPool = natPool;
            _resultValue.noReadvertiseToLanBgp = noReadvertiseToLanBgp;
            _resultValue.noReadvertiseToLanOspf = noReadvertiseToLanOspf;
            _resultValue.noReadvertiseToOverlay = noReadvertiseToOverlay;
            _resultValue.otherVrfs = otherVrfs;
            _resultValue.routed = routed;
            _resultValue.sourceNat = sourceNat;
            _resultValue.staticNat = staticNat;
            _resultValue.summarizedSubnet = summarizedSubnet;
            _resultValue.summarizedSubnetToLanBgp = summarizedSubnetToLanBgp;
            _resultValue.summarizedSubnetToLanOspf = summarizedSubnetToLanOspf;
            return _resultValue;
        }
    }
}
