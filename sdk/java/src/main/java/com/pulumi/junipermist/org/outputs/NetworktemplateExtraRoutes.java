// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.outputs.NetworktemplateExtraRoutesNextQualified;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworktemplateExtraRoutes {
    /**
     * @return This takes precedence
     * 
     */
    private @Nullable Boolean discard;
    private @Nullable Integer metric;
    private @Nullable Map<String,NetworktemplateExtraRoutesNextQualified> nextQualified;
    private @Nullable Boolean noResolve;
    private @Nullable Integer preference;
    /**
     * @return Next-hop IP Address
     * 
     */
    private String via;

    private NetworktemplateExtraRoutes() {}
    /**
     * @return This takes precedence
     * 
     */
    public Optional<Boolean> discard() {
        return Optional.ofNullable(this.discard);
    }
    public Optional<Integer> metric() {
        return Optional.ofNullable(this.metric);
    }
    public Map<String,NetworktemplateExtraRoutesNextQualified> nextQualified() {
        return this.nextQualified == null ? Map.of() : this.nextQualified;
    }
    public Optional<Boolean> noResolve() {
        return Optional.ofNullable(this.noResolve);
    }
    public Optional<Integer> preference() {
        return Optional.ofNullable(this.preference);
    }
    /**
     * @return Next-hop IP Address
     * 
     */
    public String via() {
        return this.via;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworktemplateExtraRoutes defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean discard;
        private @Nullable Integer metric;
        private @Nullable Map<String,NetworktemplateExtraRoutesNextQualified> nextQualified;
        private @Nullable Boolean noResolve;
        private @Nullable Integer preference;
        private String via;
        public Builder() {}
        public Builder(NetworktemplateExtraRoutes defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.discard = defaults.discard;
    	      this.metric = defaults.metric;
    	      this.nextQualified = defaults.nextQualified;
    	      this.noResolve = defaults.noResolve;
    	      this.preference = defaults.preference;
    	      this.via = defaults.via;
        }

        @CustomType.Setter
        public Builder discard(@Nullable Boolean discard) {

            this.discard = discard;
            return this;
        }
        @CustomType.Setter
        public Builder metric(@Nullable Integer metric) {

            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder nextQualified(@Nullable Map<String,NetworktemplateExtraRoutesNextQualified> nextQualified) {

            this.nextQualified = nextQualified;
            return this;
        }
        @CustomType.Setter
        public Builder noResolve(@Nullable Boolean noResolve) {

            this.noResolve = noResolve;
            return this;
        }
        @CustomType.Setter
        public Builder preference(@Nullable Integer preference) {

            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder via(String via) {
            if (via == null) {
              throw new MissingRequiredPropertyException("NetworktemplateExtraRoutes", "via");
            }
            this.via = via;
            return this;
        }
        public NetworktemplateExtraRoutes build() {
            final var _resultValue = new NetworktemplateExtraRoutes();
            _resultValue.discard = discard;
            _resultValue.metric = metric;
            _resultValue.nextQualified = nextQualified;
            _resultValue.noResolve = noResolve;
            _resultValue.preference = preference;
            _resultValue.via = via;
            return _resultValue;
        }
    }
}
