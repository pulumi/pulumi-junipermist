// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WlanPortalArgs extends com.pulumi.resources.ResourceArgs {

    public static final WlanPortalArgs Empty = new WlanPortalArgs();

    /**
     * Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    @Import(name="allowWlanIdRoam")
    private @Nullable Output<Boolean> allowWlanIdRoam;

    /**
     * @return Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    public Optional<Output<Boolean>> allowWlanIdRoam() {
        return Optional.ofNullable(this.allowWlanIdRoam);
    }

    /**
     * Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    @Import(name="amazonClientId")
    private @Nullable Output<String> amazonClientId;

    /**
     * @return Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<Output<String>> amazonClientId() {
        return Optional.ofNullable(this.amazonClientId);
    }

    /**
     * Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    @Import(name="amazonClientSecret")
    private @Nullable Output<String> amazonClientSecret;

    /**
     * @return Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public Optional<Output<String>> amazonClientSecret() {
        return Optional.ofNullable(this.amazonClientSecret);
    }

    /**
     * Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    @Import(name="amazonEmailDomains")
    private @Nullable Output<List<String>> amazonEmailDomains;

    /**
     * @return Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public Optional<Output<List<String>>> amazonEmailDomains() {
        return Optional.ofNullable(this.amazonEmailDomains);
    }

    /**
     * Whether amazon is enabled as a login method
     * 
     */
    @Import(name="amazonEnabled")
    private @Nullable Output<Boolean> amazonEnabled;

    /**
     * @return Whether amazon is enabled as a login method
     * 
     */
    public Optional<Output<Boolean>> amazonEnabled() {
        return Optional.ofNullable(this.amazonEnabled);
    }

    /**
     * Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
     * 
     */
    @Import(name="amazonExpire")
    private @Nullable Output<Integer> amazonExpire;

    /**
     * @return Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Output<Integer>> amazonExpire() {
        return Optional.ofNullable(this.amazonExpire);
    }

    /**
     * authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sms`, `sponsor`, `sso`
     * 
     */
    @Import(name="auth")
    private @Nullable Output<String> auth;

    /**
     * @return authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sms`, `sponsor`, `sso`
     * 
     */
    public Optional<Output<String>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Required if `azure_enabled`==`true`. Azure active directory app client id
     * 
     */
    @Import(name="azureClientId")
    private @Nullable Output<String> azureClientId;

    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory app client id
     * 
     */
    public Optional<Output<String>> azureClientId() {
        return Optional.ofNullable(this.azureClientId);
    }

    /**
     * Required if `azure_enabled`==`true`. Azure active directory app client secret
     * 
     */
    @Import(name="azureClientSecret")
    private @Nullable Output<String> azureClientSecret;

    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory app client secret
     * 
     */
    public Optional<Output<String>> azureClientSecret() {
        return Optional.ofNullable(this.azureClientSecret);
    }

    /**
     * Whether Azure Active Directory is enabled as a login method
     * 
     */
    @Import(name="azureEnabled")
    private @Nullable Output<Boolean> azureEnabled;

    /**
     * @return Whether Azure Active Directory is enabled as a login method
     * 
     */
    public Optional<Output<Boolean>> azureEnabled() {
        return Optional.ofNullable(this.azureEnabled);
    }

    /**
     * Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
     * 
     */
    @Import(name="azureExpire")
    private @Nullable Output<Integer> azureExpire;

    /**
     * @return Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Output<Integer>> azureExpire() {
        return Optional.ofNullable(this.azureExpire);
    }

    /**
     * Required if `azure_enabled`==`true`. Azure active directory tenant id.
     * 
     */
    @Import(name="azureTenantId")
    private @Nullable Output<String> azureTenantId;

    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory tenant id.
     * 
     */
    public Optional<Output<String>> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }

    /**
     * Required if `sms_provider`==`broadnet`
     * 
     */
    @Import(name="broadnetPassword")
    private @Nullable Output<String> broadnetPassword;

    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    public Optional<Output<String>> broadnetPassword() {
        return Optional.ofNullable(this.broadnetPassword);
    }

    /**
     * Required if `sms_provider`==`broadnet`
     * 
     */
    @Import(name="broadnetSid")
    private @Nullable Output<String> broadnetSid;

    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    public Optional<Output<String>> broadnetSid() {
        return Optional.ofNullable(this.broadnetSid);
    }

    /**
     * Required if `sms_provider`==`broadnet`
     * 
     */
    @Import(name="broadnetUserId")
    private @Nullable Output<String> broadnetUserId;

    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    public Optional<Output<String>> broadnetUserId() {
        return Optional.ofNullable(this.broadnetUserId);
    }

    /**
     * Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
     * 
     */
    @Import(name="bypassWhenCloudDown")
    private @Nullable Output<Boolean> bypassWhenCloudDown;

    /**
     * @return Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
     * 
     */
    public Optional<Output<Boolean>> bypassWhenCloudDown() {
        return Optional.ofNullable(this.bypassWhenCloudDown);
    }

    /**
     * Required if `sms_provider`==`clickatell`
     * 
     */
    @Import(name="clickatellApiKey")
    private @Nullable Output<String> clickatellApiKey;

    /**
     * @return Required if `sms_provider`==`clickatell`
     * 
     */
    public Optional<Output<String>> clickatellApiKey() {
        return Optional.ofNullable(this.clickatellApiKey);
    }

    /**
     * Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    @Import(name="crossSite")
    private @Nullable Output<Boolean> crossSite;

    /**
     * @return Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    public Optional<Output<Boolean>> crossSite() {
        return Optional.ofNullable(this.crossSite);
    }

    /**
     * Whether email (access code verification) is enabled as a login method
     * 
     */
    @Import(name="emailEnabled")
    private @Nullable Output<Boolean> emailEnabled;

    /**
     * @return Whether email (access code verification) is enabled as a login method
     * 
     */
    public Optional<Output<Boolean>> emailEnabled() {
        return Optional.ofNullable(this.emailEnabled);
    }

    /**
     * Whether guest portal is enabled
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether guest portal is enabled
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * How long to remain authorized, in minutes
     * 
     */
    @Import(name="expire")
    private @Nullable Output<Integer> expire;

    /**
     * @return How long to remain authorized, in minutes
     * 
     */
    public Optional<Output<Integer>> expire() {
        return Optional.ofNullable(this.expire);
    }

    /**
     * Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
     * 
     */
    @Import(name="externalPortalUrl")
    private @Nullable Output<String> externalPortalUrl;

    /**
     * @return Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
     * 
     */
    public Optional<Output<String>> externalPortalUrl() {
        return Optional.ofNullable(this.externalPortalUrl);
    }

    /**
     * Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    @Import(name="facebookClientId")
    private @Nullable Output<String> facebookClientId;

    /**
     * @return Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<Output<String>> facebookClientId() {
        return Optional.ofNullable(this.facebookClientId);
    }

    /**
     * Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    @Import(name="facebookClientSecret")
    private @Nullable Output<String> facebookClientSecret;

    /**
     * @return Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public Optional<Output<String>> facebookClientSecret() {
        return Optional.ofNullable(this.facebookClientSecret);
    }

    /**
     * Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    @Import(name="facebookEmailDomains")
    private @Nullable Output<List<String>> facebookEmailDomains;

    /**
     * @return Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public Optional<Output<List<String>>> facebookEmailDomains() {
        return Optional.ofNullable(this.facebookEmailDomains);
    }

    /**
     * Whether facebook is enabled as a login method
     * 
     */
    @Import(name="facebookEnabled")
    private @Nullable Output<Boolean> facebookEnabled;

    /**
     * @return Whether facebook is enabled as a login method
     * 
     */
    public Optional<Output<Boolean>> facebookEnabled() {
        return Optional.ofNullable(this.facebookEnabled);
    }

    /**
     * Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
     * 
     */
    @Import(name="facebookExpire")
    private @Nullable Output<Integer> facebookExpire;

    /**
     * @return Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Output<Integer>> facebookExpire() {
        return Optional.ofNullable(this.facebookExpire);
    }

    /**
     * Whether to forward the user to another URL after authorized
     * 
     */
    @Import(name="forward")
    private @Nullable Output<Boolean> forward;

    /**
     * @return Whether to forward the user to another URL after authorized
     * 
     */
    public Optional<Output<Boolean>> forward() {
        return Optional.ofNullable(this.forward);
    }

    /**
     * URL to forward the user to
     * 
     */
    @Import(name="forwardUrl")
    private @Nullable Output<String> forwardUrl;

    /**
     * @return URL to forward the user to
     * 
     */
    public Optional<Output<String>> forwardUrl() {
        return Optional.ofNullable(this.forwardUrl);
    }

    /**
     * Google OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    @Import(name="googleClientId")
    private @Nullable Output<String> googleClientId;

    /**
     * @return Google OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<Output<String>> googleClientId() {
        return Optional.ofNullable(this.googleClientId);
    }

    /**
     * Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    @Import(name="googleClientSecret")
    private @Nullable Output<String> googleClientSecret;

    /**
     * @return Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public Optional<Output<String>> googleClientSecret() {
        return Optional.ofNullable(this.googleClientSecret);
    }

    /**
     * Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    @Import(name="googleEmailDomains")
    private @Nullable Output<List<String>> googleEmailDomains;

    /**
     * @return Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public Optional<Output<List<String>>> googleEmailDomains() {
        return Optional.ofNullable(this.googleEmailDomains);
    }

    /**
     * Whether Google is enabled as login method
     * 
     */
    @Import(name="googleEnabled")
    private @Nullable Output<Boolean> googleEnabled;

    /**
     * @return Whether Google is enabled as login method
     * 
     */
    public Optional<Output<Boolean>> googleEnabled() {
        return Optional.ofNullable(this.googleEnabled);
    }

    /**
     * Optional if `google_enabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
     * 
     */
    @Import(name="googleExpire")
    private @Nullable Output<Integer> googleExpire;

    /**
     * @return Optional if `google_enabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Output<Integer>> googleExpire() {
        return Optional.ofNullable(this.googleExpire);
    }

    /**
     * Required if `sms_provider`==`gupshup`
     * 
     */
    @Import(name="gupshupPassword")
    private @Nullable Output<String> gupshupPassword;

    /**
     * @return Required if `sms_provider`==`gupshup`
     * 
     */
    public Optional<Output<String>> gupshupPassword() {
        return Optional.ofNullable(this.gupshupPassword);
    }

    /**
     * Required if `sms_provider`==`gupshup`
     * 
     */
    @Import(name="gupshupUserid")
    private @Nullable Output<String> gupshupUserid;

    /**
     * @return Required if `sms_provider`==`gupshup`
     * 
     */
    public Optional<Output<String>> gupshupUserid() {
        return Optional.ofNullable(this.gupshupUserid);
    }

    /**
     * Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    @Import(name="microsoftClientId")
    private @Nullable Output<String> microsoftClientId;

    /**
     * @return Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<Output<String>> microsoftClientId() {
        return Optional.ofNullable(this.microsoftClientId);
    }

    /**
     * Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    @Import(name="microsoftClientSecret")
    private @Nullable Output<String> microsoftClientSecret;

    /**
     * @return Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public Optional<Output<String>> microsoftClientSecret() {
        return Optional.ofNullable(this.microsoftClientSecret);
    }

    /**
     * Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    @Import(name="microsoftEmailDomains")
    private @Nullable Output<List<String>> microsoftEmailDomains;

    /**
     * @return Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public Optional<Output<List<String>>> microsoftEmailDomains() {
        return Optional.ofNullable(this.microsoftEmailDomains);
    }

    /**
     * Whether microsoft 365 is enabled as a login method
     * 
     */
    @Import(name="microsoftEnabled")
    private @Nullable Output<Boolean> microsoftEnabled;

    /**
     * @return Whether microsoft 365 is enabled as a login method
     * 
     */
    public Optional<Output<Boolean>> microsoftEnabled() {
        return Optional.ofNullable(this.microsoftEnabled);
    }

    /**
     * Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
     * 
     */
    @Import(name="microsoftExpire")
    private @Nullable Output<Integer> microsoftExpire;

    /**
     * @return Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Output<Integer>> microsoftExpire() {
        return Optional.ofNullable(this.microsoftExpire);
    }

    /**
     * Whether password is enabled
     * 
     */
    @Import(name="passphraseEnabled")
    private @Nullable Output<Boolean> passphraseEnabled;

    /**
     * @return Whether password is enabled
     * 
     */
    public Optional<Output<Boolean>> passphraseEnabled() {
        return Optional.ofNullable(this.passphraseEnabled);
    }

    /**
     * Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
     * 
     */
    @Import(name="passphraseExpire")
    private @Nullable Output<Integer> passphraseExpire;

    /**
     * @return Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
     * 
     */
    public Optional<Output<Integer>> passphraseExpire() {
        return Optional.ofNullable(this.passphraseExpire);
    }

    /**
     * Required if `passphrase_enabled`==`true`.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Required if `passphrase_enabled`==`true`.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behavior is acc to `sponsor_email_domains`
     * 
     */
    @Import(name="predefinedSponsorsEnabled")
    private @Nullable Output<Boolean> predefinedSponsorsEnabled;

    /**
     * @return Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behavior is acc to `sponsor_email_domains`
     * 
     */
    public Optional<Output<Boolean>> predefinedSponsorsEnabled() {
        return Optional.ofNullable(this.predefinedSponsorsEnabled);
    }

    /**
     * Whether to hide sponsor’s email from list of sponsors
     * 
     */
    @Import(name="predefinedSponsorsHideEmail")
    private @Nullable Output<Boolean> predefinedSponsorsHideEmail;

    /**
     * @return Whether to hide sponsor’s email from list of sponsors
     * 
     */
    public Optional<Output<Boolean>> predefinedSponsorsHideEmail() {
        return Optional.ofNullable(this.predefinedSponsorsHideEmail);
    }

    @Import(name="privacy")
    private @Nullable Output<Boolean> privacy;

    public Optional<Output<Boolean>> privacy() {
        return Optional.ofNullable(this.privacy);
    }

    /**
     * Required if `sms_provider`==`puzzel`
     * 
     */
    @Import(name="puzzelPassword")
    private @Nullable Output<String> puzzelPassword;

    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    public Optional<Output<String>> puzzelPassword() {
        return Optional.ofNullable(this.puzzelPassword);
    }

    /**
     * Required if `sms_provider`==`puzzel`
     * 
     */
    @Import(name="puzzelServiceId")
    private @Nullable Output<String> puzzelServiceId;

    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    public Optional<Output<String>> puzzelServiceId() {
        return Optional.ofNullable(this.puzzelServiceId);
    }

    /**
     * Required if `sms_provider`==`puzzel`
     * 
     */
    @Import(name="puzzelUsername")
    private @Nullable Output<String> puzzelUsername;

    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    public Optional<Output<String>> puzzelUsername() {
        return Optional.ofNullable(this.puzzelUsername);
    }

    /**
     * Whether sms is enabled as a login method
     * 
     */
    @Import(name="smsEnabled")
    private @Nullable Output<Boolean> smsEnabled;

    /**
     * @return Whether sms is enabled as a login method
     * 
     */
    public Optional<Output<Boolean>> smsEnabled() {
        return Optional.ofNullable(this.smsEnabled);
    }

    /**
     * Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
     * 
     */
    @Import(name="smsExpire")
    private @Nullable Output<Integer> smsExpire;

    /**
     * @return Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Output<Integer>> smsExpire() {
        return Optional.ofNullable(this.smsExpire);
    }

    /**
     * Optional if `sms_enabled`==`true`. SMS Message format
     * 
     */
    @Import(name="smsMessageFormat")
    private @Nullable Output<String> smsMessageFormat;

    /**
     * @return Optional if `sms_enabled`==`true`. SMS Message format
     * 
     */
    public Optional<Output<String>> smsMessageFormat() {
        return Optional.ofNullable(this.smsMessageFormat);
    }

    /**
     * Optional if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `smsglobal`, `telstra`, `twilio`
     * 
     */
    @Import(name="smsProvider")
    private @Nullable Output<String> smsProvider;

    /**
     * @return Optional if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `smsglobal`, `telstra`, `twilio`
     * 
     */
    public Optional<Output<String>> smsProvider() {
        return Optional.ofNullable(this.smsProvider);
    }

    /**
     * Required if `sms_provider`==`smsglobal`, Client API Key
     * 
     */
    @Import(name="smsglobalApiKey")
    private @Nullable Output<String> smsglobalApiKey;

    /**
     * @return Required if `sms_provider`==`smsglobal`, Client API Key
     * 
     */
    public Optional<Output<String>> smsglobalApiKey() {
        return Optional.ofNullable(this.smsglobalApiKey);
    }

    /**
     * Required if `sms_provider`==`smsglobal`, Client secret
     * 
     */
    @Import(name="smsglobalApiSecret")
    private @Nullable Output<String> smsglobalApiSecret;

    /**
     * @return Required if `sms_provider`==`smsglobal`, Client secret
     * 
     */
    public Optional<Output<String>> smsglobalApiSecret() {
        return Optional.ofNullable(this.smsglobalApiSecret);
    }

    /**
     * Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
     * 
     */
    @Import(name="sponsorAutoApprove")
    private @Nullable Output<Boolean> sponsorAutoApprove;

    /**
     * @return Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
     * 
     */
    public Optional<Output<Boolean>> sponsorAutoApprove() {
        return Optional.ofNullable(this.sponsorAutoApprove);
    }

    /**
     * List of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
     * 
     */
    @Import(name="sponsorEmailDomains")
    private @Nullable Output<List<String>> sponsorEmailDomains;

    /**
     * @return List of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
     * 
     */
    public Optional<Output<List<String>>> sponsorEmailDomains() {
        return Optional.ofNullable(this.sponsorEmailDomains);
    }

    /**
     * Whether sponsor is enabled
     * 
     */
    @Import(name="sponsorEnabled")
    private @Nullable Output<Boolean> sponsorEnabled;

    /**
     * @return Whether sponsor is enabled
     * 
     */
    public Optional<Output<Boolean>> sponsorEnabled() {
        return Optional.ofNullable(this.sponsorEnabled);
    }

    /**
     * Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
     * 
     */
    @Import(name="sponsorExpire")
    private @Nullable Output<Integer> sponsorExpire;

    /**
     * @return Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Output<Integer>> sponsorExpire() {
        return Optional.ofNullable(this.sponsorExpire);
    }

    /**
     * Optional if `sponsor_enabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes. Default is 60 minutes.
     * 
     */
    @Import(name="sponsorLinkValidityDuration")
    private @Nullable Output<String> sponsorLinkValidityDuration;

    /**
     * @return Optional if `sponsor_enabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes. Default is 60 minutes.
     * 
     */
    public Optional<Output<String>> sponsorLinkValidityDuration() {
        return Optional.ofNullable(this.sponsorLinkValidityDuration);
    }

    /**
     * Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
     * 
     */
    @Import(name="sponsorNotifyAll")
    private @Nullable Output<Boolean> sponsorNotifyAll;

    /**
     * @return Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
     * 
     */
    public Optional<Output<Boolean>> sponsorNotifyAll() {
        return Optional.ofNullable(this.sponsorNotifyAll);
    }

    /**
     * Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor&#39;s action (approve/deny)
     * 
     */
    @Import(name="sponsorStatusNotify")
    private @Nullable Output<Boolean> sponsorStatusNotify;

    /**
     * @return Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor&#39;s action (approve/deny)
     * 
     */
    public Optional<Output<Boolean>> sponsorStatusNotify() {
        return Optional.ofNullable(this.sponsorStatusNotify);
    }

    /**
     * object of allowed sponsors email with name. Required if `sponsor_enabled`
     *             is `true` and `sponsor_email_domains` is empty.
     * 
     *             Property key is the sponsor email, Property value is the sponsor name
     * 
     */
    @Import(name="sponsors")
    private @Nullable Output<Map<String,String>> sponsors;

    /**
     * @return object of allowed sponsors email with name. Required if `sponsor_enabled`
     *             is `true` and `sponsor_email_domains` is empty.
     * 
     *             Property key is the sponsor email, Property value is the sponsor name
     * 
     */
    public Optional<Output<Map<String,String>>> sponsors() {
        return Optional.ofNullable(this.sponsors);
    }

    /**
     * Optional if `wlan_portal_auth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
     * 
     */
    @Import(name="ssoDefaultRole")
    private @Nullable Output<String> ssoDefaultRole;

    /**
     * @return Optional if `wlan_portal_auth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
     * 
     */
    public Optional<Output<String>> ssoDefaultRole() {
        return Optional.ofNullable(this.ssoDefaultRole);
    }

    /**
     * Optional if `wlan_portal_auth`==`sso`
     * 
     */
    @Import(name="ssoForcedRole")
    private @Nullable Output<String> ssoForcedRole;

    /**
     * @return Optional if `wlan_portal_auth`==`sso`
     * 
     */
    public Optional<Output<String>> ssoForcedRole() {
        return Optional.ofNullable(this.ssoForcedRole);
    }

    /**
     * Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)
     * 
     */
    @Import(name="ssoIdpCert")
    private @Nullable Output<String> ssoIdpCert;

    /**
     * @return Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)
     * 
     */
    public Optional<Output<String>> ssoIdpCert() {
        return Optional.ofNullable(this.ssoIdpCert);
    }

    /**
     * Optional if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
     * 
     */
    @Import(name="ssoIdpSignAlgo")
    private @Nullable Output<String> ssoIdpSignAlgo;

    /**
     * @return Optional if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
     * 
     */
    public Optional<Output<String>> ssoIdpSignAlgo() {
        return Optional.ofNullable(this.ssoIdpSignAlgo);
    }

    /**
     * Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL
     * 
     */
    @Import(name="ssoIdpSsoUrl")
    private @Nullable Output<String> ssoIdpSsoUrl;

    /**
     * @return Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL
     * 
     */
    public Optional<Output<String>> ssoIdpSsoUrl() {
        return Optional.ofNullable(this.ssoIdpSsoUrl);
    }

    /**
     * Required if `wlan_portal_auth`==`sso`, IDP issuer URL
     * 
     */
    @Import(name="ssoIssuer")
    private @Nullable Output<String> ssoIssuer;

    /**
     * @return Required if `wlan_portal_auth`==`sso`, IDP issuer URL
     * 
     */
    public Optional<Output<String>> ssoIssuer() {
        return Optional.ofNullable(this.ssoIssuer);
    }

    /**
     * Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`
     * 
     */
    @Import(name="ssoNameidFormat")
    private @Nullable Output<String> ssoNameidFormat;

    /**
     * @return Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`
     * 
     */
    public Optional<Output<String>> ssoNameidFormat() {
        return Optional.ofNullable(this.ssoNameidFormat);
    }

    /**
     * Required if `sms_provider`==`telstra`, Client ID provided by Telstra
     * 
     */
    @Import(name="telstraClientId")
    private @Nullable Output<String> telstraClientId;

    /**
     * @return Required if `sms_provider`==`telstra`, Client ID provided by Telstra
     * 
     */
    public Optional<Output<String>> telstraClientId() {
        return Optional.ofNullable(this.telstraClientId);
    }

    /**
     * Required if `sms_provider`==`telstra`, Client secret provided by Telstra
     * 
     */
    @Import(name="telstraClientSecret")
    private @Nullable Output<String> telstraClientSecret;

    /**
     * @return Required if `sms_provider`==`telstra`, Client secret provided by Telstra
     * 
     */
    public Optional<Output<String>> telstraClientSecret() {
        return Optional.ofNullable(this.telstraClientSecret);
    }

    /**
     * Required if `sms_provider`==`twilio`, Auth token account with twilio account
     * 
     */
    @Import(name="twilioAuthToken")
    private @Nullable Output<String> twilioAuthToken;

    /**
     * @return Required if `sms_provider`==`twilio`, Auth token account with twilio account
     * 
     */
    public Optional<Output<String>> twilioAuthToken() {
        return Optional.ofNullable(this.twilioAuthToken);
    }

    /**
     * Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
     * 
     */
    @Import(name="twilioPhoneNumber")
    private @Nullable Output<String> twilioPhoneNumber;

    /**
     * @return Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
     * 
     */
    public Optional<Output<String>> twilioPhoneNumber() {
        return Optional.ofNullable(this.twilioPhoneNumber);
    }

    /**
     * Required if `sms_provider`==`twilio`, Account SID provided by Twilio
     * 
     */
    @Import(name="twilioSid")
    private @Nullable Output<String> twilioSid;

    /**
     * @return Required if `sms_provider`==`twilio`, Account SID provided by Twilio
     * 
     */
    public Optional<Output<String>> twilioSid() {
        return Optional.ofNullable(this.twilioSid);
    }

    private WlanPortalArgs() {}

    private WlanPortalArgs(WlanPortalArgs $) {
        this.allowWlanIdRoam = $.allowWlanIdRoam;
        this.amazonClientId = $.amazonClientId;
        this.amazonClientSecret = $.amazonClientSecret;
        this.amazonEmailDomains = $.amazonEmailDomains;
        this.amazonEnabled = $.amazonEnabled;
        this.amazonExpire = $.amazonExpire;
        this.auth = $.auth;
        this.azureClientId = $.azureClientId;
        this.azureClientSecret = $.azureClientSecret;
        this.azureEnabled = $.azureEnabled;
        this.azureExpire = $.azureExpire;
        this.azureTenantId = $.azureTenantId;
        this.broadnetPassword = $.broadnetPassword;
        this.broadnetSid = $.broadnetSid;
        this.broadnetUserId = $.broadnetUserId;
        this.bypassWhenCloudDown = $.bypassWhenCloudDown;
        this.clickatellApiKey = $.clickatellApiKey;
        this.crossSite = $.crossSite;
        this.emailEnabled = $.emailEnabled;
        this.enabled = $.enabled;
        this.expire = $.expire;
        this.externalPortalUrl = $.externalPortalUrl;
        this.facebookClientId = $.facebookClientId;
        this.facebookClientSecret = $.facebookClientSecret;
        this.facebookEmailDomains = $.facebookEmailDomains;
        this.facebookEnabled = $.facebookEnabled;
        this.facebookExpire = $.facebookExpire;
        this.forward = $.forward;
        this.forwardUrl = $.forwardUrl;
        this.googleClientId = $.googleClientId;
        this.googleClientSecret = $.googleClientSecret;
        this.googleEmailDomains = $.googleEmailDomains;
        this.googleEnabled = $.googleEnabled;
        this.googleExpire = $.googleExpire;
        this.gupshupPassword = $.gupshupPassword;
        this.gupshupUserid = $.gupshupUserid;
        this.microsoftClientId = $.microsoftClientId;
        this.microsoftClientSecret = $.microsoftClientSecret;
        this.microsoftEmailDomains = $.microsoftEmailDomains;
        this.microsoftEnabled = $.microsoftEnabled;
        this.microsoftExpire = $.microsoftExpire;
        this.passphraseEnabled = $.passphraseEnabled;
        this.passphraseExpire = $.passphraseExpire;
        this.password = $.password;
        this.predefinedSponsorsEnabled = $.predefinedSponsorsEnabled;
        this.predefinedSponsorsHideEmail = $.predefinedSponsorsHideEmail;
        this.privacy = $.privacy;
        this.puzzelPassword = $.puzzelPassword;
        this.puzzelServiceId = $.puzzelServiceId;
        this.puzzelUsername = $.puzzelUsername;
        this.smsEnabled = $.smsEnabled;
        this.smsExpire = $.smsExpire;
        this.smsMessageFormat = $.smsMessageFormat;
        this.smsProvider = $.smsProvider;
        this.smsglobalApiKey = $.smsglobalApiKey;
        this.smsglobalApiSecret = $.smsglobalApiSecret;
        this.sponsorAutoApprove = $.sponsorAutoApprove;
        this.sponsorEmailDomains = $.sponsorEmailDomains;
        this.sponsorEnabled = $.sponsorEnabled;
        this.sponsorExpire = $.sponsorExpire;
        this.sponsorLinkValidityDuration = $.sponsorLinkValidityDuration;
        this.sponsorNotifyAll = $.sponsorNotifyAll;
        this.sponsorStatusNotify = $.sponsorStatusNotify;
        this.sponsors = $.sponsors;
        this.ssoDefaultRole = $.ssoDefaultRole;
        this.ssoForcedRole = $.ssoForcedRole;
        this.ssoIdpCert = $.ssoIdpCert;
        this.ssoIdpSignAlgo = $.ssoIdpSignAlgo;
        this.ssoIdpSsoUrl = $.ssoIdpSsoUrl;
        this.ssoIssuer = $.ssoIssuer;
        this.ssoNameidFormat = $.ssoNameidFormat;
        this.telstraClientId = $.telstraClientId;
        this.telstraClientSecret = $.telstraClientSecret;
        this.twilioAuthToken = $.twilioAuthToken;
        this.twilioPhoneNumber = $.twilioPhoneNumber;
        this.twilioSid = $.twilioSid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WlanPortalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WlanPortalArgs $;

        public Builder() {
            $ = new WlanPortalArgs();
        }

        public Builder(WlanPortalArgs defaults) {
            $ = new WlanPortalArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowWlanIdRoam Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)
         * 
         * @return builder
         * 
         */
        public Builder allowWlanIdRoam(@Nullable Output<Boolean> allowWlanIdRoam) {
            $.allowWlanIdRoam = allowWlanIdRoam;
            return this;
        }

        /**
         * @param allowWlanIdRoam Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)
         * 
         * @return builder
         * 
         */
        public Builder allowWlanIdRoam(Boolean allowWlanIdRoam) {
            return allowWlanIdRoam(Output.of(allowWlanIdRoam));
        }

        /**
         * @param amazonClientId Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder amazonClientId(@Nullable Output<String> amazonClientId) {
            $.amazonClientId = amazonClientId;
            return this;
        }

        /**
         * @param amazonClientId Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder amazonClientId(String amazonClientId) {
            return amazonClientId(Output.of(amazonClientId));
        }

        /**
         * @param amazonClientSecret Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder amazonClientSecret(@Nullable Output<String> amazonClientSecret) {
            $.amazonClientSecret = amazonClientSecret;
            return this;
        }

        /**
         * @param amazonClientSecret Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder amazonClientSecret(String amazonClientSecret) {
            return amazonClientSecret(Output.of(amazonClientSecret));
        }

        /**
         * @param amazonEmailDomains Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder amazonEmailDomains(@Nullable Output<List<String>> amazonEmailDomains) {
            $.amazonEmailDomains = amazonEmailDomains;
            return this;
        }

        /**
         * @param amazonEmailDomains Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder amazonEmailDomains(List<String> amazonEmailDomains) {
            return amazonEmailDomains(Output.of(amazonEmailDomains));
        }

        /**
         * @param amazonEmailDomains Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder amazonEmailDomains(String... amazonEmailDomains) {
            return amazonEmailDomains(List.of(amazonEmailDomains));
        }

        /**
         * @param amazonEnabled Whether amazon is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder amazonEnabled(@Nullable Output<Boolean> amazonEnabled) {
            $.amazonEnabled = amazonEnabled;
            return this;
        }

        /**
         * @param amazonEnabled Whether amazon is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder amazonEnabled(Boolean amazonEnabled) {
            return amazonEnabled(Output.of(amazonEnabled));
        }

        /**
         * @param amazonExpire Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder amazonExpire(@Nullable Output<Integer> amazonExpire) {
            $.amazonExpire = amazonExpire;
            return this;
        }

        /**
         * @param amazonExpire Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder amazonExpire(Integer amazonExpire) {
            return amazonExpire(Output.of(amazonExpire));
        }

        /**
         * @param auth authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sms`, `sponsor`, `sso`
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<String> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sms`, `sponsor`, `sso`
         * 
         * @return builder
         * 
         */
        public Builder auth(String auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param azureClientId Required if `azure_enabled`==`true`. Azure active directory app client id
         * 
         * @return builder
         * 
         */
        public Builder azureClientId(@Nullable Output<String> azureClientId) {
            $.azureClientId = azureClientId;
            return this;
        }

        /**
         * @param azureClientId Required if `azure_enabled`==`true`. Azure active directory app client id
         * 
         * @return builder
         * 
         */
        public Builder azureClientId(String azureClientId) {
            return azureClientId(Output.of(azureClientId));
        }

        /**
         * @param azureClientSecret Required if `azure_enabled`==`true`. Azure active directory app client secret
         * 
         * @return builder
         * 
         */
        public Builder azureClientSecret(@Nullable Output<String> azureClientSecret) {
            $.azureClientSecret = azureClientSecret;
            return this;
        }

        /**
         * @param azureClientSecret Required if `azure_enabled`==`true`. Azure active directory app client secret
         * 
         * @return builder
         * 
         */
        public Builder azureClientSecret(String azureClientSecret) {
            return azureClientSecret(Output.of(azureClientSecret));
        }

        /**
         * @param azureEnabled Whether Azure Active Directory is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder azureEnabled(@Nullable Output<Boolean> azureEnabled) {
            $.azureEnabled = azureEnabled;
            return this;
        }

        /**
         * @param azureEnabled Whether Azure Active Directory is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder azureEnabled(Boolean azureEnabled) {
            return azureEnabled(Output.of(azureEnabled));
        }

        /**
         * @param azureExpire Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder azureExpire(@Nullable Output<Integer> azureExpire) {
            $.azureExpire = azureExpire;
            return this;
        }

        /**
         * @param azureExpire Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder azureExpire(Integer azureExpire) {
            return azureExpire(Output.of(azureExpire));
        }

        /**
         * @param azureTenantId Required if `azure_enabled`==`true`. Azure active directory tenant id.
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(@Nullable Output<String> azureTenantId) {
            $.azureTenantId = azureTenantId;
            return this;
        }

        /**
         * @param azureTenantId Required if `azure_enabled`==`true`. Azure active directory tenant id.
         * 
         * @return builder
         * 
         */
        public Builder azureTenantId(String azureTenantId) {
            return azureTenantId(Output.of(azureTenantId));
        }

        /**
         * @param broadnetPassword Required if `sms_provider`==`broadnet`
         * 
         * @return builder
         * 
         */
        public Builder broadnetPassword(@Nullable Output<String> broadnetPassword) {
            $.broadnetPassword = broadnetPassword;
            return this;
        }

        /**
         * @param broadnetPassword Required if `sms_provider`==`broadnet`
         * 
         * @return builder
         * 
         */
        public Builder broadnetPassword(String broadnetPassword) {
            return broadnetPassword(Output.of(broadnetPassword));
        }

        /**
         * @param broadnetSid Required if `sms_provider`==`broadnet`
         * 
         * @return builder
         * 
         */
        public Builder broadnetSid(@Nullable Output<String> broadnetSid) {
            $.broadnetSid = broadnetSid;
            return this;
        }

        /**
         * @param broadnetSid Required if `sms_provider`==`broadnet`
         * 
         * @return builder
         * 
         */
        public Builder broadnetSid(String broadnetSid) {
            return broadnetSid(Output.of(broadnetSid));
        }

        /**
         * @param broadnetUserId Required if `sms_provider`==`broadnet`
         * 
         * @return builder
         * 
         */
        public Builder broadnetUserId(@Nullable Output<String> broadnetUserId) {
            $.broadnetUserId = broadnetUserId;
            return this;
        }

        /**
         * @param broadnetUserId Required if `sms_provider`==`broadnet`
         * 
         * @return builder
         * 
         */
        public Builder broadnetUserId(String broadnetUserId) {
            return broadnetUserId(Output.of(broadnetUserId));
        }

        /**
         * @param bypassWhenCloudDown Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
         * 
         * @return builder
         * 
         */
        public Builder bypassWhenCloudDown(@Nullable Output<Boolean> bypassWhenCloudDown) {
            $.bypassWhenCloudDown = bypassWhenCloudDown;
            return this;
        }

        /**
         * @param bypassWhenCloudDown Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
         * 
         * @return builder
         * 
         */
        public Builder bypassWhenCloudDown(Boolean bypassWhenCloudDown) {
            return bypassWhenCloudDown(Output.of(bypassWhenCloudDown));
        }

        /**
         * @param clickatellApiKey Required if `sms_provider`==`clickatell`
         * 
         * @return builder
         * 
         */
        public Builder clickatellApiKey(@Nullable Output<String> clickatellApiKey) {
            $.clickatellApiKey = clickatellApiKey;
            return this;
        }

        /**
         * @param clickatellApiKey Required if `sms_provider`==`clickatell`
         * 
         * @return builder
         * 
         */
        public Builder clickatellApiKey(String clickatellApiKey) {
            return clickatellApiKey(Output.of(clickatellApiKey));
        }

        /**
         * @param crossSite Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
         * 
         * @return builder
         * 
         */
        public Builder crossSite(@Nullable Output<Boolean> crossSite) {
            $.crossSite = crossSite;
            return this;
        }

        /**
         * @param crossSite Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
         * 
         * @return builder
         * 
         */
        public Builder crossSite(Boolean crossSite) {
            return crossSite(Output.of(crossSite));
        }

        /**
         * @param emailEnabled Whether email (access code verification) is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder emailEnabled(@Nullable Output<Boolean> emailEnabled) {
            $.emailEnabled = emailEnabled;
            return this;
        }

        /**
         * @param emailEnabled Whether email (access code verification) is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder emailEnabled(Boolean emailEnabled) {
            return emailEnabled(Output.of(emailEnabled));
        }

        /**
         * @param enabled Whether guest portal is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether guest portal is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expire How long to remain authorized, in minutes
         * 
         * @return builder
         * 
         */
        public Builder expire(@Nullable Output<Integer> expire) {
            $.expire = expire;
            return this;
        }

        /**
         * @param expire How long to remain authorized, in minutes
         * 
         * @return builder
         * 
         */
        public Builder expire(Integer expire) {
            return expire(Output.of(expire));
        }

        /**
         * @param externalPortalUrl Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
         * 
         * @return builder
         * 
         */
        public Builder externalPortalUrl(@Nullable Output<String> externalPortalUrl) {
            $.externalPortalUrl = externalPortalUrl;
            return this;
        }

        /**
         * @param externalPortalUrl Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
         * 
         * @return builder
         * 
         */
        public Builder externalPortalUrl(String externalPortalUrl) {
            return externalPortalUrl(Output.of(externalPortalUrl));
        }

        /**
         * @param facebookClientId Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder facebookClientId(@Nullable Output<String> facebookClientId) {
            $.facebookClientId = facebookClientId;
            return this;
        }

        /**
         * @param facebookClientId Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder facebookClientId(String facebookClientId) {
            return facebookClientId(Output.of(facebookClientId));
        }

        /**
         * @param facebookClientSecret Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder facebookClientSecret(@Nullable Output<String> facebookClientSecret) {
            $.facebookClientSecret = facebookClientSecret;
            return this;
        }

        /**
         * @param facebookClientSecret Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder facebookClientSecret(String facebookClientSecret) {
            return facebookClientSecret(Output.of(facebookClientSecret));
        }

        /**
         * @param facebookEmailDomains Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder facebookEmailDomains(@Nullable Output<List<String>> facebookEmailDomains) {
            $.facebookEmailDomains = facebookEmailDomains;
            return this;
        }

        /**
         * @param facebookEmailDomains Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder facebookEmailDomains(List<String> facebookEmailDomains) {
            return facebookEmailDomains(Output.of(facebookEmailDomains));
        }

        /**
         * @param facebookEmailDomains Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder facebookEmailDomains(String... facebookEmailDomains) {
            return facebookEmailDomains(List.of(facebookEmailDomains));
        }

        /**
         * @param facebookEnabled Whether facebook is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder facebookEnabled(@Nullable Output<Boolean> facebookEnabled) {
            $.facebookEnabled = facebookEnabled;
            return this;
        }

        /**
         * @param facebookEnabled Whether facebook is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder facebookEnabled(Boolean facebookEnabled) {
            return facebookEnabled(Output.of(facebookEnabled));
        }

        /**
         * @param facebookExpire Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder facebookExpire(@Nullable Output<Integer> facebookExpire) {
            $.facebookExpire = facebookExpire;
            return this;
        }

        /**
         * @param facebookExpire Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder facebookExpire(Integer facebookExpire) {
            return facebookExpire(Output.of(facebookExpire));
        }

        /**
         * @param forward Whether to forward the user to another URL after authorized
         * 
         * @return builder
         * 
         */
        public Builder forward(@Nullable Output<Boolean> forward) {
            $.forward = forward;
            return this;
        }

        /**
         * @param forward Whether to forward the user to another URL after authorized
         * 
         * @return builder
         * 
         */
        public Builder forward(Boolean forward) {
            return forward(Output.of(forward));
        }

        /**
         * @param forwardUrl URL to forward the user to
         * 
         * @return builder
         * 
         */
        public Builder forwardUrl(@Nullable Output<String> forwardUrl) {
            $.forwardUrl = forwardUrl;
            return this;
        }

        /**
         * @param forwardUrl URL to forward the user to
         * 
         * @return builder
         * 
         */
        public Builder forwardUrl(String forwardUrl) {
            return forwardUrl(Output.of(forwardUrl));
        }

        /**
         * @param googleClientId Google OAuth2 app id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder googleClientId(@Nullable Output<String> googleClientId) {
            $.googleClientId = googleClientId;
            return this;
        }

        /**
         * @param googleClientId Google OAuth2 app id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder googleClientId(String googleClientId) {
            return googleClientId(Output.of(googleClientId));
        }

        /**
         * @param googleClientSecret Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder googleClientSecret(@Nullable Output<String> googleClientSecret) {
            $.googleClientSecret = googleClientSecret;
            return this;
        }

        /**
         * @param googleClientSecret Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder googleClientSecret(String googleClientSecret) {
            return googleClientSecret(Output.of(googleClientSecret));
        }

        /**
         * @param googleEmailDomains Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder googleEmailDomains(@Nullable Output<List<String>> googleEmailDomains) {
            $.googleEmailDomains = googleEmailDomains;
            return this;
        }

        /**
         * @param googleEmailDomains Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder googleEmailDomains(List<String> googleEmailDomains) {
            return googleEmailDomains(Output.of(googleEmailDomains));
        }

        /**
         * @param googleEmailDomains Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder googleEmailDomains(String... googleEmailDomains) {
            return googleEmailDomains(List.of(googleEmailDomains));
        }

        /**
         * @param googleEnabled Whether Google is enabled as login method
         * 
         * @return builder
         * 
         */
        public Builder googleEnabled(@Nullable Output<Boolean> googleEnabled) {
            $.googleEnabled = googleEnabled;
            return this;
        }

        /**
         * @param googleEnabled Whether Google is enabled as login method
         * 
         * @return builder
         * 
         */
        public Builder googleEnabled(Boolean googleEnabled) {
            return googleEnabled(Output.of(googleEnabled));
        }

        /**
         * @param googleExpire Optional if `google_enabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder googleExpire(@Nullable Output<Integer> googleExpire) {
            $.googleExpire = googleExpire;
            return this;
        }

        /**
         * @param googleExpire Optional if `google_enabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder googleExpire(Integer googleExpire) {
            return googleExpire(Output.of(googleExpire));
        }

        /**
         * @param gupshupPassword Required if `sms_provider`==`gupshup`
         * 
         * @return builder
         * 
         */
        public Builder gupshupPassword(@Nullable Output<String> gupshupPassword) {
            $.gupshupPassword = gupshupPassword;
            return this;
        }

        /**
         * @param gupshupPassword Required if `sms_provider`==`gupshup`
         * 
         * @return builder
         * 
         */
        public Builder gupshupPassword(String gupshupPassword) {
            return gupshupPassword(Output.of(gupshupPassword));
        }

        /**
         * @param gupshupUserid Required if `sms_provider`==`gupshup`
         * 
         * @return builder
         * 
         */
        public Builder gupshupUserid(@Nullable Output<String> gupshupUserid) {
            $.gupshupUserid = gupshupUserid;
            return this;
        }

        /**
         * @param gupshupUserid Required if `sms_provider`==`gupshup`
         * 
         * @return builder
         * 
         */
        public Builder gupshupUserid(String gupshupUserid) {
            return gupshupUserid(Output.of(gupshupUserid));
        }

        /**
         * @param microsoftClientId Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder microsoftClientId(@Nullable Output<String> microsoftClientId) {
            $.microsoftClientId = microsoftClientId;
            return this;
        }

        /**
         * @param microsoftClientId Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
         * 
         * @return builder
         * 
         */
        public Builder microsoftClientId(String microsoftClientId) {
            return microsoftClientId(Output.of(microsoftClientId));
        }

        /**
         * @param microsoftClientSecret Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder microsoftClientSecret(@Nullable Output<String> microsoftClientSecret) {
            $.microsoftClientSecret = microsoftClientSecret;
            return this;
        }

        /**
         * @param microsoftClientSecret Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a corresponding value. Else leave blank.
         * 
         * @return builder
         * 
         */
        public Builder microsoftClientSecret(String microsoftClientSecret) {
            return microsoftClientSecret(Output.of(microsoftClientSecret));
        }

        /**
         * @param microsoftEmailDomains Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder microsoftEmailDomains(@Nullable Output<List<String>> microsoftEmailDomains) {
            $.microsoftEmailDomains = microsoftEmailDomains;
            return this;
        }

        /**
         * @param microsoftEmailDomains Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder microsoftEmailDomains(List<String> microsoftEmailDomains) {
            return microsoftEmailDomains(Output.of(microsoftEmailDomains));
        }

        /**
         * @param microsoftEmailDomains Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         * 
         * @return builder
         * 
         */
        public Builder microsoftEmailDomains(String... microsoftEmailDomains) {
            return microsoftEmailDomains(List.of(microsoftEmailDomains));
        }

        /**
         * @param microsoftEnabled Whether microsoft 365 is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder microsoftEnabled(@Nullable Output<Boolean> microsoftEnabled) {
            $.microsoftEnabled = microsoftEnabled;
            return this;
        }

        /**
         * @param microsoftEnabled Whether microsoft 365 is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder microsoftEnabled(Boolean microsoftEnabled) {
            return microsoftEnabled(Output.of(microsoftEnabled));
        }

        /**
         * @param microsoftExpire Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder microsoftExpire(@Nullable Output<Integer> microsoftExpire) {
            $.microsoftExpire = microsoftExpire;
            return this;
        }

        /**
         * @param microsoftExpire Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder microsoftExpire(Integer microsoftExpire) {
            return microsoftExpire(Output.of(microsoftExpire));
        }

        /**
         * @param passphraseEnabled Whether password is enabled
         * 
         * @return builder
         * 
         */
        public Builder passphraseEnabled(@Nullable Output<Boolean> passphraseEnabled) {
            $.passphraseEnabled = passphraseEnabled;
            return this;
        }

        /**
         * @param passphraseEnabled Whether password is enabled
         * 
         * @return builder
         * 
         */
        public Builder passphraseEnabled(Boolean passphraseEnabled) {
            return passphraseEnabled(Output.of(passphraseEnabled));
        }

        /**
         * @param passphraseExpire Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
         * 
         * @return builder
         * 
         */
        public Builder passphraseExpire(@Nullable Output<Integer> passphraseExpire) {
            $.passphraseExpire = passphraseExpire;
            return this;
        }

        /**
         * @param passphraseExpire Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
         * 
         * @return builder
         * 
         */
        public Builder passphraseExpire(Integer passphraseExpire) {
            return passphraseExpire(Output.of(passphraseExpire));
        }

        /**
         * @param password Required if `passphrase_enabled`==`true`.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Required if `passphrase_enabled`==`true`.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param predefinedSponsorsEnabled Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behavior is acc to `sponsor_email_domains`
         * 
         * @return builder
         * 
         */
        public Builder predefinedSponsorsEnabled(@Nullable Output<Boolean> predefinedSponsorsEnabled) {
            $.predefinedSponsorsEnabled = predefinedSponsorsEnabled;
            return this;
        }

        /**
         * @param predefinedSponsorsEnabled Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behavior is acc to `sponsor_email_domains`
         * 
         * @return builder
         * 
         */
        public Builder predefinedSponsorsEnabled(Boolean predefinedSponsorsEnabled) {
            return predefinedSponsorsEnabled(Output.of(predefinedSponsorsEnabled));
        }

        /**
         * @param predefinedSponsorsHideEmail Whether to hide sponsor’s email from list of sponsors
         * 
         * @return builder
         * 
         */
        public Builder predefinedSponsorsHideEmail(@Nullable Output<Boolean> predefinedSponsorsHideEmail) {
            $.predefinedSponsorsHideEmail = predefinedSponsorsHideEmail;
            return this;
        }

        /**
         * @param predefinedSponsorsHideEmail Whether to hide sponsor’s email from list of sponsors
         * 
         * @return builder
         * 
         */
        public Builder predefinedSponsorsHideEmail(Boolean predefinedSponsorsHideEmail) {
            return predefinedSponsorsHideEmail(Output.of(predefinedSponsorsHideEmail));
        }

        public Builder privacy(@Nullable Output<Boolean> privacy) {
            $.privacy = privacy;
            return this;
        }

        public Builder privacy(Boolean privacy) {
            return privacy(Output.of(privacy));
        }

        /**
         * @param puzzelPassword Required if `sms_provider`==`puzzel`
         * 
         * @return builder
         * 
         */
        public Builder puzzelPassword(@Nullable Output<String> puzzelPassword) {
            $.puzzelPassword = puzzelPassword;
            return this;
        }

        /**
         * @param puzzelPassword Required if `sms_provider`==`puzzel`
         * 
         * @return builder
         * 
         */
        public Builder puzzelPassword(String puzzelPassword) {
            return puzzelPassword(Output.of(puzzelPassword));
        }

        /**
         * @param puzzelServiceId Required if `sms_provider`==`puzzel`
         * 
         * @return builder
         * 
         */
        public Builder puzzelServiceId(@Nullable Output<String> puzzelServiceId) {
            $.puzzelServiceId = puzzelServiceId;
            return this;
        }

        /**
         * @param puzzelServiceId Required if `sms_provider`==`puzzel`
         * 
         * @return builder
         * 
         */
        public Builder puzzelServiceId(String puzzelServiceId) {
            return puzzelServiceId(Output.of(puzzelServiceId));
        }

        /**
         * @param puzzelUsername Required if `sms_provider`==`puzzel`
         * 
         * @return builder
         * 
         */
        public Builder puzzelUsername(@Nullable Output<String> puzzelUsername) {
            $.puzzelUsername = puzzelUsername;
            return this;
        }

        /**
         * @param puzzelUsername Required if `sms_provider`==`puzzel`
         * 
         * @return builder
         * 
         */
        public Builder puzzelUsername(String puzzelUsername) {
            return puzzelUsername(Output.of(puzzelUsername));
        }

        /**
         * @param smsEnabled Whether sms is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder smsEnabled(@Nullable Output<Boolean> smsEnabled) {
            $.smsEnabled = smsEnabled;
            return this;
        }

        /**
         * @param smsEnabled Whether sms is enabled as a login method
         * 
         * @return builder
         * 
         */
        public Builder smsEnabled(Boolean smsEnabled) {
            return smsEnabled(Output.of(smsEnabled));
        }

        /**
         * @param smsExpire Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder smsExpire(@Nullable Output<Integer> smsExpire) {
            $.smsExpire = smsExpire;
            return this;
        }

        /**
         * @param smsExpire Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder smsExpire(Integer smsExpire) {
            return smsExpire(Output.of(smsExpire));
        }

        /**
         * @param smsMessageFormat Optional if `sms_enabled`==`true`. SMS Message format
         * 
         * @return builder
         * 
         */
        public Builder smsMessageFormat(@Nullable Output<String> smsMessageFormat) {
            $.smsMessageFormat = smsMessageFormat;
            return this;
        }

        /**
         * @param smsMessageFormat Optional if `sms_enabled`==`true`. SMS Message format
         * 
         * @return builder
         * 
         */
        public Builder smsMessageFormat(String smsMessageFormat) {
            return smsMessageFormat(Output.of(smsMessageFormat));
        }

        /**
         * @param smsProvider Optional if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `smsglobal`, `telstra`, `twilio`
         * 
         * @return builder
         * 
         */
        public Builder smsProvider(@Nullable Output<String> smsProvider) {
            $.smsProvider = smsProvider;
            return this;
        }

        /**
         * @param smsProvider Optional if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `smsglobal`, `telstra`, `twilio`
         * 
         * @return builder
         * 
         */
        public Builder smsProvider(String smsProvider) {
            return smsProvider(Output.of(smsProvider));
        }

        /**
         * @param smsglobalApiKey Required if `sms_provider`==`smsglobal`, Client API Key
         * 
         * @return builder
         * 
         */
        public Builder smsglobalApiKey(@Nullable Output<String> smsglobalApiKey) {
            $.smsglobalApiKey = smsglobalApiKey;
            return this;
        }

        /**
         * @param smsglobalApiKey Required if `sms_provider`==`smsglobal`, Client API Key
         * 
         * @return builder
         * 
         */
        public Builder smsglobalApiKey(String smsglobalApiKey) {
            return smsglobalApiKey(Output.of(smsglobalApiKey));
        }

        /**
         * @param smsglobalApiSecret Required if `sms_provider`==`smsglobal`, Client secret
         * 
         * @return builder
         * 
         */
        public Builder smsglobalApiSecret(@Nullable Output<String> smsglobalApiSecret) {
            $.smsglobalApiSecret = smsglobalApiSecret;
            return this;
        }

        /**
         * @param smsglobalApiSecret Required if `sms_provider`==`smsglobal`, Client secret
         * 
         * @return builder
         * 
         */
        public Builder smsglobalApiSecret(String smsglobalApiSecret) {
            return smsglobalApiSecret(Output.of(smsglobalApiSecret));
        }

        /**
         * @param sponsorAutoApprove Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
         * 
         * @return builder
         * 
         */
        public Builder sponsorAutoApprove(@Nullable Output<Boolean> sponsorAutoApprove) {
            $.sponsorAutoApprove = sponsorAutoApprove;
            return this;
        }

        /**
         * @param sponsorAutoApprove Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
         * 
         * @return builder
         * 
         */
        public Builder sponsorAutoApprove(Boolean sponsorAutoApprove) {
            return sponsorAutoApprove(Output.of(sponsorAutoApprove));
        }

        /**
         * @param sponsorEmailDomains List of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
         * 
         * @return builder
         * 
         */
        public Builder sponsorEmailDomains(@Nullable Output<List<String>> sponsorEmailDomains) {
            $.sponsorEmailDomains = sponsorEmailDomains;
            return this;
        }

        /**
         * @param sponsorEmailDomains List of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
         * 
         * @return builder
         * 
         */
        public Builder sponsorEmailDomains(List<String> sponsorEmailDomains) {
            return sponsorEmailDomains(Output.of(sponsorEmailDomains));
        }

        /**
         * @param sponsorEmailDomains List of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
         * 
         * @return builder
         * 
         */
        public Builder sponsorEmailDomains(String... sponsorEmailDomains) {
            return sponsorEmailDomains(List.of(sponsorEmailDomains));
        }

        /**
         * @param sponsorEnabled Whether sponsor is enabled
         * 
         * @return builder
         * 
         */
        public Builder sponsorEnabled(@Nullable Output<Boolean> sponsorEnabled) {
            $.sponsorEnabled = sponsorEnabled;
            return this;
        }

        /**
         * @param sponsorEnabled Whether sponsor is enabled
         * 
         * @return builder
         * 
         */
        public Builder sponsorEnabled(Boolean sponsorEnabled) {
            return sponsorEnabled(Output.of(sponsorEnabled));
        }

        /**
         * @param sponsorExpire Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder sponsorExpire(@Nullable Output<Integer> sponsorExpire) {
            $.sponsorExpire = sponsorExpire;
            return this;
        }

        /**
         * @param sponsorExpire Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
         * 
         * @return builder
         * 
         */
        public Builder sponsorExpire(Integer sponsorExpire) {
            return sponsorExpire(Output.of(sponsorExpire));
        }

        /**
         * @param sponsorLinkValidityDuration Optional if `sponsor_enabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes. Default is 60 minutes.
         * 
         * @return builder
         * 
         */
        public Builder sponsorLinkValidityDuration(@Nullable Output<String> sponsorLinkValidityDuration) {
            $.sponsorLinkValidityDuration = sponsorLinkValidityDuration;
            return this;
        }

        /**
         * @param sponsorLinkValidityDuration Optional if `sponsor_enabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes. Default is 60 minutes.
         * 
         * @return builder
         * 
         */
        public Builder sponsorLinkValidityDuration(String sponsorLinkValidityDuration) {
            return sponsorLinkValidityDuration(Output.of(sponsorLinkValidityDuration));
        }

        /**
         * @param sponsorNotifyAll Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
         * 
         * @return builder
         * 
         */
        public Builder sponsorNotifyAll(@Nullable Output<Boolean> sponsorNotifyAll) {
            $.sponsorNotifyAll = sponsorNotifyAll;
            return this;
        }

        /**
         * @param sponsorNotifyAll Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
         * 
         * @return builder
         * 
         */
        public Builder sponsorNotifyAll(Boolean sponsorNotifyAll) {
            return sponsorNotifyAll(Output.of(sponsorNotifyAll));
        }

        /**
         * @param sponsorStatusNotify Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor&#39;s action (approve/deny)
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusNotify(@Nullable Output<Boolean> sponsorStatusNotify) {
            $.sponsorStatusNotify = sponsorStatusNotify;
            return this;
        }

        /**
         * @param sponsorStatusNotify Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor&#39;s action (approve/deny)
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusNotify(Boolean sponsorStatusNotify) {
            return sponsorStatusNotify(Output.of(sponsorStatusNotify));
        }

        /**
         * @param sponsors object of allowed sponsors email with name. Required if `sponsor_enabled`
         *             is `true` and `sponsor_email_domains` is empty.
         * 
         *             Property key is the sponsor email, Property value is the sponsor name
         * 
         * @return builder
         * 
         */
        public Builder sponsors(@Nullable Output<Map<String,String>> sponsors) {
            $.sponsors = sponsors;
            return this;
        }

        /**
         * @param sponsors object of allowed sponsors email with name. Required if `sponsor_enabled`
         *             is `true` and `sponsor_email_domains` is empty.
         * 
         *             Property key is the sponsor email, Property value is the sponsor name
         * 
         * @return builder
         * 
         */
        public Builder sponsors(Map<String,String> sponsors) {
            return sponsors(Output.of(sponsors));
        }

        /**
         * @param ssoDefaultRole Optional if `wlan_portal_auth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
         * 
         * @return builder
         * 
         */
        public Builder ssoDefaultRole(@Nullable Output<String> ssoDefaultRole) {
            $.ssoDefaultRole = ssoDefaultRole;
            return this;
        }

        /**
         * @param ssoDefaultRole Optional if `wlan_portal_auth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
         * 
         * @return builder
         * 
         */
        public Builder ssoDefaultRole(String ssoDefaultRole) {
            return ssoDefaultRole(Output.of(ssoDefaultRole));
        }

        /**
         * @param ssoForcedRole Optional if `wlan_portal_auth`==`sso`
         * 
         * @return builder
         * 
         */
        public Builder ssoForcedRole(@Nullable Output<String> ssoForcedRole) {
            $.ssoForcedRole = ssoForcedRole;
            return this;
        }

        /**
         * @param ssoForcedRole Optional if `wlan_portal_auth`==`sso`
         * 
         * @return builder
         * 
         */
        public Builder ssoForcedRole(String ssoForcedRole) {
            return ssoForcedRole(Output.of(ssoForcedRole));
        }

        /**
         * @param ssoIdpCert Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)
         * 
         * @return builder
         * 
         */
        public Builder ssoIdpCert(@Nullable Output<String> ssoIdpCert) {
            $.ssoIdpCert = ssoIdpCert;
            return this;
        }

        /**
         * @param ssoIdpCert Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)
         * 
         * @return builder
         * 
         */
        public Builder ssoIdpCert(String ssoIdpCert) {
            return ssoIdpCert(Output.of(ssoIdpCert));
        }

        /**
         * @param ssoIdpSignAlgo Optional if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
         * 
         * @return builder
         * 
         */
        public Builder ssoIdpSignAlgo(@Nullable Output<String> ssoIdpSignAlgo) {
            $.ssoIdpSignAlgo = ssoIdpSignAlgo;
            return this;
        }

        /**
         * @param ssoIdpSignAlgo Optional if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
         * 
         * @return builder
         * 
         */
        public Builder ssoIdpSignAlgo(String ssoIdpSignAlgo) {
            return ssoIdpSignAlgo(Output.of(ssoIdpSignAlgo));
        }

        /**
         * @param ssoIdpSsoUrl Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL
         * 
         * @return builder
         * 
         */
        public Builder ssoIdpSsoUrl(@Nullable Output<String> ssoIdpSsoUrl) {
            $.ssoIdpSsoUrl = ssoIdpSsoUrl;
            return this;
        }

        /**
         * @param ssoIdpSsoUrl Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL
         * 
         * @return builder
         * 
         */
        public Builder ssoIdpSsoUrl(String ssoIdpSsoUrl) {
            return ssoIdpSsoUrl(Output.of(ssoIdpSsoUrl));
        }

        /**
         * @param ssoIssuer Required if `wlan_portal_auth`==`sso`, IDP issuer URL
         * 
         * @return builder
         * 
         */
        public Builder ssoIssuer(@Nullable Output<String> ssoIssuer) {
            $.ssoIssuer = ssoIssuer;
            return this;
        }

        /**
         * @param ssoIssuer Required if `wlan_portal_auth`==`sso`, IDP issuer URL
         * 
         * @return builder
         * 
         */
        public Builder ssoIssuer(String ssoIssuer) {
            return ssoIssuer(Output.of(ssoIssuer));
        }

        /**
         * @param ssoNameidFormat Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`
         * 
         * @return builder
         * 
         */
        public Builder ssoNameidFormat(@Nullable Output<String> ssoNameidFormat) {
            $.ssoNameidFormat = ssoNameidFormat;
            return this;
        }

        /**
         * @param ssoNameidFormat Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`
         * 
         * @return builder
         * 
         */
        public Builder ssoNameidFormat(String ssoNameidFormat) {
            return ssoNameidFormat(Output.of(ssoNameidFormat));
        }

        /**
         * @param telstraClientId Required if `sms_provider`==`telstra`, Client ID provided by Telstra
         * 
         * @return builder
         * 
         */
        public Builder telstraClientId(@Nullable Output<String> telstraClientId) {
            $.telstraClientId = telstraClientId;
            return this;
        }

        /**
         * @param telstraClientId Required if `sms_provider`==`telstra`, Client ID provided by Telstra
         * 
         * @return builder
         * 
         */
        public Builder telstraClientId(String telstraClientId) {
            return telstraClientId(Output.of(telstraClientId));
        }

        /**
         * @param telstraClientSecret Required if `sms_provider`==`telstra`, Client secret provided by Telstra
         * 
         * @return builder
         * 
         */
        public Builder telstraClientSecret(@Nullable Output<String> telstraClientSecret) {
            $.telstraClientSecret = telstraClientSecret;
            return this;
        }

        /**
         * @param telstraClientSecret Required if `sms_provider`==`telstra`, Client secret provided by Telstra
         * 
         * @return builder
         * 
         */
        public Builder telstraClientSecret(String telstraClientSecret) {
            return telstraClientSecret(Output.of(telstraClientSecret));
        }

        /**
         * @param twilioAuthToken Required if `sms_provider`==`twilio`, Auth token account with twilio account
         * 
         * @return builder
         * 
         */
        public Builder twilioAuthToken(@Nullable Output<String> twilioAuthToken) {
            $.twilioAuthToken = twilioAuthToken;
            return this;
        }

        /**
         * @param twilioAuthToken Required if `sms_provider`==`twilio`, Auth token account with twilio account
         * 
         * @return builder
         * 
         */
        public Builder twilioAuthToken(String twilioAuthToken) {
            return twilioAuthToken(Output.of(twilioAuthToken));
        }

        /**
         * @param twilioPhoneNumber Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
         * 
         * @return builder
         * 
         */
        public Builder twilioPhoneNumber(@Nullable Output<String> twilioPhoneNumber) {
            $.twilioPhoneNumber = twilioPhoneNumber;
            return this;
        }

        /**
         * @param twilioPhoneNumber Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
         * 
         * @return builder
         * 
         */
        public Builder twilioPhoneNumber(String twilioPhoneNumber) {
            return twilioPhoneNumber(Output.of(twilioPhoneNumber));
        }

        /**
         * @param twilioSid Required if `sms_provider`==`twilio`, Account SID provided by Twilio
         * 
         * @return builder
         * 
         */
        public Builder twilioSid(@Nullable Output<String> twilioSid) {
            $.twilioSid = twilioSid;
            return this;
        }

        /**
         * @param twilioSid Required if `sms_provider`==`twilio`, Account SID provided by Twilio
         * 
         * @return builder
         * 
         */
        public Builder twilioSid(String twilioSid) {
            return twilioSid(Output.of(twilioSid));
        }

        public WlanPortalArgs build() {
            return $;
        }
    }

}
