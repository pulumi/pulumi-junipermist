// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.site.inputs.NetworktemplateAclTagsSpecArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworktemplateAclTagsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworktemplateAclTagsArgs Empty = new NetworktemplateAclTagsArgs();

    /**
     * required if
     *   - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
     *   - `type`==`gbp_resource`
     *   - `type`==`static_gbp` (applying gbp tag against matching conditions)
     * 
     */
    @Import(name="gbpTag")
    private @Nullable Output<Integer> gbpTag;

    /**
     * @return required if
     *   - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
     *   - `type`==`gbp_resource`
     *   - `type`==`static_gbp` (applying gbp tag against matching conditions)
     * 
     */
    public Optional<Output<Integer>> gbpTag() {
        return Optional.ofNullable(this.gbpTag);
    }

    /**
     * required if
     * - `type`==`mac`
     * - `type`==`static_gbp` if from matching mac
     * 
     */
    @Import(name="macs")
    private @Nullable Output<List<String>> macs;

    /**
     * @return required if
     * - `type`==`mac`
     * - `type`==`static_gbp` if from matching mac
     * 
     */
    public Optional<Output<List<String>>> macs() {
        return Optional.ofNullable(this.macs);
    }

    /**
     * if:
     *   * `type`==`mac` (optional. default is `any`)
     *   * `type`==`subnet` (optional. default is `any`)
     *   * `type`==`network`
     *   * `type`==`resource` (optional. default is `any`)
     *   * `type`==`static_gbp` if from matching network (vlan)&#39;
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return if:
     *   * `type`==`mac` (optional. default is `any`)
     *   * `type`==`subnet` (optional. default is `any`)
     *   * `type`==`network`
     *   * `type`==`resource` (optional. default is `any`)
     *   * `type`==`static_gbp` if from matching network (vlan)&#39;
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * required if:
     *   * `type`==`radius_group`
     *   * `type`==`static_gbp`
     *     if from matching radius_group
     * 
     */
    @Import(name="radiusGroup")
    private @Nullable Output<String> radiusGroup;

    /**
     * @return required if:
     *   * `type`==`radius_group`
     *   * `type`==`static_gbp`
     *     if from matching radius_group
     * 
     */
    public Optional<Output<String>> radiusGroup() {
        return Optional.ofNullable(this.radiusGroup);
    }

    /**
     * if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any
     * 
     */
    @Import(name="specs")
    private @Nullable Output<List<NetworktemplateAclTagsSpecArgs>> specs;

    /**
     * @return if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any
     * 
     */
    public Optional<Output<List<NetworktemplateAclTagsSpecArgs>>> specs() {
        return Optional.ofNullable(this.specs);
    }

    /**
     * if
     * - `type`==`subnet`
     * - `type`==`resource` (optional. default is `any`)
     * - `type`==`static_gbp` if from matching subnet
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<String>> subnets;

    /**
     * @return if
     * - `type`==`subnet`
     * - `type`==`resource` (optional. default is `any`)
     * - `type`==`static_gbp` if from matching subnet
     * 
     */
    public Optional<Output<List<String>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * enum:
     *   * `any`: matching anything not identified
     *   * `dynamic_gbp`: from the gbp_tag received from RADIUS
     *   * `gbp_resource`: can only be used in `dst_tags`
     *   * `mac`
     *   * `network`
     *   * `radius_group`
     *   * `resource`: can only be used in `dst_tags`
     *   * `static_gbp`: applying gbp tag against matching conditions
     *   * `subnet`&#39;
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return enum:
     *   * `any`: matching anything not identified
     *   * `dynamic_gbp`: from the gbp_tag received from RADIUS
     *   * `gbp_resource`: can only be used in `dst_tags`
     *   * `mac`
     *   * `network`
     *   * `radius_group`
     *   * `resource`: can only be used in `dst_tags`
     *   * `static_gbp`: applying gbp tag against matching conditions
     *   * `subnet`&#39;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NetworktemplateAclTagsArgs() {}

    private NetworktemplateAclTagsArgs(NetworktemplateAclTagsArgs $) {
        this.gbpTag = $.gbpTag;
        this.macs = $.macs;
        this.network = $.network;
        this.radiusGroup = $.radiusGroup;
        this.specs = $.specs;
        this.subnets = $.subnets;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworktemplateAclTagsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworktemplateAclTagsArgs $;

        public Builder() {
            $ = new NetworktemplateAclTagsArgs();
        }

        public Builder(NetworktemplateAclTagsArgs defaults) {
            $ = new NetworktemplateAclTagsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gbpTag required if
         *   - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
         *   - `type`==`gbp_resource`
         *   - `type`==`static_gbp` (applying gbp tag against matching conditions)
         * 
         * @return builder
         * 
         */
        public Builder gbpTag(@Nullable Output<Integer> gbpTag) {
            $.gbpTag = gbpTag;
            return this;
        }

        /**
         * @param gbpTag required if
         *   - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
         *   - `type`==`gbp_resource`
         *   - `type`==`static_gbp` (applying gbp tag against matching conditions)
         * 
         * @return builder
         * 
         */
        public Builder gbpTag(Integer gbpTag) {
            return gbpTag(Output.of(gbpTag));
        }

        /**
         * @param macs required if
         * - `type`==`mac`
         * - `type`==`static_gbp` if from matching mac
         * 
         * @return builder
         * 
         */
        public Builder macs(@Nullable Output<List<String>> macs) {
            $.macs = macs;
            return this;
        }

        /**
         * @param macs required if
         * - `type`==`mac`
         * - `type`==`static_gbp` if from matching mac
         * 
         * @return builder
         * 
         */
        public Builder macs(List<String> macs) {
            return macs(Output.of(macs));
        }

        /**
         * @param macs required if
         * - `type`==`mac`
         * - `type`==`static_gbp` if from matching mac
         * 
         * @return builder
         * 
         */
        public Builder macs(String... macs) {
            return macs(List.of(macs));
        }

        /**
         * @param network if:
         *   * `type`==`mac` (optional. default is `any`)
         *   * `type`==`subnet` (optional. default is `any`)
         *   * `type`==`network`
         *   * `type`==`resource` (optional. default is `any`)
         *   * `type`==`static_gbp` if from matching network (vlan)&#39;
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network if:
         *   * `type`==`mac` (optional. default is `any`)
         *   * `type`==`subnet` (optional. default is `any`)
         *   * `type`==`network`
         *   * `type`==`resource` (optional. default is `any`)
         *   * `type`==`static_gbp` if from matching network (vlan)&#39;
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param radiusGroup required if:
         *   * `type`==`radius_group`
         *   * `type`==`static_gbp`
         *     if from matching radius_group
         * 
         * @return builder
         * 
         */
        public Builder radiusGroup(@Nullable Output<String> radiusGroup) {
            $.radiusGroup = radiusGroup;
            return this;
        }

        /**
         * @param radiusGroup required if:
         *   * `type`==`radius_group`
         *   * `type`==`static_gbp`
         *     if from matching radius_group
         * 
         * @return builder
         * 
         */
        public Builder radiusGroup(String radiusGroup) {
            return radiusGroup(Output.of(radiusGroup));
        }

        /**
         * @param specs if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any
         * 
         * @return builder
         * 
         */
        public Builder specs(@Nullable Output<List<NetworktemplateAclTagsSpecArgs>> specs) {
            $.specs = specs;
            return this;
        }

        /**
         * @param specs if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any
         * 
         * @return builder
         * 
         */
        public Builder specs(List<NetworktemplateAclTagsSpecArgs> specs) {
            return specs(Output.of(specs));
        }

        /**
         * @param specs if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any
         * 
         * @return builder
         * 
         */
        public Builder specs(NetworktemplateAclTagsSpecArgs... specs) {
            return specs(List.of(specs));
        }

        /**
         * @param subnets if
         * - `type`==`subnet`
         * - `type`==`resource` (optional. default is `any`)
         * - `type`==`static_gbp` if from matching subnet
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets if
         * - `type`==`subnet`
         * - `type`==`resource` (optional. default is `any`)
         * - `type`==`static_gbp` if from matching subnet
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets if
         * - `type`==`subnet`
         * - `type`==`resource` (optional. default is `any`)
         * - `type`==`static_gbp` if from matching subnet
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        /**
         * @param type enum:
         *   * `any`: matching anything not identified
         *   * `dynamic_gbp`: from the gbp_tag received from RADIUS
         *   * `gbp_resource`: can only be used in `dst_tags`
         *   * `mac`
         *   * `network`
         *   * `radius_group`
         *   * `resource`: can only be used in `dst_tags`
         *   * `static_gbp`: applying gbp tag against matching conditions
         *   * `subnet`&#39;
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type enum:
         *   * `any`: matching anything not identified
         *   * `dynamic_gbp`: from the gbp_tag received from RADIUS
         *   * `gbp_resource`: can only be used in `dst_tags`
         *   * `mac`
         *   * `network`
         *   * `radius_group`
         *   * `resource`: can only be used in `dst_tags`
         *   * `static_gbp`: applying gbp tag against matching conditions
         *   * `subnet`&#39;
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NetworktemplateAclTagsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NetworktemplateAclTagsArgs", "type");
            }
            return $;
        }
    }

}
