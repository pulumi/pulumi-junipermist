// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.outputs.GatewaytemplateTunnelConfigsAutoProvisionLatlng;
import com.pulumi.junipermist.org.outputs.GatewaytemplateTunnelConfigsAutoProvisionPrimary;
import com.pulumi.junipermist.org.outputs.GatewaytemplateTunnelConfigsAutoProvisionSecondary;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GatewaytemplateTunnelConfigsAutoProvision {
    /**
     * @return Enable auto provisioning for the tunnel. If enabled, the `primary` and `secondary` nodes will be ignored.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return API override for POP selection
     * 
     */
    private @Nullable GatewaytemplateTunnelConfigsAutoProvisionLatlng latlng;
    private @Nullable GatewaytemplateTunnelConfigsAutoProvisionPrimary primary;
    /**
     * @return enum: `jse-ipsec`, `zscaler-ipsec`
     * 
     */
    private String provider;
    /**
     * @return API override for POP selection in the case user wants to override the auto discovery of remote network location and force the tunnel to use the specified peer location.
     * 
     */
    private @Nullable String region;
    private @Nullable GatewaytemplateTunnelConfigsAutoProvisionSecondary secondary;
    /**
     * @return if `provider`==`prisma-ipsec`. By default, we&#39;ll use the location of the site to determine the optimal Remote Network location, optionally, service_connection can be considered, then we&#39;ll also consider this along with the site location. Define service_connection if the traffic is to be routed to a specific service connection. This field takes a service connection name that is configured in the Prisma cloud, Prisma Access Setup &gt; Service Connections.
     * 
     */
    private @Nullable String serviceConnection;

    private GatewaytemplateTunnelConfigsAutoProvision() {}
    /**
     * @return Enable auto provisioning for the tunnel. If enabled, the `primary` and `secondary` nodes will be ignored.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return API override for POP selection
     * 
     */
    public Optional<GatewaytemplateTunnelConfigsAutoProvisionLatlng> latlng() {
        return Optional.ofNullable(this.latlng);
    }
    public Optional<GatewaytemplateTunnelConfigsAutoProvisionPrimary> primary() {
        return Optional.ofNullable(this.primary);
    }
    /**
     * @return enum: `jse-ipsec`, `zscaler-ipsec`
     * 
     */
    public String provider() {
        return this.provider;
    }
    /**
     * @return API override for POP selection in the case user wants to override the auto discovery of remote network location and force the tunnel to use the specified peer location.
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Optional<GatewaytemplateTunnelConfigsAutoProvisionSecondary> secondary() {
        return Optional.ofNullable(this.secondary);
    }
    /**
     * @return if `provider`==`prisma-ipsec`. By default, we&#39;ll use the location of the site to determine the optimal Remote Network location, optionally, service_connection can be considered, then we&#39;ll also consider this along with the site location. Define service_connection if the traffic is to be routed to a specific service connection. This field takes a service connection name that is configured in the Prisma cloud, Prisma Access Setup &gt; Service Connections.
     * 
     */
    public Optional<String> serviceConnection() {
        return Optional.ofNullable(this.serviceConnection);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GatewaytemplateTunnelConfigsAutoProvision defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable GatewaytemplateTunnelConfigsAutoProvisionLatlng latlng;
        private @Nullable GatewaytemplateTunnelConfigsAutoProvisionPrimary primary;
        private String provider;
        private @Nullable String region;
        private @Nullable GatewaytemplateTunnelConfigsAutoProvisionSecondary secondary;
        private @Nullable String serviceConnection;
        public Builder() {}
        public Builder(GatewaytemplateTunnelConfigsAutoProvision defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.latlng = defaults.latlng;
    	      this.primary = defaults.primary;
    	      this.provider = defaults.provider;
    	      this.region = defaults.region;
    	      this.secondary = defaults.secondary;
    	      this.serviceConnection = defaults.serviceConnection;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder latlng(@Nullable GatewaytemplateTunnelConfigsAutoProvisionLatlng latlng) {

            this.latlng = latlng;
            return this;
        }
        @CustomType.Setter
        public Builder primary(@Nullable GatewaytemplateTunnelConfigsAutoProvisionPrimary primary) {

            this.primary = primary;
            return this;
        }
        @CustomType.Setter
        public Builder provider(String provider) {
            if (provider == null) {
              throw new MissingRequiredPropertyException("GatewaytemplateTunnelConfigsAutoProvision", "provider");
            }
            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secondary(@Nullable GatewaytemplateTunnelConfigsAutoProvisionSecondary secondary) {

            this.secondary = secondary;
            return this;
        }
        @CustomType.Setter
        public Builder serviceConnection(@Nullable String serviceConnection) {

            this.serviceConnection = serviceConnection;
            return this;
        }
        public GatewaytemplateTunnelConfigsAutoProvision build() {
            final var _resultValue = new GatewaytemplateTunnelConfigsAutoProvision();
            _resultValue.enabled = enabled;
            _resultValue.latlng = latlng;
            _resultValue.primary = primary;
            _resultValue.provider = provider;
            _resultValue.region = region;
            _resultValue.secondary = secondary;
            _resultValue.serviceConnection = serviceConnection;
            return _resultValue;
        }
    }
}
