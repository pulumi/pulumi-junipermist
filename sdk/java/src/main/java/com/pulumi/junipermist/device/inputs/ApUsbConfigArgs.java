// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApUsbConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApUsbConfigArgs Empty = new ApUsbConfigArgs();

    /**
     * only if `type`==`imagotag`
     * 
     */
    @Import(name="cacert")
    private @Nullable Output<String> cacert;

    /**
     * @return only if `type`==`imagotag`
     * 
     */
    public Optional<Output<String>> cacert() {
        return Optional.ofNullable(this.cacert);
    }

    /**
     * only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
     * 
     */
    @Import(name="channel")
    private @Nullable Output<Integer> channel;

    /**
     * @return only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
     * 
     */
    public Optional<Output<Integer>> channel() {
        return Optional.ofNullable(this.channel);
    }

    /**
     * whether to enable any usb config
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return whether to enable any usb config
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * only if `type`==`imagotag`
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return only if `type`==`imagotag`
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * only if `type`==`imagotag`
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return only if `type`==`imagotag`
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * usb config type. enum: `hanshow`, `imagotag`, `solum`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return usb config type. enum: `hanshow`, `imagotag`, `solum`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * only if `type`==`imagotag`, whether to turn on SSL verification
     * 
     */
    @Import(name="verifyCert")
    private @Nullable Output<Boolean> verifyCert;

    /**
     * @return only if `type`==`imagotag`, whether to turn on SSL verification
     * 
     */
    public Optional<Output<Boolean>> verifyCert() {
        return Optional.ofNullable(this.verifyCert);
    }

    /**
     * only if `type`==`solum` or `type`==`hanshow`
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return only if `type`==`solum` or `type`==`hanshow`
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    private ApUsbConfigArgs() {}

    private ApUsbConfigArgs(ApUsbConfigArgs $) {
        this.cacert = $.cacert;
        this.channel = $.channel;
        this.enabled = $.enabled;
        this.host = $.host;
        this.port = $.port;
        this.type = $.type;
        this.verifyCert = $.verifyCert;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApUsbConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApUsbConfigArgs $;

        public Builder() {
            $ = new ApUsbConfigArgs();
        }

        public Builder(ApUsbConfigArgs defaults) {
            $ = new ApUsbConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacert only if `type`==`imagotag`
         * 
         * @return builder
         * 
         */
        public Builder cacert(@Nullable Output<String> cacert) {
            $.cacert = cacert;
            return this;
        }

        /**
         * @param cacert only if `type`==`imagotag`
         * 
         * @return builder
         * 
         */
        public Builder cacert(String cacert) {
            return cacert(Output.of(cacert));
        }

        /**
         * @param channel only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
         * 
         * @return builder
         * 
         */
        public Builder channel(@Nullable Output<Integer> channel) {
            $.channel = channel;
            return this;
        }

        /**
         * @param channel only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
         * 
         * @return builder
         * 
         */
        public Builder channel(Integer channel) {
            return channel(Output.of(channel));
        }

        /**
         * @param enabled whether to enable any usb config
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled whether to enable any usb config
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param host only if `type`==`imagotag`
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host only if `type`==`imagotag`
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param port only if `type`==`imagotag`
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port only if `type`==`imagotag`
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param type usb config type. enum: `hanshow`, `imagotag`, `solum`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type usb config type. enum: `hanshow`, `imagotag`, `solum`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param verifyCert only if `type`==`imagotag`, whether to turn on SSL verification
         * 
         * @return builder
         * 
         */
        public Builder verifyCert(@Nullable Output<Boolean> verifyCert) {
            $.verifyCert = verifyCert;
            return this;
        }

        /**
         * @param verifyCert only if `type`==`imagotag`, whether to turn on SSL verification
         * 
         * @return builder
         * 
         */
        public Builder verifyCert(Boolean verifyCert) {
            return verifyCert(Output.of(verifyCert));
        }

        /**
         * @param vlanId only if `type`==`solum` or `type`==`hanshow`
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId only if `type`==`solum` or `type`==`hanshow`
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public ApUsbConfigArgs build() {
            return $;
        }
    }

}
