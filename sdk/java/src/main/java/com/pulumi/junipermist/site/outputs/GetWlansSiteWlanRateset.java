// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWlansSiteWlanRateset {
    /**
     * @return If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
     * 
     */
    private String ht;
    /**
     * @return If `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values
     * 
     */
    private List<String> legacies;
    /**
     * @return Minimum RSSI for client to connect, 0 means not enforcing
     * 
     */
    private Integer minRssi;
    /**
     * @return Data Rates template to apply. enum:
     *   * `no-legacy`: no 11b
     *   * `compatible`: all, like before, default setting that Broadcom/Atheros used
     *   * `legacy-only`: disable 802.11n and 802.11ac
     *   * `high-density`: no 11b, no low rates
     *   * `custom`: user defined
     * 
     */
    private String template;
    /**
     * @return If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
     * 
     */
    private String vht;

    private GetWlansSiteWlanRateset() {}
    /**
     * @return If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
     * 
     */
    public String ht() {
        return this.ht;
    }
    /**
     * @return If `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values
     * 
     */
    public List<String> legacies() {
        return this.legacies;
    }
    /**
     * @return Minimum RSSI for client to connect, 0 means not enforcing
     * 
     */
    public Integer minRssi() {
        return this.minRssi;
    }
    /**
     * @return Data Rates template to apply. enum:
     *   * `no-legacy`: no 11b
     *   * `compatible`: all, like before, default setting that Broadcom/Atheros used
     *   * `legacy-only`: disable 802.11n and 802.11ac
     *   * `high-density`: no 11b, no low rates
     *   * `custom`: user defined
     * 
     */
    public String template() {
        return this.template;
    }
    /**
     * @return If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
     * 
     */
    public String vht() {
        return this.vht;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlansSiteWlanRateset defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ht;
        private List<String> legacies;
        private Integer minRssi;
        private String template;
        private String vht;
        public Builder() {}
        public Builder(GetWlansSiteWlanRateset defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ht = defaults.ht;
    	      this.legacies = defaults.legacies;
    	      this.minRssi = defaults.minRssi;
    	      this.template = defaults.template;
    	      this.vht = defaults.vht;
        }

        @CustomType.Setter
        public Builder ht(String ht) {
            if (ht == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanRateset", "ht");
            }
            this.ht = ht;
            return this;
        }
        @CustomType.Setter
        public Builder legacies(List<String> legacies) {
            if (legacies == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanRateset", "legacies");
            }
            this.legacies = legacies;
            return this;
        }
        public Builder legacies(String... legacies) {
            return legacies(List.of(legacies));
        }
        @CustomType.Setter
        public Builder minRssi(Integer minRssi) {
            if (minRssi == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanRateset", "minRssi");
            }
            this.minRssi = minRssi;
            return this;
        }
        @CustomType.Setter
        public Builder template(String template) {
            if (template == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanRateset", "template");
            }
            this.template = template;
            return this;
        }
        @CustomType.Setter
        public Builder vht(String vht) {
            if (vht == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanRateset", "vht");
            }
            this.vht = vht;
            return this;
        }
        public GetWlansSiteWlanRateset build() {
            final var _resultValue = new GetWlansSiteWlanRateset();
            _resultValue.ht = ht;
            _resultValue.legacies = legacies;
            _resultValue.minRssi = minRssi;
            _resultValue.template = template;
            _resultValue.vht = vht;
            return _resultValue;
        }
    }
}
