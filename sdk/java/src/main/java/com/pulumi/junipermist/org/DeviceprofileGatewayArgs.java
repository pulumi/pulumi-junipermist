// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayBgpConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayDhcpdConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayExtraRoutes6Args;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayExtraRoutesArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayIdpProfilesArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayIpConfigsArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayNetworkArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayOobIpConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayPathPreferencesArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayPortConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayRoutingPoliciesArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayServicePolicyArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayTunnelConfigsArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayTunnelProviderOptionsArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayVrfConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayVrfInstancesArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceprofileGatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceprofileGatewayArgs Empty = new DeviceprofileGatewayArgs();

    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     * 
     */
    @Import(name="additionalConfigCmds")
    private @Nullable Output<List<String>> additionalConfigCmds;

    /**
     * @return additional CLI commands to append to the generated Junos config **Note**: no check is done
     * 
     */
    public Optional<Output<List<String>>> additionalConfigCmds() {
        return Optional.ofNullable(this.additionalConfigCmds);
    }

    @Import(name="bgpConfig")
    private @Nullable Output<Map<String,DeviceprofileGatewayBgpConfigArgs>> bgpConfig;

    public Optional<Output<Map<String,DeviceprofileGatewayBgpConfigArgs>>> bgpConfig() {
        return Optional.ofNullable(this.bgpConfig);
    }

    @Import(name="createdTime")
    private @Nullable Output<Double> createdTime;

    public Optional<Output<Double>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    @Import(name="dhcpdConfig")
    private @Nullable Output<DeviceprofileGatewayDhcpdConfigArgs> dhcpdConfig;

    public Optional<Output<DeviceprofileGatewayDhcpdConfigArgs>> dhcpdConfig() {
        return Optional.ofNullable(this.dhcpdConfig);
    }

    @Import(name="dnsOverride")
    private @Nullable Output<Boolean> dnsOverride;

    public Optional<Output<Boolean>> dnsOverride() {
        return Optional.ofNullable(this.dnsOverride);
    }

    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    @Import(name="dnsSuffixes")
    private @Nullable Output<List<String>> dnsSuffixes;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    public Optional<Output<List<String>>> dnsSuffixes() {
        return Optional.ofNullable(this.dnsSuffixes);
    }

    /**
     * Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;)
     * 
     */
    @Import(name="extraRoutes")
    private @Nullable Output<Map<String,DeviceprofileGatewayExtraRoutesArgs>> extraRoutes;

    /**
     * @return Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;)
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayExtraRoutesArgs>>> extraRoutes() {
        return Optional.ofNullable(this.extraRoutes);
    }

    /**
     * Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    @Import(name="extraRoutes6")
    private @Nullable Output<Map<String,DeviceprofileGatewayExtraRoutes6Args>> extraRoutes6;

    /**
     * @return Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayExtraRoutes6Args>>> extraRoutes6() {
        return Optional.ofNullable(this.extraRoutes6);
    }

    /**
     * Property key is the profile name
     * 
     */
    @Import(name="idpProfiles")
    private @Nullable Output<Map<String,DeviceprofileGatewayIdpProfilesArgs>> idpProfiles;

    /**
     * @return Property key is the profile name
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayIdpProfilesArgs>>> idpProfiles() {
        return Optional.ofNullable(this.idpProfiles);
    }

    /**
     * Property key is the network name
     * 
     */
    @Import(name="ipConfigs")
    private @Nullable Output<Map<String,DeviceprofileGatewayIpConfigsArgs>> ipConfigs;

    /**
     * @return Property key is the network name
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayIpConfigsArgs>>> ipConfigs() {
        return Optional.ofNullable(this.ipConfigs);
    }

    @Import(name="modifiedTime")
    private @Nullable Output<Double> modifiedTime;

    public Optional<Output<Double>> modifiedTime() {
        return Optional.ofNullable(this.modifiedTime);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networks")
    private @Nullable Output<List<DeviceprofileGatewayNetworkArgs>> networks;

    public Optional<Output<List<DeviceprofileGatewayNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    @Import(name="ntpOverride")
    private @Nullable Output<Boolean> ntpOverride;

    public Optional<Output<Boolean>> ntpOverride() {
        return Optional.ofNullable(this.ntpOverride);
    }

    /**
     * list of NTP servers specific to this device. By default, those in Site Settings will be used
     * 
     */
    @Import(name="ntpServers")
    private @Nullable Output<List<String>> ntpServers;

    /**
     * @return list of NTP servers specific to this device. By default, those in Site Settings will be used
     * 
     */
    public Optional<Output<List<String>>> ntpServers() {
        return Optional.ofNullable(this.ntpServers);
    }

    /**
     * out-of-band (vme/em0/fxp0) IP config
     * 
     */
    @Import(name="oobIpConfig")
    private @Nullable Output<DeviceprofileGatewayOobIpConfigArgs> oobIpConfig;

    /**
     * @return out-of-band (vme/em0/fxp0) IP config
     * 
     */
    public Optional<Output<DeviceprofileGatewayOobIpConfigArgs>> oobIpConfig() {
        return Optional.ofNullable(this.oobIpConfig);
    }

    @Import(name="orgId", required=true)
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Property key is the path name
     * 
     */
    @Import(name="pathPreferences")
    private @Nullable Output<Map<String,DeviceprofileGatewayPathPreferencesArgs>> pathPreferences;

    /**
     * @return Property key is the path name
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayPathPreferencesArgs>>> pathPreferences() {
        return Optional.ofNullable(this.pathPreferences);
    }

    /**
     * Property key is the port(s) name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    @Import(name="portConfig")
    private @Nullable Output<Map<String,DeviceprofileGatewayPortConfigArgs>> portConfig;

    /**
     * @return Property key is the port(s) name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayPortConfigArgs>>> portConfig() {
        return Optional.ofNullable(this.portConfig);
    }

    /**
     * auto assigned if not set
     * 
     */
    @Import(name="routerId")
    private @Nullable Output<String> routerId;

    /**
     * @return auto assigned if not set
     * 
     */
    public Optional<Output<String>> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    /**
     * Property key is the routing policy name
     * 
     */
    @Import(name="routingPolicies")
    private @Nullable Output<Map<String,DeviceprofileGatewayRoutingPoliciesArgs>> routingPolicies;

    /**
     * @return Property key is the routing policy name
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayRoutingPoliciesArgs>>> routingPolicies() {
        return Optional.ofNullable(this.routingPolicies);
    }

    @Import(name="servicePolicies")
    private @Nullable Output<List<DeviceprofileGatewayServicePolicyArgs>> servicePolicies;

    public Optional<Output<List<DeviceprofileGatewayServicePolicyArgs>>> servicePolicies() {
        return Optional.ofNullable(this.servicePolicies);
    }

    /**
     * Property key is the tunnel name
     * 
     */
    @Import(name="tunnelConfigs")
    private @Nullable Output<Map<String,DeviceprofileGatewayTunnelConfigsArgs>> tunnelConfigs;

    /**
     * @return Property key is the tunnel name
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayTunnelConfigsArgs>>> tunnelConfigs() {
        return Optional.ofNullable(this.tunnelConfigs);
    }

    @Import(name="tunnelProviderOptions")
    private @Nullable Output<DeviceprofileGatewayTunnelProviderOptionsArgs> tunnelProviderOptions;

    public Optional<Output<DeviceprofileGatewayTunnelProviderOptionsArgs>> tunnelProviderOptions() {
        return Optional.ofNullable(this.tunnelProviderOptions);
    }

    @Import(name="vrfConfig")
    private @Nullable Output<DeviceprofileGatewayVrfConfigArgs> vrfConfig;

    public Optional<Output<DeviceprofileGatewayVrfConfigArgs>> vrfConfig() {
        return Optional.ofNullable(this.vrfConfig);
    }

    /**
     * Property key is the network name
     * 
     */
    @Import(name="vrfInstances")
    private @Nullable Output<Map<String,DeviceprofileGatewayVrfInstancesArgs>> vrfInstances;

    /**
     * @return Property key is the network name
     * 
     */
    public Optional<Output<Map<String,DeviceprofileGatewayVrfInstancesArgs>>> vrfInstances() {
        return Optional.ofNullable(this.vrfInstances);
    }

    private DeviceprofileGatewayArgs() {}

    private DeviceprofileGatewayArgs(DeviceprofileGatewayArgs $) {
        this.additionalConfigCmds = $.additionalConfigCmds;
        this.bgpConfig = $.bgpConfig;
        this.createdTime = $.createdTime;
        this.dhcpdConfig = $.dhcpdConfig;
        this.dnsOverride = $.dnsOverride;
        this.dnsServers = $.dnsServers;
        this.dnsSuffixes = $.dnsSuffixes;
        this.extraRoutes = $.extraRoutes;
        this.extraRoutes6 = $.extraRoutes6;
        this.idpProfiles = $.idpProfiles;
        this.ipConfigs = $.ipConfigs;
        this.modifiedTime = $.modifiedTime;
        this.name = $.name;
        this.networks = $.networks;
        this.ntpOverride = $.ntpOverride;
        this.ntpServers = $.ntpServers;
        this.oobIpConfig = $.oobIpConfig;
        this.orgId = $.orgId;
        this.pathPreferences = $.pathPreferences;
        this.portConfig = $.portConfig;
        this.routerId = $.routerId;
        this.routingPolicies = $.routingPolicies;
        this.servicePolicies = $.servicePolicies;
        this.tunnelConfigs = $.tunnelConfigs;
        this.tunnelProviderOptions = $.tunnelProviderOptions;
        this.vrfConfig = $.vrfConfig;
        this.vrfInstances = $.vrfInstances;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceprofileGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceprofileGatewayArgs $;

        public Builder() {
            $ = new DeviceprofileGatewayArgs();
        }

        public Builder(DeviceprofileGatewayArgs defaults) {
            $ = new DeviceprofileGatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(@Nullable Output<List<String>> additionalConfigCmds) {
            $.additionalConfigCmds = additionalConfigCmds;
            return this;
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(List<String> additionalConfigCmds) {
            return additionalConfigCmds(Output.of(additionalConfigCmds));
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(String... additionalConfigCmds) {
            return additionalConfigCmds(List.of(additionalConfigCmds));
        }

        public Builder bgpConfig(@Nullable Output<Map<String,DeviceprofileGatewayBgpConfigArgs>> bgpConfig) {
            $.bgpConfig = bgpConfig;
            return this;
        }

        public Builder bgpConfig(Map<String,DeviceprofileGatewayBgpConfigArgs> bgpConfig) {
            return bgpConfig(Output.of(bgpConfig));
        }

        public Builder createdTime(@Nullable Output<Double> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        public Builder createdTime(Double createdTime) {
            return createdTime(Output.of(createdTime));
        }

        public Builder dhcpdConfig(@Nullable Output<DeviceprofileGatewayDhcpdConfigArgs> dhcpdConfig) {
            $.dhcpdConfig = dhcpdConfig;
            return this;
        }

        public Builder dhcpdConfig(DeviceprofileGatewayDhcpdConfigArgs dhcpdConfig) {
            return dhcpdConfig(Output.of(dhcpdConfig));
        }

        public Builder dnsOverride(@Nullable Output<Boolean> dnsOverride) {
            $.dnsOverride = dnsOverride;
            return this;
        }

        public Builder dnsOverride(Boolean dnsOverride) {
            return dnsOverride(Output.of(dnsOverride));
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(@Nullable Output<List<String>> dnsSuffixes) {
            $.dnsSuffixes = dnsSuffixes;
            return this;
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(List<String> dnsSuffixes) {
            return dnsSuffixes(Output.of(dnsSuffixes));
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(String... dnsSuffixes) {
            return dnsSuffixes(List.of(dnsSuffixes));
        }

        /**
         * @param extraRoutes Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes(@Nullable Output<Map<String,DeviceprofileGatewayExtraRoutesArgs>> extraRoutes) {
            $.extraRoutes = extraRoutes;
            return this;
        }

        /**
         * @param extraRoutes Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes(Map<String,DeviceprofileGatewayExtraRoutesArgs> extraRoutes) {
            return extraRoutes(Output.of(extraRoutes));
        }

        /**
         * @param extraRoutes6 Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes6(@Nullable Output<Map<String,DeviceprofileGatewayExtraRoutes6Args>> extraRoutes6) {
            $.extraRoutes6 = extraRoutes6;
            return this;
        }

        /**
         * @param extraRoutes6 Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes6(Map<String,DeviceprofileGatewayExtraRoutes6Args> extraRoutes6) {
            return extraRoutes6(Output.of(extraRoutes6));
        }

        /**
         * @param idpProfiles Property key is the profile name
         * 
         * @return builder
         * 
         */
        public Builder idpProfiles(@Nullable Output<Map<String,DeviceprofileGatewayIdpProfilesArgs>> idpProfiles) {
            $.idpProfiles = idpProfiles;
            return this;
        }

        /**
         * @param idpProfiles Property key is the profile name
         * 
         * @return builder
         * 
         */
        public Builder idpProfiles(Map<String,DeviceprofileGatewayIdpProfilesArgs> idpProfiles) {
            return idpProfiles(Output.of(idpProfiles));
        }

        /**
         * @param ipConfigs Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder ipConfigs(@Nullable Output<Map<String,DeviceprofileGatewayIpConfigsArgs>> ipConfigs) {
            $.ipConfigs = ipConfigs;
            return this;
        }

        /**
         * @param ipConfigs Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder ipConfigs(Map<String,DeviceprofileGatewayIpConfigsArgs> ipConfigs) {
            return ipConfigs(Output.of(ipConfigs));
        }

        public Builder modifiedTime(@Nullable Output<Double> modifiedTime) {
            $.modifiedTime = modifiedTime;
            return this;
        }

        public Builder modifiedTime(Double modifiedTime) {
            return modifiedTime(Output.of(modifiedTime));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networks(@Nullable Output<List<DeviceprofileGatewayNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        public Builder networks(List<DeviceprofileGatewayNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        public Builder networks(DeviceprofileGatewayNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        public Builder ntpOverride(@Nullable Output<Boolean> ntpOverride) {
            $.ntpOverride = ntpOverride;
            return this;
        }

        public Builder ntpOverride(Boolean ntpOverride) {
            return ntpOverride(Output.of(ntpOverride));
        }

        /**
         * @param ntpServers list of NTP servers specific to this device. By default, those in Site Settings will be used
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(@Nullable Output<List<String>> ntpServers) {
            $.ntpServers = ntpServers;
            return this;
        }

        /**
         * @param ntpServers list of NTP servers specific to this device. By default, those in Site Settings will be used
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(List<String> ntpServers) {
            return ntpServers(Output.of(ntpServers));
        }

        /**
         * @param ntpServers list of NTP servers specific to this device. By default, those in Site Settings will be used
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }

        /**
         * @param oobIpConfig out-of-band (vme/em0/fxp0) IP config
         * 
         * @return builder
         * 
         */
        public Builder oobIpConfig(@Nullable Output<DeviceprofileGatewayOobIpConfigArgs> oobIpConfig) {
            $.oobIpConfig = oobIpConfig;
            return this;
        }

        /**
         * @param oobIpConfig out-of-band (vme/em0/fxp0) IP config
         * 
         * @return builder
         * 
         */
        public Builder oobIpConfig(DeviceprofileGatewayOobIpConfigArgs oobIpConfig) {
            return oobIpConfig(Output.of(oobIpConfig));
        }

        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param pathPreferences Property key is the path name
         * 
         * @return builder
         * 
         */
        public Builder pathPreferences(@Nullable Output<Map<String,DeviceprofileGatewayPathPreferencesArgs>> pathPreferences) {
            $.pathPreferences = pathPreferences;
            return this;
        }

        /**
         * @param pathPreferences Property key is the path name
         * 
         * @return builder
         * 
         */
        public Builder pathPreferences(Map<String,DeviceprofileGatewayPathPreferencesArgs> pathPreferences) {
            return pathPreferences(Output.of(pathPreferences));
        }

        /**
         * @param portConfig Property key is the port(s) name or range (e.g. &#34;ge-0/0/0-10&#34;)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(@Nullable Output<Map<String,DeviceprofileGatewayPortConfigArgs>> portConfig) {
            $.portConfig = portConfig;
            return this;
        }

        /**
         * @param portConfig Property key is the port(s) name or range (e.g. &#34;ge-0/0/0-10&#34;)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(Map<String,DeviceprofileGatewayPortConfigArgs> portConfig) {
            return portConfig(Output.of(portConfig));
        }

        /**
         * @param routerId auto assigned if not set
         * 
         * @return builder
         * 
         */
        public Builder routerId(@Nullable Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerId auto assigned if not set
         * 
         * @return builder
         * 
         */
        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        /**
         * @param routingPolicies Property key is the routing policy name
         * 
         * @return builder
         * 
         */
        public Builder routingPolicies(@Nullable Output<Map<String,DeviceprofileGatewayRoutingPoliciesArgs>> routingPolicies) {
            $.routingPolicies = routingPolicies;
            return this;
        }

        /**
         * @param routingPolicies Property key is the routing policy name
         * 
         * @return builder
         * 
         */
        public Builder routingPolicies(Map<String,DeviceprofileGatewayRoutingPoliciesArgs> routingPolicies) {
            return routingPolicies(Output.of(routingPolicies));
        }

        public Builder servicePolicies(@Nullable Output<List<DeviceprofileGatewayServicePolicyArgs>> servicePolicies) {
            $.servicePolicies = servicePolicies;
            return this;
        }

        public Builder servicePolicies(List<DeviceprofileGatewayServicePolicyArgs> servicePolicies) {
            return servicePolicies(Output.of(servicePolicies));
        }

        public Builder servicePolicies(DeviceprofileGatewayServicePolicyArgs... servicePolicies) {
            return servicePolicies(List.of(servicePolicies));
        }

        /**
         * @param tunnelConfigs Property key is the tunnel name
         * 
         * @return builder
         * 
         */
        public Builder tunnelConfigs(@Nullable Output<Map<String,DeviceprofileGatewayTunnelConfigsArgs>> tunnelConfigs) {
            $.tunnelConfigs = tunnelConfigs;
            return this;
        }

        /**
         * @param tunnelConfigs Property key is the tunnel name
         * 
         * @return builder
         * 
         */
        public Builder tunnelConfigs(Map<String,DeviceprofileGatewayTunnelConfigsArgs> tunnelConfigs) {
            return tunnelConfigs(Output.of(tunnelConfigs));
        }

        public Builder tunnelProviderOptions(@Nullable Output<DeviceprofileGatewayTunnelProviderOptionsArgs> tunnelProviderOptions) {
            $.tunnelProviderOptions = tunnelProviderOptions;
            return this;
        }

        public Builder tunnelProviderOptions(DeviceprofileGatewayTunnelProviderOptionsArgs tunnelProviderOptions) {
            return tunnelProviderOptions(Output.of(tunnelProviderOptions));
        }

        public Builder vrfConfig(@Nullable Output<DeviceprofileGatewayVrfConfigArgs> vrfConfig) {
            $.vrfConfig = vrfConfig;
            return this;
        }

        public Builder vrfConfig(DeviceprofileGatewayVrfConfigArgs vrfConfig) {
            return vrfConfig(Output.of(vrfConfig));
        }

        /**
         * @param vrfInstances Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder vrfInstances(@Nullable Output<Map<String,DeviceprofileGatewayVrfInstancesArgs>> vrfInstances) {
            $.vrfInstances = vrfInstances;
            return this;
        }

        /**
         * @param vrfInstances Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder vrfInstances(Map<String,DeviceprofileGatewayVrfInstancesArgs> vrfInstances) {
            return vrfInstances(Output.of(vrfInstances));
        }

        public DeviceprofileGatewayArgs build() {
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("DeviceprofileGatewayArgs", "orgId");
            }
            return $;
        }
    }

}
