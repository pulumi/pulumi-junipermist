// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.junipermist.site.outputs.WlanPortalTemplatePortalTemplateLocales;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WlanPortalTemplatePortalTemplate {
    private @Nullable String accessCodeAlternateEmail;
    /**
     * @return defines alignment on portal. enum: `center`, `left`, `right`
     * 
     */
    private @Nullable String alignment;
    /**
     * @return Label for Amazon auth button
     * 
     */
    private @Nullable String authButtonAmazon;
    /**
     * @return Label for Azure auth button
     * 
     */
    private @Nullable String authButtonAzure;
    /**
     * @return Label for Email auth button
     * 
     */
    private @Nullable String authButtonEmail;
    /**
     * @return Label for Facebook auth button
     * 
     */
    private @Nullable String authButtonFacebook;
    /**
     * @return Label for Google auth button
     * 
     */
    private @Nullable String authButtonGoogle;
    /**
     * @return Label for Microsoft auth button
     * 
     */
    private @Nullable String authButtonMicrosoft;
    /**
     * @return Label for passphrase auth button
     * 
     */
    private @Nullable String authButtonPassphrase;
    /**
     * @return Label for SMS auth button
     * 
     */
    private @Nullable String authButtonSms;
    /**
     * @return Label for Sponsor auth button
     * 
     */
    private @Nullable String authButtonSponsor;
    private @Nullable String authLabel;
    /**
     * @return Label of the link to go back to /logon
     * 
     */
    private @Nullable String backLink;
    /**
     * @return Portal main color
     * 
     */
    private @Nullable String color;
    private @Nullable String colorDark;
    private @Nullable String colorLight;
    /**
     * @return Whether company field is required
     * 
     */
    private @Nullable Boolean company;
    /**
     * @return Error message when company not provided
     * 
     */
    private @Nullable String companyError;
    /**
     * @return Label of company field
     * 
     */
    private @Nullable String companyLabel;
    /**
     * @return Whether email field is required
     * 
     */
    private @Nullable Boolean email;
    /**
     * @return Error message when a user has valid social login but doesn&#39;t match specified email domains.
     * 
     */
    private @Nullable String emailAccessDomainError;
    /**
     * @return Label for cancel confirmation code submission using email auth
     * 
     */
    private @Nullable String emailCancel;
    private @Nullable String emailCodeCancel;
    private @Nullable String emailCodeError;
    private @Nullable String emailCodeFieldLabel;
    private @Nullable String emailCodeMessage;
    private @Nullable String emailCodeSubmit;
    private @Nullable String emailCodeTitle;
    /**
     * @return Error message when email not provided
     * 
     */
    private @Nullable String emailError;
    private @Nullable String emailFieldLabel;
    /**
     * @return Label of email field
     * 
     */
    private @Nullable String emailLabel;
    private @Nullable String emailMessage;
    /**
     * @return Label for confirmation code submit button using email auth
     * 
     */
    private @Nullable String emailSubmit;
    /**
     * @return Title for the Email registration
     * 
     */
    private @Nullable String emailTitle;
    /**
     * @return Whether to ask field1
     * 
     */
    private @Nullable Boolean field1;
    /**
     * @return Error message when field1 not provided
     * 
     */
    private @Nullable String field1error;
    /**
     * @return Label of field1
     * 
     */
    private @Nullable String field1label;
    /**
     * @return Whether field1 is required field
     * 
     */
    private @Nullable Boolean field1required;
    /**
     * @return Whether to ask field2
     * 
     */
    private @Nullable Boolean field2;
    /**
     * @return Error message when field2 not provided
     * 
     */
    private @Nullable String field2error;
    /**
     * @return Label of field2
     * 
     */
    private @Nullable String field2label;
    /**
     * @return Whether field2 is required field
     * 
     */
    private @Nullable Boolean field2required;
    /**
     * @return Whether to ask field3
     * 
     */
    private @Nullable Boolean field3;
    /**
     * @return Error message when field3 not provided
     * 
     */
    private @Nullable String field3error;
    /**
     * @return Label of field3
     * 
     */
    private @Nullable String field3label;
    /**
     * @return Whether field3 is required field
     * 
     */
    private @Nullable Boolean field3required;
    /**
     * @return Whether to ask field4
     * 
     */
    private @Nullable Boolean field4;
    /**
     * @return Error message when field4 not provided
     * 
     */
    private @Nullable String field4error;
    /**
     * @return Label of field4
     * 
     */
    private @Nullable String field4label;
    /**
     * @return Whether field4 is required field
     * 
     */
    private @Nullable Boolean field4required;
    /**
     * @return Can be used to localize the portal based on the User Agent. Allowed property key values are:
     *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
     *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
     *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
     *   `zh-Hans`, `zh-Hant`
     * 
     */
    private @Nullable Map<String,WlanPortalTemplatePortalTemplateLocales> locales;
    /**
     * @return path to the background image file. File must be a `png` image`
     * 
     */
    private @Nullable String logo;
    /**
     * @return label of the link to go to /marketing_policy
     * 
     */
    private @Nullable String marketingPolicyLink;
    /**
     * @return Whether marketing policy optin is enabled
     * 
     */
    private @Nullable Boolean marketingPolicyOptIn;
    /**
     * @return label for marketing optin
     * 
     */
    private @Nullable String marketingPolicyOptInLabel;
    /**
     * @return marketing policy text
     * 
     */
    private @Nullable String marketingPolicyOptInText;
    private @Nullable String message;
    private @Nullable Boolean multiAuth;
    /**
     * @return Whether name field is required
     * 
     */
    private @Nullable Boolean name;
    /**
     * @return Error message when name not provided
     * 
     */
    private @Nullable String nameError;
    /**
     * @return Label of name field
     * 
     */
    private @Nullable String nameLabel;
    /**
     * @return Default value for the `Do not store` checkbox
     * 
     */
    private @Nullable Boolean optOutDefault;
    /**
     * @return Whether to display Do Not Store My Personal Information
     * 
     */
    private @Nullable Boolean optout;
    /**
     * @return Label for Do Not Store My Personal Information
     * 
     */
    private @Nullable String optoutLabel;
    private @Nullable String pageTitle;
    /**
     * @return Label for the Passphrase cancel button
     * 
     */
    private @Nullable String passphraseCancel;
    /**
     * @return Error message when invalid passphrase is provided
     * 
     */
    private @Nullable String passphraseError;
    /**
     * @return Passphrase
     * 
     */
    private @Nullable String passphraseLabel;
    private @Nullable String passphraseMessage;
    /**
     * @return Label for the Passphrase submit button
     * 
     */
    private @Nullable String passphraseSubmit;
    /**
     * @return Title for passphrase details page
     * 
     */
    private @Nullable String passphraseTitle;
    /**
     * @return Whether to show \&#34;Powered by Mist\&#34;
     * 
     */
    private @Nullable Boolean poweredBy;
    /**
     * @return Whether to require the Privacy Term acceptance
     * 
     */
    private @Nullable Boolean privacy;
    /**
     * @return Prefix of the label of the link to go to Privacy Policy
     * 
     */
    private @Nullable String privacyPolicyAcceptLabel;
    /**
     * @return Error message when Privacy Policy not accepted
     * 
     */
    private @Nullable String privacyPolicyError;
    /**
     * @return Label of the link to go to Privacy Policy
     * 
     */
    private @Nullable String privacyPolicyLink;
    /**
     * @return Text of the Privacy Policy
     * 
     */
    private @Nullable String privacyPolicyText;
    /**
     * @return Label to denote required field
     * 
     */
    private @Nullable String requiredFieldLabel;
    private @Nullable Boolean responsiveLayout;
    /**
     * @return Label of the button to signin
     * 
     */
    private @Nullable String signInLabel;
    private @Nullable String smsCarrierDefault;
    private @Nullable String smsCarrierError;
    /**
     * @return Label for mobile carrier drop-down list
     * 
     */
    private @Nullable String smsCarrierFieldLabel;
    /**
     * @return Label for cancel confirmation code submission
     * 
     */
    private @Nullable String smsCodeCancel;
    /**
     * @return Error message when confirmation code is invalid
     * 
     */
    private @Nullable String smsCodeError;
    private @Nullable String smsCodeFieldLabel;
    private @Nullable String smsCodeMessage;
    /**
     * @return Label for confirmation code submit button
     * 
     */
    private @Nullable String smsCodeSubmit;
    private @Nullable String smsCodeTitle;
    private @Nullable String smsCountryFieldLabel;
    private @Nullable String smsCountryFormat;
    /**
     * @return Label for checkbox to specify that the user has access code
     * 
     */
    private @Nullable String smsHaveAccessCode;
    private @Nullable Boolean smsIsTwilio;
    /**
     * @return Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
     * 
     */
    private @Nullable String smsMessageFormat;
    /**
     * @return Label for canceling mobile details for SMS auth
     * 
     */
    private @Nullable String smsNumberCancel;
    private @Nullable String smsNumberError;
    /**
     * @return Label for field to provide mobile number
     * 
     */
    private @Nullable String smsNumberFieldLabel;
    private @Nullable String smsNumberFormat;
    private @Nullable String smsNumberMessage;
    /**
     * @return Label for submit button for code generation
     * 
     */
    private @Nullable String smsNumberSubmit;
    /**
     * @return Title for phone number details
     * 
     */
    private @Nullable String smsNumberTitle;
    private @Nullable String smsUsernameFormat;
    /**
     * @return How long confirmation code should be considered valid (in minutes)
     * 
     */
    private @Nullable Integer smsValidityDuration;
    private @Nullable String sponsorBackLink;
    private @Nullable String sponsorCancel;
    /**
     * @return Label for Sponsor Email
     * 
     */
    private @Nullable String sponsorEmail;
    private @Nullable String sponsorEmailError;
    /**
     * @return HTML template to replace/override default sponsor email template
     * Sponsor Email Template supports following template variables:
     *   * `approve_url`: Renders URL to approve the request; optionally &amp;minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
     *   * `deny_url`: Renders URL to reject the request
     *   * `guest_email`: Renders Email ID of the guest
     *   * `guest_name`: Renders Name of the guest
     *   * `field1`: Renders value of the Custom Field 1
     *   * `field2`: Renders value of the Custom Field 2
     *   * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
     *   * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
     * 
     */
    private @Nullable String sponsorEmailTemplate;
    private @Nullable String sponsorInfoApproved;
    private @Nullable String sponsorInfoDenied;
    private @Nullable String sponsorInfoPending;
    /**
     * @return Label for Sponsor Name
     * 
     */
    private @Nullable String sponsorName;
    private @Nullable String sponsorNameError;
    private @Nullable String sponsorNotePending;
    /**
     * @return Submit button label request Wifi Access and notify sponsor about guest request
     * 
     */
    private @Nullable String sponsorRequestAccess;
    /**
     * @return Text to display if sponsor approves request
     * 
     */
    private @Nullable String sponsorStatusApproved;
    /**
     * @return Text to display when sponsor denies request
     * 
     */
    private @Nullable String sponsorStatusDenied;
    /**
     * @return Text to display if request is still pending
     * 
     */
    private @Nullable String sponsorStatusPending;
    /**
     * @return Submit button label to notify sponsor about guest request
     * 
     */
    private @Nullable String sponsorSubmit;
    private @Nullable String sponsorsError;
    private @Nullable String sponsorsFieldLabel;
    private @Nullable Boolean tos;
    /**
     * @return Prefix of the label of the link to go to tos
     * 
     */
    private @Nullable String tosAcceptLabel;
    /**
     * @return Error message when tos not accepted
     * 
     */
    private @Nullable String tosError;
    /**
     * @return Label of the link to go to tos
     * 
     */
    private @Nullable String tosLink;
    /**
     * @return Text of the Terms of Service
     * 
     */
    private @Nullable String tosText;

    private WlanPortalTemplatePortalTemplate() {}
    public Optional<String> accessCodeAlternateEmail() {
        return Optional.ofNullable(this.accessCodeAlternateEmail);
    }
    /**
     * @return defines alignment on portal. enum: `center`, `left`, `right`
     * 
     */
    public Optional<String> alignment() {
        return Optional.ofNullable(this.alignment);
    }
    /**
     * @return Label for Amazon auth button
     * 
     */
    public Optional<String> authButtonAmazon() {
        return Optional.ofNullable(this.authButtonAmazon);
    }
    /**
     * @return Label for Azure auth button
     * 
     */
    public Optional<String> authButtonAzure() {
        return Optional.ofNullable(this.authButtonAzure);
    }
    /**
     * @return Label for Email auth button
     * 
     */
    public Optional<String> authButtonEmail() {
        return Optional.ofNullable(this.authButtonEmail);
    }
    /**
     * @return Label for Facebook auth button
     * 
     */
    public Optional<String> authButtonFacebook() {
        return Optional.ofNullable(this.authButtonFacebook);
    }
    /**
     * @return Label for Google auth button
     * 
     */
    public Optional<String> authButtonGoogle() {
        return Optional.ofNullable(this.authButtonGoogle);
    }
    /**
     * @return Label for Microsoft auth button
     * 
     */
    public Optional<String> authButtonMicrosoft() {
        return Optional.ofNullable(this.authButtonMicrosoft);
    }
    /**
     * @return Label for passphrase auth button
     * 
     */
    public Optional<String> authButtonPassphrase() {
        return Optional.ofNullable(this.authButtonPassphrase);
    }
    /**
     * @return Label for SMS auth button
     * 
     */
    public Optional<String> authButtonSms() {
        return Optional.ofNullable(this.authButtonSms);
    }
    /**
     * @return Label for Sponsor auth button
     * 
     */
    public Optional<String> authButtonSponsor() {
        return Optional.ofNullable(this.authButtonSponsor);
    }
    public Optional<String> authLabel() {
        return Optional.ofNullable(this.authLabel);
    }
    /**
     * @return Label of the link to go back to /logon
     * 
     */
    public Optional<String> backLink() {
        return Optional.ofNullable(this.backLink);
    }
    /**
     * @return Portal main color
     * 
     */
    public Optional<String> color() {
        return Optional.ofNullable(this.color);
    }
    public Optional<String> colorDark() {
        return Optional.ofNullable(this.colorDark);
    }
    public Optional<String> colorLight() {
        return Optional.ofNullable(this.colorLight);
    }
    /**
     * @return Whether company field is required
     * 
     */
    public Optional<Boolean> company() {
        return Optional.ofNullable(this.company);
    }
    /**
     * @return Error message when company not provided
     * 
     */
    public Optional<String> companyError() {
        return Optional.ofNullable(this.companyError);
    }
    /**
     * @return Label of company field
     * 
     */
    public Optional<String> companyLabel() {
        return Optional.ofNullable(this.companyLabel);
    }
    /**
     * @return Whether email field is required
     * 
     */
    public Optional<Boolean> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return Error message when a user has valid social login but doesn&#39;t match specified email domains.
     * 
     */
    public Optional<String> emailAccessDomainError() {
        return Optional.ofNullable(this.emailAccessDomainError);
    }
    /**
     * @return Label for cancel confirmation code submission using email auth
     * 
     */
    public Optional<String> emailCancel() {
        return Optional.ofNullable(this.emailCancel);
    }
    public Optional<String> emailCodeCancel() {
        return Optional.ofNullable(this.emailCodeCancel);
    }
    public Optional<String> emailCodeError() {
        return Optional.ofNullable(this.emailCodeError);
    }
    public Optional<String> emailCodeFieldLabel() {
        return Optional.ofNullable(this.emailCodeFieldLabel);
    }
    public Optional<String> emailCodeMessage() {
        return Optional.ofNullable(this.emailCodeMessage);
    }
    public Optional<String> emailCodeSubmit() {
        return Optional.ofNullable(this.emailCodeSubmit);
    }
    public Optional<String> emailCodeTitle() {
        return Optional.ofNullable(this.emailCodeTitle);
    }
    /**
     * @return Error message when email not provided
     * 
     */
    public Optional<String> emailError() {
        return Optional.ofNullable(this.emailError);
    }
    public Optional<String> emailFieldLabel() {
        return Optional.ofNullable(this.emailFieldLabel);
    }
    /**
     * @return Label of email field
     * 
     */
    public Optional<String> emailLabel() {
        return Optional.ofNullable(this.emailLabel);
    }
    public Optional<String> emailMessage() {
        return Optional.ofNullable(this.emailMessage);
    }
    /**
     * @return Label for confirmation code submit button using email auth
     * 
     */
    public Optional<String> emailSubmit() {
        return Optional.ofNullable(this.emailSubmit);
    }
    /**
     * @return Title for the Email registration
     * 
     */
    public Optional<String> emailTitle() {
        return Optional.ofNullable(this.emailTitle);
    }
    /**
     * @return Whether to ask field1
     * 
     */
    public Optional<Boolean> field1() {
        return Optional.ofNullable(this.field1);
    }
    /**
     * @return Error message when field1 not provided
     * 
     */
    public Optional<String> field1error() {
        return Optional.ofNullable(this.field1error);
    }
    /**
     * @return Label of field1
     * 
     */
    public Optional<String> field1label() {
        return Optional.ofNullable(this.field1label);
    }
    /**
     * @return Whether field1 is required field
     * 
     */
    public Optional<Boolean> field1required() {
        return Optional.ofNullable(this.field1required);
    }
    /**
     * @return Whether to ask field2
     * 
     */
    public Optional<Boolean> field2() {
        return Optional.ofNullable(this.field2);
    }
    /**
     * @return Error message when field2 not provided
     * 
     */
    public Optional<String> field2error() {
        return Optional.ofNullable(this.field2error);
    }
    /**
     * @return Label of field2
     * 
     */
    public Optional<String> field2label() {
        return Optional.ofNullable(this.field2label);
    }
    /**
     * @return Whether field2 is required field
     * 
     */
    public Optional<Boolean> field2required() {
        return Optional.ofNullable(this.field2required);
    }
    /**
     * @return Whether to ask field3
     * 
     */
    public Optional<Boolean> field3() {
        return Optional.ofNullable(this.field3);
    }
    /**
     * @return Error message when field3 not provided
     * 
     */
    public Optional<String> field3error() {
        return Optional.ofNullable(this.field3error);
    }
    /**
     * @return Label of field3
     * 
     */
    public Optional<String> field3label() {
        return Optional.ofNullable(this.field3label);
    }
    /**
     * @return Whether field3 is required field
     * 
     */
    public Optional<Boolean> field3required() {
        return Optional.ofNullable(this.field3required);
    }
    /**
     * @return Whether to ask field4
     * 
     */
    public Optional<Boolean> field4() {
        return Optional.ofNullable(this.field4);
    }
    /**
     * @return Error message when field4 not provided
     * 
     */
    public Optional<String> field4error() {
        return Optional.ofNullable(this.field4error);
    }
    /**
     * @return Label of field4
     * 
     */
    public Optional<String> field4label() {
        return Optional.ofNullable(this.field4label);
    }
    /**
     * @return Whether field4 is required field
     * 
     */
    public Optional<Boolean> field4required() {
        return Optional.ofNullable(this.field4required);
    }
    /**
     * @return Can be used to localize the portal based on the User Agent. Allowed property key values are:
     *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
     *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
     *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
     *   `zh-Hans`, `zh-Hant`
     * 
     */
    public Map<String,WlanPortalTemplatePortalTemplateLocales> locales() {
        return this.locales == null ? Map.of() : this.locales;
    }
    /**
     * @return path to the background image file. File must be a `png` image`
     * 
     */
    public Optional<String> logo() {
        return Optional.ofNullable(this.logo);
    }
    /**
     * @return label of the link to go to /marketing_policy
     * 
     */
    public Optional<String> marketingPolicyLink() {
        return Optional.ofNullable(this.marketingPolicyLink);
    }
    /**
     * @return Whether marketing policy optin is enabled
     * 
     */
    public Optional<Boolean> marketingPolicyOptIn() {
        return Optional.ofNullable(this.marketingPolicyOptIn);
    }
    /**
     * @return label for marketing optin
     * 
     */
    public Optional<String> marketingPolicyOptInLabel() {
        return Optional.ofNullable(this.marketingPolicyOptInLabel);
    }
    /**
     * @return marketing policy text
     * 
     */
    public Optional<String> marketingPolicyOptInText() {
        return Optional.ofNullable(this.marketingPolicyOptInText);
    }
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }
    public Optional<Boolean> multiAuth() {
        return Optional.ofNullable(this.multiAuth);
    }
    /**
     * @return Whether name field is required
     * 
     */
    public Optional<Boolean> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Error message when name not provided
     * 
     */
    public Optional<String> nameError() {
        return Optional.ofNullable(this.nameError);
    }
    /**
     * @return Label of name field
     * 
     */
    public Optional<String> nameLabel() {
        return Optional.ofNullable(this.nameLabel);
    }
    /**
     * @return Default value for the `Do not store` checkbox
     * 
     */
    public Optional<Boolean> optOutDefault() {
        return Optional.ofNullable(this.optOutDefault);
    }
    /**
     * @return Whether to display Do Not Store My Personal Information
     * 
     */
    public Optional<Boolean> optout() {
        return Optional.ofNullable(this.optout);
    }
    /**
     * @return Label for Do Not Store My Personal Information
     * 
     */
    public Optional<String> optoutLabel() {
        return Optional.ofNullable(this.optoutLabel);
    }
    public Optional<String> pageTitle() {
        return Optional.ofNullable(this.pageTitle);
    }
    /**
     * @return Label for the Passphrase cancel button
     * 
     */
    public Optional<String> passphraseCancel() {
        return Optional.ofNullable(this.passphraseCancel);
    }
    /**
     * @return Error message when invalid passphrase is provided
     * 
     */
    public Optional<String> passphraseError() {
        return Optional.ofNullable(this.passphraseError);
    }
    /**
     * @return Passphrase
     * 
     */
    public Optional<String> passphraseLabel() {
        return Optional.ofNullable(this.passphraseLabel);
    }
    public Optional<String> passphraseMessage() {
        return Optional.ofNullable(this.passphraseMessage);
    }
    /**
     * @return Label for the Passphrase submit button
     * 
     */
    public Optional<String> passphraseSubmit() {
        return Optional.ofNullable(this.passphraseSubmit);
    }
    /**
     * @return Title for passphrase details page
     * 
     */
    public Optional<String> passphraseTitle() {
        return Optional.ofNullable(this.passphraseTitle);
    }
    /**
     * @return Whether to show \&#34;Powered by Mist\&#34;
     * 
     */
    public Optional<Boolean> poweredBy() {
        return Optional.ofNullable(this.poweredBy);
    }
    /**
     * @return Whether to require the Privacy Term acceptance
     * 
     */
    public Optional<Boolean> privacy() {
        return Optional.ofNullable(this.privacy);
    }
    /**
     * @return Prefix of the label of the link to go to Privacy Policy
     * 
     */
    public Optional<String> privacyPolicyAcceptLabel() {
        return Optional.ofNullable(this.privacyPolicyAcceptLabel);
    }
    /**
     * @return Error message when Privacy Policy not accepted
     * 
     */
    public Optional<String> privacyPolicyError() {
        return Optional.ofNullable(this.privacyPolicyError);
    }
    /**
     * @return Label of the link to go to Privacy Policy
     * 
     */
    public Optional<String> privacyPolicyLink() {
        return Optional.ofNullable(this.privacyPolicyLink);
    }
    /**
     * @return Text of the Privacy Policy
     * 
     */
    public Optional<String> privacyPolicyText() {
        return Optional.ofNullable(this.privacyPolicyText);
    }
    /**
     * @return Label to denote required field
     * 
     */
    public Optional<String> requiredFieldLabel() {
        return Optional.ofNullable(this.requiredFieldLabel);
    }
    public Optional<Boolean> responsiveLayout() {
        return Optional.ofNullable(this.responsiveLayout);
    }
    /**
     * @return Label of the button to signin
     * 
     */
    public Optional<String> signInLabel() {
        return Optional.ofNullable(this.signInLabel);
    }
    public Optional<String> smsCarrierDefault() {
        return Optional.ofNullable(this.smsCarrierDefault);
    }
    public Optional<String> smsCarrierError() {
        return Optional.ofNullable(this.smsCarrierError);
    }
    /**
     * @return Label for mobile carrier drop-down list
     * 
     */
    public Optional<String> smsCarrierFieldLabel() {
        return Optional.ofNullable(this.smsCarrierFieldLabel);
    }
    /**
     * @return Label for cancel confirmation code submission
     * 
     */
    public Optional<String> smsCodeCancel() {
        return Optional.ofNullable(this.smsCodeCancel);
    }
    /**
     * @return Error message when confirmation code is invalid
     * 
     */
    public Optional<String> smsCodeError() {
        return Optional.ofNullable(this.smsCodeError);
    }
    public Optional<String> smsCodeFieldLabel() {
        return Optional.ofNullable(this.smsCodeFieldLabel);
    }
    public Optional<String> smsCodeMessage() {
        return Optional.ofNullable(this.smsCodeMessage);
    }
    /**
     * @return Label for confirmation code submit button
     * 
     */
    public Optional<String> smsCodeSubmit() {
        return Optional.ofNullable(this.smsCodeSubmit);
    }
    public Optional<String> smsCodeTitle() {
        return Optional.ofNullable(this.smsCodeTitle);
    }
    public Optional<String> smsCountryFieldLabel() {
        return Optional.ofNullable(this.smsCountryFieldLabel);
    }
    public Optional<String> smsCountryFormat() {
        return Optional.ofNullable(this.smsCountryFormat);
    }
    /**
     * @return Label for checkbox to specify that the user has access code
     * 
     */
    public Optional<String> smsHaveAccessCode() {
        return Optional.ofNullable(this.smsHaveAccessCode);
    }
    public Optional<Boolean> smsIsTwilio() {
        return Optional.ofNullable(this.smsIsTwilio);
    }
    /**
     * @return Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
     * 
     */
    public Optional<String> smsMessageFormat() {
        return Optional.ofNullable(this.smsMessageFormat);
    }
    /**
     * @return Label for canceling mobile details for SMS auth
     * 
     */
    public Optional<String> smsNumberCancel() {
        return Optional.ofNullable(this.smsNumberCancel);
    }
    public Optional<String> smsNumberError() {
        return Optional.ofNullable(this.smsNumberError);
    }
    /**
     * @return Label for field to provide mobile number
     * 
     */
    public Optional<String> smsNumberFieldLabel() {
        return Optional.ofNullable(this.smsNumberFieldLabel);
    }
    public Optional<String> smsNumberFormat() {
        return Optional.ofNullable(this.smsNumberFormat);
    }
    public Optional<String> smsNumberMessage() {
        return Optional.ofNullable(this.smsNumberMessage);
    }
    /**
     * @return Label for submit button for code generation
     * 
     */
    public Optional<String> smsNumberSubmit() {
        return Optional.ofNullable(this.smsNumberSubmit);
    }
    /**
     * @return Title for phone number details
     * 
     */
    public Optional<String> smsNumberTitle() {
        return Optional.ofNullable(this.smsNumberTitle);
    }
    public Optional<String> smsUsernameFormat() {
        return Optional.ofNullable(this.smsUsernameFormat);
    }
    /**
     * @return How long confirmation code should be considered valid (in minutes)
     * 
     */
    public Optional<Integer> smsValidityDuration() {
        return Optional.ofNullable(this.smsValidityDuration);
    }
    public Optional<String> sponsorBackLink() {
        return Optional.ofNullable(this.sponsorBackLink);
    }
    public Optional<String> sponsorCancel() {
        return Optional.ofNullable(this.sponsorCancel);
    }
    /**
     * @return Label for Sponsor Email
     * 
     */
    public Optional<String> sponsorEmail() {
        return Optional.ofNullable(this.sponsorEmail);
    }
    public Optional<String> sponsorEmailError() {
        return Optional.ofNullable(this.sponsorEmailError);
    }
    /**
     * @return HTML template to replace/override default sponsor email template
     * Sponsor Email Template supports following template variables:
     *   * `approve_url`: Renders URL to approve the request; optionally &amp;minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
     *   * `deny_url`: Renders URL to reject the request
     *   * `guest_email`: Renders Email ID of the guest
     *   * `guest_name`: Renders Name of the guest
     *   * `field1`: Renders value of the Custom Field 1
     *   * `field2`: Renders value of the Custom Field 2
     *   * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
     *   * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
     * 
     */
    public Optional<String> sponsorEmailTemplate() {
        return Optional.ofNullable(this.sponsorEmailTemplate);
    }
    public Optional<String> sponsorInfoApproved() {
        return Optional.ofNullable(this.sponsorInfoApproved);
    }
    public Optional<String> sponsorInfoDenied() {
        return Optional.ofNullable(this.sponsorInfoDenied);
    }
    public Optional<String> sponsorInfoPending() {
        return Optional.ofNullable(this.sponsorInfoPending);
    }
    /**
     * @return Label for Sponsor Name
     * 
     */
    public Optional<String> sponsorName() {
        return Optional.ofNullable(this.sponsorName);
    }
    public Optional<String> sponsorNameError() {
        return Optional.ofNullable(this.sponsorNameError);
    }
    public Optional<String> sponsorNotePending() {
        return Optional.ofNullable(this.sponsorNotePending);
    }
    /**
     * @return Submit button label request Wifi Access and notify sponsor about guest request
     * 
     */
    public Optional<String> sponsorRequestAccess() {
        return Optional.ofNullable(this.sponsorRequestAccess);
    }
    /**
     * @return Text to display if sponsor approves request
     * 
     */
    public Optional<String> sponsorStatusApproved() {
        return Optional.ofNullable(this.sponsorStatusApproved);
    }
    /**
     * @return Text to display when sponsor denies request
     * 
     */
    public Optional<String> sponsorStatusDenied() {
        return Optional.ofNullable(this.sponsorStatusDenied);
    }
    /**
     * @return Text to display if request is still pending
     * 
     */
    public Optional<String> sponsorStatusPending() {
        return Optional.ofNullable(this.sponsorStatusPending);
    }
    /**
     * @return Submit button label to notify sponsor about guest request
     * 
     */
    public Optional<String> sponsorSubmit() {
        return Optional.ofNullable(this.sponsorSubmit);
    }
    public Optional<String> sponsorsError() {
        return Optional.ofNullable(this.sponsorsError);
    }
    public Optional<String> sponsorsFieldLabel() {
        return Optional.ofNullable(this.sponsorsFieldLabel);
    }
    public Optional<Boolean> tos() {
        return Optional.ofNullable(this.tos);
    }
    /**
     * @return Prefix of the label of the link to go to tos
     * 
     */
    public Optional<String> tosAcceptLabel() {
        return Optional.ofNullable(this.tosAcceptLabel);
    }
    /**
     * @return Error message when tos not accepted
     * 
     */
    public Optional<String> tosError() {
        return Optional.ofNullable(this.tosError);
    }
    /**
     * @return Label of the link to go to tos
     * 
     */
    public Optional<String> tosLink() {
        return Optional.ofNullable(this.tosLink);
    }
    /**
     * @return Text of the Terms of Service
     * 
     */
    public Optional<String> tosText() {
        return Optional.ofNullable(this.tosText);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WlanPortalTemplatePortalTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessCodeAlternateEmail;
        private @Nullable String alignment;
        private @Nullable String authButtonAmazon;
        private @Nullable String authButtonAzure;
        private @Nullable String authButtonEmail;
        private @Nullable String authButtonFacebook;
        private @Nullable String authButtonGoogle;
        private @Nullable String authButtonMicrosoft;
        private @Nullable String authButtonPassphrase;
        private @Nullable String authButtonSms;
        private @Nullable String authButtonSponsor;
        private @Nullable String authLabel;
        private @Nullable String backLink;
        private @Nullable String color;
        private @Nullable String colorDark;
        private @Nullable String colorLight;
        private @Nullable Boolean company;
        private @Nullable String companyError;
        private @Nullable String companyLabel;
        private @Nullable Boolean email;
        private @Nullable String emailAccessDomainError;
        private @Nullable String emailCancel;
        private @Nullable String emailCodeCancel;
        private @Nullable String emailCodeError;
        private @Nullable String emailCodeFieldLabel;
        private @Nullable String emailCodeMessage;
        private @Nullable String emailCodeSubmit;
        private @Nullable String emailCodeTitle;
        private @Nullable String emailError;
        private @Nullable String emailFieldLabel;
        private @Nullable String emailLabel;
        private @Nullable String emailMessage;
        private @Nullable String emailSubmit;
        private @Nullable String emailTitle;
        private @Nullable Boolean field1;
        private @Nullable String field1error;
        private @Nullable String field1label;
        private @Nullable Boolean field1required;
        private @Nullable Boolean field2;
        private @Nullable String field2error;
        private @Nullable String field2label;
        private @Nullable Boolean field2required;
        private @Nullable Boolean field3;
        private @Nullable String field3error;
        private @Nullable String field3label;
        private @Nullable Boolean field3required;
        private @Nullable Boolean field4;
        private @Nullable String field4error;
        private @Nullable String field4label;
        private @Nullable Boolean field4required;
        private @Nullable Map<String,WlanPortalTemplatePortalTemplateLocales> locales;
        private @Nullable String logo;
        private @Nullable String marketingPolicyLink;
        private @Nullable Boolean marketingPolicyOptIn;
        private @Nullable String marketingPolicyOptInLabel;
        private @Nullable String marketingPolicyOptInText;
        private @Nullable String message;
        private @Nullable Boolean multiAuth;
        private @Nullable Boolean name;
        private @Nullable String nameError;
        private @Nullable String nameLabel;
        private @Nullable Boolean optOutDefault;
        private @Nullable Boolean optout;
        private @Nullable String optoutLabel;
        private @Nullable String pageTitle;
        private @Nullable String passphraseCancel;
        private @Nullable String passphraseError;
        private @Nullable String passphraseLabel;
        private @Nullable String passphraseMessage;
        private @Nullable String passphraseSubmit;
        private @Nullable String passphraseTitle;
        private @Nullable Boolean poweredBy;
        private @Nullable Boolean privacy;
        private @Nullable String privacyPolicyAcceptLabel;
        private @Nullable String privacyPolicyError;
        private @Nullable String privacyPolicyLink;
        private @Nullable String privacyPolicyText;
        private @Nullable String requiredFieldLabel;
        private @Nullable Boolean responsiveLayout;
        private @Nullable String signInLabel;
        private @Nullable String smsCarrierDefault;
        private @Nullable String smsCarrierError;
        private @Nullable String smsCarrierFieldLabel;
        private @Nullable String smsCodeCancel;
        private @Nullable String smsCodeError;
        private @Nullable String smsCodeFieldLabel;
        private @Nullable String smsCodeMessage;
        private @Nullable String smsCodeSubmit;
        private @Nullable String smsCodeTitle;
        private @Nullable String smsCountryFieldLabel;
        private @Nullable String smsCountryFormat;
        private @Nullable String smsHaveAccessCode;
        private @Nullable Boolean smsIsTwilio;
        private @Nullable String smsMessageFormat;
        private @Nullable String smsNumberCancel;
        private @Nullable String smsNumberError;
        private @Nullable String smsNumberFieldLabel;
        private @Nullable String smsNumberFormat;
        private @Nullable String smsNumberMessage;
        private @Nullable String smsNumberSubmit;
        private @Nullable String smsNumberTitle;
        private @Nullable String smsUsernameFormat;
        private @Nullable Integer smsValidityDuration;
        private @Nullable String sponsorBackLink;
        private @Nullable String sponsorCancel;
        private @Nullable String sponsorEmail;
        private @Nullable String sponsorEmailError;
        private @Nullable String sponsorEmailTemplate;
        private @Nullable String sponsorInfoApproved;
        private @Nullable String sponsorInfoDenied;
        private @Nullable String sponsorInfoPending;
        private @Nullable String sponsorName;
        private @Nullable String sponsorNameError;
        private @Nullable String sponsorNotePending;
        private @Nullable String sponsorRequestAccess;
        private @Nullable String sponsorStatusApproved;
        private @Nullable String sponsorStatusDenied;
        private @Nullable String sponsorStatusPending;
        private @Nullable String sponsorSubmit;
        private @Nullable String sponsorsError;
        private @Nullable String sponsorsFieldLabel;
        private @Nullable Boolean tos;
        private @Nullable String tosAcceptLabel;
        private @Nullable String tosError;
        private @Nullable String tosLink;
        private @Nullable String tosText;
        public Builder() {}
        public Builder(WlanPortalTemplatePortalTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessCodeAlternateEmail = defaults.accessCodeAlternateEmail;
    	      this.alignment = defaults.alignment;
    	      this.authButtonAmazon = defaults.authButtonAmazon;
    	      this.authButtonAzure = defaults.authButtonAzure;
    	      this.authButtonEmail = defaults.authButtonEmail;
    	      this.authButtonFacebook = defaults.authButtonFacebook;
    	      this.authButtonGoogle = defaults.authButtonGoogle;
    	      this.authButtonMicrosoft = defaults.authButtonMicrosoft;
    	      this.authButtonPassphrase = defaults.authButtonPassphrase;
    	      this.authButtonSms = defaults.authButtonSms;
    	      this.authButtonSponsor = defaults.authButtonSponsor;
    	      this.authLabel = defaults.authLabel;
    	      this.backLink = defaults.backLink;
    	      this.color = defaults.color;
    	      this.colorDark = defaults.colorDark;
    	      this.colorLight = defaults.colorLight;
    	      this.company = defaults.company;
    	      this.companyError = defaults.companyError;
    	      this.companyLabel = defaults.companyLabel;
    	      this.email = defaults.email;
    	      this.emailAccessDomainError = defaults.emailAccessDomainError;
    	      this.emailCancel = defaults.emailCancel;
    	      this.emailCodeCancel = defaults.emailCodeCancel;
    	      this.emailCodeError = defaults.emailCodeError;
    	      this.emailCodeFieldLabel = defaults.emailCodeFieldLabel;
    	      this.emailCodeMessage = defaults.emailCodeMessage;
    	      this.emailCodeSubmit = defaults.emailCodeSubmit;
    	      this.emailCodeTitle = defaults.emailCodeTitle;
    	      this.emailError = defaults.emailError;
    	      this.emailFieldLabel = defaults.emailFieldLabel;
    	      this.emailLabel = defaults.emailLabel;
    	      this.emailMessage = defaults.emailMessage;
    	      this.emailSubmit = defaults.emailSubmit;
    	      this.emailTitle = defaults.emailTitle;
    	      this.field1 = defaults.field1;
    	      this.field1error = defaults.field1error;
    	      this.field1label = defaults.field1label;
    	      this.field1required = defaults.field1required;
    	      this.field2 = defaults.field2;
    	      this.field2error = defaults.field2error;
    	      this.field2label = defaults.field2label;
    	      this.field2required = defaults.field2required;
    	      this.field3 = defaults.field3;
    	      this.field3error = defaults.field3error;
    	      this.field3label = defaults.field3label;
    	      this.field3required = defaults.field3required;
    	      this.field4 = defaults.field4;
    	      this.field4error = defaults.field4error;
    	      this.field4label = defaults.field4label;
    	      this.field4required = defaults.field4required;
    	      this.locales = defaults.locales;
    	      this.logo = defaults.logo;
    	      this.marketingPolicyLink = defaults.marketingPolicyLink;
    	      this.marketingPolicyOptIn = defaults.marketingPolicyOptIn;
    	      this.marketingPolicyOptInLabel = defaults.marketingPolicyOptInLabel;
    	      this.marketingPolicyOptInText = defaults.marketingPolicyOptInText;
    	      this.message = defaults.message;
    	      this.multiAuth = defaults.multiAuth;
    	      this.name = defaults.name;
    	      this.nameError = defaults.nameError;
    	      this.nameLabel = defaults.nameLabel;
    	      this.optOutDefault = defaults.optOutDefault;
    	      this.optout = defaults.optout;
    	      this.optoutLabel = defaults.optoutLabel;
    	      this.pageTitle = defaults.pageTitle;
    	      this.passphraseCancel = defaults.passphraseCancel;
    	      this.passphraseError = defaults.passphraseError;
    	      this.passphraseLabel = defaults.passphraseLabel;
    	      this.passphraseMessage = defaults.passphraseMessage;
    	      this.passphraseSubmit = defaults.passphraseSubmit;
    	      this.passphraseTitle = defaults.passphraseTitle;
    	      this.poweredBy = defaults.poweredBy;
    	      this.privacy = defaults.privacy;
    	      this.privacyPolicyAcceptLabel = defaults.privacyPolicyAcceptLabel;
    	      this.privacyPolicyError = defaults.privacyPolicyError;
    	      this.privacyPolicyLink = defaults.privacyPolicyLink;
    	      this.privacyPolicyText = defaults.privacyPolicyText;
    	      this.requiredFieldLabel = defaults.requiredFieldLabel;
    	      this.responsiveLayout = defaults.responsiveLayout;
    	      this.signInLabel = defaults.signInLabel;
    	      this.smsCarrierDefault = defaults.smsCarrierDefault;
    	      this.smsCarrierError = defaults.smsCarrierError;
    	      this.smsCarrierFieldLabel = defaults.smsCarrierFieldLabel;
    	      this.smsCodeCancel = defaults.smsCodeCancel;
    	      this.smsCodeError = defaults.smsCodeError;
    	      this.smsCodeFieldLabel = defaults.smsCodeFieldLabel;
    	      this.smsCodeMessage = defaults.smsCodeMessage;
    	      this.smsCodeSubmit = defaults.smsCodeSubmit;
    	      this.smsCodeTitle = defaults.smsCodeTitle;
    	      this.smsCountryFieldLabel = defaults.smsCountryFieldLabel;
    	      this.smsCountryFormat = defaults.smsCountryFormat;
    	      this.smsHaveAccessCode = defaults.smsHaveAccessCode;
    	      this.smsIsTwilio = defaults.smsIsTwilio;
    	      this.smsMessageFormat = defaults.smsMessageFormat;
    	      this.smsNumberCancel = defaults.smsNumberCancel;
    	      this.smsNumberError = defaults.smsNumberError;
    	      this.smsNumberFieldLabel = defaults.smsNumberFieldLabel;
    	      this.smsNumberFormat = defaults.smsNumberFormat;
    	      this.smsNumberMessage = defaults.smsNumberMessage;
    	      this.smsNumberSubmit = defaults.smsNumberSubmit;
    	      this.smsNumberTitle = defaults.smsNumberTitle;
    	      this.smsUsernameFormat = defaults.smsUsernameFormat;
    	      this.smsValidityDuration = defaults.smsValidityDuration;
    	      this.sponsorBackLink = defaults.sponsorBackLink;
    	      this.sponsorCancel = defaults.sponsorCancel;
    	      this.sponsorEmail = defaults.sponsorEmail;
    	      this.sponsorEmailError = defaults.sponsorEmailError;
    	      this.sponsorEmailTemplate = defaults.sponsorEmailTemplate;
    	      this.sponsorInfoApproved = defaults.sponsorInfoApproved;
    	      this.sponsorInfoDenied = defaults.sponsorInfoDenied;
    	      this.sponsorInfoPending = defaults.sponsorInfoPending;
    	      this.sponsorName = defaults.sponsorName;
    	      this.sponsorNameError = defaults.sponsorNameError;
    	      this.sponsorNotePending = defaults.sponsorNotePending;
    	      this.sponsorRequestAccess = defaults.sponsorRequestAccess;
    	      this.sponsorStatusApproved = defaults.sponsorStatusApproved;
    	      this.sponsorStatusDenied = defaults.sponsorStatusDenied;
    	      this.sponsorStatusPending = defaults.sponsorStatusPending;
    	      this.sponsorSubmit = defaults.sponsorSubmit;
    	      this.sponsorsError = defaults.sponsorsError;
    	      this.sponsorsFieldLabel = defaults.sponsorsFieldLabel;
    	      this.tos = defaults.tos;
    	      this.tosAcceptLabel = defaults.tosAcceptLabel;
    	      this.tosError = defaults.tosError;
    	      this.tosLink = defaults.tosLink;
    	      this.tosText = defaults.tosText;
        }

        @CustomType.Setter
        public Builder accessCodeAlternateEmail(@Nullable String accessCodeAlternateEmail) {

            this.accessCodeAlternateEmail = accessCodeAlternateEmail;
            return this;
        }
        @CustomType.Setter
        public Builder alignment(@Nullable String alignment) {

            this.alignment = alignment;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonAmazon(@Nullable String authButtonAmazon) {

            this.authButtonAmazon = authButtonAmazon;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonAzure(@Nullable String authButtonAzure) {

            this.authButtonAzure = authButtonAzure;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonEmail(@Nullable String authButtonEmail) {

            this.authButtonEmail = authButtonEmail;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonFacebook(@Nullable String authButtonFacebook) {

            this.authButtonFacebook = authButtonFacebook;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonGoogle(@Nullable String authButtonGoogle) {

            this.authButtonGoogle = authButtonGoogle;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonMicrosoft(@Nullable String authButtonMicrosoft) {

            this.authButtonMicrosoft = authButtonMicrosoft;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonPassphrase(@Nullable String authButtonPassphrase) {

            this.authButtonPassphrase = authButtonPassphrase;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonSms(@Nullable String authButtonSms) {

            this.authButtonSms = authButtonSms;
            return this;
        }
        @CustomType.Setter
        public Builder authButtonSponsor(@Nullable String authButtonSponsor) {

            this.authButtonSponsor = authButtonSponsor;
            return this;
        }
        @CustomType.Setter
        public Builder authLabel(@Nullable String authLabel) {

            this.authLabel = authLabel;
            return this;
        }
        @CustomType.Setter
        public Builder backLink(@Nullable String backLink) {

            this.backLink = backLink;
            return this;
        }
        @CustomType.Setter
        public Builder color(@Nullable String color) {

            this.color = color;
            return this;
        }
        @CustomType.Setter
        public Builder colorDark(@Nullable String colorDark) {

            this.colorDark = colorDark;
            return this;
        }
        @CustomType.Setter
        public Builder colorLight(@Nullable String colorLight) {

            this.colorLight = colorLight;
            return this;
        }
        @CustomType.Setter
        public Builder company(@Nullable Boolean company) {

            this.company = company;
            return this;
        }
        @CustomType.Setter
        public Builder companyError(@Nullable String companyError) {

            this.companyError = companyError;
            return this;
        }
        @CustomType.Setter
        public Builder companyLabel(@Nullable String companyLabel) {

            this.companyLabel = companyLabel;
            return this;
        }
        @CustomType.Setter
        public Builder email(@Nullable Boolean email) {

            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder emailAccessDomainError(@Nullable String emailAccessDomainError) {

            this.emailAccessDomainError = emailAccessDomainError;
            return this;
        }
        @CustomType.Setter
        public Builder emailCancel(@Nullable String emailCancel) {

            this.emailCancel = emailCancel;
            return this;
        }
        @CustomType.Setter
        public Builder emailCodeCancel(@Nullable String emailCodeCancel) {

            this.emailCodeCancel = emailCodeCancel;
            return this;
        }
        @CustomType.Setter
        public Builder emailCodeError(@Nullable String emailCodeError) {

            this.emailCodeError = emailCodeError;
            return this;
        }
        @CustomType.Setter
        public Builder emailCodeFieldLabel(@Nullable String emailCodeFieldLabel) {

            this.emailCodeFieldLabel = emailCodeFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder emailCodeMessage(@Nullable String emailCodeMessage) {

            this.emailCodeMessage = emailCodeMessage;
            return this;
        }
        @CustomType.Setter
        public Builder emailCodeSubmit(@Nullable String emailCodeSubmit) {

            this.emailCodeSubmit = emailCodeSubmit;
            return this;
        }
        @CustomType.Setter
        public Builder emailCodeTitle(@Nullable String emailCodeTitle) {

            this.emailCodeTitle = emailCodeTitle;
            return this;
        }
        @CustomType.Setter
        public Builder emailError(@Nullable String emailError) {

            this.emailError = emailError;
            return this;
        }
        @CustomType.Setter
        public Builder emailFieldLabel(@Nullable String emailFieldLabel) {

            this.emailFieldLabel = emailFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder emailLabel(@Nullable String emailLabel) {

            this.emailLabel = emailLabel;
            return this;
        }
        @CustomType.Setter
        public Builder emailMessage(@Nullable String emailMessage) {

            this.emailMessage = emailMessage;
            return this;
        }
        @CustomType.Setter
        public Builder emailSubmit(@Nullable String emailSubmit) {

            this.emailSubmit = emailSubmit;
            return this;
        }
        @CustomType.Setter
        public Builder emailTitle(@Nullable String emailTitle) {

            this.emailTitle = emailTitle;
            return this;
        }
        @CustomType.Setter
        public Builder field1(@Nullable Boolean field1) {

            this.field1 = field1;
            return this;
        }
        @CustomType.Setter
        public Builder field1error(@Nullable String field1error) {

            this.field1error = field1error;
            return this;
        }
        @CustomType.Setter
        public Builder field1label(@Nullable String field1label) {

            this.field1label = field1label;
            return this;
        }
        @CustomType.Setter
        public Builder field1required(@Nullable Boolean field1required) {

            this.field1required = field1required;
            return this;
        }
        @CustomType.Setter
        public Builder field2(@Nullable Boolean field2) {

            this.field2 = field2;
            return this;
        }
        @CustomType.Setter
        public Builder field2error(@Nullable String field2error) {

            this.field2error = field2error;
            return this;
        }
        @CustomType.Setter
        public Builder field2label(@Nullable String field2label) {

            this.field2label = field2label;
            return this;
        }
        @CustomType.Setter
        public Builder field2required(@Nullable Boolean field2required) {

            this.field2required = field2required;
            return this;
        }
        @CustomType.Setter
        public Builder field3(@Nullable Boolean field3) {

            this.field3 = field3;
            return this;
        }
        @CustomType.Setter
        public Builder field3error(@Nullable String field3error) {

            this.field3error = field3error;
            return this;
        }
        @CustomType.Setter
        public Builder field3label(@Nullable String field3label) {

            this.field3label = field3label;
            return this;
        }
        @CustomType.Setter
        public Builder field3required(@Nullable Boolean field3required) {

            this.field3required = field3required;
            return this;
        }
        @CustomType.Setter
        public Builder field4(@Nullable Boolean field4) {

            this.field4 = field4;
            return this;
        }
        @CustomType.Setter
        public Builder field4error(@Nullable String field4error) {

            this.field4error = field4error;
            return this;
        }
        @CustomType.Setter
        public Builder field4label(@Nullable String field4label) {

            this.field4label = field4label;
            return this;
        }
        @CustomType.Setter
        public Builder field4required(@Nullable Boolean field4required) {

            this.field4required = field4required;
            return this;
        }
        @CustomType.Setter
        public Builder locales(@Nullable Map<String,WlanPortalTemplatePortalTemplateLocales> locales) {

            this.locales = locales;
            return this;
        }
        @CustomType.Setter
        public Builder logo(@Nullable String logo) {

            this.logo = logo;
            return this;
        }
        @CustomType.Setter
        public Builder marketingPolicyLink(@Nullable String marketingPolicyLink) {

            this.marketingPolicyLink = marketingPolicyLink;
            return this;
        }
        @CustomType.Setter
        public Builder marketingPolicyOptIn(@Nullable Boolean marketingPolicyOptIn) {

            this.marketingPolicyOptIn = marketingPolicyOptIn;
            return this;
        }
        @CustomType.Setter
        public Builder marketingPolicyOptInLabel(@Nullable String marketingPolicyOptInLabel) {

            this.marketingPolicyOptInLabel = marketingPolicyOptInLabel;
            return this;
        }
        @CustomType.Setter
        public Builder marketingPolicyOptInText(@Nullable String marketingPolicyOptInText) {

            this.marketingPolicyOptInText = marketingPolicyOptInText;
            return this;
        }
        @CustomType.Setter
        public Builder message(@Nullable String message) {

            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder multiAuth(@Nullable Boolean multiAuth) {

            this.multiAuth = multiAuth;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable Boolean name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameError(@Nullable String nameError) {

            this.nameError = nameError;
            return this;
        }
        @CustomType.Setter
        public Builder nameLabel(@Nullable String nameLabel) {

            this.nameLabel = nameLabel;
            return this;
        }
        @CustomType.Setter
        public Builder optOutDefault(@Nullable Boolean optOutDefault) {

            this.optOutDefault = optOutDefault;
            return this;
        }
        @CustomType.Setter
        public Builder optout(@Nullable Boolean optout) {

            this.optout = optout;
            return this;
        }
        @CustomType.Setter
        public Builder optoutLabel(@Nullable String optoutLabel) {

            this.optoutLabel = optoutLabel;
            return this;
        }
        @CustomType.Setter
        public Builder pageTitle(@Nullable String pageTitle) {

            this.pageTitle = pageTitle;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseCancel(@Nullable String passphraseCancel) {

            this.passphraseCancel = passphraseCancel;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseError(@Nullable String passphraseError) {

            this.passphraseError = passphraseError;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseLabel(@Nullable String passphraseLabel) {

            this.passphraseLabel = passphraseLabel;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseMessage(@Nullable String passphraseMessage) {

            this.passphraseMessage = passphraseMessage;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseSubmit(@Nullable String passphraseSubmit) {

            this.passphraseSubmit = passphraseSubmit;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseTitle(@Nullable String passphraseTitle) {

            this.passphraseTitle = passphraseTitle;
            return this;
        }
        @CustomType.Setter
        public Builder poweredBy(@Nullable Boolean poweredBy) {

            this.poweredBy = poweredBy;
            return this;
        }
        @CustomType.Setter
        public Builder privacy(@Nullable Boolean privacy) {

            this.privacy = privacy;
            return this;
        }
        @CustomType.Setter
        public Builder privacyPolicyAcceptLabel(@Nullable String privacyPolicyAcceptLabel) {

            this.privacyPolicyAcceptLabel = privacyPolicyAcceptLabel;
            return this;
        }
        @CustomType.Setter
        public Builder privacyPolicyError(@Nullable String privacyPolicyError) {

            this.privacyPolicyError = privacyPolicyError;
            return this;
        }
        @CustomType.Setter
        public Builder privacyPolicyLink(@Nullable String privacyPolicyLink) {

            this.privacyPolicyLink = privacyPolicyLink;
            return this;
        }
        @CustomType.Setter
        public Builder privacyPolicyText(@Nullable String privacyPolicyText) {

            this.privacyPolicyText = privacyPolicyText;
            return this;
        }
        @CustomType.Setter
        public Builder requiredFieldLabel(@Nullable String requiredFieldLabel) {

            this.requiredFieldLabel = requiredFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder responsiveLayout(@Nullable Boolean responsiveLayout) {

            this.responsiveLayout = responsiveLayout;
            return this;
        }
        @CustomType.Setter
        public Builder signInLabel(@Nullable String signInLabel) {

            this.signInLabel = signInLabel;
            return this;
        }
        @CustomType.Setter
        public Builder smsCarrierDefault(@Nullable String smsCarrierDefault) {

            this.smsCarrierDefault = smsCarrierDefault;
            return this;
        }
        @CustomType.Setter
        public Builder smsCarrierError(@Nullable String smsCarrierError) {

            this.smsCarrierError = smsCarrierError;
            return this;
        }
        @CustomType.Setter
        public Builder smsCarrierFieldLabel(@Nullable String smsCarrierFieldLabel) {

            this.smsCarrierFieldLabel = smsCarrierFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder smsCodeCancel(@Nullable String smsCodeCancel) {

            this.smsCodeCancel = smsCodeCancel;
            return this;
        }
        @CustomType.Setter
        public Builder smsCodeError(@Nullable String smsCodeError) {

            this.smsCodeError = smsCodeError;
            return this;
        }
        @CustomType.Setter
        public Builder smsCodeFieldLabel(@Nullable String smsCodeFieldLabel) {

            this.smsCodeFieldLabel = smsCodeFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder smsCodeMessage(@Nullable String smsCodeMessage) {

            this.smsCodeMessage = smsCodeMessage;
            return this;
        }
        @CustomType.Setter
        public Builder smsCodeSubmit(@Nullable String smsCodeSubmit) {

            this.smsCodeSubmit = smsCodeSubmit;
            return this;
        }
        @CustomType.Setter
        public Builder smsCodeTitle(@Nullable String smsCodeTitle) {

            this.smsCodeTitle = smsCodeTitle;
            return this;
        }
        @CustomType.Setter
        public Builder smsCountryFieldLabel(@Nullable String smsCountryFieldLabel) {

            this.smsCountryFieldLabel = smsCountryFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder smsCountryFormat(@Nullable String smsCountryFormat) {

            this.smsCountryFormat = smsCountryFormat;
            return this;
        }
        @CustomType.Setter
        public Builder smsHaveAccessCode(@Nullable String smsHaveAccessCode) {

            this.smsHaveAccessCode = smsHaveAccessCode;
            return this;
        }
        @CustomType.Setter
        public Builder smsIsTwilio(@Nullable Boolean smsIsTwilio) {

            this.smsIsTwilio = smsIsTwilio;
            return this;
        }
        @CustomType.Setter
        public Builder smsMessageFormat(@Nullable String smsMessageFormat) {

            this.smsMessageFormat = smsMessageFormat;
            return this;
        }
        @CustomType.Setter
        public Builder smsNumberCancel(@Nullable String smsNumberCancel) {

            this.smsNumberCancel = smsNumberCancel;
            return this;
        }
        @CustomType.Setter
        public Builder smsNumberError(@Nullable String smsNumberError) {

            this.smsNumberError = smsNumberError;
            return this;
        }
        @CustomType.Setter
        public Builder smsNumberFieldLabel(@Nullable String smsNumberFieldLabel) {

            this.smsNumberFieldLabel = smsNumberFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder smsNumberFormat(@Nullable String smsNumberFormat) {

            this.smsNumberFormat = smsNumberFormat;
            return this;
        }
        @CustomType.Setter
        public Builder smsNumberMessage(@Nullable String smsNumberMessage) {

            this.smsNumberMessage = smsNumberMessage;
            return this;
        }
        @CustomType.Setter
        public Builder smsNumberSubmit(@Nullable String smsNumberSubmit) {

            this.smsNumberSubmit = smsNumberSubmit;
            return this;
        }
        @CustomType.Setter
        public Builder smsNumberTitle(@Nullable String smsNumberTitle) {

            this.smsNumberTitle = smsNumberTitle;
            return this;
        }
        @CustomType.Setter
        public Builder smsUsernameFormat(@Nullable String smsUsernameFormat) {

            this.smsUsernameFormat = smsUsernameFormat;
            return this;
        }
        @CustomType.Setter
        public Builder smsValidityDuration(@Nullable Integer smsValidityDuration) {

            this.smsValidityDuration = smsValidityDuration;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorBackLink(@Nullable String sponsorBackLink) {

            this.sponsorBackLink = sponsorBackLink;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorCancel(@Nullable String sponsorCancel) {

            this.sponsorCancel = sponsorCancel;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorEmail(@Nullable String sponsorEmail) {

            this.sponsorEmail = sponsorEmail;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorEmailError(@Nullable String sponsorEmailError) {

            this.sponsorEmailError = sponsorEmailError;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorEmailTemplate(@Nullable String sponsorEmailTemplate) {

            this.sponsorEmailTemplate = sponsorEmailTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorInfoApproved(@Nullable String sponsorInfoApproved) {

            this.sponsorInfoApproved = sponsorInfoApproved;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorInfoDenied(@Nullable String sponsorInfoDenied) {

            this.sponsorInfoDenied = sponsorInfoDenied;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorInfoPending(@Nullable String sponsorInfoPending) {

            this.sponsorInfoPending = sponsorInfoPending;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorName(@Nullable String sponsorName) {

            this.sponsorName = sponsorName;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorNameError(@Nullable String sponsorNameError) {

            this.sponsorNameError = sponsorNameError;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorNotePending(@Nullable String sponsorNotePending) {

            this.sponsorNotePending = sponsorNotePending;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorRequestAccess(@Nullable String sponsorRequestAccess) {

            this.sponsorRequestAccess = sponsorRequestAccess;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorStatusApproved(@Nullable String sponsorStatusApproved) {

            this.sponsorStatusApproved = sponsorStatusApproved;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorStatusDenied(@Nullable String sponsorStatusDenied) {

            this.sponsorStatusDenied = sponsorStatusDenied;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorStatusPending(@Nullable String sponsorStatusPending) {

            this.sponsorStatusPending = sponsorStatusPending;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorSubmit(@Nullable String sponsorSubmit) {

            this.sponsorSubmit = sponsorSubmit;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorsError(@Nullable String sponsorsError) {

            this.sponsorsError = sponsorsError;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorsFieldLabel(@Nullable String sponsorsFieldLabel) {

            this.sponsorsFieldLabel = sponsorsFieldLabel;
            return this;
        }
        @CustomType.Setter
        public Builder tos(@Nullable Boolean tos) {

            this.tos = tos;
            return this;
        }
        @CustomType.Setter
        public Builder tosAcceptLabel(@Nullable String tosAcceptLabel) {

            this.tosAcceptLabel = tosAcceptLabel;
            return this;
        }
        @CustomType.Setter
        public Builder tosError(@Nullable String tosError) {

            this.tosError = tosError;
            return this;
        }
        @CustomType.Setter
        public Builder tosLink(@Nullable String tosLink) {

            this.tosLink = tosLink;
            return this;
        }
        @CustomType.Setter
        public Builder tosText(@Nullable String tosText) {

            this.tosText = tosText;
            return this;
        }
        public WlanPortalTemplatePortalTemplate build() {
            final var _resultValue = new WlanPortalTemplatePortalTemplate();
            _resultValue.accessCodeAlternateEmail = accessCodeAlternateEmail;
            _resultValue.alignment = alignment;
            _resultValue.authButtonAmazon = authButtonAmazon;
            _resultValue.authButtonAzure = authButtonAzure;
            _resultValue.authButtonEmail = authButtonEmail;
            _resultValue.authButtonFacebook = authButtonFacebook;
            _resultValue.authButtonGoogle = authButtonGoogle;
            _resultValue.authButtonMicrosoft = authButtonMicrosoft;
            _resultValue.authButtonPassphrase = authButtonPassphrase;
            _resultValue.authButtonSms = authButtonSms;
            _resultValue.authButtonSponsor = authButtonSponsor;
            _resultValue.authLabel = authLabel;
            _resultValue.backLink = backLink;
            _resultValue.color = color;
            _resultValue.colorDark = colorDark;
            _resultValue.colorLight = colorLight;
            _resultValue.company = company;
            _resultValue.companyError = companyError;
            _resultValue.companyLabel = companyLabel;
            _resultValue.email = email;
            _resultValue.emailAccessDomainError = emailAccessDomainError;
            _resultValue.emailCancel = emailCancel;
            _resultValue.emailCodeCancel = emailCodeCancel;
            _resultValue.emailCodeError = emailCodeError;
            _resultValue.emailCodeFieldLabel = emailCodeFieldLabel;
            _resultValue.emailCodeMessage = emailCodeMessage;
            _resultValue.emailCodeSubmit = emailCodeSubmit;
            _resultValue.emailCodeTitle = emailCodeTitle;
            _resultValue.emailError = emailError;
            _resultValue.emailFieldLabel = emailFieldLabel;
            _resultValue.emailLabel = emailLabel;
            _resultValue.emailMessage = emailMessage;
            _resultValue.emailSubmit = emailSubmit;
            _resultValue.emailTitle = emailTitle;
            _resultValue.field1 = field1;
            _resultValue.field1error = field1error;
            _resultValue.field1label = field1label;
            _resultValue.field1required = field1required;
            _resultValue.field2 = field2;
            _resultValue.field2error = field2error;
            _resultValue.field2label = field2label;
            _resultValue.field2required = field2required;
            _resultValue.field3 = field3;
            _resultValue.field3error = field3error;
            _resultValue.field3label = field3label;
            _resultValue.field3required = field3required;
            _resultValue.field4 = field4;
            _resultValue.field4error = field4error;
            _resultValue.field4label = field4label;
            _resultValue.field4required = field4required;
            _resultValue.locales = locales;
            _resultValue.logo = logo;
            _resultValue.marketingPolicyLink = marketingPolicyLink;
            _resultValue.marketingPolicyOptIn = marketingPolicyOptIn;
            _resultValue.marketingPolicyOptInLabel = marketingPolicyOptInLabel;
            _resultValue.marketingPolicyOptInText = marketingPolicyOptInText;
            _resultValue.message = message;
            _resultValue.multiAuth = multiAuth;
            _resultValue.name = name;
            _resultValue.nameError = nameError;
            _resultValue.nameLabel = nameLabel;
            _resultValue.optOutDefault = optOutDefault;
            _resultValue.optout = optout;
            _resultValue.optoutLabel = optoutLabel;
            _resultValue.pageTitle = pageTitle;
            _resultValue.passphraseCancel = passphraseCancel;
            _resultValue.passphraseError = passphraseError;
            _resultValue.passphraseLabel = passphraseLabel;
            _resultValue.passphraseMessage = passphraseMessage;
            _resultValue.passphraseSubmit = passphraseSubmit;
            _resultValue.passphraseTitle = passphraseTitle;
            _resultValue.poweredBy = poweredBy;
            _resultValue.privacy = privacy;
            _resultValue.privacyPolicyAcceptLabel = privacyPolicyAcceptLabel;
            _resultValue.privacyPolicyError = privacyPolicyError;
            _resultValue.privacyPolicyLink = privacyPolicyLink;
            _resultValue.privacyPolicyText = privacyPolicyText;
            _resultValue.requiredFieldLabel = requiredFieldLabel;
            _resultValue.responsiveLayout = responsiveLayout;
            _resultValue.signInLabel = signInLabel;
            _resultValue.smsCarrierDefault = smsCarrierDefault;
            _resultValue.smsCarrierError = smsCarrierError;
            _resultValue.smsCarrierFieldLabel = smsCarrierFieldLabel;
            _resultValue.smsCodeCancel = smsCodeCancel;
            _resultValue.smsCodeError = smsCodeError;
            _resultValue.smsCodeFieldLabel = smsCodeFieldLabel;
            _resultValue.smsCodeMessage = smsCodeMessage;
            _resultValue.smsCodeSubmit = smsCodeSubmit;
            _resultValue.smsCodeTitle = smsCodeTitle;
            _resultValue.smsCountryFieldLabel = smsCountryFieldLabel;
            _resultValue.smsCountryFormat = smsCountryFormat;
            _resultValue.smsHaveAccessCode = smsHaveAccessCode;
            _resultValue.smsIsTwilio = smsIsTwilio;
            _resultValue.smsMessageFormat = smsMessageFormat;
            _resultValue.smsNumberCancel = smsNumberCancel;
            _resultValue.smsNumberError = smsNumberError;
            _resultValue.smsNumberFieldLabel = smsNumberFieldLabel;
            _resultValue.smsNumberFormat = smsNumberFormat;
            _resultValue.smsNumberMessage = smsNumberMessage;
            _resultValue.smsNumberSubmit = smsNumberSubmit;
            _resultValue.smsNumberTitle = smsNumberTitle;
            _resultValue.smsUsernameFormat = smsUsernameFormat;
            _resultValue.smsValidityDuration = smsValidityDuration;
            _resultValue.sponsorBackLink = sponsorBackLink;
            _resultValue.sponsorCancel = sponsorCancel;
            _resultValue.sponsorEmail = sponsorEmail;
            _resultValue.sponsorEmailError = sponsorEmailError;
            _resultValue.sponsorEmailTemplate = sponsorEmailTemplate;
            _resultValue.sponsorInfoApproved = sponsorInfoApproved;
            _resultValue.sponsorInfoDenied = sponsorInfoDenied;
            _resultValue.sponsorInfoPending = sponsorInfoPending;
            _resultValue.sponsorName = sponsorName;
            _resultValue.sponsorNameError = sponsorNameError;
            _resultValue.sponsorNotePending = sponsorNotePending;
            _resultValue.sponsorRequestAccess = sponsorRequestAccess;
            _resultValue.sponsorStatusApproved = sponsorStatusApproved;
            _resultValue.sponsorStatusDenied = sponsorStatusDenied;
            _resultValue.sponsorStatusPending = sponsorStatusPending;
            _resultValue.sponsorSubmit = sponsorSubmit;
            _resultValue.sponsorsError = sponsorsError;
            _resultValue.sponsorsFieldLabel = sponsorsFieldLabel;
            _resultValue.tos = tos;
            _resultValue.tosAcceptLabel = tosAcceptLabel;
            _resultValue.tosError = tosError;
            _resultValue.tosLink = tosLink;
            _resultValue.tosText = tosText;
            return _resultValue;
        }
    }
}
