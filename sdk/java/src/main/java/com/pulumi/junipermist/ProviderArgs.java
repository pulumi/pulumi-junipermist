// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0
     * results in infinite timeout.
     * 
     */
    @Import(name="apiTimeout", json=true)
    private @Nullable Output<Double> apiTimeout;

    /**
     * @return Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0
     * results in infinite timeout.
     * 
     */
    public Optional<Output<Double>> apiTimeout() {
        return Optional.ofNullable(this.apiTimeout);
    }

    /**
     * For API Token authentication, the Mist API Token.
     * 
     */
    @Import(name="apitoken")
    private @Nullable Output<String> apitoken;

    /**
     * @return For API Token authentication, the Mist API Token.
     * 
     */
    public Optional<Output<String>> apitoken() {
        return Optional.ofNullable(this.apitoken);
    }

    /**
     * URL of the Mist Cloud, e.g. `api.mist.com`.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return URL of the Mist Cloud, e.g. `api.mist.com`.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * For username/password authentication, the Mist Account password.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return For username/password authentication, the Mist Account password.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
     * `[username:password{@literal @}]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
     * are supported.
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<String> proxy;

    /**
     * @return Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
     * `[username:password{@literal @}]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
     * are supported.
     * 
     */
    public Optional<Output<String>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * For username/password authentication, the Mist Account username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return For username/password authentication, the Mist Account username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.apiTimeout = $.apiTimeout;
        this.apitoken = $.apitoken;
        this.host = $.host;
        this.password = $.password;
        this.proxy = $.proxy;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiTimeout Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0
         * results in infinite timeout.
         * 
         * @return builder
         * 
         */
        public Builder apiTimeout(@Nullable Output<Double> apiTimeout) {
            $.apiTimeout = apiTimeout;
            return this;
        }

        /**
         * @param apiTimeout Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0
         * results in infinite timeout.
         * 
         * @return builder
         * 
         */
        public Builder apiTimeout(Double apiTimeout) {
            return apiTimeout(Output.of(apiTimeout));
        }

        /**
         * @param apitoken For API Token authentication, the Mist API Token.
         * 
         * @return builder
         * 
         */
        public Builder apitoken(@Nullable Output<String> apitoken) {
            $.apitoken = apitoken;
            return this;
        }

        /**
         * @param apitoken For API Token authentication, the Mist API Token.
         * 
         * @return builder
         * 
         */
        public Builder apitoken(String apitoken) {
            return apitoken(Output.of(apitoken));
        }

        /**
         * @param host URL of the Mist Cloud, e.g. `api.mist.com`.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host URL of the Mist Cloud, e.g. `api.mist.com`.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password For username/password authentication, the Mist Account password.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password For username/password authentication, the Mist Account password.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param proxy Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
         * `[username:password{@literal @}]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
         * are supported.
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<String> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
         * `[username:password{@literal @}]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
         * are supported.
         * 
         * @return builder
         * 
         */
        public Builder proxy(String proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param username For username/password authentication, the Mist Account username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username For username/password authentication, the Mist Account username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProviderArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "host");
            }
            return $;
        }
    }

}
