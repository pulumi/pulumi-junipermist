// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStatError;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStatFan;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStatPic;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStatPoe;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStatPsus;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStatTemperature;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStatVcLink;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSwitchStatsDeviceSwitchStatModuleStat {
    private String backupVersion;
    private String biosVersion;
    private String cpldVersion;
    /**
     * @return used to report all error states the device node is running into.
     * An error should always have `type` and `since` fields, and could have some other fields specific to that type.
     * 
     */
    private List<GetSwitchStatsDeviceSwitchStatModuleStatError> errors;
    private List<GetSwitchStatsDeviceSwitchStatModuleStatFan> fans;
    private Integer fpcIdx;
    private String fpgaVersion;
    private Double lastSeen;
    private String model;
    private String opticsCpldVersion;
    private String pendingVersion;
    private List<GetSwitchStatsDeviceSwitchStatModuleStatPic> pics;
    private GetSwitchStatsDeviceSwitchStatModuleStatPoe poe;
    private String poeVersion;
    private String powerCpldVersion;
    private List<GetSwitchStatsDeviceSwitchStatModuleStatPsus> psuses;
    private String reFpgaVersion;
    private String recoveryVersion;
    private String serial;
    private String status;
    private List<GetSwitchStatsDeviceSwitchStatModuleStatTemperature> temperatures;
    private String tmcFpgaVersion;
    private String ubootVersion;
    private Integer uptime;
    private List<GetSwitchStatsDeviceSwitchStatModuleStatVcLink> vcLinks;
    private String vcMode;
    /**
     * @return master / backup / linecard
     * 
     */
    private String vcRole;
    private String vcState;
    private String version;

    private GetSwitchStatsDeviceSwitchStatModuleStat() {}
    public String backupVersion() {
        return this.backupVersion;
    }
    public String biosVersion() {
        return this.biosVersion;
    }
    public String cpldVersion() {
        return this.cpldVersion;
    }
    /**
     * @return used to report all error states the device node is running into.
     * An error should always have `type` and `since` fields, and could have some other fields specific to that type.
     * 
     */
    public List<GetSwitchStatsDeviceSwitchStatModuleStatError> errors() {
        return this.errors;
    }
    public List<GetSwitchStatsDeviceSwitchStatModuleStatFan> fans() {
        return this.fans;
    }
    public Integer fpcIdx() {
        return this.fpcIdx;
    }
    public String fpgaVersion() {
        return this.fpgaVersion;
    }
    public Double lastSeen() {
        return this.lastSeen;
    }
    public String model() {
        return this.model;
    }
    public String opticsCpldVersion() {
        return this.opticsCpldVersion;
    }
    public String pendingVersion() {
        return this.pendingVersion;
    }
    public List<GetSwitchStatsDeviceSwitchStatModuleStatPic> pics() {
        return this.pics;
    }
    public GetSwitchStatsDeviceSwitchStatModuleStatPoe poe() {
        return this.poe;
    }
    public String poeVersion() {
        return this.poeVersion;
    }
    public String powerCpldVersion() {
        return this.powerCpldVersion;
    }
    public List<GetSwitchStatsDeviceSwitchStatModuleStatPsus> psuses() {
        return this.psuses;
    }
    public String reFpgaVersion() {
        return this.reFpgaVersion;
    }
    public String recoveryVersion() {
        return this.recoveryVersion;
    }
    public String serial() {
        return this.serial;
    }
    public String status() {
        return this.status;
    }
    public List<GetSwitchStatsDeviceSwitchStatModuleStatTemperature> temperatures() {
        return this.temperatures;
    }
    public String tmcFpgaVersion() {
        return this.tmcFpgaVersion;
    }
    public String ubootVersion() {
        return this.ubootVersion;
    }
    public Integer uptime() {
        return this.uptime;
    }
    public List<GetSwitchStatsDeviceSwitchStatModuleStatVcLink> vcLinks() {
        return this.vcLinks;
    }
    public String vcMode() {
        return this.vcMode;
    }
    /**
     * @return master / backup / linecard
     * 
     */
    public String vcRole() {
        return this.vcRole;
    }
    public String vcState() {
        return this.vcState;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchStatsDeviceSwitchStatModuleStat defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupVersion;
        private String biosVersion;
        private String cpldVersion;
        private List<GetSwitchStatsDeviceSwitchStatModuleStatError> errors;
        private List<GetSwitchStatsDeviceSwitchStatModuleStatFan> fans;
        private Integer fpcIdx;
        private String fpgaVersion;
        private Double lastSeen;
        private String model;
        private String opticsCpldVersion;
        private String pendingVersion;
        private List<GetSwitchStatsDeviceSwitchStatModuleStatPic> pics;
        private GetSwitchStatsDeviceSwitchStatModuleStatPoe poe;
        private String poeVersion;
        private String powerCpldVersion;
        private List<GetSwitchStatsDeviceSwitchStatModuleStatPsus> psuses;
        private String reFpgaVersion;
        private String recoveryVersion;
        private String serial;
        private String status;
        private List<GetSwitchStatsDeviceSwitchStatModuleStatTemperature> temperatures;
        private String tmcFpgaVersion;
        private String ubootVersion;
        private Integer uptime;
        private List<GetSwitchStatsDeviceSwitchStatModuleStatVcLink> vcLinks;
        private String vcMode;
        private String vcRole;
        private String vcState;
        private String version;
        public Builder() {}
        public Builder(GetSwitchStatsDeviceSwitchStatModuleStat defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupVersion = defaults.backupVersion;
    	      this.biosVersion = defaults.biosVersion;
    	      this.cpldVersion = defaults.cpldVersion;
    	      this.errors = defaults.errors;
    	      this.fans = defaults.fans;
    	      this.fpcIdx = defaults.fpcIdx;
    	      this.fpgaVersion = defaults.fpgaVersion;
    	      this.lastSeen = defaults.lastSeen;
    	      this.model = defaults.model;
    	      this.opticsCpldVersion = defaults.opticsCpldVersion;
    	      this.pendingVersion = defaults.pendingVersion;
    	      this.pics = defaults.pics;
    	      this.poe = defaults.poe;
    	      this.poeVersion = defaults.poeVersion;
    	      this.powerCpldVersion = defaults.powerCpldVersion;
    	      this.psuses = defaults.psuses;
    	      this.reFpgaVersion = defaults.reFpgaVersion;
    	      this.recoveryVersion = defaults.recoveryVersion;
    	      this.serial = defaults.serial;
    	      this.status = defaults.status;
    	      this.temperatures = defaults.temperatures;
    	      this.tmcFpgaVersion = defaults.tmcFpgaVersion;
    	      this.ubootVersion = defaults.ubootVersion;
    	      this.uptime = defaults.uptime;
    	      this.vcLinks = defaults.vcLinks;
    	      this.vcMode = defaults.vcMode;
    	      this.vcRole = defaults.vcRole;
    	      this.vcState = defaults.vcState;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder backupVersion(String backupVersion) {
            if (backupVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "backupVersion");
            }
            this.backupVersion = backupVersion;
            return this;
        }
        @CustomType.Setter
        public Builder biosVersion(String biosVersion) {
            if (biosVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "biosVersion");
            }
            this.biosVersion = biosVersion;
            return this;
        }
        @CustomType.Setter
        public Builder cpldVersion(String cpldVersion) {
            if (cpldVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "cpldVersion");
            }
            this.cpldVersion = cpldVersion;
            return this;
        }
        @CustomType.Setter
        public Builder errors(List<GetSwitchStatsDeviceSwitchStatModuleStatError> errors) {
            if (errors == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "errors");
            }
            this.errors = errors;
            return this;
        }
        public Builder errors(GetSwitchStatsDeviceSwitchStatModuleStatError... errors) {
            return errors(List.of(errors));
        }
        @CustomType.Setter
        public Builder fans(List<GetSwitchStatsDeviceSwitchStatModuleStatFan> fans) {
            if (fans == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "fans");
            }
            this.fans = fans;
            return this;
        }
        public Builder fans(GetSwitchStatsDeviceSwitchStatModuleStatFan... fans) {
            return fans(List.of(fans));
        }
        @CustomType.Setter
        public Builder fpcIdx(Integer fpcIdx) {
            if (fpcIdx == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "fpcIdx");
            }
            this.fpcIdx = fpcIdx;
            return this;
        }
        @CustomType.Setter
        public Builder fpgaVersion(String fpgaVersion) {
            if (fpgaVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "fpgaVersion");
            }
            this.fpgaVersion = fpgaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(Double lastSeen) {
            if (lastSeen == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "lastSeen");
            }
            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder model(String model) {
            if (model == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "model");
            }
            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder opticsCpldVersion(String opticsCpldVersion) {
            if (opticsCpldVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "opticsCpldVersion");
            }
            this.opticsCpldVersion = opticsCpldVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pendingVersion(String pendingVersion) {
            if (pendingVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "pendingVersion");
            }
            this.pendingVersion = pendingVersion;
            return this;
        }
        @CustomType.Setter
        public Builder pics(List<GetSwitchStatsDeviceSwitchStatModuleStatPic> pics) {
            if (pics == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "pics");
            }
            this.pics = pics;
            return this;
        }
        public Builder pics(GetSwitchStatsDeviceSwitchStatModuleStatPic... pics) {
            return pics(List.of(pics));
        }
        @CustomType.Setter
        public Builder poe(GetSwitchStatsDeviceSwitchStatModuleStatPoe poe) {
            if (poe == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "poe");
            }
            this.poe = poe;
            return this;
        }
        @CustomType.Setter
        public Builder poeVersion(String poeVersion) {
            if (poeVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "poeVersion");
            }
            this.poeVersion = poeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder powerCpldVersion(String powerCpldVersion) {
            if (powerCpldVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "powerCpldVersion");
            }
            this.powerCpldVersion = powerCpldVersion;
            return this;
        }
        @CustomType.Setter
        public Builder psuses(List<GetSwitchStatsDeviceSwitchStatModuleStatPsus> psuses) {
            if (psuses == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "psuses");
            }
            this.psuses = psuses;
            return this;
        }
        public Builder psuses(GetSwitchStatsDeviceSwitchStatModuleStatPsus... psuses) {
            return psuses(List.of(psuses));
        }
        @CustomType.Setter
        public Builder reFpgaVersion(String reFpgaVersion) {
            if (reFpgaVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "reFpgaVersion");
            }
            this.reFpgaVersion = reFpgaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder recoveryVersion(String recoveryVersion) {
            if (recoveryVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "recoveryVersion");
            }
            this.recoveryVersion = recoveryVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder temperatures(List<GetSwitchStatsDeviceSwitchStatModuleStatTemperature> temperatures) {
            if (temperatures == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "temperatures");
            }
            this.temperatures = temperatures;
            return this;
        }
        public Builder temperatures(GetSwitchStatsDeviceSwitchStatModuleStatTemperature... temperatures) {
            return temperatures(List.of(temperatures));
        }
        @CustomType.Setter
        public Builder tmcFpgaVersion(String tmcFpgaVersion) {
            if (tmcFpgaVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "tmcFpgaVersion");
            }
            this.tmcFpgaVersion = tmcFpgaVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ubootVersion(String ubootVersion) {
            if (ubootVersion == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "ubootVersion");
            }
            this.ubootVersion = ubootVersion;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(Integer uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        @CustomType.Setter
        public Builder vcLinks(List<GetSwitchStatsDeviceSwitchStatModuleStatVcLink> vcLinks) {
            if (vcLinks == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "vcLinks");
            }
            this.vcLinks = vcLinks;
            return this;
        }
        public Builder vcLinks(GetSwitchStatsDeviceSwitchStatModuleStatVcLink... vcLinks) {
            return vcLinks(List.of(vcLinks));
        }
        @CustomType.Setter
        public Builder vcMode(String vcMode) {
            if (vcMode == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "vcMode");
            }
            this.vcMode = vcMode;
            return this;
        }
        @CustomType.Setter
        public Builder vcRole(String vcRole) {
            if (vcRole == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "vcRole");
            }
            this.vcRole = vcRole;
            return this;
        }
        @CustomType.Setter
        public Builder vcState(String vcState) {
            if (vcState == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "vcState");
            }
            this.vcState = vcState;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStatModuleStat", "version");
            }
            this.version = version;
            return this;
        }
        public GetSwitchStatsDeviceSwitchStatModuleStat build() {
            final var _resultValue = new GetSwitchStatsDeviceSwitchStatModuleStat();
            _resultValue.backupVersion = backupVersion;
            _resultValue.biosVersion = biosVersion;
            _resultValue.cpldVersion = cpldVersion;
            _resultValue.errors = errors;
            _resultValue.fans = fans;
            _resultValue.fpcIdx = fpcIdx;
            _resultValue.fpgaVersion = fpgaVersion;
            _resultValue.lastSeen = lastSeen;
            _resultValue.model = model;
            _resultValue.opticsCpldVersion = opticsCpldVersion;
            _resultValue.pendingVersion = pendingVersion;
            _resultValue.pics = pics;
            _resultValue.poe = poe;
            _resultValue.poeVersion = poeVersion;
            _resultValue.powerCpldVersion = powerCpldVersion;
            _resultValue.psuses = psuses;
            _resultValue.reFpgaVersion = reFpgaVersion;
            _resultValue.recoveryVersion = recoveryVersion;
            _resultValue.serial = serial;
            _resultValue.status = status;
            _resultValue.temperatures = temperatures;
            _resultValue.tmcFpgaVersion = tmcFpgaVersion;
            _resultValue.ubootVersion = ubootVersion;
            _resultValue.uptime = uptime;
            _resultValue.vcLinks = vcLinks;
            _resultValue.vcMode = vcMode;
            _resultValue.vcRole = vcRole;
            _resultValue.vcState = vcState;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
