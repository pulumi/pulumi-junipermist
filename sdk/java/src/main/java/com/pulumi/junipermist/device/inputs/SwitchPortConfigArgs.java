// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchPortConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchPortConfigArgs Empty = new SwitchPortConfigArgs();

    /**
     * To disable LACP support for the AE interface
     * 
     */
    @Import(name="aeDisableLacp")
    private @Nullable Output<Boolean> aeDisableLacp;

    /**
     * @return To disable LACP support for the AE interface
     * 
     */
    public Optional<Output<Boolean>> aeDisableLacp() {
        return Optional.ofNullable(this.aeDisableLacp);
    }

    /**
     * Users could force to use the designated AE name
     * 
     */
    @Import(name="aeIdx")
    private @Nullable Output<Integer> aeIdx;

    /**
     * @return Users could force to use the designated AE name
     * 
     */
    public Optional<Output<Integer>> aeIdx() {
        return Optional.ofNullable(this.aeIdx);
    }

    /**
     * to use fast timeout
     * 
     */
    @Import(name="aeLacpSlow")
    private @Nullable Output<Boolean> aeLacpSlow;

    /**
     * @return to use fast timeout
     * 
     */
    public Optional<Output<Boolean>> aeLacpSlow() {
        return Optional.ofNullable(this.aeLacpSlow);
    }

    @Import(name="aggregated")
    private @Nullable Output<Boolean> aggregated;

    public Optional<Output<Boolean>> aggregated() {
        return Optional.ofNullable(this.aggregated);
    }

    /**
     * if want to generate port up/down alarm
     * 
     */
    @Import(name="critical")
    private @Nullable Output<Boolean> critical;

    /**
     * @return if want to generate port up/down alarm
     * 
     */
    public Optional<Output<Boolean>> critical() {
        return Optional.ofNullable(this.critical);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * if `speed` and `duplex` are specified, whether to disable autonegotiation
     * 
     */
    @Import(name="disableAutoneg")
    private @Nullable Output<Boolean> disableAutoneg;

    /**
     * @return if `speed` and `duplex` are specified, whether to disable autonegotiation
     * 
     */
    public Optional<Output<Boolean>> disableAutoneg() {
        return Optional.ofNullable(this.disableAutoneg);
    }

    /**
     * enum: `auto`, `full`, `half`
     * 
     */
    @Import(name="duplex")
    private @Nullable Output<String> duplex;

    /**
     * @return enum: `auto`, `full`, `half`
     * 
     */
    public Optional<Output<String>> duplex() {
        return Optional.ofNullable(this.duplex);
    }

    /**
     * Enable dynamic usage for this port. Set to `dynamic` to enable.
     * 
     */
    @Import(name="dynamicUsage")
    private @Nullable Output<String> dynamicUsage;

    /**
     * @return Enable dynamic usage for this port. Set to `dynamic` to enable.
     * 
     */
    public Optional<Output<String>> dynamicUsage() {
        return Optional.ofNullable(this.dynamicUsage);
    }

    @Import(name="esilag")
    private @Nullable Output<Boolean> esilag;

    public Optional<Output<Boolean>> esilag() {
        return Optional.ofNullable(this.esilag);
    }

    /**
     * media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * prevent helpdesk to override the port config
     * 
     */
    @Import(name="noLocalOverwrite")
    private @Nullable Output<Boolean> noLocalOverwrite;

    /**
     * @return prevent helpdesk to override the port config
     * 
     */
    public Optional<Output<Boolean>> noLocalOverwrite() {
        return Optional.ofNullable(this.noLocalOverwrite);
    }

    @Import(name="poeDisabled")
    private @Nullable Output<Boolean> poeDisabled;

    public Optional<Output<Boolean>> poeDisabled() {
        return Optional.ofNullable(this.poeDisabled);
    }

    /**
     * enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
     * 
     */
    @Import(name="speed")
    private @Nullable Output<String> speed;

    /**
     * @return enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
     * 
     */
    public Optional<Output<String>> speed() {
        return Optional.ofNullable(this.speed);
    }

    /**
     * port usage name.
     * 
     * If EVPN is used, use `evpn_uplink`or `evpn_downlink`
     * 
     */
    @Import(name="usage", required=true)
    private Output<String> usage;

    /**
     * @return port usage name.
     * 
     * If EVPN is used, use `evpn_uplink`or `evpn_downlink`
     * 
     */
    public Output<String> usage() {
        return this.usage;
    }

    private SwitchPortConfigArgs() {}

    private SwitchPortConfigArgs(SwitchPortConfigArgs $) {
        this.aeDisableLacp = $.aeDisableLacp;
        this.aeIdx = $.aeIdx;
        this.aeLacpSlow = $.aeLacpSlow;
        this.aggregated = $.aggregated;
        this.critical = $.critical;
        this.description = $.description;
        this.disableAutoneg = $.disableAutoneg;
        this.duplex = $.duplex;
        this.dynamicUsage = $.dynamicUsage;
        this.esilag = $.esilag;
        this.mtu = $.mtu;
        this.noLocalOverwrite = $.noLocalOverwrite;
        this.poeDisabled = $.poeDisabled;
        this.speed = $.speed;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchPortConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchPortConfigArgs $;

        public Builder() {
            $ = new SwitchPortConfigArgs();
        }

        public Builder(SwitchPortConfigArgs defaults) {
            $ = new SwitchPortConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aeDisableLacp To disable LACP support for the AE interface
         * 
         * @return builder
         * 
         */
        public Builder aeDisableLacp(@Nullable Output<Boolean> aeDisableLacp) {
            $.aeDisableLacp = aeDisableLacp;
            return this;
        }

        /**
         * @param aeDisableLacp To disable LACP support for the AE interface
         * 
         * @return builder
         * 
         */
        public Builder aeDisableLacp(Boolean aeDisableLacp) {
            return aeDisableLacp(Output.of(aeDisableLacp));
        }

        /**
         * @param aeIdx Users could force to use the designated AE name
         * 
         * @return builder
         * 
         */
        public Builder aeIdx(@Nullable Output<Integer> aeIdx) {
            $.aeIdx = aeIdx;
            return this;
        }

        /**
         * @param aeIdx Users could force to use the designated AE name
         * 
         * @return builder
         * 
         */
        public Builder aeIdx(Integer aeIdx) {
            return aeIdx(Output.of(aeIdx));
        }

        /**
         * @param aeLacpSlow to use fast timeout
         * 
         * @return builder
         * 
         */
        public Builder aeLacpSlow(@Nullable Output<Boolean> aeLacpSlow) {
            $.aeLacpSlow = aeLacpSlow;
            return this;
        }

        /**
         * @param aeLacpSlow to use fast timeout
         * 
         * @return builder
         * 
         */
        public Builder aeLacpSlow(Boolean aeLacpSlow) {
            return aeLacpSlow(Output.of(aeLacpSlow));
        }

        public Builder aggregated(@Nullable Output<Boolean> aggregated) {
            $.aggregated = aggregated;
            return this;
        }

        public Builder aggregated(Boolean aggregated) {
            return aggregated(Output.of(aggregated));
        }

        /**
         * @param critical if want to generate port up/down alarm
         * 
         * @return builder
         * 
         */
        public Builder critical(@Nullable Output<Boolean> critical) {
            $.critical = critical;
            return this;
        }

        /**
         * @param critical if want to generate port up/down alarm
         * 
         * @return builder
         * 
         */
        public Builder critical(Boolean critical) {
            return critical(Output.of(critical));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableAutoneg if `speed` and `duplex` are specified, whether to disable autonegotiation
         * 
         * @return builder
         * 
         */
        public Builder disableAutoneg(@Nullable Output<Boolean> disableAutoneg) {
            $.disableAutoneg = disableAutoneg;
            return this;
        }

        /**
         * @param disableAutoneg if `speed` and `duplex` are specified, whether to disable autonegotiation
         * 
         * @return builder
         * 
         */
        public Builder disableAutoneg(Boolean disableAutoneg) {
            return disableAutoneg(Output.of(disableAutoneg));
        }

        /**
         * @param duplex enum: `auto`, `full`, `half`
         * 
         * @return builder
         * 
         */
        public Builder duplex(@Nullable Output<String> duplex) {
            $.duplex = duplex;
            return this;
        }

        /**
         * @param duplex enum: `auto`, `full`, `half`
         * 
         * @return builder
         * 
         */
        public Builder duplex(String duplex) {
            return duplex(Output.of(duplex));
        }

        /**
         * @param dynamicUsage Enable dynamic usage for this port. Set to `dynamic` to enable.
         * 
         * @return builder
         * 
         */
        public Builder dynamicUsage(@Nullable Output<String> dynamicUsage) {
            $.dynamicUsage = dynamicUsage;
            return this;
        }

        /**
         * @param dynamicUsage Enable dynamic usage for this port. Set to `dynamic` to enable.
         * 
         * @return builder
         * 
         */
        public Builder dynamicUsage(String dynamicUsage) {
            return dynamicUsage(Output.of(dynamicUsage));
        }

        public Builder esilag(@Nullable Output<Boolean> esilag) {
            $.esilag = esilag;
            return this;
        }

        public Builder esilag(Boolean esilag) {
            return esilag(Output.of(esilag));
        }

        /**
         * @param mtu media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param noLocalOverwrite prevent helpdesk to override the port config
         * 
         * @return builder
         * 
         */
        public Builder noLocalOverwrite(@Nullable Output<Boolean> noLocalOverwrite) {
            $.noLocalOverwrite = noLocalOverwrite;
            return this;
        }

        /**
         * @param noLocalOverwrite prevent helpdesk to override the port config
         * 
         * @return builder
         * 
         */
        public Builder noLocalOverwrite(Boolean noLocalOverwrite) {
            return noLocalOverwrite(Output.of(noLocalOverwrite));
        }

        public Builder poeDisabled(@Nullable Output<Boolean> poeDisabled) {
            $.poeDisabled = poeDisabled;
            return this;
        }

        public Builder poeDisabled(Boolean poeDisabled) {
            return poeDisabled(Output.of(poeDisabled));
        }

        /**
         * @param speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
         * 
         * @return builder
         * 
         */
        public Builder speed(@Nullable Output<String> speed) {
            $.speed = speed;
            return this;
        }

        /**
         * @param speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
         * 
         * @return builder
         * 
         */
        public Builder speed(String speed) {
            return speed(Output.of(speed));
        }

        /**
         * @param usage port usage name.
         * 
         * If EVPN is used, use `evpn_uplink`or `evpn_downlink`
         * 
         * @return builder
         * 
         */
        public Builder usage(Output<String> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage port usage name.
         * 
         * If EVPN is used, use `evpn_uplink`or `evpn_downlink`
         * 
         * @return builder
         * 
         */
        public Builder usage(String usage) {
            return usage(Output.of(usage));
        }

        public SwitchPortConfigArgs build() {
            if ($.usage == null) {
                throw new MissingRequiredPropertyException("SwitchPortConfigArgs", "usage");
            }
            return $;
        }
    }

}
