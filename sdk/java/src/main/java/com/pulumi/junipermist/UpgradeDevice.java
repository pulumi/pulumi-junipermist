// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.junipermist.UpgradeDeviceArgs;
import com.pulumi.junipermist.Utilities;
import com.pulumi.junipermist.inputs.UpgradeDeviceState;
import com.pulumi.junipermist.outputs.UpgradeDeviceFwupdate;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can be used to upgrade the firmware of a single device (Wi-Fi Access Points, Switches and SRX/SSR Gateways).
 * 
 * The resource will send the upgrade command to Mist, which will take care of deploying the new firmware version to the device, and reboot it if required.
 * 
 * The time required to upgrade a device depends on the type of device and its hardware. By default, the resource will track the upgrade process and only return the result once the device is upgraded and rebooted (unless `reboot`==`false` or `reboot_at` is set).\
 * If required it is possible to run the upgrade in async mode (attribute `sync`=`false`). In this case, the resource will only trigger the upgrade and return the Mist response, but will not track the upgrade progress.
 * 
 * The list of available firmware versions can be retrieved with the `junipermist.device.getVersions` data source.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.junipermist.UpgradeDevice;
 * import com.pulumi.junipermist.UpgradeDeviceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var apUpgrade = new UpgradeDevice("apUpgrade", UpgradeDeviceArgs.builder()
 *             .siteId(terraformTest.id())
 *             .deviceId(apOne.id())
 *             .targetVersion("0.14.29543")
 *             .build());
 * 
 *         var switchUpgrade = new UpgradeDevice("switchUpgrade", UpgradeDeviceArgs.builder()
 *             .siteId(terraformTest.id())
 *             .deviceId(switchOne.id())
 *             .targetVersion("24.2R1-S1.10")
 *             .reboot(true)
 *             .syncUpgradeTimeout(3600)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="junipermist:index/upgradeDevice:UpgradeDevice")
public class UpgradeDevice extends com.pulumi.resources.CustomResource {
    @Export(name="deviceId", refs={String.class}, tree="[0]")
    private Output<String> deviceId;

    public Output<String> deviceId() {
        return this.deviceId;
    }
    /**
     * current device firmware version
     * 
     */
    @Export(name="deviceVersion", refs={String.class}, tree="[0]")
    private Output<String> deviceVersion;

    /**
     * @return current device firmware version
     * 
     */
    public Output<String> deviceVersion() {
        return this.deviceVersion;
    }
    @Export(name="fwupdate", refs={UpgradeDeviceFwupdate.class}, tree="[0]")
    private Output<UpgradeDeviceFwupdate> fwupdate;

    public Output<UpgradeDeviceFwupdate> fwupdate() {
        return this.fwupdate;
    }
    /**
     * For Switches and Gateways only (APs are automatically rebooted). Reboot device immediately after upgrade is completed
     * 
     */
    @Export(name="reboot", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reboot;

    /**
     * @return For Switches and Gateways only (APs are automatically rebooted). Reboot device immediately after upgrade is completed
     * 
     */
    public Output<Boolean> reboot() {
        return this.reboot;
    }
    /**
     * For Switches and Gateways only and if `reboot`==`true`. Reboot start time in epoch seconds, default is `start_time`
     * 
     */
    @Export(name="rebootAt", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> rebootAt;

    /**
     * @return For Switches and Gateways only and if `reboot`==`true`. Reboot start time in epoch seconds, default is `start_time`
     * 
     */
    public Output<Optional<Integer>> rebootAt() {
        return Codegen.optional(this.rebootAt);
    }
    @Export(name="siteId", refs={String.class}, tree="[0]")
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }
    /**
     * For Junos devices only. Perform recovery snapshot after device is rebooted
     * 
     */
    @Export(name="snapshot", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> snapshot;

    /**
     * @return For Junos devices only. Perform recovery snapshot after device is rebooted
     * 
     */
    public Output<Boolean> snapshot() {
        return this.snapshot;
    }
    /**
     * Firmware download start time in epoch
     * 
     */
    @Export(name="startTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> startTime;

    /**
     * @return Firmware download start time in epoch
     * 
     */
    public Output<Optional<Integer>> startTime() {
        return Codegen.optional(this.startTime);
    }
    /**
     * enum: `error`, `inprogress`, `scheduled`, `starting`, `success`
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return enum: `error`, `inprogress`, `scheduled`, `starting`, `success`
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * if set to `false`, the provider will just trigger the upgrade and not wait for the end of the upgrade process. Default is `true`
     * 
     */
    @Export(name="syncUpgrade", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> syncUpgrade;

    /**
     * @return if set to `false`, the provider will just trigger the upgrade and not wait for the end of the upgrade process. Default is `true`
     * 
     */
    public Output<Boolean> syncUpgrade() {
        return this.syncUpgrade;
    }
    /**
     * if set to `sync_upgrade`==`true`, how long to wait between each refresh of the upgrade status, in seconds. Default is 30, minimum is 15
     * 
     */
    @Export(name="syncUpgradeRefreshInterval", refs={Integer.class}, tree="[0]")
    private Output<Integer> syncUpgradeRefreshInterval;

    /**
     * @return if set to `sync_upgrade`==`true`, how long to wait between each refresh of the upgrade status, in seconds. Default is 30, minimum is 15
     * 
     */
    public Output<Integer> syncUpgradeRefreshInterval() {
        return this.syncUpgradeRefreshInterval;
    }
    /**
     * if set to `sync_upgrade`==`true`, how long to wait for the upgrade to start before raising an error, in seconds. Default is 60, minimum is 60
     * 
     */
    @Export(name="syncUpgradeStartTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> syncUpgradeStartTimeout;

    /**
     * @return if set to `sync_upgrade`==`true`, how long to wait for the upgrade to start before raising an error, in seconds. Default is 60, minimum is 60
     * 
     */
    public Output<Integer> syncUpgradeStartTimeout() {
        return this.syncUpgradeStartTimeout;
    }
    /**
     * if set to `sync_upgrade`==`true`, how long to wait for the upgrade to end before raising an error, in seconds. Default is 1800
     * 
     */
    @Export(name="syncUpgradeTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> syncUpgradeTimeout;

    /**
     * @return if set to `sync_upgrade`==`true`, how long to wait for the upgrade to end before raising an error, in seconds. Default is 1800
     * 
     */
    public Output<Integer> syncUpgradeTimeout() {
        return this.syncUpgradeTimeout;
    }
    /**
     * firmware version to deploy to the device. Use the `junipermist.device.getVersions` datasource to get the list of available firmware versions
     * 
     */
    @Export(name="targetVersion", refs={String.class}, tree="[0]")
    private Output<String> targetVersion;

    /**
     * @return firmware version to deploy to the device. Use the `junipermist.device.getVersions` datasource to get the list of available firmware versions
     * 
     */
    public Output<String> targetVersion() {
        return this.targetVersion;
    }
    /**
     * Epoch (seconds)
     * 
     */
    @Export(name="timestamp", refs={Double.class}, tree="[0]")
    private Output<Double> timestamp;

    /**
     * @return Epoch (seconds)
     * 
     */
    public Output<Double> timestamp() {
        return this.timestamp;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UpgradeDevice(java.lang.String name) {
        this(name, UpgradeDeviceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UpgradeDevice(java.lang.String name, UpgradeDeviceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UpgradeDevice(java.lang.String name, UpgradeDeviceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:index/upgradeDevice:UpgradeDevice", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private UpgradeDevice(java.lang.String name, Output<java.lang.String> id, @Nullable UpgradeDeviceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:index/upgradeDevice:UpgradeDevice", name, state, makeResourceOptions(options, id), false);
    }

    private static UpgradeDeviceArgs makeArgs(UpgradeDeviceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? UpgradeDeviceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-junipermist")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UpgradeDevice get(java.lang.String name, Output<java.lang.String> id, @Nullable UpgradeDeviceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UpgradeDevice(name, id, state, options);
    }
}
