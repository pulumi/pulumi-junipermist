// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InventoryDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InventoryDeviceArgs Empty = new InventoryDeviceArgs();

    /**
     * used to claim the device to the Mist Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)
     * 
     */
    @Import(name="claimCode")
    private @Nullable Output<String> claimCode;

    /**
     * @return used to claim the device to the Mist Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)
     * 
     */
    public Optional<Output<String>> claimCode() {
        return Optional.ofNullable(this.claimCode);
    }

    /**
     * deviceprofile id if assigned, null if not assigned
     * 
     */
    @Import(name="deviceprofileId")
    private @Nullable Output<String> deviceprofileId;

    /**
     * @return deviceprofile id if assigned, null if not assigned
     * 
     */
    public Optional<Output<String>> deviceprofileId() {
        return Optional.ofNullable(this.deviceprofileId);
    }

    /**
     * hostname reported by the device
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return hostname reported by the device
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * device id
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return device id
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * used to managed a device already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)
     * 
     */
    @Import(name="mac")
    private @Nullable Output<String> mac;

    /**
     * @return used to managed a device already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)
     * 
     */
    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * device model
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    /**
     * @return device model
     * 
     */
    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * device serial
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return device serial
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * Site ID. Used to assign device to a Site
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    /**
     * @return Site ID. Used to assign device to a Site
     * 
     */
    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * enum: `ap`, `gateway`, `switch`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return enum: `ap`, `gateway`, `switch`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`
     * 
     */
    @Import(name="unclaimWhenDestroyed")
    private @Nullable Output<Boolean> unclaimWhenDestroyed;

    /**
     * @return Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`
     * 
     */
    public Optional<Output<Boolean>> unclaimWhenDestroyed() {
        return Optional.ofNullable(this.unclaimWhenDestroyed);
    }

    /**
     * if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Cluster, MAC Address of the Cluster
     * 
     */
    @Import(name="vcMac")
    private @Nullable Output<String> vcMac;

    /**
     * @return if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Cluster, MAC Address of the Cluster
     * 
     */
    public Optional<Output<String>> vcMac() {
        return Optional.ofNullable(this.vcMac);
    }

    private InventoryDeviceArgs() {}

    private InventoryDeviceArgs(InventoryDeviceArgs $) {
        this.claimCode = $.claimCode;
        this.deviceprofileId = $.deviceprofileId;
        this.hostname = $.hostname;
        this.id = $.id;
        this.mac = $.mac;
        this.model = $.model;
        this.orgId = $.orgId;
        this.serial = $.serial;
        this.siteId = $.siteId;
        this.type = $.type;
        this.unclaimWhenDestroyed = $.unclaimWhenDestroyed;
        this.vcMac = $.vcMac;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InventoryDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InventoryDeviceArgs $;

        public Builder() {
            $ = new InventoryDeviceArgs();
        }

        public Builder(InventoryDeviceArgs defaults) {
            $ = new InventoryDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param claimCode used to claim the device to the Mist Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)
         * 
         * @return builder
         * 
         */
        public Builder claimCode(@Nullable Output<String> claimCode) {
            $.claimCode = claimCode;
            return this;
        }

        /**
         * @param claimCode used to claim the device to the Mist Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)
         * 
         * @return builder
         * 
         */
        public Builder claimCode(String claimCode) {
            return claimCode(Output.of(claimCode));
        }

        /**
         * @param deviceprofileId deviceprofile id if assigned, null if not assigned
         * 
         * @return builder
         * 
         */
        public Builder deviceprofileId(@Nullable Output<String> deviceprofileId) {
            $.deviceprofileId = deviceprofileId;
            return this;
        }

        /**
         * @param deviceprofileId deviceprofile id if assigned, null if not assigned
         * 
         * @return builder
         * 
         */
        public Builder deviceprofileId(String deviceprofileId) {
            return deviceprofileId(Output.of(deviceprofileId));
        }

        /**
         * @param hostname hostname reported by the device
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname hostname reported by the device
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param id device id
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id device id
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param mac used to managed a device already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac used to managed a device already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param model device model
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model device model
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param serial device serial
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial device serial
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param siteId Site ID. Used to assign device to a Site
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Site ID. Used to assign device to a Site
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param type enum: `ap`, `gateway`, `switch`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type enum: `ap`, `gateway`, `switch`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unclaimWhenDestroyed Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder unclaimWhenDestroyed(@Nullable Output<Boolean> unclaimWhenDestroyed) {
            $.unclaimWhenDestroyed = unclaimWhenDestroyed;
            return this;
        }

        /**
         * @param unclaimWhenDestroyed Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder unclaimWhenDestroyed(Boolean unclaimWhenDestroyed) {
            return unclaimWhenDestroyed(Output.of(unclaimWhenDestroyed));
        }

        /**
         * @param vcMac if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Cluster, MAC Address of the Cluster
         * 
         * @return builder
         * 
         */
        public Builder vcMac(@Nullable Output<String> vcMac) {
            $.vcMac = vcMac;
            return this;
        }

        /**
         * @param vcMac if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Cluster, MAC Address of the Cluster
         * 
         * @return builder
         * 
         */
        public Builder vcMac(String vcMac) {
            return vcMac(Output.of(vcMac));
        }

        public InventoryDeviceArgs build() {
            return $;
        }
    }

}
