// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWlansSiteWlanDynamicPsk {
    /**
     * @return default PSK to use if cloud WLC is not available, 8-63 characters
     * 
     */
    private String defaultPsk;
    private String defaultVlanId;
    private Boolean enabled;
    /**
     * @return when 11r is enabled, we&#39;ll try to use the cached PMK, this can be disabled. `false` means auto
     * 
     */
    private Boolean forceLookup;
    /**
     * @return enum: `cloud_psks`, `radius`
     * 
     */
    private String source;

    private GetWlansSiteWlanDynamicPsk() {}
    /**
     * @return default PSK to use if cloud WLC is not available, 8-63 characters
     * 
     */
    public String defaultPsk() {
        return this.defaultPsk;
    }
    public String defaultVlanId() {
        return this.defaultVlanId;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return when 11r is enabled, we&#39;ll try to use the cached PMK, this can be disabled. `false` means auto
     * 
     */
    public Boolean forceLookup() {
        return this.forceLookup;
    }
    /**
     * @return enum: `cloud_psks`, `radius`
     * 
     */
    public String source() {
        return this.source;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlansSiteWlanDynamicPsk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultPsk;
        private String defaultVlanId;
        private Boolean enabled;
        private Boolean forceLookup;
        private String source;
        public Builder() {}
        public Builder(GetWlansSiteWlanDynamicPsk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultPsk = defaults.defaultPsk;
    	      this.defaultVlanId = defaults.defaultVlanId;
    	      this.enabled = defaults.enabled;
    	      this.forceLookup = defaults.forceLookup;
    	      this.source = defaults.source;
        }

        @CustomType.Setter
        public Builder defaultPsk(String defaultPsk) {
            if (defaultPsk == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanDynamicPsk", "defaultPsk");
            }
            this.defaultPsk = defaultPsk;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVlanId(String defaultVlanId) {
            if (defaultVlanId == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanDynamicPsk", "defaultVlanId");
            }
            this.defaultVlanId = defaultVlanId;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanDynamicPsk", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder forceLookup(Boolean forceLookup) {
            if (forceLookup == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanDynamicPsk", "forceLookup");
            }
            this.forceLookup = forceLookup;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanDynamicPsk", "source");
            }
            this.source = source;
            return this;
        }
        public GetWlansSiteWlanDynamicPsk build() {
            final var _resultValue = new GetWlansSiteWlanDynamicPsk();
            _resultValue.defaultPsk = defaultPsk;
            _resultValue.defaultVlanId = defaultVlanId;
            _resultValue.enabled = enabled;
            _resultValue.forceLookup = forceLookup;
            _resultValue.source = source;
            return _resultValue;
        }
    }
}
