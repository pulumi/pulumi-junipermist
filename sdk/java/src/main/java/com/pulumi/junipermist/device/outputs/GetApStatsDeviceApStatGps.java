// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetApStatsDeviceApStatGps {
    /**
     * @return The estimated accuracy or accuracy of the GPS coordinates, measured in meters.
     * 
     */
    private Double accuracy;
    /**
     * @return The elevation of the AP above sea level, measured in meters.
     * 
     */
    private Double altitude;
    /**
     * @return The geographic latitude of the AP, measured in degrees.
     * 
     */
    private Double latitude;
    /**
     * @return The geographic longitude of the AP, measured in degrees.
     * 
     */
    private Double longitude;
    /**
     * @return The origin of the GPS data. enum:
     *   * `gps`: from this device’s GPS estimates
     *   * `otherAp` from neighboring device GPS estimates
     * 
     */
    private String src;
    /**
     * @return Epoch (seconds)
     * 
     */
    private Double timestamp;

    private GetApStatsDeviceApStatGps() {}
    /**
     * @return The estimated accuracy or accuracy of the GPS coordinates, measured in meters.
     * 
     */
    public Double accuracy() {
        return this.accuracy;
    }
    /**
     * @return The elevation of the AP above sea level, measured in meters.
     * 
     */
    public Double altitude() {
        return this.altitude;
    }
    /**
     * @return The geographic latitude of the AP, measured in degrees.
     * 
     */
    public Double latitude() {
        return this.latitude;
    }
    /**
     * @return The geographic longitude of the AP, measured in degrees.
     * 
     */
    public Double longitude() {
        return this.longitude;
    }
    /**
     * @return The origin of the GPS data. enum:
     *   * `gps`: from this device’s GPS estimates
     *   * `otherAp` from neighboring device GPS estimates
     * 
     */
    public String src() {
        return this.src;
    }
    /**
     * @return Epoch (seconds)
     * 
     */
    public Double timestamp() {
        return this.timestamp;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApStatsDeviceApStatGps defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double accuracy;
        private Double altitude;
        private Double latitude;
        private Double longitude;
        private String src;
        private Double timestamp;
        public Builder() {}
        public Builder(GetApStatsDeviceApStatGps defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accuracy = defaults.accuracy;
    	      this.altitude = defaults.altitude;
    	      this.latitude = defaults.latitude;
    	      this.longitude = defaults.longitude;
    	      this.src = defaults.src;
    	      this.timestamp = defaults.timestamp;
        }

        @CustomType.Setter
        public Builder accuracy(Double accuracy) {
            if (accuracy == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatGps", "accuracy");
            }
            this.accuracy = accuracy;
            return this;
        }
        @CustomType.Setter
        public Builder altitude(Double altitude) {
            if (altitude == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatGps", "altitude");
            }
            this.altitude = altitude;
            return this;
        }
        @CustomType.Setter
        public Builder latitude(Double latitude) {
            if (latitude == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatGps", "latitude");
            }
            this.latitude = latitude;
            return this;
        }
        @CustomType.Setter
        public Builder longitude(Double longitude) {
            if (longitude == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatGps", "longitude");
            }
            this.longitude = longitude;
            return this;
        }
        @CustomType.Setter
        public Builder src(String src) {
            if (src == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatGps", "src");
            }
            this.src = src;
            return this;
        }
        @CustomType.Setter
        public Builder timestamp(Double timestamp) {
            if (timestamp == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatGps", "timestamp");
            }
            this.timestamp = timestamp;
            return this;
        }
        public GetApStatsDeviceApStatGps build() {
            final var _resultValue = new GetApStatsDeviceApStatGps();
            _resultValue.accuracy = accuracy;
            _resultValue.altitude = altitude;
            _resultValue.latitude = latitude;
            _resultValue.longitude = longitude;
            _resultValue.src = src;
            _resultValue.timestamp = timestamp;
            return _resultValue;
        }
    }
}
