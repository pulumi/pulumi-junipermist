// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    @Import(name="deviceId", required=true)
    private Output<String> deviceId;

    public Output<String> deviceId() {
        return this.deviceId;
    }

    /**
     * path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`
     * 
     */
    @Import(name="file", required=true)
    private Output<String> file;

    /**
     * @return path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`
     * 
     */
    public Output<String> file() {
        return this.file;
    }

    @Import(name="imageNumber", required=true)
    private Output<Integer> imageNumber;

    public Output<Integer> imageNumber() {
        return this.imageNumber;
    }

    @Import(name="siteId", required=true)
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.deviceId = $.deviceId;
        this.file = $.file;
        this.imageNumber = $.imageNumber;
        this.siteId = $.siteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        public Builder deviceId(Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        /**
         * @param file path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`
         * 
         * @return builder
         * 
         */
        public Builder file(Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        public Builder imageNumber(Output<Integer> imageNumber) {
            $.imageNumber = imageNumber;
            return this;
        }

        public Builder imageNumber(Integer imageNumber) {
            return imageNumber(Output.of(imageNumber));
        }

        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public ImageArgs build() {
            if ($.deviceId == null) {
                throw new MissingRequiredPropertyException("ImageArgs", "deviceId");
            }
            if ($.file == null) {
                throw new MissingRequiredPropertyException("ImageArgs", "file");
            }
            if ($.imageNumber == null) {
                throw new MissingRequiredPropertyException("ImageArgs", "imageNumber");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("ImageArgs", "siteId");
            }
            return $;
        }
    }

}
