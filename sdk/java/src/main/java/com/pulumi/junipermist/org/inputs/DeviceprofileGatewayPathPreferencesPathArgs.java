// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceprofileGatewayPathPreferencesPathArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceprofileGatewayPathPreferencesPathArgs Empty = new DeviceprofileGatewayPathPreferencesPathArgs();

    @Import(name="cost")
    private @Nullable Output<Integer> cost;

    public Optional<Output<Integer>> cost() {
        return Optional.ofNullable(this.cost);
    }

    /**
     * For SSR Only. `true`, if this specific path is undesired
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return For SSR Only. `true`, if this specific path is undesired
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Only if `type`==`local`, if a different gateway is desired
     * 
     */
    @Import(name="gatewayIp")
    private @Nullable Output<String> gatewayIp;

    /**
     * @return Only if `type`==`local`, if a different gateway is desired
     * 
     */
    public Optional<Output<String>> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }

    /**
     * Only if `type`==`vpn`, if this vpn path can be used for internet
     * 
     */
    @Import(name="internetAccess")
    private @Nullable Output<Boolean> internetAccess;

    /**
     * @return Only if `type`==`vpn`, if this vpn path can be used for internet
     * 
     */
    public Optional<Output<Boolean>> internetAccess() {
        return Optional.ofNullable(this.internetAccess);
    }

    /**
     * Required when
     *   * `type`==`vpn`: the name of the VPN Path to use
     *   * `type`==`wan`: the name of the WAN interface to use
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Required when
     *   * `type`==`vpn`: the name of the VPN Path to use
     *   * `type`==`wan`: the name of the WAN interface to use
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Required when `type`==`local`
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return Required when `type`==`local`
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * If `type`==`local`, if destination IP is to be replaced
     * 
     */
    @Import(name="targetIps")
    private @Nullable Output<List<String>> targetIps;

    /**
     * @return If `type`==`local`, if destination IP is to be replaced
     * 
     */
    public Optional<Output<List<String>>> targetIps() {
        return Optional.ofNullable(this.targetIps);
    }

    /**
     * enum: `local`, `tunnel`, `vpn`, `wan`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return enum: `local`, `tunnel`, `vpn`, `wan`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Optional if `type`==`vpn`
     * 
     */
    @Import(name="wanName")
    private @Nullable Output<String> wanName;

    /**
     * @return Optional if `type`==`vpn`
     * 
     */
    public Optional<Output<String>> wanName() {
        return Optional.ofNullable(this.wanName);
    }

    private DeviceprofileGatewayPathPreferencesPathArgs() {}

    private DeviceprofileGatewayPathPreferencesPathArgs(DeviceprofileGatewayPathPreferencesPathArgs $) {
        this.cost = $.cost;
        this.disabled = $.disabled;
        this.gatewayIp = $.gatewayIp;
        this.internetAccess = $.internetAccess;
        this.name = $.name;
        this.networks = $.networks;
        this.targetIps = $.targetIps;
        this.type = $.type;
        this.wanName = $.wanName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceprofileGatewayPathPreferencesPathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceprofileGatewayPathPreferencesPathArgs $;

        public Builder() {
            $ = new DeviceprofileGatewayPathPreferencesPathArgs();
        }

        public Builder(DeviceprofileGatewayPathPreferencesPathArgs defaults) {
            $ = new DeviceprofileGatewayPathPreferencesPathArgs(Objects.requireNonNull(defaults));
        }

        public Builder cost(@Nullable Output<Integer> cost) {
            $.cost = cost;
            return this;
        }

        public Builder cost(Integer cost) {
            return cost(Output.of(cost));
        }

        /**
         * @param disabled For SSR Only. `true`, if this specific path is undesired
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled For SSR Only. `true`, if this specific path is undesired
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param gatewayIp Only if `type`==`local`, if a different gateway is desired
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(@Nullable Output<String> gatewayIp) {
            $.gatewayIp = gatewayIp;
            return this;
        }

        /**
         * @param gatewayIp Only if `type`==`local`, if a different gateway is desired
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(String gatewayIp) {
            return gatewayIp(Output.of(gatewayIp));
        }

        /**
         * @param internetAccess Only if `type`==`vpn`, if this vpn path can be used for internet
         * 
         * @return builder
         * 
         */
        public Builder internetAccess(@Nullable Output<Boolean> internetAccess) {
            $.internetAccess = internetAccess;
            return this;
        }

        /**
         * @param internetAccess Only if `type`==`vpn`, if this vpn path can be used for internet
         * 
         * @return builder
         * 
         */
        public Builder internetAccess(Boolean internetAccess) {
            return internetAccess(Output.of(internetAccess));
        }

        /**
         * @param name Required when
         *   * `type`==`vpn`: the name of the VPN Path to use
         *   * `type`==`wan`: the name of the WAN interface to use
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required when
         *   * `type`==`vpn`: the name of the VPN Path to use
         *   * `type`==`wan`: the name of the WAN interface to use
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Required when `type`==`local`
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Required when `type`==`local`
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks Required when `type`==`local`
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param targetIps If `type`==`local`, if destination IP is to be replaced
         * 
         * @return builder
         * 
         */
        public Builder targetIps(@Nullable Output<List<String>> targetIps) {
            $.targetIps = targetIps;
            return this;
        }

        /**
         * @param targetIps If `type`==`local`, if destination IP is to be replaced
         * 
         * @return builder
         * 
         */
        public Builder targetIps(List<String> targetIps) {
            return targetIps(Output.of(targetIps));
        }

        /**
         * @param targetIps If `type`==`local`, if destination IP is to be replaced
         * 
         * @return builder
         * 
         */
        public Builder targetIps(String... targetIps) {
            return targetIps(List.of(targetIps));
        }

        /**
         * @param type enum: `local`, `tunnel`, `vpn`, `wan`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type enum: `local`, `tunnel`, `vpn`, `wan`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param wanName Optional if `type`==`vpn`
         * 
         * @return builder
         * 
         */
        public Builder wanName(@Nullable Output<String> wanName) {
            $.wanName = wanName;
            return this;
        }

        /**
         * @param wanName Optional if `type`==`vpn`
         * 
         * @return builder
         * 
         */
        public Builder wanName(String wanName) {
            return wanName(Output.of(wanName));
        }

        public DeviceprofileGatewayPathPreferencesPathArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DeviceprofileGatewayPathPreferencesPathArgs", "type");
            }
            return $;
        }
    }

}
