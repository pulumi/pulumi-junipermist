// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatApRedundancy;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatArpTableStats;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatClient;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatClientsStats;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatCpuStat;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatDhcpdStat;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatFwupdate;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatIfStat;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatIpStat;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatLastTrouble;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatMacTableStats;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatMemoryStat;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatModuleStat;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatPort;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatRouteSummaryStats;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatServiceStat;
import com.pulumi.junipermist.device.outputs.GetSwitchStatsDeviceSwitchStatVcSetupInfo;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSwitchStatsDeviceSwitchStat {
    private GetSwitchStatsDeviceSwitchStatApRedundancy apRedundancy;
    private GetSwitchStatsDeviceSwitchStatArpTableStats arpTableStats;
    private Integer certExpiry;
    private List<GetSwitchStatsDeviceSwitchStatClient> clients;
    private GetSwitchStatsDeviceSwitchStatClientsStats clientsStats;
    private String configStatus;
    private GetSwitchStatsDeviceSwitchStatCpuStat cpuStat;
    /**
     * @return When the object has been created, in epoch
     * 
     */
    private Double createdTime;
    private String deviceprofileId;
    /**
     * @return Property key is the network name
     * 
     */
    private Map<String,GetSwitchStatsDeviceSwitchStatDhcpdStat> dhcpdStat;
    private String evpntopoId;
    private Boolean fwVersionsOutofsync;
    private GetSwitchStatsDeviceSwitchStatFwupdate fwupdate;
    /**
     * @return Whether the switch supports packet capture
     * 
     */
    private Boolean hasPcap;
    /**
     * @return Hostname reported by the device
     * 
     */
    private String hostname;
    /**
     * @return Device hardware revision number
     * 
     */
    private String hwRev;
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    private String id;
    /**
     * @return Property key is the interface name
     * 
     */
    private Map<String,GetSwitchStatsDeviceSwitchStatIfStat> ifStat;
    private String ip;
    private GetSwitchStatsDeviceSwitchStatIpStat ipStat;
    /**
     * @return Last seen timestamp
     * 
     */
    private Double lastSeen;
    /**
     * @return Last trouble code of switch
     * 
     */
    private GetSwitchStatsDeviceSwitchStatLastTrouble lastTrouble;
    private String mac;
    private GetSwitchStatsDeviceSwitchStatMacTableStats macTableStats;
    private String mapId;
    /**
     * @return Memory usage stat (for virtual chassis, memory usage of master RE)
     * 
     */
    private GetSwitchStatsDeviceSwitchStatMemoryStat memoryStat;
    private String model;
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    private Double modifiedTime;
    private List<GetSwitchStatsDeviceSwitchStatModuleStat> moduleStats;
    /**
     * @return Device name if configured
     * 
     */
    private String name;
    private String orgId;
    private List<GetSwitchStatsDeviceSwitchStatPort> ports;
    private GetSwitchStatsDeviceSwitchStatRouteSummaryStats routeSummaryStats;
    private String serial;
    private Map<String,GetSwitchStatsDeviceSwitchStatServiceStat> serviceStat;
    private String siteId;
    private String status;
    private Double uptime;
    private String vcMac;
    private GetSwitchStatsDeviceSwitchStatVcSetupInfo vcSetupInfo;
    private String version;

    private GetSwitchStatsDeviceSwitchStat() {}
    public GetSwitchStatsDeviceSwitchStatApRedundancy apRedundancy() {
        return this.apRedundancy;
    }
    public GetSwitchStatsDeviceSwitchStatArpTableStats arpTableStats() {
        return this.arpTableStats;
    }
    public Integer certExpiry() {
        return this.certExpiry;
    }
    public List<GetSwitchStatsDeviceSwitchStatClient> clients() {
        return this.clients;
    }
    public GetSwitchStatsDeviceSwitchStatClientsStats clientsStats() {
        return this.clientsStats;
    }
    public String configStatus() {
        return this.configStatus;
    }
    public GetSwitchStatsDeviceSwitchStatCpuStat cpuStat() {
        return this.cpuStat;
    }
    /**
     * @return When the object has been created, in epoch
     * 
     */
    public Double createdTime() {
        return this.createdTime;
    }
    public String deviceprofileId() {
        return this.deviceprofileId;
    }
    /**
     * @return Property key is the network name
     * 
     */
    public Map<String,GetSwitchStatsDeviceSwitchStatDhcpdStat> dhcpdStat() {
        return this.dhcpdStat;
    }
    public String evpntopoId() {
        return this.evpntopoId;
    }
    public Boolean fwVersionsOutofsync() {
        return this.fwVersionsOutofsync;
    }
    public GetSwitchStatsDeviceSwitchStatFwupdate fwupdate() {
        return this.fwupdate;
    }
    /**
     * @return Whether the switch supports packet capture
     * 
     */
    public Boolean hasPcap() {
        return this.hasPcap;
    }
    /**
     * @return Hostname reported by the device
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Device hardware revision number
     * 
     */
    public String hwRev() {
        return this.hwRev;
    }
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Property key is the interface name
     * 
     */
    public Map<String,GetSwitchStatsDeviceSwitchStatIfStat> ifStat() {
        return this.ifStat;
    }
    public String ip() {
        return this.ip;
    }
    public GetSwitchStatsDeviceSwitchStatIpStat ipStat() {
        return this.ipStat;
    }
    /**
     * @return Last seen timestamp
     * 
     */
    public Double lastSeen() {
        return this.lastSeen;
    }
    /**
     * @return Last trouble code of switch
     * 
     */
    public GetSwitchStatsDeviceSwitchStatLastTrouble lastTrouble() {
        return this.lastTrouble;
    }
    public String mac() {
        return this.mac;
    }
    public GetSwitchStatsDeviceSwitchStatMacTableStats macTableStats() {
        return this.macTableStats;
    }
    public String mapId() {
        return this.mapId;
    }
    /**
     * @return Memory usage stat (for virtual chassis, memory usage of master RE)
     * 
     */
    public GetSwitchStatsDeviceSwitchStatMemoryStat memoryStat() {
        return this.memoryStat;
    }
    public String model() {
        return this.model;
    }
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    public Double modifiedTime() {
        return this.modifiedTime;
    }
    public List<GetSwitchStatsDeviceSwitchStatModuleStat> moduleStats() {
        return this.moduleStats;
    }
    /**
     * @return Device name if configured
     * 
     */
    public String name() {
        return this.name;
    }
    public String orgId() {
        return this.orgId;
    }
    public List<GetSwitchStatsDeviceSwitchStatPort> ports() {
        return this.ports;
    }
    public GetSwitchStatsDeviceSwitchStatRouteSummaryStats routeSummaryStats() {
        return this.routeSummaryStats;
    }
    public String serial() {
        return this.serial;
    }
    public Map<String,GetSwitchStatsDeviceSwitchStatServiceStat> serviceStat() {
        return this.serviceStat;
    }
    public String siteId() {
        return this.siteId;
    }
    public String status() {
        return this.status;
    }
    public Double uptime() {
        return this.uptime;
    }
    public String vcMac() {
        return this.vcMac;
    }
    public GetSwitchStatsDeviceSwitchStatVcSetupInfo vcSetupInfo() {
        return this.vcSetupInfo;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchStatsDeviceSwitchStat defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetSwitchStatsDeviceSwitchStatApRedundancy apRedundancy;
        private GetSwitchStatsDeviceSwitchStatArpTableStats arpTableStats;
        private Integer certExpiry;
        private List<GetSwitchStatsDeviceSwitchStatClient> clients;
        private GetSwitchStatsDeviceSwitchStatClientsStats clientsStats;
        private String configStatus;
        private GetSwitchStatsDeviceSwitchStatCpuStat cpuStat;
        private Double createdTime;
        private String deviceprofileId;
        private Map<String,GetSwitchStatsDeviceSwitchStatDhcpdStat> dhcpdStat;
        private String evpntopoId;
        private Boolean fwVersionsOutofsync;
        private GetSwitchStatsDeviceSwitchStatFwupdate fwupdate;
        private Boolean hasPcap;
        private String hostname;
        private String hwRev;
        private String id;
        private Map<String,GetSwitchStatsDeviceSwitchStatIfStat> ifStat;
        private String ip;
        private GetSwitchStatsDeviceSwitchStatIpStat ipStat;
        private Double lastSeen;
        private GetSwitchStatsDeviceSwitchStatLastTrouble lastTrouble;
        private String mac;
        private GetSwitchStatsDeviceSwitchStatMacTableStats macTableStats;
        private String mapId;
        private GetSwitchStatsDeviceSwitchStatMemoryStat memoryStat;
        private String model;
        private Double modifiedTime;
        private List<GetSwitchStatsDeviceSwitchStatModuleStat> moduleStats;
        private String name;
        private String orgId;
        private List<GetSwitchStatsDeviceSwitchStatPort> ports;
        private GetSwitchStatsDeviceSwitchStatRouteSummaryStats routeSummaryStats;
        private String serial;
        private Map<String,GetSwitchStatsDeviceSwitchStatServiceStat> serviceStat;
        private String siteId;
        private String status;
        private Double uptime;
        private String vcMac;
        private GetSwitchStatsDeviceSwitchStatVcSetupInfo vcSetupInfo;
        private String version;
        public Builder() {}
        public Builder(GetSwitchStatsDeviceSwitchStat defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apRedundancy = defaults.apRedundancy;
    	      this.arpTableStats = defaults.arpTableStats;
    	      this.certExpiry = defaults.certExpiry;
    	      this.clients = defaults.clients;
    	      this.clientsStats = defaults.clientsStats;
    	      this.configStatus = defaults.configStatus;
    	      this.cpuStat = defaults.cpuStat;
    	      this.createdTime = defaults.createdTime;
    	      this.deviceprofileId = defaults.deviceprofileId;
    	      this.dhcpdStat = defaults.dhcpdStat;
    	      this.evpntopoId = defaults.evpntopoId;
    	      this.fwVersionsOutofsync = defaults.fwVersionsOutofsync;
    	      this.fwupdate = defaults.fwupdate;
    	      this.hasPcap = defaults.hasPcap;
    	      this.hostname = defaults.hostname;
    	      this.hwRev = defaults.hwRev;
    	      this.id = defaults.id;
    	      this.ifStat = defaults.ifStat;
    	      this.ip = defaults.ip;
    	      this.ipStat = defaults.ipStat;
    	      this.lastSeen = defaults.lastSeen;
    	      this.lastTrouble = defaults.lastTrouble;
    	      this.mac = defaults.mac;
    	      this.macTableStats = defaults.macTableStats;
    	      this.mapId = defaults.mapId;
    	      this.memoryStat = defaults.memoryStat;
    	      this.model = defaults.model;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.moduleStats = defaults.moduleStats;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.ports = defaults.ports;
    	      this.routeSummaryStats = defaults.routeSummaryStats;
    	      this.serial = defaults.serial;
    	      this.serviceStat = defaults.serviceStat;
    	      this.siteId = defaults.siteId;
    	      this.status = defaults.status;
    	      this.uptime = defaults.uptime;
    	      this.vcMac = defaults.vcMac;
    	      this.vcSetupInfo = defaults.vcSetupInfo;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder apRedundancy(GetSwitchStatsDeviceSwitchStatApRedundancy apRedundancy) {
            if (apRedundancy == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "apRedundancy");
            }
            this.apRedundancy = apRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder arpTableStats(GetSwitchStatsDeviceSwitchStatArpTableStats arpTableStats) {
            if (arpTableStats == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "arpTableStats");
            }
            this.arpTableStats = arpTableStats;
            return this;
        }
        @CustomType.Setter
        public Builder certExpiry(Integer certExpiry) {
            if (certExpiry == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "certExpiry");
            }
            this.certExpiry = certExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder clients(List<GetSwitchStatsDeviceSwitchStatClient> clients) {
            if (clients == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "clients");
            }
            this.clients = clients;
            return this;
        }
        public Builder clients(GetSwitchStatsDeviceSwitchStatClient... clients) {
            return clients(List.of(clients));
        }
        @CustomType.Setter
        public Builder clientsStats(GetSwitchStatsDeviceSwitchStatClientsStats clientsStats) {
            if (clientsStats == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "clientsStats");
            }
            this.clientsStats = clientsStats;
            return this;
        }
        @CustomType.Setter
        public Builder configStatus(String configStatus) {
            if (configStatus == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "configStatus");
            }
            this.configStatus = configStatus;
            return this;
        }
        @CustomType.Setter
        public Builder cpuStat(GetSwitchStatsDeviceSwitchStatCpuStat cpuStat) {
            if (cpuStat == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "cpuStat");
            }
            this.cpuStat = cpuStat;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(Double createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder deviceprofileId(String deviceprofileId) {
            if (deviceprofileId == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "deviceprofileId");
            }
            this.deviceprofileId = deviceprofileId;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpdStat(Map<String,GetSwitchStatsDeviceSwitchStatDhcpdStat> dhcpdStat) {
            if (dhcpdStat == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "dhcpdStat");
            }
            this.dhcpdStat = dhcpdStat;
            return this;
        }
        @CustomType.Setter
        public Builder evpntopoId(String evpntopoId) {
            if (evpntopoId == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "evpntopoId");
            }
            this.evpntopoId = evpntopoId;
            return this;
        }
        @CustomType.Setter
        public Builder fwVersionsOutofsync(Boolean fwVersionsOutofsync) {
            if (fwVersionsOutofsync == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "fwVersionsOutofsync");
            }
            this.fwVersionsOutofsync = fwVersionsOutofsync;
            return this;
        }
        @CustomType.Setter
        public Builder fwupdate(GetSwitchStatsDeviceSwitchStatFwupdate fwupdate) {
            if (fwupdate == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "fwupdate");
            }
            this.fwupdate = fwupdate;
            return this;
        }
        @CustomType.Setter
        public Builder hasPcap(Boolean hasPcap) {
            if (hasPcap == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "hasPcap");
            }
            this.hasPcap = hasPcap;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder hwRev(String hwRev) {
            if (hwRev == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "hwRev");
            }
            this.hwRev = hwRev;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ifStat(Map<String,GetSwitchStatsDeviceSwitchStatIfStat> ifStat) {
            if (ifStat == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "ifStat");
            }
            this.ifStat = ifStat;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder ipStat(GetSwitchStatsDeviceSwitchStatIpStat ipStat) {
            if (ipStat == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "ipStat");
            }
            this.ipStat = ipStat;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(Double lastSeen) {
            if (lastSeen == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "lastSeen");
            }
            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder lastTrouble(GetSwitchStatsDeviceSwitchStatLastTrouble lastTrouble) {
            if (lastTrouble == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "lastTrouble");
            }
            this.lastTrouble = lastTrouble;
            return this;
        }
        @CustomType.Setter
        public Builder mac(String mac) {
            if (mac == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "mac");
            }
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder macTableStats(GetSwitchStatsDeviceSwitchStatMacTableStats macTableStats) {
            if (macTableStats == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "macTableStats");
            }
            this.macTableStats = macTableStats;
            return this;
        }
        @CustomType.Setter
        public Builder mapId(String mapId) {
            if (mapId == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "mapId");
            }
            this.mapId = mapId;
            return this;
        }
        @CustomType.Setter
        public Builder memoryStat(GetSwitchStatsDeviceSwitchStatMemoryStat memoryStat) {
            if (memoryStat == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "memoryStat");
            }
            this.memoryStat = memoryStat;
            return this;
        }
        @CustomType.Setter
        public Builder model(String model) {
            if (model == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "model");
            }
            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedTime(Double modifiedTime) {
            if (modifiedTime == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "modifiedTime");
            }
            this.modifiedTime = modifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder moduleStats(List<GetSwitchStatsDeviceSwitchStatModuleStat> moduleStats) {
            if (moduleStats == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "moduleStats");
            }
            this.moduleStats = moduleStats;
            return this;
        }
        public Builder moduleStats(GetSwitchStatsDeviceSwitchStatModuleStat... moduleStats) {
            return moduleStats(List.of(moduleStats));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder ports(List<GetSwitchStatsDeviceSwitchStatPort> ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "ports");
            }
            this.ports = ports;
            return this;
        }
        public Builder ports(GetSwitchStatsDeviceSwitchStatPort... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder routeSummaryStats(GetSwitchStatsDeviceSwitchStatRouteSummaryStats routeSummaryStats) {
            if (routeSummaryStats == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "routeSummaryStats");
            }
            this.routeSummaryStats = routeSummaryStats;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder serviceStat(Map<String,GetSwitchStatsDeviceSwitchStatServiceStat> serviceStat) {
            if (serviceStat == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "serviceStat");
            }
            this.serviceStat = serviceStat;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(Double uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        @CustomType.Setter
        public Builder vcMac(String vcMac) {
            if (vcMac == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "vcMac");
            }
            this.vcMac = vcMac;
            return this;
        }
        @CustomType.Setter
        public Builder vcSetupInfo(GetSwitchStatsDeviceSwitchStatVcSetupInfo vcSetupInfo) {
            if (vcSetupInfo == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "vcSetupInfo");
            }
            this.vcSetupInfo = vcSetupInfo;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSwitchStatsDeviceSwitchStat", "version");
            }
            this.version = version;
            return this;
        }
        public GetSwitchStatsDeviceSwitchStat build() {
            final var _resultValue = new GetSwitchStatsDeviceSwitchStat();
            _resultValue.apRedundancy = apRedundancy;
            _resultValue.arpTableStats = arpTableStats;
            _resultValue.certExpiry = certExpiry;
            _resultValue.clients = clients;
            _resultValue.clientsStats = clientsStats;
            _resultValue.configStatus = configStatus;
            _resultValue.cpuStat = cpuStat;
            _resultValue.createdTime = createdTime;
            _resultValue.deviceprofileId = deviceprofileId;
            _resultValue.dhcpdStat = dhcpdStat;
            _resultValue.evpntopoId = evpntopoId;
            _resultValue.fwVersionsOutofsync = fwVersionsOutofsync;
            _resultValue.fwupdate = fwupdate;
            _resultValue.hasPcap = hasPcap;
            _resultValue.hostname = hostname;
            _resultValue.hwRev = hwRev;
            _resultValue.id = id;
            _resultValue.ifStat = ifStat;
            _resultValue.ip = ip;
            _resultValue.ipStat = ipStat;
            _resultValue.lastSeen = lastSeen;
            _resultValue.lastTrouble = lastTrouble;
            _resultValue.mac = mac;
            _resultValue.macTableStats = macTableStats;
            _resultValue.mapId = mapId;
            _resultValue.memoryStat = memoryStat;
            _resultValue.model = model;
            _resultValue.modifiedTime = modifiedTime;
            _resultValue.moduleStats = moduleStats;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.ports = ports;
            _resultValue.routeSummaryStats = routeSummaryStats;
            _resultValue.serial = serial;
            _resultValue.serviceStat = serviceStat;
            _resultValue.siteId = siteId;
            _resultValue.status = status;
            _resultValue.uptime = uptime;
            _resultValue.vcMac = vcMac;
            _resultValue.vcSetupInfo = vcSetupInfo;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
