// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.site.inputs.WlanRadsecServerArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WlanRadsecArgs extends com.pulumi.resources.ResourceArgs {

    public static final WlanRadsecArgs Empty = new WlanRadsecArgs();

    @Import(name="coaEnabled")
    private @Nullable Output<Boolean> coaEnabled;

    public Optional<Output<Boolean>> coaEnabled() {
        return Optional.ofNullable(this.coaEnabled);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
     * 
     */
    @Import(name="mxclusterIds")
    private @Nullable Output<List<String>> mxclusterIds;

    /**
     * @return To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
     * 
     */
    public Optional<Output<List<String>>> mxclusterIds() {
        return Optional.ofNullable(this.mxclusterIds);
    }

    /**
     * Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`
     * 
     */
    @Import(name="proxyHosts")
    private @Nullable Output<List<String>> proxyHosts;

    /**
     * @return Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`
     * 
     */
    public Optional<Output<List<String>>> proxyHosts() {
        return Optional.ofNullable(this.proxyHosts);
    }

    /**
     * Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * List of RadSec Servers. Only if not Mist Edge.
     * 
     */
    @Import(name="servers")
    private @Nullable Output<List<WlanRadsecServerArgs>> servers;

    /**
     * @return List of RadSec Servers. Only if not Mist Edge.
     * 
     */
    public Optional<Output<List<WlanRadsecServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * use mxedge(s) as RadSec Proxy
     * 
     */
    @Import(name="useMxedge")
    private @Nullable Output<Boolean> useMxedge;

    /**
     * @return use mxedge(s) as RadSec Proxy
     * 
     */
    public Optional<Output<Boolean>> useMxedge() {
        return Optional.ofNullable(this.useMxedge);
    }

    /**
     * To use Site mxedges when this WLAN does not use mxtunnel
     * 
     */
    @Import(name="useSiteMxedge")
    private @Nullable Output<Boolean> useSiteMxedge;

    /**
     * @return To use Site mxedges when this WLAN does not use mxtunnel
     * 
     */
    public Optional<Output<Boolean>> useSiteMxedge() {
        return Optional.ofNullable(this.useSiteMxedge);
    }

    private WlanRadsecArgs() {}

    private WlanRadsecArgs(WlanRadsecArgs $) {
        this.coaEnabled = $.coaEnabled;
        this.enabled = $.enabled;
        this.idleTimeout = $.idleTimeout;
        this.mxclusterIds = $.mxclusterIds;
        this.proxyHosts = $.proxyHosts;
        this.serverName = $.serverName;
        this.servers = $.servers;
        this.useMxedge = $.useMxedge;
        this.useSiteMxedge = $.useSiteMxedge;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WlanRadsecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WlanRadsecArgs $;

        public Builder() {
            $ = new WlanRadsecArgs();
        }

        public Builder(WlanRadsecArgs defaults) {
            $ = new WlanRadsecArgs(Objects.requireNonNull(defaults));
        }

        public Builder coaEnabled(@Nullable Output<Boolean> coaEnabled) {
            $.coaEnabled = coaEnabled;
            return this;
        }

        public Builder coaEnabled(Boolean coaEnabled) {
            return coaEnabled(Output.of(coaEnabled));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param mxclusterIds To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
         * 
         * @return builder
         * 
         */
        public Builder mxclusterIds(@Nullable Output<List<String>> mxclusterIds) {
            $.mxclusterIds = mxclusterIds;
            return this;
        }

        /**
         * @param mxclusterIds To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
         * 
         * @return builder
         * 
         */
        public Builder mxclusterIds(List<String> mxclusterIds) {
            return mxclusterIds(Output.of(mxclusterIds));
        }

        /**
         * @param mxclusterIds To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
         * 
         * @return builder
         * 
         */
        public Builder mxclusterIds(String... mxclusterIds) {
            return mxclusterIds(List.of(mxclusterIds));
        }

        /**
         * @param proxyHosts Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`
         * 
         * @return builder
         * 
         */
        public Builder proxyHosts(@Nullable Output<List<String>> proxyHosts) {
            $.proxyHosts = proxyHosts;
            return this;
        }

        /**
         * @param proxyHosts Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`
         * 
         * @return builder
         * 
         */
        public Builder proxyHosts(List<String> proxyHosts) {
            return proxyHosts(Output.of(proxyHosts));
        }

        /**
         * @param proxyHosts Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`
         * 
         * @return builder
         * 
         */
        public Builder proxyHosts(String... proxyHosts) {
            return proxyHosts(List.of(proxyHosts));
        }

        /**
         * @param serverName Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param servers List of RadSec Servers. Only if not Mist Edge.
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<List<WlanRadsecServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers List of RadSec Servers. Only if not Mist Edge.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<WlanRadsecServerArgs> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers List of RadSec Servers. Only if not Mist Edge.
         * 
         * @return builder
         * 
         */
        public Builder servers(WlanRadsecServerArgs... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param useMxedge use mxedge(s) as RadSec Proxy
         * 
         * @return builder
         * 
         */
        public Builder useMxedge(@Nullable Output<Boolean> useMxedge) {
            $.useMxedge = useMxedge;
            return this;
        }

        /**
         * @param useMxedge use mxedge(s) as RadSec Proxy
         * 
         * @return builder
         * 
         */
        public Builder useMxedge(Boolean useMxedge) {
            return useMxedge(Output.of(useMxedge));
        }

        /**
         * @param useSiteMxedge To use Site mxedges when this WLAN does not use mxtunnel
         * 
         * @return builder
         * 
         */
        public Builder useSiteMxedge(@Nullable Output<Boolean> useSiteMxedge) {
            $.useSiteMxedge = useSiteMxedge;
            return this;
        }

        /**
         * @param useSiteMxedge To use Site mxedges when this WLAN does not use mxtunnel
         * 
         * @return builder
         * 
         */
        public Builder useSiteMxedge(Boolean useSiteMxedge) {
            return useSiteMxedge(Output.of(useSiteMxedge));
        }

        public WlanRadsecArgs build() {
            return $;
        }
    }

}
