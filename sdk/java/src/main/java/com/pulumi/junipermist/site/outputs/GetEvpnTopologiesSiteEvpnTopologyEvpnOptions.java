// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.site.outputs.GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsOverlay;
import com.pulumi.junipermist.site.outputs.GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsUnderlay;
import com.pulumi.junipermist.site.outputs.GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsVsInstances;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetEvpnTopologiesSiteEvpnTopologyEvpnOptions {
    /**
     * @return Optional, for dhcp*relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server*id-overrides
     * 
     */
    private String autoLoopbackSubnet;
    /**
     * @return Optional, for dhcp*relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server*id-overrides
     * 
     */
    private String autoLoopbackSubnet6;
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    private String autoRouterIdSubnet;
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    private String autoRouterIdSubnet6;
    /**
     * @return Optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway. When `routed_at` != `core`, whether to do virtual-gateway at core as well
     * 
     */
    private Boolean coreAsBorder;
    private GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsOverlay overlay;
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address&#39;s v4*mac. If enabled, 00-00-5e-00-0X-YY will be used (where XX=vlan*id/256, YY=vlan_id%256)
     * 
     */
    private Boolean perVlanVgaV4Mac;
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-02-01 as the virtual-gateway-address&#39;s v6*mac. If enabled, 00-00-5e-00-1X-YY will be used (where XX=vlan*id/256, YY=vlan_id%256)
     * 
     */
    private Boolean perVlanVgaV6Mac;
    /**
     * @return optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
     * 
     */
    private String routedAt;
    private GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsUnderlay underlay;
    /**
     * @return Optional, for EX9200 only to segregate virtual-switches
     * 
     */
    private Map<String,GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsVsInstances> vsInstances;

    private GetEvpnTopologiesSiteEvpnTopologyEvpnOptions() {}
    /**
     * @return Optional, for dhcp*relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server*id-overrides
     * 
     */
    public String autoLoopbackSubnet() {
        return this.autoLoopbackSubnet;
    }
    /**
     * @return Optional, for dhcp*relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server*id-overrides
     * 
     */
    public String autoLoopbackSubnet6() {
        return this.autoLoopbackSubnet6;
    }
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    public String autoRouterIdSubnet() {
        return this.autoRouterIdSubnet;
    }
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    public String autoRouterIdSubnet6() {
        return this.autoRouterIdSubnet6;
    }
    /**
     * @return Optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway. When `routed_at` != `core`, whether to do virtual-gateway at core as well
     * 
     */
    public Boolean coreAsBorder() {
        return this.coreAsBorder;
    }
    public GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsOverlay overlay() {
        return this.overlay;
    }
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address&#39;s v4*mac. If enabled, 00-00-5e-00-0X-YY will be used (where XX=vlan*id/256, YY=vlan_id%256)
     * 
     */
    public Boolean perVlanVgaV4Mac() {
        return this.perVlanVgaV4Mac;
    }
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-02-01 as the virtual-gateway-address&#39;s v6*mac. If enabled, 00-00-5e-00-1X-YY will be used (where XX=vlan*id/256, YY=vlan_id%256)
     * 
     */
    public Boolean perVlanVgaV6Mac() {
        return this.perVlanVgaV6Mac;
    }
    /**
     * @return optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
     * 
     */
    public String routedAt() {
        return this.routedAt;
    }
    public GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsUnderlay underlay() {
        return this.underlay;
    }
    /**
     * @return Optional, for EX9200 only to segregate virtual-switches
     * 
     */
    public Map<String,GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsVsInstances> vsInstances() {
        return this.vsInstances;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEvpnTopologiesSiteEvpnTopologyEvpnOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoLoopbackSubnet;
        private String autoLoopbackSubnet6;
        private String autoRouterIdSubnet;
        private String autoRouterIdSubnet6;
        private Boolean coreAsBorder;
        private GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsOverlay overlay;
        private Boolean perVlanVgaV4Mac;
        private Boolean perVlanVgaV6Mac;
        private String routedAt;
        private GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsUnderlay underlay;
        private Map<String,GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsVsInstances> vsInstances;
        public Builder() {}
        public Builder(GetEvpnTopologiesSiteEvpnTopologyEvpnOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoLoopbackSubnet = defaults.autoLoopbackSubnet;
    	      this.autoLoopbackSubnet6 = defaults.autoLoopbackSubnet6;
    	      this.autoRouterIdSubnet = defaults.autoRouterIdSubnet;
    	      this.autoRouterIdSubnet6 = defaults.autoRouterIdSubnet6;
    	      this.coreAsBorder = defaults.coreAsBorder;
    	      this.overlay = defaults.overlay;
    	      this.perVlanVgaV4Mac = defaults.perVlanVgaV4Mac;
    	      this.perVlanVgaV6Mac = defaults.perVlanVgaV6Mac;
    	      this.routedAt = defaults.routedAt;
    	      this.underlay = defaults.underlay;
    	      this.vsInstances = defaults.vsInstances;
        }

        @CustomType.Setter
        public Builder autoLoopbackSubnet(String autoLoopbackSubnet) {
            if (autoLoopbackSubnet == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "autoLoopbackSubnet");
            }
            this.autoLoopbackSubnet = autoLoopbackSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder autoLoopbackSubnet6(String autoLoopbackSubnet6) {
            if (autoLoopbackSubnet6 == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "autoLoopbackSubnet6");
            }
            this.autoLoopbackSubnet6 = autoLoopbackSubnet6;
            return this;
        }
        @CustomType.Setter
        public Builder autoRouterIdSubnet(String autoRouterIdSubnet) {
            if (autoRouterIdSubnet == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "autoRouterIdSubnet");
            }
            this.autoRouterIdSubnet = autoRouterIdSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder autoRouterIdSubnet6(String autoRouterIdSubnet6) {
            if (autoRouterIdSubnet6 == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "autoRouterIdSubnet6");
            }
            this.autoRouterIdSubnet6 = autoRouterIdSubnet6;
            return this;
        }
        @CustomType.Setter
        public Builder coreAsBorder(Boolean coreAsBorder) {
            if (coreAsBorder == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "coreAsBorder");
            }
            this.coreAsBorder = coreAsBorder;
            return this;
        }
        @CustomType.Setter
        public Builder overlay(GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsOverlay overlay) {
            if (overlay == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "overlay");
            }
            this.overlay = overlay;
            return this;
        }
        @CustomType.Setter
        public Builder perVlanVgaV4Mac(Boolean perVlanVgaV4Mac) {
            if (perVlanVgaV4Mac == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "perVlanVgaV4Mac");
            }
            this.perVlanVgaV4Mac = perVlanVgaV4Mac;
            return this;
        }
        @CustomType.Setter
        public Builder perVlanVgaV6Mac(Boolean perVlanVgaV6Mac) {
            if (perVlanVgaV6Mac == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "perVlanVgaV6Mac");
            }
            this.perVlanVgaV6Mac = perVlanVgaV6Mac;
            return this;
        }
        @CustomType.Setter
        public Builder routedAt(String routedAt) {
            if (routedAt == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "routedAt");
            }
            this.routedAt = routedAt;
            return this;
        }
        @CustomType.Setter
        public Builder underlay(GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsUnderlay underlay) {
            if (underlay == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "underlay");
            }
            this.underlay = underlay;
            return this;
        }
        @CustomType.Setter
        public Builder vsInstances(Map<String,GetEvpnTopologiesSiteEvpnTopologyEvpnOptionsVsInstances> vsInstances) {
            if (vsInstances == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesSiteEvpnTopologyEvpnOptions", "vsInstances");
            }
            this.vsInstances = vsInstances;
            return this;
        }
        public GetEvpnTopologiesSiteEvpnTopologyEvpnOptions build() {
            final var _resultValue = new GetEvpnTopologiesSiteEvpnTopologyEvpnOptions();
            _resultValue.autoLoopbackSubnet = autoLoopbackSubnet;
            _resultValue.autoLoopbackSubnet6 = autoLoopbackSubnet6;
            _resultValue.autoRouterIdSubnet = autoRouterIdSubnet;
            _resultValue.autoRouterIdSubnet6 = autoRouterIdSubnet6;
            _resultValue.coreAsBorder = coreAsBorder;
            _resultValue.overlay = overlay;
            _resultValue.perVlanVgaV4Mac = perVlanVgaV4Mac;
            _resultValue.perVlanVgaV6Mac = perVlanVgaV6Mac;
            _resultValue.routedAt = routedAt;
            _resultValue.underlay = underlay;
            _resultValue.vsInstances = vsInstances;
            return _resultValue;
        }
    }
}
