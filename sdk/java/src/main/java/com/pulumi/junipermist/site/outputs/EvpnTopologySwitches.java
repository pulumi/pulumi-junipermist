// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EvpnTopologySwitches {
    private @Nullable String deviceprofileId;
    private @Nullable Integer evpnId;
    private @Nullable String mac;
    private @Nullable String model;
    /**
     * @return Optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
     *   * for CLOS, to group dist / access switches into pods
     *   * for ERB/CRB, to group dist / esilag-access into pods
     * 
     */
    private @Nullable Integer pod;
    /**
     * @return By default, core switches are assumed to be connecting all pods.
     * if you want to limit the pods, you can specify pods.
     * 
     */
    private @Nullable List<Integer> pods;
    /**
     * @return use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
     * 
     */
    private String role;
    private @Nullable String routerId;
    private @Nullable String siteId;

    private EvpnTopologySwitches() {}
    public Optional<String> deviceprofileId() {
        return Optional.ofNullable(this.deviceprofileId);
    }
    public Optional<Integer> evpnId() {
        return Optional.ofNullable(this.evpnId);
    }
    public Optional<String> mac() {
        return Optional.ofNullable(this.mac);
    }
    public Optional<String> model() {
        return Optional.ofNullable(this.model);
    }
    /**
     * @return Optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
     *   * for CLOS, to group dist / access switches into pods
     *   * for ERB/CRB, to group dist / esilag-access into pods
     * 
     */
    public Optional<Integer> pod() {
        return Optional.ofNullable(this.pod);
    }
    /**
     * @return By default, core switches are assumed to be connecting all pods.
     * if you want to limit the pods, you can specify pods.
     * 
     */
    public List<Integer> pods() {
        return this.pods == null ? List.of() : this.pods;
    }
    /**
     * @return use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
     * 
     */
    public String role() {
        return this.role;
    }
    public Optional<String> routerId() {
        return Optional.ofNullable(this.routerId);
    }
    public Optional<String> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EvpnTopologySwitches defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String deviceprofileId;
        private @Nullable Integer evpnId;
        private @Nullable String mac;
        private @Nullable String model;
        private @Nullable Integer pod;
        private @Nullable List<Integer> pods;
        private String role;
        private @Nullable String routerId;
        private @Nullable String siteId;
        public Builder() {}
        public Builder(EvpnTopologySwitches defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deviceprofileId = defaults.deviceprofileId;
    	      this.evpnId = defaults.evpnId;
    	      this.mac = defaults.mac;
    	      this.model = defaults.model;
    	      this.pod = defaults.pod;
    	      this.pods = defaults.pods;
    	      this.role = defaults.role;
    	      this.routerId = defaults.routerId;
    	      this.siteId = defaults.siteId;
        }

        @CustomType.Setter
        public Builder deviceprofileId(@Nullable String deviceprofileId) {

            this.deviceprofileId = deviceprofileId;
            return this;
        }
        @CustomType.Setter
        public Builder evpnId(@Nullable Integer evpnId) {

            this.evpnId = evpnId;
            return this;
        }
        @CustomType.Setter
        public Builder mac(@Nullable String mac) {

            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder model(@Nullable String model) {

            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder pod(@Nullable Integer pod) {

            this.pod = pod;
            return this;
        }
        @CustomType.Setter
        public Builder pods(@Nullable List<Integer> pods) {

            this.pods = pods;
            return this;
        }
        public Builder pods(Integer... pods) {
            return pods(List.of(pods));
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("EvpnTopologySwitches", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder routerId(@Nullable String routerId) {

            this.routerId = routerId;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(@Nullable String siteId) {

            this.siteId = siteId;
            return this;
        }
        public EvpnTopologySwitches build() {
            final var _resultValue = new EvpnTopologySwitches();
            _resultValue.deviceprofileId = deviceprofileId;
            _resultValue.evpnId = evpnId;
            _resultValue.mac = mac;
            _resultValue.model = model;
            _resultValue.pod = pod;
            _resultValue.pods = pods;
            _resultValue.role = role;
            _resultValue.routerId = routerId;
            _resultValue.siteId = siteId;
            return _resultValue;
        }
    }
}
