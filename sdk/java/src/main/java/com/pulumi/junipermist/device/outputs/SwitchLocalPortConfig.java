// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SwitchLocalPortConfig {
    /**
     * @return if want to generate port up/down alarm
     * 
     */
    private @Nullable Boolean critical;
    private @Nullable String description;
    /**
     * @return if `speed` and `duplex` are specified, whether to disable autonegotiation
     * 
     */
    private @Nullable Boolean disableAutoneg;
    /**
     * @return enum: `auto`, `full`, `half`
     * 
     */
    private @Nullable String duplex;
    /**
     * @return media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
     * 
     */
    private @Nullable Integer mtu;
    private @Nullable Boolean poeDisabled;
    /**
     * @return enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
     * 
     */
    private @Nullable String speed;
    /**
     * @return port usage name.
     * 
     * If EVPN is used, use `evpn_uplink`or `evpn_downlink`
     * 
     */
    private String usage;

    private SwitchLocalPortConfig() {}
    /**
     * @return if want to generate port up/down alarm
     * 
     */
    public Optional<Boolean> critical() {
        return Optional.ofNullable(this.critical);
    }
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return if `speed` and `duplex` are specified, whether to disable autonegotiation
     * 
     */
    public Optional<Boolean> disableAutoneg() {
        return Optional.ofNullable(this.disableAutoneg);
    }
    /**
     * @return enum: `auto`, `full`, `half`
     * 
     */
    public Optional<String> duplex() {
        return Optional.ofNullable(this.duplex);
    }
    /**
     * @return media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
     * 
     */
    public Optional<Integer> mtu() {
        return Optional.ofNullable(this.mtu);
    }
    public Optional<Boolean> poeDisabled() {
        return Optional.ofNullable(this.poeDisabled);
    }
    /**
     * @return enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
     * 
     */
    public Optional<String> speed() {
        return Optional.ofNullable(this.speed);
    }
    /**
     * @return port usage name.
     * 
     * If EVPN is used, use `evpn_uplink`or `evpn_downlink`
     * 
     */
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SwitchLocalPortConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean critical;
        private @Nullable String description;
        private @Nullable Boolean disableAutoneg;
        private @Nullable String duplex;
        private @Nullable Integer mtu;
        private @Nullable Boolean poeDisabled;
        private @Nullable String speed;
        private String usage;
        public Builder() {}
        public Builder(SwitchLocalPortConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.critical = defaults.critical;
    	      this.description = defaults.description;
    	      this.disableAutoneg = defaults.disableAutoneg;
    	      this.duplex = defaults.duplex;
    	      this.mtu = defaults.mtu;
    	      this.poeDisabled = defaults.poeDisabled;
    	      this.speed = defaults.speed;
    	      this.usage = defaults.usage;
        }

        @CustomType.Setter
        public Builder critical(@Nullable Boolean critical) {

            this.critical = critical;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disableAutoneg(@Nullable Boolean disableAutoneg) {

            this.disableAutoneg = disableAutoneg;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(@Nullable String duplex) {

            this.duplex = duplex;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(@Nullable Integer mtu) {

            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder poeDisabled(@Nullable Boolean poeDisabled) {

            this.poeDisabled = poeDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder speed(@Nullable String speed) {

            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            if (usage == null) {
              throw new MissingRequiredPropertyException("SwitchLocalPortConfig", "usage");
            }
            this.usage = usage;
            return this;
        }
        public SwitchLocalPortConfig build() {
            final var _resultValue = new SwitchLocalPortConfig();
            _resultValue.critical = critical;
            _resultValue.description = description;
            _resultValue.disableAutoneg = disableAutoneg;
            _resultValue.duplex = duplex;
            _resultValue.mtu = mtu;
            _resultValue.poeDisabled = poeDisabled;
            _resultValue.speed = speed;
            _resultValue.usage = usage;
            return _resultValue;
        }
    }
}
