// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WlanScheduleHoursArgs extends com.pulumi.resources.ResourceArgs {

    public static final WlanScheduleHoursArgs Empty = new WlanScheduleHoursArgs();

    /**
     * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    @Import(name="fri")
    private @Nullable Output<String> fri;

    /**
     * @return Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    public Optional<Output<String>> fri() {
        return Optional.ofNullable(this.fri);
    }

    /**
     * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    @Import(name="mon")
    private @Nullable Output<String> mon;

    /**
     * @return Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    public Optional<Output<String>> mon() {
        return Optional.ofNullable(this.mon);
    }

    /**
     * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    @Import(name="sat")
    private @Nullable Output<String> sat;

    /**
     * @return Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    public Optional<Output<String>> sat() {
        return Optional.ofNullable(this.sat);
    }

    /**
     * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    @Import(name="sun")
    private @Nullable Output<String> sun;

    /**
     * @return Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    public Optional<Output<String>> sun() {
        return Optional.ofNullable(this.sun);
    }

    /**
     * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    @Import(name="thu")
    private @Nullable Output<String> thu;

    /**
     * @return Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    public Optional<Output<String>> thu() {
        return Optional.ofNullable(this.thu);
    }

    /**
     * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    @Import(name="tue")
    private @Nullable Output<String> tue;

    /**
     * @return Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    public Optional<Output<String>> tue() {
        return Optional.ofNullable(this.tue);
    }

    /**
     * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    @Import(name="wed")
    private @Nullable Output<String> wed;

    /**
     * @return Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
     * 
     */
    public Optional<Output<String>> wed() {
        return Optional.ofNullable(this.wed);
    }

    private WlanScheduleHoursArgs() {}

    private WlanScheduleHoursArgs(WlanScheduleHoursArgs $) {
        this.fri = $.fri;
        this.mon = $.mon;
        this.sat = $.sat;
        this.sun = $.sun;
        this.thu = $.thu;
        this.tue = $.tue;
        this.wed = $.wed;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WlanScheduleHoursArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WlanScheduleHoursArgs $;

        public Builder() {
            $ = new WlanScheduleHoursArgs();
        }

        public Builder(WlanScheduleHoursArgs defaults) {
            $ = new WlanScheduleHoursArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fri Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder fri(@Nullable Output<String> fri) {
            $.fri = fri;
            return this;
        }

        /**
         * @param fri Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder fri(String fri) {
            return fri(Output.of(fri));
        }

        /**
         * @param mon Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder mon(@Nullable Output<String> mon) {
            $.mon = mon;
            return this;
        }

        /**
         * @param mon Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder mon(String mon) {
            return mon(Output.of(mon));
        }

        /**
         * @param sat Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder sat(@Nullable Output<String> sat) {
            $.sat = sat;
            return this;
        }

        /**
         * @param sat Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder sat(String sat) {
            return sat(Output.of(sat));
        }

        /**
         * @param sun Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder sun(@Nullable Output<String> sun) {
            $.sun = sun;
            return this;
        }

        /**
         * @param sun Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder sun(String sun) {
            return sun(Output.of(sun));
        }

        /**
         * @param thu Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder thu(@Nullable Output<String> thu) {
            $.thu = thu;
            return this;
        }

        /**
         * @param thu Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder thu(String thu) {
            return thu(Output.of(thu));
        }

        /**
         * @param tue Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder tue(@Nullable Output<String> tue) {
            $.tue = tue;
            return this;
        }

        /**
         * @param tue Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder tue(String tue) {
            return tue(Output.of(tue));
        }

        /**
         * @param wed Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder wed(@Nullable Output<String> wed) {
            $.wed = wed;
            return this;
        }

        /**
         * @param wed Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it&#39;s treated as 00:00-23:59.
         * 
         * @return builder
         * 
         */
        public Builder wed(String wed) {
            return wed(Output.of(wed));
        }

        public WlanScheduleHoursArgs build() {
            return $;
        }
    }

}
