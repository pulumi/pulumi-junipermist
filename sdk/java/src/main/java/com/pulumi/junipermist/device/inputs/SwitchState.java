// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.device.inputs.SwitchAclPolicyArgs;
import com.pulumi.junipermist.device.inputs.SwitchAclTagsArgs;
import com.pulumi.junipermist.device.inputs.SwitchDhcpSnoopingArgs;
import com.pulumi.junipermist.device.inputs.SwitchDhcpdConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchEvpnConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchExtraRoutes6Args;
import com.pulumi.junipermist.device.inputs.SwitchExtraRoutesArgs;
import com.pulumi.junipermist.device.inputs.SwitchIpConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchMistNacArgs;
import com.pulumi.junipermist.device.inputs.SwitchNetworksArgs;
import com.pulumi.junipermist.device.inputs.SwitchOobIpConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchOspfConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchOtherIpConfigsArgs;
import com.pulumi.junipermist.device.inputs.SwitchPortConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchPortMirroringArgs;
import com.pulumi.junipermist.device.inputs.SwitchPortUsagesArgs;
import com.pulumi.junipermist.device.inputs.SwitchRadiusConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchRemoteSyslogArgs;
import com.pulumi.junipermist.device.inputs.SwitchSnmpConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchStpConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchSwitchMgmtArgs;
import com.pulumi.junipermist.device.inputs.SwitchVirtualChassisArgs;
import com.pulumi.junipermist.device.inputs.SwitchVrfConfigArgs;
import com.pulumi.junipermist.device.inputs.SwitchVrfInstancesArgs;
import com.pulumi.junipermist.device.inputs.SwitchVrrpConfigArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchState extends com.pulumi.resources.ResourceArgs {

    public static final SwitchState Empty = new SwitchState();

    @Import(name="aclPolicies")
    private @Nullable Output<List<SwitchAclPolicyArgs>> aclPolicies;

    public Optional<Output<List<SwitchAclPolicyArgs>>> aclPolicies() {
        return Optional.ofNullable(this.aclPolicies);
    }

    /**
     * ACL Tags to identify traffic source or destination. Key name is the tag name
     * 
     */
    @Import(name="aclTags")
    private @Nullable Output<Map<String,SwitchAclTagsArgs>> aclTags;

    /**
     * @return ACL Tags to identify traffic source or destination. Key name is the tag name
     * 
     */
    public Optional<Output<Map<String,SwitchAclTagsArgs>>> aclTags() {
        return Optional.ofNullable(this.aclTags);
    }

    /**
     * additional CLI commands to append to the generated Junos config **Note**: no check is done
     * 
     */
    @Import(name="additionalConfigCmds")
    private @Nullable Output<List<String>> additionalConfigCmds;

    /**
     * @return additional CLI commands to append to the generated Junos config **Note**: no check is done
     * 
     */
    public Optional<Output<List<String>>> additionalConfigCmds() {
        return Optional.ofNullable(this.additionalConfigCmds);
    }

    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    @Import(name="deviceprofileId")
    private @Nullable Output<String> deviceprofileId;

    public Optional<Output<String>> deviceprofileId() {
        return Optional.ofNullable(this.deviceprofileId);
    }

    @Import(name="dhcpSnooping")
    private @Nullable Output<SwitchDhcpSnoopingArgs> dhcpSnooping;

    public Optional<Output<SwitchDhcpSnoopingArgs>> dhcpSnooping() {
        return Optional.ofNullable(this.dhcpSnooping);
    }

    @Import(name="dhcpdConfig")
    private @Nullable Output<SwitchDhcpdConfigArgs> dhcpdConfig;

    public Optional<Output<SwitchDhcpdConfigArgs>> dhcpdConfig() {
        return Optional.ofNullable(this.dhcpdConfig);
    }

    /**
     * for a claimed switch, we control the configs by default. This option (disables the behavior)
     * 
     */
    @Import(name="disableAutoConfig")
    private @Nullable Output<Boolean> disableAutoConfig;

    /**
     * @return for a claimed switch, we control the configs by default. This option (disables the behavior)
     * 
     */
    public Optional<Output<Boolean>> disableAutoConfig() {
        return Optional.ofNullable(this.disableAutoConfig);
    }

    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    @Import(name="dnsSuffixes")
    private @Nullable Output<List<String>> dnsSuffixes;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    public Optional<Output<List<String>>> dnsSuffixes() {
        return Optional.ofNullable(this.dnsSuffixes);
    }

    /**
     * EVPN Junos settings
     * 
     */
    @Import(name="evpnConfig")
    private @Nullable Output<SwitchEvpnConfigArgs> evpnConfig;

    /**
     * @return EVPN Junos settings
     * 
     */
    public Optional<Output<SwitchEvpnConfigArgs>> evpnConfig() {
        return Optional.ofNullable(this.evpnConfig);
    }

    @Import(name="extraRoutes")
    private @Nullable Output<Map<String,SwitchExtraRoutesArgs>> extraRoutes;

    public Optional<Output<Map<String,SwitchExtraRoutesArgs>>> extraRoutes() {
        return Optional.ofNullable(this.extraRoutes);
    }

    /**
     * Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    @Import(name="extraRoutes6")
    private @Nullable Output<Map<String,SwitchExtraRoutes6Args>> extraRoutes6;

    /**
     * @return Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    public Optional<Output<Map<String,SwitchExtraRoutes6Args>>> extraRoutes6() {
        return Optional.ofNullable(this.extraRoutes6);
    }

    @Import(name="image1Url")
    private @Nullable Output<String> image1Url;

    public Optional<Output<String>> image1Url() {
        return Optional.ofNullable(this.image1Url);
    }

    @Import(name="image2Url")
    private @Nullable Output<String> image2Url;

    public Optional<Output<String>> image2Url() {
        return Optional.ofNullable(this.image2Url);
    }

    @Import(name="image3Url")
    private @Nullable Output<String> image3Url;

    public Optional<Output<String>> image3Url() {
        return Optional.ofNullable(this.image3Url);
    }

    /**
     * Junos IP Config
     * 
     */
    @Import(name="ipConfig")
    private @Nullable Output<SwitchIpConfigArgs> ipConfig;

    /**
     * @return Junos IP Config
     * 
     */
    public Optional<Output<SwitchIpConfigArgs>> ipConfig() {
        return Optional.ofNullable(this.ipConfig);
    }

    /**
     * device MAC address
     * 
     */
    @Import(name="mac")
    private @Nullable Output<String> mac;

    /**
     * @return device MAC address
     * 
     */
    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    /**
     * for an adopted switch, we don’t overwrite their existing configs automatically
     * 
     */
    @Import(name="managed")
    private @Nullable Output<Boolean> managed;

    /**
     * @return for an adopted switch, we don’t overwrite their existing configs automatically
     * 
     */
    public Optional<Output<Boolean>> managed() {
        return Optional.ofNullable(this.managed);
    }

    /**
     * map where the device belongs to
     * 
     */
    @Import(name="mapId")
    private @Nullable Output<String> mapId;

    /**
     * @return map where the device belongs to
     * 
     */
    public Optional<Output<String>> mapId() {
        return Optional.ofNullable(this.mapId);
    }

    /**
     * enable mist_nac to use radsec
     * 
     */
    @Import(name="mistNac")
    private @Nullable Output<SwitchMistNacArgs> mistNac;

    /**
     * @return enable mist_nac to use radsec
     * 
     */
    public Optional<Output<SwitchMistNacArgs>> mistNac() {
        return Optional.ofNullable(this.mistNac);
    }

    /**
     * device Model
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    /**
     * @return device Model
     * 
     */
    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Property key is network name
     * 
     */
    @Import(name="networks")
    private @Nullable Output<Map<String,SwitchNetworksArgs>> networks;

    /**
     * @return Property key is network name
     * 
     */
    public Optional<Output<Map<String,SwitchNetworksArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    @Import(name="notes")
    private @Nullable Output<String> notes;

    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * list of NTP servers specific to this device. By default, those in Site Settings will be used
     * 
     */
    @Import(name="ntpServers")
    private @Nullable Output<List<String>> ntpServers;

    /**
     * @return list of NTP servers specific to this device. By default, those in Site Settings will be used
     * 
     */
    public Optional<Output<List<String>>> ntpServers() {
        return Optional.ofNullable(this.ntpServers);
    }

    /**
     * - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
     *   set separately (if desired): key parameter = `re1`
     * 
     */
    @Import(name="oobIpConfig")
    private @Nullable Output<SwitchOobIpConfigArgs> oobIpConfig;

    /**
     * @return - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
     * set separately (if desired): key parameter = `re1`
     * 
     */
    public Optional<Output<SwitchOobIpConfigArgs>> oobIpConfig() {
        return Optional.ofNullable(this.oobIpConfig);
    }

    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Junos OSPF config
     * 
     */
    @Import(name="ospfConfig")
    private @Nullable Output<SwitchOspfConfigArgs> ospfConfig;

    /**
     * @return Junos OSPF config
     * 
     */
    public Optional<Output<SwitchOspfConfigArgs>> ospfConfig() {
        return Optional.ofNullable(this.ospfConfig);
    }

    /**
     * Property key is the network name
     * 
     */
    @Import(name="otherIpConfigs")
    private @Nullable Output<Map<String,SwitchOtherIpConfigsArgs>> otherIpConfigs;

    /**
     * @return Property key is the network name
     * 
     */
    public Optional<Output<Map<String,SwitchOtherIpConfigsArgs>>> otherIpConfigs() {
        return Optional.ofNullable(this.otherIpConfigs);
    }

    /**
     * Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    @Import(name="portConfig")
    private @Nullable Output<Map<String,SwitchPortConfigArgs>> portConfig;

    /**
     * @return Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    public Optional<Output<Map<String,SwitchPortConfigArgs>>> portConfig() {
        return Optional.ofNullable(this.portConfig);
    }

    /**
     * Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
     * interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
     * 
     */
    @Import(name="portMirroring")
    private @Nullable Output<Map<String,SwitchPortMirroringArgs>> portMirroring;

    /**
     * @return Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
     * interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
     * 
     */
    public Optional<Output<Map<String,SwitchPortMirroringArgs>>> portMirroring() {
        return Optional.ofNullable(this.portMirroring);
    }

    @Import(name="portUsages")
    private @Nullable Output<Map<String,SwitchPortUsagesArgs>> portUsages;

    public Optional<Output<Map<String,SwitchPortUsagesArgs>>> portUsages() {
        return Optional.ofNullable(this.portUsages);
    }

    /**
     * Junos Radius config
     * 
     */
    @Import(name="radiusConfig")
    private @Nullable Output<SwitchRadiusConfigArgs> radiusConfig;

    /**
     * @return Junos Radius config
     * 
     */
    public Optional<Output<SwitchRadiusConfigArgs>> radiusConfig() {
        return Optional.ofNullable(this.radiusConfig);
    }

    @Import(name="remoteSyslog")
    private @Nullable Output<SwitchRemoteSyslogArgs> remoteSyslog;

    public Optional<Output<SwitchRemoteSyslogArgs>> remoteSyslog() {
        return Optional.ofNullable(this.remoteSyslog);
    }

    @Import(name="role")
    private @Nullable Output<String> role;

    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * used for OSPF / BGP / EVPN
     * 
     */
    @Import(name="routerId")
    private @Nullable Output<String> routerId;

    /**
     * @return used for OSPF / BGP / EVPN
     * 
     */
    public Optional<Output<String>> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    /**
     * device Serial
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return device Serial
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    @Import(name="snmpConfig")
    private @Nullable Output<SwitchSnmpConfigArgs> snmpConfig;

    public Optional<Output<SwitchSnmpConfigArgs>> snmpConfig() {
        return Optional.ofNullable(this.snmpConfig);
    }

    @Import(name="stpConfig")
    private @Nullable Output<SwitchStpConfigArgs> stpConfig;

    public Optional<Output<SwitchStpConfigArgs>> stpConfig() {
        return Optional.ofNullable(this.stpConfig);
    }

    /**
     * Switch settings
     * 
     */
    @Import(name="switchMgmt")
    private @Nullable Output<SwitchSwitchMgmtArgs> switchMgmt;

    /**
     * @return Switch settings
     * 
     */
    public Optional<Output<SwitchSwitchMgmtArgs>> switchMgmt() {
        return Optional.ofNullable(this.switchMgmt);
    }

    /**
     * Device Type. enum: `switch`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Device Type. enum: `switch`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * whether to use it for snmp / syslog / tacplus / radius
     * 
     */
    @Import(name="useRouterIdAsSourceIp")
    private @Nullable Output<Boolean> useRouterIdAsSourceIp;

    /**
     * @return whether to use it for snmp / syslog / tacplus / radius
     * 
     */
    public Optional<Output<Boolean>> useRouterIdAsSourceIp() {
        return Optional.ofNullable(this.useRouterIdAsSourceIp);
    }

    /**
     * a dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    @Import(name="vars")
    private @Nullable Output<Map<String,String>> vars;

    /**
     * @return a dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    public Optional<Output<Map<String,String>>> vars() {
        return Optional.ofNullable(this.vars);
    }

    /**
     * required for preprovisioned Virtual Chassis
     * 
     */
    @Import(name="virtualChassis")
    private @Nullable Output<SwitchVirtualChassisArgs> virtualChassis;

    /**
     * @return required for preprovisioned Virtual Chassis
     * 
     */
    public Optional<Output<SwitchVirtualChassisArgs>> virtualChassis() {
        return Optional.ofNullable(this.virtualChassis);
    }

    @Import(name="vrfConfig")
    private @Nullable Output<SwitchVrfConfigArgs> vrfConfig;

    public Optional<Output<SwitchVrfConfigArgs>> vrfConfig() {
        return Optional.ofNullable(this.vrfConfig);
    }

    /**
     * Property key is the network name
     * 
     */
    @Import(name="vrfInstances")
    private @Nullable Output<Map<String,SwitchVrfInstancesArgs>> vrfInstances;

    /**
     * @return Property key is the network name
     * 
     */
    public Optional<Output<Map<String,SwitchVrfInstancesArgs>>> vrfInstances() {
        return Optional.ofNullable(this.vrfInstances);
    }

    /**
     * Junos VRRP config
     * 
     */
    @Import(name="vrrpConfig")
    private @Nullable Output<SwitchVrrpConfigArgs> vrrpConfig;

    /**
     * @return Junos VRRP config
     * 
     */
    public Optional<Output<SwitchVrrpConfigArgs>> vrrpConfig() {
        return Optional.ofNullable(this.vrrpConfig);
    }

    /**
     * x in pixel
     * 
     */
    @Import(name="x")
    private @Nullable Output<Double> x;

    /**
     * @return x in pixel
     * 
     */
    public Optional<Output<Double>> x() {
        return Optional.ofNullable(this.x);
    }

    /**
     * y in pixel
     * 
     */
    @Import(name="y")
    private @Nullable Output<Double> y;

    /**
     * @return y in pixel
     * 
     */
    public Optional<Output<Double>> y() {
        return Optional.ofNullable(this.y);
    }

    private SwitchState() {}

    private SwitchState(SwitchState $) {
        this.aclPolicies = $.aclPolicies;
        this.aclTags = $.aclTags;
        this.additionalConfigCmds = $.additionalConfigCmds;
        this.deviceId = $.deviceId;
        this.deviceprofileId = $.deviceprofileId;
        this.dhcpSnooping = $.dhcpSnooping;
        this.dhcpdConfig = $.dhcpdConfig;
        this.disableAutoConfig = $.disableAutoConfig;
        this.dnsServers = $.dnsServers;
        this.dnsSuffixes = $.dnsSuffixes;
        this.evpnConfig = $.evpnConfig;
        this.extraRoutes = $.extraRoutes;
        this.extraRoutes6 = $.extraRoutes6;
        this.image1Url = $.image1Url;
        this.image2Url = $.image2Url;
        this.image3Url = $.image3Url;
        this.ipConfig = $.ipConfig;
        this.mac = $.mac;
        this.managed = $.managed;
        this.mapId = $.mapId;
        this.mistNac = $.mistNac;
        this.model = $.model;
        this.name = $.name;
        this.networks = $.networks;
        this.notes = $.notes;
        this.ntpServers = $.ntpServers;
        this.oobIpConfig = $.oobIpConfig;
        this.orgId = $.orgId;
        this.ospfConfig = $.ospfConfig;
        this.otherIpConfigs = $.otherIpConfigs;
        this.portConfig = $.portConfig;
        this.portMirroring = $.portMirroring;
        this.portUsages = $.portUsages;
        this.radiusConfig = $.radiusConfig;
        this.remoteSyslog = $.remoteSyslog;
        this.role = $.role;
        this.routerId = $.routerId;
        this.serial = $.serial;
        this.siteId = $.siteId;
        this.snmpConfig = $.snmpConfig;
        this.stpConfig = $.stpConfig;
        this.switchMgmt = $.switchMgmt;
        this.type = $.type;
        this.useRouterIdAsSourceIp = $.useRouterIdAsSourceIp;
        this.vars = $.vars;
        this.virtualChassis = $.virtualChassis;
        this.vrfConfig = $.vrfConfig;
        this.vrfInstances = $.vrfInstances;
        this.vrrpConfig = $.vrrpConfig;
        this.x = $.x;
        this.y = $.y;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchState $;

        public Builder() {
            $ = new SwitchState();
        }

        public Builder(SwitchState defaults) {
            $ = new SwitchState(Objects.requireNonNull(defaults));
        }

        public Builder aclPolicies(@Nullable Output<List<SwitchAclPolicyArgs>> aclPolicies) {
            $.aclPolicies = aclPolicies;
            return this;
        }

        public Builder aclPolicies(List<SwitchAclPolicyArgs> aclPolicies) {
            return aclPolicies(Output.of(aclPolicies));
        }

        public Builder aclPolicies(SwitchAclPolicyArgs... aclPolicies) {
            return aclPolicies(List.of(aclPolicies));
        }

        /**
         * @param aclTags ACL Tags to identify traffic source or destination. Key name is the tag name
         * 
         * @return builder
         * 
         */
        public Builder aclTags(@Nullable Output<Map<String,SwitchAclTagsArgs>> aclTags) {
            $.aclTags = aclTags;
            return this;
        }

        /**
         * @param aclTags ACL Tags to identify traffic source or destination. Key name is the tag name
         * 
         * @return builder
         * 
         */
        public Builder aclTags(Map<String,SwitchAclTagsArgs> aclTags) {
            return aclTags(Output.of(aclTags));
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(@Nullable Output<List<String>> additionalConfigCmds) {
            $.additionalConfigCmds = additionalConfigCmds;
            return this;
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(List<String> additionalConfigCmds) {
            return additionalConfigCmds(Output.of(additionalConfigCmds));
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(String... additionalConfigCmds) {
            return additionalConfigCmds(List.of(additionalConfigCmds));
        }

        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        public Builder deviceprofileId(@Nullable Output<String> deviceprofileId) {
            $.deviceprofileId = deviceprofileId;
            return this;
        }

        public Builder deviceprofileId(String deviceprofileId) {
            return deviceprofileId(Output.of(deviceprofileId));
        }

        public Builder dhcpSnooping(@Nullable Output<SwitchDhcpSnoopingArgs> dhcpSnooping) {
            $.dhcpSnooping = dhcpSnooping;
            return this;
        }

        public Builder dhcpSnooping(SwitchDhcpSnoopingArgs dhcpSnooping) {
            return dhcpSnooping(Output.of(dhcpSnooping));
        }

        public Builder dhcpdConfig(@Nullable Output<SwitchDhcpdConfigArgs> dhcpdConfig) {
            $.dhcpdConfig = dhcpdConfig;
            return this;
        }

        public Builder dhcpdConfig(SwitchDhcpdConfigArgs dhcpdConfig) {
            return dhcpdConfig(Output.of(dhcpdConfig));
        }

        /**
         * @param disableAutoConfig for a claimed switch, we control the configs by default. This option (disables the behavior)
         * 
         * @return builder
         * 
         */
        public Builder disableAutoConfig(@Nullable Output<Boolean> disableAutoConfig) {
            $.disableAutoConfig = disableAutoConfig;
            return this;
        }

        /**
         * @param disableAutoConfig for a claimed switch, we control the configs by default. This option (disables the behavior)
         * 
         * @return builder
         * 
         */
        public Builder disableAutoConfig(Boolean disableAutoConfig) {
            return disableAutoConfig(Output.of(disableAutoConfig));
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(@Nullable Output<List<String>> dnsSuffixes) {
            $.dnsSuffixes = dnsSuffixes;
            return this;
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(List<String> dnsSuffixes) {
            return dnsSuffixes(Output.of(dnsSuffixes));
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(String... dnsSuffixes) {
            return dnsSuffixes(List.of(dnsSuffixes));
        }

        /**
         * @param evpnConfig EVPN Junos settings
         * 
         * @return builder
         * 
         */
        public Builder evpnConfig(@Nullable Output<SwitchEvpnConfigArgs> evpnConfig) {
            $.evpnConfig = evpnConfig;
            return this;
        }

        /**
         * @param evpnConfig EVPN Junos settings
         * 
         * @return builder
         * 
         */
        public Builder evpnConfig(SwitchEvpnConfigArgs evpnConfig) {
            return evpnConfig(Output.of(evpnConfig));
        }

        public Builder extraRoutes(@Nullable Output<Map<String,SwitchExtraRoutesArgs>> extraRoutes) {
            $.extraRoutes = extraRoutes;
            return this;
        }

        public Builder extraRoutes(Map<String,SwitchExtraRoutesArgs> extraRoutes) {
            return extraRoutes(Output.of(extraRoutes));
        }

        /**
         * @param extraRoutes6 Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes6(@Nullable Output<Map<String,SwitchExtraRoutes6Args>> extraRoutes6) {
            $.extraRoutes6 = extraRoutes6;
            return this;
        }

        /**
         * @param extraRoutes6 Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes6(Map<String,SwitchExtraRoutes6Args> extraRoutes6) {
            return extraRoutes6(Output.of(extraRoutes6));
        }

        public Builder image1Url(@Nullable Output<String> image1Url) {
            $.image1Url = image1Url;
            return this;
        }

        public Builder image1Url(String image1Url) {
            return image1Url(Output.of(image1Url));
        }

        public Builder image2Url(@Nullable Output<String> image2Url) {
            $.image2Url = image2Url;
            return this;
        }

        public Builder image2Url(String image2Url) {
            return image2Url(Output.of(image2Url));
        }

        public Builder image3Url(@Nullable Output<String> image3Url) {
            $.image3Url = image3Url;
            return this;
        }

        public Builder image3Url(String image3Url) {
            return image3Url(Output.of(image3Url));
        }

        /**
         * @param ipConfig Junos IP Config
         * 
         * @return builder
         * 
         */
        public Builder ipConfig(@Nullable Output<SwitchIpConfigArgs> ipConfig) {
            $.ipConfig = ipConfig;
            return this;
        }

        /**
         * @param ipConfig Junos IP Config
         * 
         * @return builder
         * 
         */
        public Builder ipConfig(SwitchIpConfigArgs ipConfig) {
            return ipConfig(Output.of(ipConfig));
        }

        /**
         * @param mac device MAC address
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac device MAC address
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        /**
         * @param managed for an adopted switch, we don’t overwrite their existing configs automatically
         * 
         * @return builder
         * 
         */
        public Builder managed(@Nullable Output<Boolean> managed) {
            $.managed = managed;
            return this;
        }

        /**
         * @param managed for an adopted switch, we don’t overwrite their existing configs automatically
         * 
         * @return builder
         * 
         */
        public Builder managed(Boolean managed) {
            return managed(Output.of(managed));
        }

        /**
         * @param mapId map where the device belongs to
         * 
         * @return builder
         * 
         */
        public Builder mapId(@Nullable Output<String> mapId) {
            $.mapId = mapId;
            return this;
        }

        /**
         * @param mapId map where the device belongs to
         * 
         * @return builder
         * 
         */
        public Builder mapId(String mapId) {
            return mapId(Output.of(mapId));
        }

        /**
         * @param mistNac enable mist_nac to use radsec
         * 
         * @return builder
         * 
         */
        public Builder mistNac(@Nullable Output<SwitchMistNacArgs> mistNac) {
            $.mistNac = mistNac;
            return this;
        }

        /**
         * @param mistNac enable mist_nac to use radsec
         * 
         * @return builder
         * 
         */
        public Builder mistNac(SwitchMistNacArgs mistNac) {
            return mistNac(Output.of(mistNac));
        }

        /**
         * @param model device Model
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model device Model
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks Property key is network name
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<Map<String,SwitchNetworksArgs>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Property key is network name
         * 
         * @return builder
         * 
         */
        public Builder networks(Map<String,SwitchNetworksArgs> networks) {
            return networks(Output.of(networks));
        }

        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param ntpServers list of NTP servers specific to this device. By default, those in Site Settings will be used
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(@Nullable Output<List<String>> ntpServers) {
            $.ntpServers = ntpServers;
            return this;
        }

        /**
         * @param ntpServers list of NTP servers specific to this device. By default, those in Site Settings will be used
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(List<String> ntpServers) {
            return ntpServers(Output.of(ntpServers));
        }

        /**
         * @param ntpServers list of NTP servers specific to this device. By default, those in Site Settings will be used
         * 
         * @return builder
         * 
         */
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }

        /**
         * @param oobIpConfig - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
         * set separately (if desired): key parameter = `re1`
         * 
         * @return builder
         * 
         */
        public Builder oobIpConfig(@Nullable Output<SwitchOobIpConfigArgs> oobIpConfig) {
            $.oobIpConfig = oobIpConfig;
            return this;
        }

        /**
         * @param oobIpConfig - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
         * set separately (if desired): key parameter = `re1`
         * 
         * @return builder
         * 
         */
        public Builder oobIpConfig(SwitchOobIpConfigArgs oobIpConfig) {
            return oobIpConfig(Output.of(oobIpConfig));
        }

        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param ospfConfig Junos OSPF config
         * 
         * @return builder
         * 
         */
        public Builder ospfConfig(@Nullable Output<SwitchOspfConfigArgs> ospfConfig) {
            $.ospfConfig = ospfConfig;
            return this;
        }

        /**
         * @param ospfConfig Junos OSPF config
         * 
         * @return builder
         * 
         */
        public Builder ospfConfig(SwitchOspfConfigArgs ospfConfig) {
            return ospfConfig(Output.of(ospfConfig));
        }

        /**
         * @param otherIpConfigs Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder otherIpConfigs(@Nullable Output<Map<String,SwitchOtherIpConfigsArgs>> otherIpConfigs) {
            $.otherIpConfigs = otherIpConfigs;
            return this;
        }

        /**
         * @param otherIpConfigs Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder otherIpConfigs(Map<String,SwitchOtherIpConfigsArgs> otherIpConfigs) {
            return otherIpConfigs(Output.of(otherIpConfigs));
        }

        /**
         * @param portConfig Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(@Nullable Output<Map<String,SwitchPortConfigArgs>> portConfig) {
            $.portConfig = portConfig;
            return this;
        }

        /**
         * @param portConfig Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(Map<String,SwitchPortConfigArgs> portConfig) {
            return portConfig(Output.of(portConfig));
        }

        /**
         * @param portMirroring Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
         * interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
         * 
         * @return builder
         * 
         */
        public Builder portMirroring(@Nullable Output<Map<String,SwitchPortMirroringArgs>> portMirroring) {
            $.portMirroring = portMirroring;
            return this;
        }

        /**
         * @param portMirroring Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
         * interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
         * 
         * @return builder
         * 
         */
        public Builder portMirroring(Map<String,SwitchPortMirroringArgs> portMirroring) {
            return portMirroring(Output.of(portMirroring));
        }

        public Builder portUsages(@Nullable Output<Map<String,SwitchPortUsagesArgs>> portUsages) {
            $.portUsages = portUsages;
            return this;
        }

        public Builder portUsages(Map<String,SwitchPortUsagesArgs> portUsages) {
            return portUsages(Output.of(portUsages));
        }

        /**
         * @param radiusConfig Junos Radius config
         * 
         * @return builder
         * 
         */
        public Builder radiusConfig(@Nullable Output<SwitchRadiusConfigArgs> radiusConfig) {
            $.radiusConfig = radiusConfig;
            return this;
        }

        /**
         * @param radiusConfig Junos Radius config
         * 
         * @return builder
         * 
         */
        public Builder radiusConfig(SwitchRadiusConfigArgs radiusConfig) {
            return radiusConfig(Output.of(radiusConfig));
        }

        public Builder remoteSyslog(@Nullable Output<SwitchRemoteSyslogArgs> remoteSyslog) {
            $.remoteSyslog = remoteSyslog;
            return this;
        }

        public Builder remoteSyslog(SwitchRemoteSyslogArgs remoteSyslog) {
            return remoteSyslog(Output.of(remoteSyslog));
        }

        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param routerId used for OSPF / BGP / EVPN
         * 
         * @return builder
         * 
         */
        public Builder routerId(@Nullable Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerId used for OSPF / BGP / EVPN
         * 
         * @return builder
         * 
         */
        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        /**
         * @param serial device Serial
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial device Serial
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public Builder snmpConfig(@Nullable Output<SwitchSnmpConfigArgs> snmpConfig) {
            $.snmpConfig = snmpConfig;
            return this;
        }

        public Builder snmpConfig(SwitchSnmpConfigArgs snmpConfig) {
            return snmpConfig(Output.of(snmpConfig));
        }

        public Builder stpConfig(@Nullable Output<SwitchStpConfigArgs> stpConfig) {
            $.stpConfig = stpConfig;
            return this;
        }

        public Builder stpConfig(SwitchStpConfigArgs stpConfig) {
            return stpConfig(Output.of(stpConfig));
        }

        /**
         * @param switchMgmt Switch settings
         * 
         * @return builder
         * 
         */
        public Builder switchMgmt(@Nullable Output<SwitchSwitchMgmtArgs> switchMgmt) {
            $.switchMgmt = switchMgmt;
            return this;
        }

        /**
         * @param switchMgmt Switch settings
         * 
         * @return builder
         * 
         */
        public Builder switchMgmt(SwitchSwitchMgmtArgs switchMgmt) {
            return switchMgmt(Output.of(switchMgmt));
        }

        /**
         * @param type Device Type. enum: `switch`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Device Type. enum: `switch`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useRouterIdAsSourceIp whether to use it for snmp / syslog / tacplus / radius
         * 
         * @return builder
         * 
         */
        public Builder useRouterIdAsSourceIp(@Nullable Output<Boolean> useRouterIdAsSourceIp) {
            $.useRouterIdAsSourceIp = useRouterIdAsSourceIp;
            return this;
        }

        /**
         * @param useRouterIdAsSourceIp whether to use it for snmp / syslog / tacplus / radius
         * 
         * @return builder
         * 
         */
        public Builder useRouterIdAsSourceIp(Boolean useRouterIdAsSourceIp) {
            return useRouterIdAsSourceIp(Output.of(useRouterIdAsSourceIp));
        }

        /**
         * @param vars a dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(@Nullable Output<Map<String,String>> vars) {
            $.vars = vars;
            return this;
        }

        /**
         * @param vars a dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(Map<String,String> vars) {
            return vars(Output.of(vars));
        }

        /**
         * @param virtualChassis required for preprovisioned Virtual Chassis
         * 
         * @return builder
         * 
         */
        public Builder virtualChassis(@Nullable Output<SwitchVirtualChassisArgs> virtualChassis) {
            $.virtualChassis = virtualChassis;
            return this;
        }

        /**
         * @param virtualChassis required for preprovisioned Virtual Chassis
         * 
         * @return builder
         * 
         */
        public Builder virtualChassis(SwitchVirtualChassisArgs virtualChassis) {
            return virtualChassis(Output.of(virtualChassis));
        }

        public Builder vrfConfig(@Nullable Output<SwitchVrfConfigArgs> vrfConfig) {
            $.vrfConfig = vrfConfig;
            return this;
        }

        public Builder vrfConfig(SwitchVrfConfigArgs vrfConfig) {
            return vrfConfig(Output.of(vrfConfig));
        }

        /**
         * @param vrfInstances Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder vrfInstances(@Nullable Output<Map<String,SwitchVrfInstancesArgs>> vrfInstances) {
            $.vrfInstances = vrfInstances;
            return this;
        }

        /**
         * @param vrfInstances Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder vrfInstances(Map<String,SwitchVrfInstancesArgs> vrfInstances) {
            return vrfInstances(Output.of(vrfInstances));
        }

        /**
         * @param vrrpConfig Junos VRRP config
         * 
         * @return builder
         * 
         */
        public Builder vrrpConfig(@Nullable Output<SwitchVrrpConfigArgs> vrrpConfig) {
            $.vrrpConfig = vrrpConfig;
            return this;
        }

        /**
         * @param vrrpConfig Junos VRRP config
         * 
         * @return builder
         * 
         */
        public Builder vrrpConfig(SwitchVrrpConfigArgs vrrpConfig) {
            return vrrpConfig(Output.of(vrrpConfig));
        }

        /**
         * @param x x in pixel
         * 
         * @return builder
         * 
         */
        public Builder x(@Nullable Output<Double> x) {
            $.x = x;
            return this;
        }

        /**
         * @param x x in pixel
         * 
         * @return builder
         * 
         */
        public Builder x(Double x) {
            return x(Output.of(x));
        }

        /**
         * @param y y in pixel
         * 
         * @return builder
         * 
         */
        public Builder y(@Nullable Output<Double> y) {
            $.y = y;
            return this;
        }

        /**
         * @param y y in pixel
         * 
         * @return builder
         * 
         */
        public Builder y(Double y) {
            return y(Output.of(y));
        }

        public SwitchState build() {
            return $;
        }
    }

}
