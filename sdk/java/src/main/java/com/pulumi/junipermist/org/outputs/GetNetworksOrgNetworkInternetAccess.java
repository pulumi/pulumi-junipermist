// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.outputs.GetNetworksOrgNetworkInternetAccessDestinationNat;
import com.pulumi.junipermist.org.outputs.GetNetworksOrgNetworkInternetAccessStaticNat;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNetworksOrgNetworkInternetAccess {
    private Boolean createSimpleServicePolicy;
    /**
     * @return Property key can be an External IP (i.e. &#34;63.16.0.3&#34;), an External IP:Port (i.e. &#34;63.16.0.3:443&#34;), an External Port (i.e. &#34;:443&#34;), an External CIDR (i.e. &#34;63.16.0.0/30&#34;), an External CIDR:Port (i.e. &#34;63.16.0.0/30:443&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;). At least one of the `internal_ip` or `port` must be defined
     * 
     */
    private Map<String,GetNetworksOrgNetworkInternetAccessDestinationNat> destinationNat;
    private Boolean enabled;
    /**
     * @return By default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
     * 
     */
    private Boolean restricted;
    /**
     * @return Property key may be an External IP Address (i.e. &#34;63.16.0.3&#34;), a CIDR (i.e. &#34;63.16.0.12/20&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;)
     * 
     */
    private Map<String,GetNetworksOrgNetworkInternetAccessStaticNat> staticNat;

    private GetNetworksOrgNetworkInternetAccess() {}
    public Boolean createSimpleServicePolicy() {
        return this.createSimpleServicePolicy;
    }
    /**
     * @return Property key can be an External IP (i.e. &#34;63.16.0.3&#34;), an External IP:Port (i.e. &#34;63.16.0.3:443&#34;), an External Port (i.e. &#34;:443&#34;), an External CIDR (i.e. &#34;63.16.0.0/30&#34;), an External CIDR:Port (i.e. &#34;63.16.0.0/30:443&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;). At least one of the `internal_ip` or `port` must be defined
     * 
     */
    public Map<String,GetNetworksOrgNetworkInternetAccessDestinationNat> destinationNat() {
        return this.destinationNat;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return By default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
     * 
     */
    public Boolean restricted() {
        return this.restricted;
    }
    /**
     * @return Property key may be an External IP Address (i.e. &#34;63.16.0.3&#34;), a CIDR (i.e. &#34;63.16.0.12/20&#34;) or a Variable (i.e. &#34;{{myvar}}&#34;)
     * 
     */
    public Map<String,GetNetworksOrgNetworkInternetAccessStaticNat> staticNat() {
        return this.staticNat;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworksOrgNetworkInternetAccess defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean createSimpleServicePolicy;
        private Map<String,GetNetworksOrgNetworkInternetAccessDestinationNat> destinationNat;
        private Boolean enabled;
        private Boolean restricted;
        private Map<String,GetNetworksOrgNetworkInternetAccessStaticNat> staticNat;
        public Builder() {}
        public Builder(GetNetworksOrgNetworkInternetAccess defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createSimpleServicePolicy = defaults.createSimpleServicePolicy;
    	      this.destinationNat = defaults.destinationNat;
    	      this.enabled = defaults.enabled;
    	      this.restricted = defaults.restricted;
    	      this.staticNat = defaults.staticNat;
        }

        @CustomType.Setter
        public Builder createSimpleServicePolicy(Boolean createSimpleServicePolicy) {
            if (createSimpleServicePolicy == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkInternetAccess", "createSimpleServicePolicy");
            }
            this.createSimpleServicePolicy = createSimpleServicePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder destinationNat(Map<String,GetNetworksOrgNetworkInternetAccessDestinationNat> destinationNat) {
            if (destinationNat == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkInternetAccess", "destinationNat");
            }
            this.destinationNat = destinationNat;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkInternetAccess", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder restricted(Boolean restricted) {
            if (restricted == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkInternetAccess", "restricted");
            }
            this.restricted = restricted;
            return this;
        }
        @CustomType.Setter
        public Builder staticNat(Map<String,GetNetworksOrgNetworkInternetAccessStaticNat> staticNat) {
            if (staticNat == null) {
              throw new MissingRequiredPropertyException("GetNetworksOrgNetworkInternetAccess", "staticNat");
            }
            this.staticNat = staticNat;
            return this;
        }
        public GetNetworksOrgNetworkInternetAccess build() {
            final var _resultValue = new GetNetworksOrgNetworkInternetAccess();
            _resultValue.createSimpleServicePolicy = createSimpleServicePolicy;
            _resultValue.destinationNat = destinationNat;
            _resultValue.enabled = enabled;
            _resultValue.restricted = restricted;
            _resultValue.staticNat = staticNat;
            return _resultValue;
        }
    }
}
