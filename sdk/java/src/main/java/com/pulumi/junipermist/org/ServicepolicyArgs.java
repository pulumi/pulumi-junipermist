// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.inputs.ServicepolicyAppqoeArgs;
import com.pulumi.junipermist.org.inputs.ServicepolicyEwfArgs;
import com.pulumi.junipermist.org.inputs.ServicepolicyIdpArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicepolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicepolicyArgs Empty = new ServicepolicyArgs();

    /**
     * enum: `allow`, `deny`
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return enum: `allow`, `deny`
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * For SRX Only
     * 
     */
    @Import(name="appqoe")
    private @Nullable Output<ServicepolicyAppqoeArgs> appqoe;

    /**
     * @return For SRX Only
     * 
     */
    public Optional<Output<ServicepolicyAppqoeArgs>> appqoe() {
        return Optional.ofNullable(this.appqoe);
    }

    @Import(name="ewfs")
    private @Nullable Output<List<ServicepolicyEwfArgs>> ewfs;

    public Optional<Output<List<ServicepolicyEwfArgs>>> ewfs() {
        return Optional.ofNullable(this.ewfs);
    }

    @Import(name="idp")
    private @Nullable Output<ServicepolicyIdpArgs> idp;

    public Optional<Output<ServicepolicyIdpArgs>> idp() {
        return Optional.ofNullable(this.idp);
    }

    /**
     * access within the same VRF
     * 
     */
    @Import(name="localRouting")
    private @Nullable Output<Boolean> localRouting;

    /**
     * @return access within the same VRF
     * 
     */
    public Optional<Output<Boolean>> localRouting() {
        return Optional.ofNullable(this.localRouting);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="orgId", required=true)
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * by default, we derive all paths available and use them
     * optionally, you can customize by using `path_preference`
     * 
     */
    @Import(name="pathPreference")
    private @Nullable Output<String> pathPreference;

    /**
     * @return by default, we derive all paths available and use them
     * optionally, you can customize by using `path_preference`
     * 
     */
    public Optional<Output<String>> pathPreference() {
        return Optional.ofNullable(this.pathPreference);
    }

    @Import(name="services")
    private @Nullable Output<List<String>> services;

    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    @Import(name="tenants")
    private @Nullable Output<List<String>> tenants;

    public Optional<Output<List<String>>> tenants() {
        return Optional.ofNullable(this.tenants);
    }

    private ServicepolicyArgs() {}

    private ServicepolicyArgs(ServicepolicyArgs $) {
        this.action = $.action;
        this.appqoe = $.appqoe;
        this.ewfs = $.ewfs;
        this.idp = $.idp;
        this.localRouting = $.localRouting;
        this.name = $.name;
        this.orgId = $.orgId;
        this.pathPreference = $.pathPreference;
        this.services = $.services;
        this.tenants = $.tenants;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicepolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicepolicyArgs $;

        public Builder() {
            $ = new ServicepolicyArgs();
        }

        public Builder(ServicepolicyArgs defaults) {
            $ = new ServicepolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action enum: `allow`, `deny`
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action enum: `allow`, `deny`
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param appqoe For SRX Only
         * 
         * @return builder
         * 
         */
        public Builder appqoe(@Nullable Output<ServicepolicyAppqoeArgs> appqoe) {
            $.appqoe = appqoe;
            return this;
        }

        /**
         * @param appqoe For SRX Only
         * 
         * @return builder
         * 
         */
        public Builder appqoe(ServicepolicyAppqoeArgs appqoe) {
            return appqoe(Output.of(appqoe));
        }

        public Builder ewfs(@Nullable Output<List<ServicepolicyEwfArgs>> ewfs) {
            $.ewfs = ewfs;
            return this;
        }

        public Builder ewfs(List<ServicepolicyEwfArgs> ewfs) {
            return ewfs(Output.of(ewfs));
        }

        public Builder ewfs(ServicepolicyEwfArgs... ewfs) {
            return ewfs(List.of(ewfs));
        }

        public Builder idp(@Nullable Output<ServicepolicyIdpArgs> idp) {
            $.idp = idp;
            return this;
        }

        public Builder idp(ServicepolicyIdpArgs idp) {
            return idp(Output.of(idp));
        }

        /**
         * @param localRouting access within the same VRF
         * 
         * @return builder
         * 
         */
        public Builder localRouting(@Nullable Output<Boolean> localRouting) {
            $.localRouting = localRouting;
            return this;
        }

        /**
         * @param localRouting access within the same VRF
         * 
         * @return builder
         * 
         */
        public Builder localRouting(Boolean localRouting) {
            return localRouting(Output.of(localRouting));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param pathPreference by default, we derive all paths available and use them
         * optionally, you can customize by using `path_preference`
         * 
         * @return builder
         * 
         */
        public Builder pathPreference(@Nullable Output<String> pathPreference) {
            $.pathPreference = pathPreference;
            return this;
        }

        /**
         * @param pathPreference by default, we derive all paths available and use them
         * optionally, you can customize by using `path_preference`
         * 
         * @return builder
         * 
         */
        public Builder pathPreference(String pathPreference) {
            return pathPreference(Output.of(pathPreference));
        }

        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        public Builder services(String... services) {
            return services(List.of(services));
        }

        public Builder tenants(@Nullable Output<List<String>> tenants) {
            $.tenants = tenants;
            return this;
        }

        public Builder tenants(List<String> tenants) {
            return tenants(Output.of(tenants));
        }

        public Builder tenants(String... tenants) {
            return tenants(List.of(tenants));
        }

        public ServicepolicyArgs build() {
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("ServicepolicyArgs", "orgId");
            }
            return $;
        }
    }

}
