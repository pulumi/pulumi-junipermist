// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.inputs.IdpprofileOverwriteArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdpprofileArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdpprofileArgs Empty = new IdpprofileArgs();

    /**
     * enum: `critical`, `standard`, `strict`
     * 
     */
    @Import(name="baseProfile", required=true)
    private Output<String> baseProfile;

    /**
     * @return enum: `critical`, `standard`, `strict`
     * 
     */
    public Output<String> baseProfile() {
        return this.baseProfile;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="orgId", required=true)
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }

    @Import(name="overwrites")
    private @Nullable Output<List<IdpprofileOverwriteArgs>> overwrites;

    public Optional<Output<List<IdpprofileOverwriteArgs>>> overwrites() {
        return Optional.ofNullable(this.overwrites);
    }

    private IdpprofileArgs() {}

    private IdpprofileArgs(IdpprofileArgs $) {
        this.baseProfile = $.baseProfile;
        this.name = $.name;
        this.orgId = $.orgId;
        this.overwrites = $.overwrites;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdpprofileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdpprofileArgs $;

        public Builder() {
            $ = new IdpprofileArgs();
        }

        public Builder(IdpprofileArgs defaults) {
            $ = new IdpprofileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseProfile enum: `critical`, `standard`, `strict`
         * 
         * @return builder
         * 
         */
        public Builder baseProfile(Output<String> baseProfile) {
            $.baseProfile = baseProfile;
            return this;
        }

        /**
         * @param baseProfile enum: `critical`, `standard`, `strict`
         * 
         * @return builder
         * 
         */
        public Builder baseProfile(String baseProfile) {
            return baseProfile(Output.of(baseProfile));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        public Builder overwrites(@Nullable Output<List<IdpprofileOverwriteArgs>> overwrites) {
            $.overwrites = overwrites;
            return this;
        }

        public Builder overwrites(List<IdpprofileOverwriteArgs> overwrites) {
            return overwrites(Output.of(overwrites));
        }

        public Builder overwrites(IdpprofileOverwriteArgs... overwrites) {
            return overwrites(List.of(overwrites));
        }

        public IdpprofileArgs build() {
            if ($.baseProfile == null) {
                throw new MissingRequiredPropertyException("IdpprofileArgs", "baseProfile");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("IdpprofileArgs", "orgId");
            }
            return $;
        }
    }

}
