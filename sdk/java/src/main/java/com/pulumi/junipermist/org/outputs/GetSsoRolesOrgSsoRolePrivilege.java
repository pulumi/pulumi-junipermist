// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSsoRolesOrgSsoRolePrivilege {
    /**
     * @return access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
     * 
     */
    private String role;
    /**
     * @return enum: `org`, `site`, `sitegroup`
     * 
     */
    private String scope;
    /**
     * @return if `scope`==`site`
     * 
     */
    private String siteId;
    /**
     * @return if `scope`==`sitegroup`
     * 
     */
    private String sitegroupId;
    /**
     * @return Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users. Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.\
     * You can define custom roles by adding the `views` attribute along with `role` when assigning privileges.\
     * Below are the list of supported UI views. Note that this is UI only feature.
     * 
     *   | UI View | Required Role | Description |
     *   | --- | --- | --- |
     *   | `reporting` | `read` | full access to all analytics tools |
     *   | `marketing` | `read` | can view analytics and location maps |
     *   | `super_observer` | `read` | can view all the organization except the subscription page |
     *   | `location` | `write` | can view and manage location maps, can view analytics |
     *   | `security` | `write` | can view and manage site labels, policies and security |
     *   | `switch_admin` | `helpdesk` | can view and manage Switch ports, can view wired clients |
     *   | `mxedge_admin` | `admin` | can view and manage Mist edges and Mist tunnels |
     *   | `lobby_admin` | `admin` | full access to Org and Site Pre-shared keys |
     * 
     */
    private String views;

    private GetSsoRolesOrgSsoRolePrivilege() {}
    /**
     * @return access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return enum: `org`, `site`, `sitegroup`
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return if `scope`==`site`
     * 
     */
    public String siteId() {
        return this.siteId;
    }
    /**
     * @return if `scope`==`sitegroup`
     * 
     */
    public String sitegroupId() {
        return this.sitegroupId;
    }
    /**
     * @return Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users. Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.\
     * You can define custom roles by adding the `views` attribute along with `role` when assigning privileges.\
     * Below are the list of supported UI views. Note that this is UI only feature.
     * 
     *   | UI View | Required Role | Description |
     *   | --- | --- | --- |
     *   | `reporting` | `read` | full access to all analytics tools |
     *   | `marketing` | `read` | can view analytics and location maps |
     *   | `super_observer` | `read` | can view all the organization except the subscription page |
     *   | `location` | `write` | can view and manage location maps, can view analytics |
     *   | `security` | `write` | can view and manage site labels, policies and security |
     *   | `switch_admin` | `helpdesk` | can view and manage Switch ports, can view wired clients |
     *   | `mxedge_admin` | `admin` | can view and manage Mist edges and Mist tunnels |
     *   | `lobby_admin` | `admin` | full access to Org and Site Pre-shared keys |
     * 
     */
    public String views() {
        return this.views;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSsoRolesOrgSsoRolePrivilege defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String role;
        private String scope;
        private String siteId;
        private String sitegroupId;
        private String views;
        public Builder() {}
        public Builder(GetSsoRolesOrgSsoRolePrivilege defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.role = defaults.role;
    	      this.scope = defaults.scope;
    	      this.siteId = defaults.siteId;
    	      this.sitegroupId = defaults.sitegroupId;
    	      this.views = defaults.views;
        }

        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetSsoRolesOrgSsoRolePrivilege", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetSsoRolesOrgSsoRolePrivilege", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetSsoRolesOrgSsoRolePrivilege", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder sitegroupId(String sitegroupId) {
            if (sitegroupId == null) {
              throw new MissingRequiredPropertyException("GetSsoRolesOrgSsoRolePrivilege", "sitegroupId");
            }
            this.sitegroupId = sitegroupId;
            return this;
        }
        @CustomType.Setter
        public Builder views(String views) {
            if (views == null) {
              throw new MissingRequiredPropertyException("GetSsoRolesOrgSsoRolePrivilege", "views");
            }
            this.views = views;
            return this;
        }
        public GetSsoRolesOrgSsoRolePrivilege build() {
            final var _resultValue = new GetSsoRolesOrgSsoRolePrivilege();
            _resultValue.role = role;
            _resultValue.scope = scope;
            _resultValue.siteId = siteId;
            _resultValue.sitegroupId = sitegroupId;
            _resultValue.views = views;
            return _resultValue;
        }
    }
}
