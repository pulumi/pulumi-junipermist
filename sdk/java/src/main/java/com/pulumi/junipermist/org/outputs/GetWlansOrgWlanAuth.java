// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWlansOrgWlanAuth {
    /**
     * @return SAE anti-clogging token threshold
     * 
     */
    private Integer anticlogThreshold;
    /**
     * @return Whether to trigger EAP reauth when the session ends
     * 
     */
    private Boolean eapReauth;
    /**
     * @return Whether to enable MAC Auth, uses the same auth_servers
     * 
     */
    private Boolean enableMacAuth;
    /**
     * @return When `type`==`wep`
     * 
     */
    private Integer keyIdx;
    /**
     * @return When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
     * 
     */
    private List<String> keys;
    /**
     * @return When `type`==`psk`, whether to only use multi_psk
     * 
     */
    private Boolean multiPskOnly;
    /**
     * @return if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
     * 
     */
    private String owe;
    /**
     * @return When `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
     * 
     */
    private List<String> pairwises;
    /**
     * @return When `multi_psk_only`==`true`, whether private wlan is enabled
     * 
     */
    private Boolean privateWlan;
    /**
     * @return When `type`==`psk`, 8-64 characters, or 64 hex characters
     * 
     */
    private String psk;
    /**
     * @return enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
     * 
     */
    private String type;
    /**
     * @return Enable WEP as secondary auth
     * 
     */
    private Boolean wepAsSecondaryAuth;

    private GetWlansOrgWlanAuth() {}
    /**
     * @return SAE anti-clogging token threshold
     * 
     */
    public Integer anticlogThreshold() {
        return this.anticlogThreshold;
    }
    /**
     * @return Whether to trigger EAP reauth when the session ends
     * 
     */
    public Boolean eapReauth() {
        return this.eapReauth;
    }
    /**
     * @return Whether to enable MAC Auth, uses the same auth_servers
     * 
     */
    public Boolean enableMacAuth() {
        return this.enableMacAuth;
    }
    /**
     * @return When `type`==`wep`
     * 
     */
    public Integer keyIdx() {
        return this.keyIdx;
    }
    /**
     * @return When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
     * 
     */
    public List<String> keys() {
        return this.keys;
    }
    /**
     * @return When `type`==`psk`, whether to only use multi_psk
     * 
     */
    public Boolean multiPskOnly() {
        return this.multiPskOnly;
    }
    /**
     * @return if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
     * 
     */
    public String owe() {
        return this.owe;
    }
    /**
     * @return When `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
     * 
     */
    public List<String> pairwises() {
        return this.pairwises;
    }
    /**
     * @return When `multi_psk_only`==`true`, whether private wlan is enabled
     * 
     */
    public Boolean privateWlan() {
        return this.privateWlan;
    }
    /**
     * @return When `type`==`psk`, 8-64 characters, or 64 hex characters
     * 
     */
    public String psk() {
        return this.psk;
    }
    /**
     * @return enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Enable WEP as secondary auth
     * 
     */
    public Boolean wepAsSecondaryAuth() {
        return this.wepAsSecondaryAuth;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlansOrgWlanAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer anticlogThreshold;
        private Boolean eapReauth;
        private Boolean enableMacAuth;
        private Integer keyIdx;
        private List<String> keys;
        private Boolean multiPskOnly;
        private String owe;
        private List<String> pairwises;
        private Boolean privateWlan;
        private String psk;
        private String type;
        private Boolean wepAsSecondaryAuth;
        public Builder() {}
        public Builder(GetWlansOrgWlanAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.anticlogThreshold = defaults.anticlogThreshold;
    	      this.eapReauth = defaults.eapReauth;
    	      this.enableMacAuth = defaults.enableMacAuth;
    	      this.keyIdx = defaults.keyIdx;
    	      this.keys = defaults.keys;
    	      this.multiPskOnly = defaults.multiPskOnly;
    	      this.owe = defaults.owe;
    	      this.pairwises = defaults.pairwises;
    	      this.privateWlan = defaults.privateWlan;
    	      this.psk = defaults.psk;
    	      this.type = defaults.type;
    	      this.wepAsSecondaryAuth = defaults.wepAsSecondaryAuth;
        }

        @CustomType.Setter
        public Builder anticlogThreshold(Integer anticlogThreshold) {
            if (anticlogThreshold == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "anticlogThreshold");
            }
            this.anticlogThreshold = anticlogThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder eapReauth(Boolean eapReauth) {
            if (eapReauth == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "eapReauth");
            }
            this.eapReauth = eapReauth;
            return this;
        }
        @CustomType.Setter
        public Builder enableMacAuth(Boolean enableMacAuth) {
            if (enableMacAuth == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "enableMacAuth");
            }
            this.enableMacAuth = enableMacAuth;
            return this;
        }
        @CustomType.Setter
        public Builder keyIdx(Integer keyIdx) {
            if (keyIdx == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "keyIdx");
            }
            this.keyIdx = keyIdx;
            return this;
        }
        @CustomType.Setter
        public Builder keys(List<String> keys) {
            if (keys == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "keys");
            }
            this.keys = keys;
            return this;
        }
        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder multiPskOnly(Boolean multiPskOnly) {
            if (multiPskOnly == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "multiPskOnly");
            }
            this.multiPskOnly = multiPskOnly;
            return this;
        }
        @CustomType.Setter
        public Builder owe(String owe) {
            if (owe == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "owe");
            }
            this.owe = owe;
            return this;
        }
        @CustomType.Setter
        public Builder pairwises(List<String> pairwises) {
            if (pairwises == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "pairwises");
            }
            this.pairwises = pairwises;
            return this;
        }
        public Builder pairwises(String... pairwises) {
            return pairwises(List.of(pairwises));
        }
        @CustomType.Setter
        public Builder privateWlan(Boolean privateWlan) {
            if (privateWlan == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "privateWlan");
            }
            this.privateWlan = privateWlan;
            return this;
        }
        @CustomType.Setter
        public Builder psk(String psk) {
            if (psk == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "psk");
            }
            this.psk = psk;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder wepAsSecondaryAuth(Boolean wepAsSecondaryAuth) {
            if (wepAsSecondaryAuth == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanAuth", "wepAsSecondaryAuth");
            }
            this.wepAsSecondaryAuth = wepAsSecondaryAuth;
            return this;
        }
        public GetWlansOrgWlanAuth build() {
            final var _resultValue = new GetWlansOrgWlanAuth();
            _resultValue.anticlogThreshold = anticlogThreshold;
            _resultValue.eapReauth = eapReauth;
            _resultValue.enableMacAuth = enableMacAuth;
            _resultValue.keyIdx = keyIdx;
            _resultValue.keys = keys;
            _resultValue.multiPskOnly = multiPskOnly;
            _resultValue.owe = owe;
            _resultValue.pairwises = pairwises;
            _resultValue.privateWlan = privateWlan;
            _resultValue.psk = psk;
            _resultValue.type = type;
            _resultValue.wepAsSecondaryAuth = wepAsSecondaryAuth;
            return _resultValue;
        }
    }
}
