// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayStatsDeviceGatewayStatTunnel {
    /**
     * @return Authentication algorithm
     * 
     */
    private String authAlgo;
    /**
     * @return Encryption algorithm
     * 
     */
    private String encryptAlgo;
    /**
     * @return IKE version
     * 
     */
    private String ikeVersion;
    /**
     * @return IP Address
     * 
     */
    private String ip;
    /**
     * @return Reason of why the tunnel is down
     * 
     */
    private String lastEvent;
    /**
     * @return Indicates when the port was last flapped
     * 
     */
    private Double lastFlapped;
    /**
     * @return Node0/node1
     * 
     */
    private String node;
    /**
     * @return Peer host
     * 
     */
    private String peerHost;
    /**
     * @return Peer ip address
     * 
     */
    private String peerIp;
    /**
     * @return enum: `primary`, `secondary`
     * 
     */
    private String priority;
    /**
     * @return enum: `gre`, `ipsec`
     * 
     */
    private String protocol;
    /**
     * @return Amount of traffic received since connection
     * 
     */
    private Integer rxBytes;
    /**
     * @return Amount of packets received since connection
     * 
     */
    private Integer rxPkts;
    /**
     * @return Mist Tunnel Name
     * 
     */
    private String tunnelName;
    /**
     * @return Amount of traffic sent since connection
     * 
     */
    private Integer txBytes;
    /**
     * @return Amount of packets sent since connection
     * 
     */
    private Integer txPkts;
    private Boolean up;
    /**
     * @return Duration from first (or last) SA was established
     * 
     */
    private Integer uptime;
    /**
     * @return WAN interface name
     * 
     */
    private String wanName;

    private GetGatewayStatsDeviceGatewayStatTunnel() {}
    /**
     * @return Authentication algorithm
     * 
     */
    public String authAlgo() {
        return this.authAlgo;
    }
    /**
     * @return Encryption algorithm
     * 
     */
    public String encryptAlgo() {
        return this.encryptAlgo;
    }
    /**
     * @return IKE version
     * 
     */
    public String ikeVersion() {
        return this.ikeVersion;
    }
    /**
     * @return IP Address
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return Reason of why the tunnel is down
     * 
     */
    public String lastEvent() {
        return this.lastEvent;
    }
    /**
     * @return Indicates when the port was last flapped
     * 
     */
    public Double lastFlapped() {
        return this.lastFlapped;
    }
    /**
     * @return Node0/node1
     * 
     */
    public String node() {
        return this.node;
    }
    /**
     * @return Peer host
     * 
     */
    public String peerHost() {
        return this.peerHost;
    }
    /**
     * @return Peer ip address
     * 
     */
    public String peerIp() {
        return this.peerIp;
    }
    /**
     * @return enum: `primary`, `secondary`
     * 
     */
    public String priority() {
        return this.priority;
    }
    /**
     * @return enum: `gre`, `ipsec`
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Amount of traffic received since connection
     * 
     */
    public Integer rxBytes() {
        return this.rxBytes;
    }
    /**
     * @return Amount of packets received since connection
     * 
     */
    public Integer rxPkts() {
        return this.rxPkts;
    }
    /**
     * @return Mist Tunnel Name
     * 
     */
    public String tunnelName() {
        return this.tunnelName;
    }
    /**
     * @return Amount of traffic sent since connection
     * 
     */
    public Integer txBytes() {
        return this.txBytes;
    }
    /**
     * @return Amount of packets sent since connection
     * 
     */
    public Integer txPkts() {
        return this.txPkts;
    }
    public Boolean up() {
        return this.up;
    }
    /**
     * @return Duration from first (or last) SA was established
     * 
     */
    public Integer uptime() {
        return this.uptime;
    }
    /**
     * @return WAN interface name
     * 
     */
    public String wanName() {
        return this.wanName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayStatsDeviceGatewayStatTunnel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authAlgo;
        private String encryptAlgo;
        private String ikeVersion;
        private String ip;
        private String lastEvent;
        private Double lastFlapped;
        private String node;
        private String peerHost;
        private String peerIp;
        private String priority;
        private String protocol;
        private Integer rxBytes;
        private Integer rxPkts;
        private String tunnelName;
        private Integer txBytes;
        private Integer txPkts;
        private Boolean up;
        private Integer uptime;
        private String wanName;
        public Builder() {}
        public Builder(GetGatewayStatsDeviceGatewayStatTunnel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authAlgo = defaults.authAlgo;
    	      this.encryptAlgo = defaults.encryptAlgo;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.ip = defaults.ip;
    	      this.lastEvent = defaults.lastEvent;
    	      this.lastFlapped = defaults.lastFlapped;
    	      this.node = defaults.node;
    	      this.peerHost = defaults.peerHost;
    	      this.peerIp = defaults.peerIp;
    	      this.priority = defaults.priority;
    	      this.protocol = defaults.protocol;
    	      this.rxBytes = defaults.rxBytes;
    	      this.rxPkts = defaults.rxPkts;
    	      this.tunnelName = defaults.tunnelName;
    	      this.txBytes = defaults.txBytes;
    	      this.txPkts = defaults.txPkts;
    	      this.up = defaults.up;
    	      this.uptime = defaults.uptime;
    	      this.wanName = defaults.wanName;
        }

        @CustomType.Setter
        public Builder authAlgo(String authAlgo) {
            if (authAlgo == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "authAlgo");
            }
            this.authAlgo = authAlgo;
            return this;
        }
        @CustomType.Setter
        public Builder encryptAlgo(String encryptAlgo) {
            if (encryptAlgo == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "encryptAlgo");
            }
            this.encryptAlgo = encryptAlgo;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(String ikeVersion) {
            if (ikeVersion == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "ikeVersion");
            }
            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder lastEvent(String lastEvent) {
            if (lastEvent == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "lastEvent");
            }
            this.lastEvent = lastEvent;
            return this;
        }
        @CustomType.Setter
        public Builder lastFlapped(Double lastFlapped) {
            if (lastFlapped == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "lastFlapped");
            }
            this.lastFlapped = lastFlapped;
            return this;
        }
        @CustomType.Setter
        public Builder node(String node) {
            if (node == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "node");
            }
            this.node = node;
            return this;
        }
        @CustomType.Setter
        public Builder peerHost(String peerHost) {
            if (peerHost == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "peerHost");
            }
            this.peerHost = peerHost;
            return this;
        }
        @CustomType.Setter
        public Builder peerIp(String peerIp) {
            if (peerIp == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "peerIp");
            }
            this.peerIp = peerIp;
            return this;
        }
        @CustomType.Setter
        public Builder priority(String priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder rxBytes(Integer rxBytes) {
            if (rxBytes == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "rxBytes");
            }
            this.rxBytes = rxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder rxPkts(Integer rxPkts) {
            if (rxPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "rxPkts");
            }
            this.rxPkts = rxPkts;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelName(String tunnelName) {
            if (tunnelName == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "tunnelName");
            }
            this.tunnelName = tunnelName;
            return this;
        }
        @CustomType.Setter
        public Builder txBytes(Integer txBytes) {
            if (txBytes == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "txBytes");
            }
            this.txBytes = txBytes;
            return this;
        }
        @CustomType.Setter
        public Builder txPkts(Integer txPkts) {
            if (txPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "txPkts");
            }
            this.txPkts = txPkts;
            return this;
        }
        @CustomType.Setter
        public Builder up(Boolean up) {
            if (up == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "up");
            }
            this.up = up;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(Integer uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        @CustomType.Setter
        public Builder wanName(String wanName) {
            if (wanName == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatTunnel", "wanName");
            }
            this.wanName = wanName;
            return this;
        }
        public GetGatewayStatsDeviceGatewayStatTunnel build() {
            final var _resultValue = new GetGatewayStatsDeviceGatewayStatTunnel();
            _resultValue.authAlgo = authAlgo;
            _resultValue.encryptAlgo = encryptAlgo;
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.ip = ip;
            _resultValue.lastEvent = lastEvent;
            _resultValue.lastFlapped = lastFlapped;
            _resultValue.node = node;
            _resultValue.peerHost = peerHost;
            _resultValue.peerIp = peerIp;
            _resultValue.priority = priority;
            _resultValue.protocol = protocol;
            _resultValue.rxBytes = rxBytes;
            _resultValue.rxPkts = rxPkts;
            _resultValue.tunnelName = tunnelName;
            _resultValue.txBytes = txBytes;
            _resultValue.txPkts = txPkts;
            _resultValue.up = up;
            _resultValue.uptime = uptime;
            _resultValue.wanName = wanName;
            return _resultValue;
        }
    }
}
