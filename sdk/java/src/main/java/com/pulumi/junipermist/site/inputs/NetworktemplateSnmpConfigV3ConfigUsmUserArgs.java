// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworktemplateSnmpConfigV3ConfigUsmUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworktemplateSnmpConfigV3ConfigUsmUserArgs Empty = new NetworktemplateSnmpConfigV3ConfigUsmUserArgs();

    /**
     * Not required if `authentication_type`==`authentication-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
     * 
     */
    @Import(name="authenticationPassword")
    private @Nullable Output<String> authenticationPassword;

    /**
     * @return Not required if `authentication_type`==`authentication-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
     * 
     */
    public Optional<Output<String>> authenticationPassword() {
        return Optional.ofNullable(this.authenticationPassword);
    }

    /**
     * sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication-md5`, `authentication-none`, `authentication-sha`, `authentication-sha224`, `authentication-sha256`, `authentication-sha384`, `authentication-sha512`
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<String> authenticationType;

    /**
     * @return sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication-md5`, `authentication-none`, `authentication-sha`, `authentication-sha224`, `authentication-sha256`, `authentication-sha384`, `authentication-sha512`
     * 
     */
    public Optional<Output<String>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * Not required if `encryption_type`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
     * 
     */
    @Import(name="encryptionPassword")
    private @Nullable Output<String> encryptionPassword;

    /**
     * @return Not required if `encryption_type`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
     * 
     */
    public Optional<Output<String>> encryptionPassword() {
        return Optional.ofNullable(this.encryptionPassword);
    }

    /**
     * enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
     * 
     */
    @Import(name="encryptionType")
    private @Nullable Output<String> encryptionType;

    /**
     * @return enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
     * 
     */
    public Optional<Output<String>> encryptionType() {
        return Optional.ofNullable(this.encryptionType);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private NetworktemplateSnmpConfigV3ConfigUsmUserArgs() {}

    private NetworktemplateSnmpConfigV3ConfigUsmUserArgs(NetworktemplateSnmpConfigV3ConfigUsmUserArgs $) {
        this.authenticationPassword = $.authenticationPassword;
        this.authenticationType = $.authenticationType;
        this.encryptionPassword = $.encryptionPassword;
        this.encryptionType = $.encryptionType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworktemplateSnmpConfigV3ConfigUsmUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworktemplateSnmpConfigV3ConfigUsmUserArgs $;

        public Builder() {
            $ = new NetworktemplateSnmpConfigV3ConfigUsmUserArgs();
        }

        public Builder(NetworktemplateSnmpConfigV3ConfigUsmUserArgs defaults) {
            $ = new NetworktemplateSnmpConfigV3ConfigUsmUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationPassword Not required if `authentication_type`==`authentication-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
         * 
         * @return builder
         * 
         */
        public Builder authenticationPassword(@Nullable Output<String> authenticationPassword) {
            $.authenticationPassword = authenticationPassword;
            return this;
        }

        /**
         * @param authenticationPassword Not required if `authentication_type`==`authentication-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
         * 
         * @return builder
         * 
         */
        public Builder authenticationPassword(String authenticationPassword) {
            return authenticationPassword(Output.of(authenticationPassword));
        }

        /**
         * @param authenticationType sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication-md5`, `authentication-none`, `authentication-sha`, `authentication-sha224`, `authentication-sha256`, `authentication-sha384`, `authentication-sha512`
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param authenticationType sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication-md5`, `authentication-none`, `authentication-sha`, `authentication-sha224`, `authentication-sha256`, `authentication-sha384`, `authentication-sha512`
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        /**
         * @param encryptionPassword Not required if `encryption_type`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
         * 
         * @return builder
         * 
         */
        public Builder encryptionPassword(@Nullable Output<String> encryptionPassword) {
            $.encryptionPassword = encryptionPassword;
            return this;
        }

        /**
         * @param encryptionPassword Not required if `encryption_type`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
         * 
         * @return builder
         * 
         */
        public Builder encryptionPassword(String encryptionPassword) {
            return encryptionPassword(Output.of(encryptionPassword));
        }

        /**
         * @param encryptionType enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
         * 
         * @return builder
         * 
         */
        public Builder encryptionType(@Nullable Output<String> encryptionType) {
            $.encryptionType = encryptionType;
            return this;
        }

        /**
         * @param encryptionType enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
         * 
         * @return builder
         * 
         */
        public Builder encryptionType(String encryptionType) {
            return encryptionType(Output.of(encryptionType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public NetworktemplateSnmpConfigV3ConfigUsmUserArgs build() {
            return $;
        }
    }

}
