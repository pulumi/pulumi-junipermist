// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.device.inputs.GatewayBgpConfigArgs;
import com.pulumi.junipermist.device.inputs.GatewayDhcpdConfigArgs;
import com.pulumi.junipermist.device.inputs.GatewayExtraRoutes6Args;
import com.pulumi.junipermist.device.inputs.GatewayExtraRoutesArgs;
import com.pulumi.junipermist.device.inputs.GatewayGatewayMgmtArgs;
import com.pulumi.junipermist.device.inputs.GatewayIdpProfilesArgs;
import com.pulumi.junipermist.device.inputs.GatewayIpConfigsArgs;
import com.pulumi.junipermist.device.inputs.GatewayNetworkArgs;
import com.pulumi.junipermist.device.inputs.GatewayOobIpConfigArgs;
import com.pulumi.junipermist.device.inputs.GatewayPathPreferencesArgs;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigArgs;
import com.pulumi.junipermist.device.inputs.GatewayPortMirroringArgs;
import com.pulumi.junipermist.device.inputs.GatewayRoutingPoliciesArgs;
import com.pulumi.junipermist.device.inputs.GatewayServicePolicyArgs;
import com.pulumi.junipermist.device.inputs.GatewayTunnelConfigsArgs;
import com.pulumi.junipermist.device.inputs.GatewayTunnelProviderOptionsArgs;
import com.pulumi.junipermist.device.inputs.GatewayVrfConfigArgs;
import com.pulumi.junipermist.device.inputs.GatewayVrfInstancesArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayState extends com.pulumi.resources.ResourceArgs {

    public static final GatewayState Empty = new GatewayState();

    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     * 
     */
    @Import(name="additionalConfigCmds")
    private @Nullable Output<List<String>> additionalConfigCmds;

    /**
     * @return additional CLI commands to append to the generated Junos config. **Note**: no check is done
     * 
     */
    public Optional<Output<List<String>>> additionalConfigCmds() {
        return Optional.ofNullable(this.additionalConfigCmds);
    }

    @Import(name="bgpConfig")
    private @Nullable Output<Map<String,GatewayBgpConfigArgs>> bgpConfig;

    public Optional<Output<Map<String,GatewayBgpConfigArgs>>> bgpConfig() {
        return Optional.ofNullable(this.bgpConfig);
    }

    @Import(name="deviceId")
    private @Nullable Output<String> deviceId;

    public Optional<Output<String>> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    @Import(name="dhcpdConfig")
    private @Nullable Output<GatewayDhcpdConfigArgs> dhcpdConfig;

    public Optional<Output<GatewayDhcpdConfigArgs>> dhcpdConfig() {
        return Optional.ofNullable(this.dhcpdConfig);
    }

    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     * 
     */
    @Import(name="dnsSuffixes")
    private @Nullable Output<List<String>> dnsSuffixes;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     * 
     */
    public Optional<Output<List<String>>> dnsSuffixes() {
        return Optional.ofNullable(this.dnsSuffixes);
    }

    /**
     * Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
     * 
     */
    @Import(name="extraRoutes")
    private @Nullable Output<Map<String,GatewayExtraRoutesArgs>> extraRoutes;

    /**
     * @return Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
     * 
     */
    public Optional<Output<Map<String,GatewayExtraRoutesArgs>>> extraRoutes() {
        return Optional.ofNullable(this.extraRoutes);
    }

    /**
     * Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
     * 
     */
    @Import(name="extraRoutes6")
    private @Nullable Output<Map<String,GatewayExtraRoutes6Args>> extraRoutes6;

    /**
     * @return Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
     * 
     */
    public Optional<Output<Map<String,GatewayExtraRoutes6Args>>> extraRoutes6() {
        return Optional.ofNullable(this.extraRoutes6);
    }

    /**
     * Gateway settings
     * 
     */
    @Import(name="gatewayMgmt")
    private @Nullable Output<GatewayGatewayMgmtArgs> gatewayMgmt;

    /**
     * @return Gateway settings
     * 
     */
    public Optional<Output<GatewayGatewayMgmtArgs>> gatewayMgmt() {
        return Optional.ofNullable(this.gatewayMgmt);
    }

    /**
     * Property key is the profile name
     * 
     */
    @Import(name="idpProfiles")
    private @Nullable Output<Map<String,GatewayIdpProfilesArgs>> idpProfiles;

    /**
     * @return Property key is the profile name
     * 
     */
    public Optional<Output<Map<String,GatewayIdpProfilesArgs>>> idpProfiles() {
        return Optional.ofNullable(this.idpProfiles);
    }

    @Import(name="image1Url")
    private @Nullable Output<String> image1Url;

    public Optional<Output<String>> image1Url() {
        return Optional.ofNullable(this.image1Url);
    }

    @Import(name="image2Url")
    private @Nullable Output<String> image2Url;

    public Optional<Output<String>> image2Url() {
        return Optional.ofNullable(this.image2Url);
    }

    @Import(name="image3Url")
    private @Nullable Output<String> image3Url;

    public Optional<Output<String>> image3Url() {
        return Optional.ofNullable(this.image3Url);
    }

    /**
     * Property key is the network name
     * 
     */
    @Import(name="ipConfigs")
    private @Nullable Output<Map<String,GatewayIpConfigsArgs>> ipConfigs;

    /**
     * @return Property key is the network name
     * 
     */
    public Optional<Output<Map<String,GatewayIpConfigsArgs>>> ipConfigs() {
        return Optional.ofNullable(this.ipConfigs);
    }

    /**
     * Device MAC address
     * 
     */
    @Import(name="mac")
    private @Nullable Output<String> mac;

    /**
     * @return Device MAC address
     * 
     */
    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    @Import(name="managed")
    private @Nullable Output<Boolean> managed;

    public Optional<Output<Boolean>> managed() {
        return Optional.ofNullable(this.managed);
    }

    /**
     * Map where the device belongs to
     * 
     */
    @Import(name="mapId")
    private @Nullable Output<String> mapId;

    /**
     * @return Map where the device belongs to
     * 
     */
    public Optional<Output<String>> mapId() {
        return Optional.ofNullable(this.mapId);
    }

    /**
     * Device Model
     * 
     */
    @Import(name="model")
    private @Nullable Output<String> model;

    /**
     * @return Device Model
     * 
     */
    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    @Import(name="mspId")
    private @Nullable Output<String> mspId;

    public Optional<Output<String>> mspId() {
        return Optional.ofNullable(this.mspId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networks")
    private @Nullable Output<List<GatewayNetworkArgs>> networks;

    public Optional<Output<List<GatewayNetworkArgs>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    @Import(name="notes")
    private @Nullable Output<String> notes;

    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    @Import(name="ntpServers")
    private @Nullable Output<List<String>> ntpServers;

    public Optional<Output<List<String>>> ntpServers() {
        return Optional.ofNullable(this.ntpServers);
    }

    /**
     * Out-of-band (vme/em0/fxp0) IP config
     * 
     */
    @Import(name="oobIpConfig")
    private @Nullable Output<GatewayOobIpConfigArgs> oobIpConfig;

    /**
     * @return Out-of-band (vme/em0/fxp0) IP config
     * 
     */
    public Optional<Output<GatewayOobIpConfigArgs>> oobIpConfig() {
        return Optional.ofNullable(this.oobIpConfig);
    }

    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Property key is the path name
     * 
     */
    @Import(name="pathPreferences")
    private @Nullable Output<Map<String,GatewayPathPreferencesArgs>> pathPreferences;

    /**
     * @return Property key is the path name
     * 
     */
    public Optional<Output<Map<String,GatewayPathPreferencesArgs>>> pathPreferences() {
        return Optional.ofNullable(this.pathPreferences);
    }

    /**
     * Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    @Import(name="portConfig")
    private @Nullable Output<Map<String,GatewayPortConfigArgs>> portConfig;

    /**
     * @return Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    public Optional<Output<Map<String,GatewayPortConfigArgs>>> portConfig() {
        return Optional.ofNullable(this.portConfig);
    }

    @Import(name="portMirroring")
    private @Nullable Output<GatewayPortMirroringArgs> portMirroring;

    public Optional<Output<GatewayPortMirroringArgs>> portMirroring() {
        return Optional.ofNullable(this.portMirroring);
    }

    /**
     * Auto assigned if not set
     * 
     */
    @Import(name="routerId")
    private @Nullable Output<String> routerId;

    /**
     * @return Auto assigned if not set
     * 
     */
    public Optional<Output<String>> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    /**
     * Property key is the routing policy name
     * 
     */
    @Import(name="routingPolicies")
    private @Nullable Output<Map<String,GatewayRoutingPoliciesArgs>> routingPolicies;

    /**
     * @return Property key is the routing policy name
     * 
     */
    public Optional<Output<Map<String,GatewayRoutingPoliciesArgs>>> routingPolicies() {
        return Optional.ofNullable(this.routingPolicies);
    }

    /**
     * Device Serial
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return Device Serial
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    @Import(name="servicePolicies")
    private @Nullable Output<List<GatewayServicePolicyArgs>> servicePolicies;

    public Optional<Output<List<GatewayServicePolicyArgs>>> servicePolicies() {
        return Optional.ofNullable(this.servicePolicies);
    }

    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * additional CLI commands to append to the generated SSR config. **Note**: no check is done
     * 
     */
    @Import(name="ssrAdditionalConfigCmds")
    private @Nullable Output<List<String>> ssrAdditionalConfigCmds;

    /**
     * @return additional CLI commands to append to the generated SSR config. **Note**: no check is done
     * 
     */
    public Optional<Output<List<String>>> ssrAdditionalConfigCmds() {
        return Optional.ofNullable(this.ssrAdditionalConfigCmds);
    }

    /**
     * Property key is the tunnel name
     * 
     */
    @Import(name="tunnelConfigs")
    private @Nullable Output<Map<String,GatewayTunnelConfigsArgs>> tunnelConfigs;

    /**
     * @return Property key is the tunnel name
     * 
     */
    public Optional<Output<Map<String,GatewayTunnelConfigsArgs>>> tunnelConfigs() {
        return Optional.ofNullable(this.tunnelConfigs);
    }

    @Import(name="tunnelProviderOptions")
    private @Nullable Output<GatewayTunnelProviderOptionsArgs> tunnelProviderOptions;

    public Optional<Output<GatewayTunnelProviderOptionsArgs>> tunnelProviderOptions() {
        return Optional.ofNullable(this.tunnelProviderOptions);
    }

    /**
     * Device Type. enum: `gateway`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Device Type. enum: `gateway`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * When a service policy denies a app_category, what message to show in user&#39;s browser
     * 
     */
    @Import(name="urlFilteringDenyMsg")
    private @Nullable Output<String> urlFilteringDenyMsg;

    /**
     * @return When a service policy denies a app_category, what message to show in user&#39;s browser
     * 
     */
    public Optional<Output<String>> urlFilteringDenyMsg() {
        return Optional.ofNullable(this.urlFilteringDenyMsg);
    }

    /**
     * Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    @Import(name="vars")
    private @Nullable Output<Map<String,String>> vars;

    /**
     * @return Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    public Optional<Output<Map<String,String>>> vars() {
        return Optional.ofNullable(this.vars);
    }

    @Import(name="vrfConfig")
    private @Nullable Output<GatewayVrfConfigArgs> vrfConfig;

    public Optional<Output<GatewayVrfConfigArgs>> vrfConfig() {
        return Optional.ofNullable(this.vrfConfig);
    }

    /**
     * Property key is the network name
     * 
     */
    @Import(name="vrfInstances")
    private @Nullable Output<Map<String,GatewayVrfInstancesArgs>> vrfInstances;

    /**
     * @return Property key is the network name
     * 
     */
    public Optional<Output<Map<String,GatewayVrfInstancesArgs>>> vrfInstances() {
        return Optional.ofNullable(this.vrfInstances);
    }

    /**
     * X in pixel
     * 
     */
    @Import(name="x")
    private @Nullable Output<Double> x;

    /**
     * @return X in pixel
     * 
     */
    public Optional<Output<Double>> x() {
        return Optional.ofNullable(this.x);
    }

    /**
     * Y in pixel
     * 
     */
    @Import(name="y")
    private @Nullable Output<Double> y;

    /**
     * @return Y in pixel
     * 
     */
    public Optional<Output<Double>> y() {
        return Optional.ofNullable(this.y);
    }

    private GatewayState() {}

    private GatewayState(GatewayState $) {
        this.additionalConfigCmds = $.additionalConfigCmds;
        this.bgpConfig = $.bgpConfig;
        this.deviceId = $.deviceId;
        this.dhcpdConfig = $.dhcpdConfig;
        this.dnsServers = $.dnsServers;
        this.dnsSuffixes = $.dnsSuffixes;
        this.extraRoutes = $.extraRoutes;
        this.extraRoutes6 = $.extraRoutes6;
        this.gatewayMgmt = $.gatewayMgmt;
        this.idpProfiles = $.idpProfiles;
        this.image1Url = $.image1Url;
        this.image2Url = $.image2Url;
        this.image3Url = $.image3Url;
        this.ipConfigs = $.ipConfigs;
        this.mac = $.mac;
        this.managed = $.managed;
        this.mapId = $.mapId;
        this.model = $.model;
        this.mspId = $.mspId;
        this.name = $.name;
        this.networks = $.networks;
        this.notes = $.notes;
        this.ntpServers = $.ntpServers;
        this.oobIpConfig = $.oobIpConfig;
        this.orgId = $.orgId;
        this.pathPreferences = $.pathPreferences;
        this.portConfig = $.portConfig;
        this.portMirroring = $.portMirroring;
        this.routerId = $.routerId;
        this.routingPolicies = $.routingPolicies;
        this.serial = $.serial;
        this.servicePolicies = $.servicePolicies;
        this.siteId = $.siteId;
        this.ssrAdditionalConfigCmds = $.ssrAdditionalConfigCmds;
        this.tunnelConfigs = $.tunnelConfigs;
        this.tunnelProviderOptions = $.tunnelProviderOptions;
        this.type = $.type;
        this.urlFilteringDenyMsg = $.urlFilteringDenyMsg;
        this.vars = $.vars;
        this.vrfConfig = $.vrfConfig;
        this.vrfInstances = $.vrfInstances;
        this.x = $.x;
        this.y = $.y;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayState $;

        public Builder() {
            $ = new GatewayState();
        }

        public Builder(GatewayState defaults) {
            $ = new GatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config. **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(@Nullable Output<List<String>> additionalConfigCmds) {
            $.additionalConfigCmds = additionalConfigCmds;
            return this;
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config. **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(List<String> additionalConfigCmds) {
            return additionalConfigCmds(Output.of(additionalConfigCmds));
        }

        /**
         * @param additionalConfigCmds additional CLI commands to append to the generated Junos config. **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder additionalConfigCmds(String... additionalConfigCmds) {
            return additionalConfigCmds(List.of(additionalConfigCmds));
        }

        public Builder bgpConfig(@Nullable Output<Map<String,GatewayBgpConfigArgs>> bgpConfig) {
            $.bgpConfig = bgpConfig;
            return this;
        }

        public Builder bgpConfig(Map<String,GatewayBgpConfigArgs> bgpConfig) {
            return bgpConfig(Output.of(bgpConfig));
        }

        public Builder deviceId(@Nullable Output<String> deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            return deviceId(Output.of(deviceId));
        }

        public Builder dhcpdConfig(@Nullable Output<GatewayDhcpdConfigArgs> dhcpdConfig) {
            $.dhcpdConfig = dhcpdConfig;
            return this;
        }

        public Builder dhcpdConfig(GatewayDhcpdConfigArgs dhcpdConfig) {
            return dhcpdConfig(Output.of(dhcpdConfig));
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(@Nullable Output<List<String>> dnsSuffixes) {
            $.dnsSuffixes = dnsSuffixes;
            return this;
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(List<String> dnsSuffixes) {
            return dnsSuffixes(Output.of(dnsSuffixes));
        }

        /**
         * @param dnsSuffixes Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
         * 
         * @return builder
         * 
         */
        public Builder dnsSuffixes(String... dnsSuffixes) {
            return dnsSuffixes(List.of(dnsSuffixes));
        }

        /**
         * @param extraRoutes Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes(@Nullable Output<Map<String,GatewayExtraRoutesArgs>> extraRoutes) {
            $.extraRoutes = extraRoutes;
            return this;
        }

        /**
         * @param extraRoutes Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes(Map<String,GatewayExtraRoutesArgs> extraRoutes) {
            return extraRoutes(Output.of(extraRoutes));
        }

        /**
         * @param extraRoutes6 Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes6(@Nullable Output<Map<String,GatewayExtraRoutes6Args>> extraRoutes6) {
            $.extraRoutes6 = extraRoutes6;
            return this;
        }

        /**
         * @param extraRoutes6 Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;), the destination Network name or a variable (e.g. &#34;{{myvar}}&#34;)
         * 
         * @return builder
         * 
         */
        public Builder extraRoutes6(Map<String,GatewayExtraRoutes6Args> extraRoutes6) {
            return extraRoutes6(Output.of(extraRoutes6));
        }

        /**
         * @param gatewayMgmt Gateway settings
         * 
         * @return builder
         * 
         */
        public Builder gatewayMgmt(@Nullable Output<GatewayGatewayMgmtArgs> gatewayMgmt) {
            $.gatewayMgmt = gatewayMgmt;
            return this;
        }

        /**
         * @param gatewayMgmt Gateway settings
         * 
         * @return builder
         * 
         */
        public Builder gatewayMgmt(GatewayGatewayMgmtArgs gatewayMgmt) {
            return gatewayMgmt(Output.of(gatewayMgmt));
        }

        /**
         * @param idpProfiles Property key is the profile name
         * 
         * @return builder
         * 
         */
        public Builder idpProfiles(@Nullable Output<Map<String,GatewayIdpProfilesArgs>> idpProfiles) {
            $.idpProfiles = idpProfiles;
            return this;
        }

        /**
         * @param idpProfiles Property key is the profile name
         * 
         * @return builder
         * 
         */
        public Builder idpProfiles(Map<String,GatewayIdpProfilesArgs> idpProfiles) {
            return idpProfiles(Output.of(idpProfiles));
        }

        public Builder image1Url(@Nullable Output<String> image1Url) {
            $.image1Url = image1Url;
            return this;
        }

        public Builder image1Url(String image1Url) {
            return image1Url(Output.of(image1Url));
        }

        public Builder image2Url(@Nullable Output<String> image2Url) {
            $.image2Url = image2Url;
            return this;
        }

        public Builder image2Url(String image2Url) {
            return image2Url(Output.of(image2Url));
        }

        public Builder image3Url(@Nullable Output<String> image3Url) {
            $.image3Url = image3Url;
            return this;
        }

        public Builder image3Url(String image3Url) {
            return image3Url(Output.of(image3Url));
        }

        /**
         * @param ipConfigs Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder ipConfigs(@Nullable Output<Map<String,GatewayIpConfigsArgs>> ipConfigs) {
            $.ipConfigs = ipConfigs;
            return this;
        }

        /**
         * @param ipConfigs Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder ipConfigs(Map<String,GatewayIpConfigsArgs> ipConfigs) {
            return ipConfigs(Output.of(ipConfigs));
        }

        /**
         * @param mac Device MAC address
         * 
         * @return builder
         * 
         */
        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        /**
         * @param mac Device MAC address
         * 
         * @return builder
         * 
         */
        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        public Builder managed(@Nullable Output<Boolean> managed) {
            $.managed = managed;
            return this;
        }

        public Builder managed(Boolean managed) {
            return managed(Output.of(managed));
        }

        /**
         * @param mapId Map where the device belongs to
         * 
         * @return builder
         * 
         */
        public Builder mapId(@Nullable Output<String> mapId) {
            $.mapId = mapId;
            return this;
        }

        /**
         * @param mapId Map where the device belongs to
         * 
         * @return builder
         * 
         */
        public Builder mapId(String mapId) {
            return mapId(Output.of(mapId));
        }

        /**
         * @param model Device Model
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model Device Model
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        public Builder mspId(@Nullable Output<String> mspId) {
            $.mspId = mspId;
            return this;
        }

        public Builder mspId(String mspId) {
            return mspId(Output.of(mspId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networks(@Nullable Output<List<GatewayNetworkArgs>> networks) {
            $.networks = networks;
            return this;
        }

        public Builder networks(List<GatewayNetworkArgs> networks) {
            return networks(Output.of(networks));
        }

        public Builder networks(GatewayNetworkArgs... networks) {
            return networks(List.of(networks));
        }

        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        public Builder ntpServers(@Nullable Output<List<String>> ntpServers) {
            $.ntpServers = ntpServers;
            return this;
        }

        public Builder ntpServers(List<String> ntpServers) {
            return ntpServers(Output.of(ntpServers));
        }

        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }

        /**
         * @param oobIpConfig Out-of-band (vme/em0/fxp0) IP config
         * 
         * @return builder
         * 
         */
        public Builder oobIpConfig(@Nullable Output<GatewayOobIpConfigArgs> oobIpConfig) {
            $.oobIpConfig = oobIpConfig;
            return this;
        }

        /**
         * @param oobIpConfig Out-of-band (vme/em0/fxp0) IP config
         * 
         * @return builder
         * 
         */
        public Builder oobIpConfig(GatewayOobIpConfigArgs oobIpConfig) {
            return oobIpConfig(Output.of(oobIpConfig));
        }

        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param pathPreferences Property key is the path name
         * 
         * @return builder
         * 
         */
        public Builder pathPreferences(@Nullable Output<Map<String,GatewayPathPreferencesArgs>> pathPreferences) {
            $.pathPreferences = pathPreferences;
            return this;
        }

        /**
         * @param pathPreferences Property key is the path name
         * 
         * @return builder
         * 
         */
        public Builder pathPreferences(Map<String,GatewayPathPreferencesArgs> pathPreferences) {
            return pathPreferences(Output.of(pathPreferences));
        }

        /**
         * @param portConfig Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(@Nullable Output<Map<String,GatewayPortConfigArgs>> portConfig) {
            $.portConfig = portConfig;
            return this;
        }

        /**
         * @param portConfig Property key is the port name or range (e.g. &#34;ge-0/0/0-10&#34;)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(Map<String,GatewayPortConfigArgs> portConfig) {
            return portConfig(Output.of(portConfig));
        }

        public Builder portMirroring(@Nullable Output<GatewayPortMirroringArgs> portMirroring) {
            $.portMirroring = portMirroring;
            return this;
        }

        public Builder portMirroring(GatewayPortMirroringArgs portMirroring) {
            return portMirroring(Output.of(portMirroring));
        }

        /**
         * @param routerId Auto assigned if not set
         * 
         * @return builder
         * 
         */
        public Builder routerId(@Nullable Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        /**
         * @param routerId Auto assigned if not set
         * 
         * @return builder
         * 
         */
        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        /**
         * @param routingPolicies Property key is the routing policy name
         * 
         * @return builder
         * 
         */
        public Builder routingPolicies(@Nullable Output<Map<String,GatewayRoutingPoliciesArgs>> routingPolicies) {
            $.routingPolicies = routingPolicies;
            return this;
        }

        /**
         * @param routingPolicies Property key is the routing policy name
         * 
         * @return builder
         * 
         */
        public Builder routingPolicies(Map<String,GatewayRoutingPoliciesArgs> routingPolicies) {
            return routingPolicies(Output.of(routingPolicies));
        }

        /**
         * @param serial Device Serial
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial Device Serial
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        public Builder servicePolicies(@Nullable Output<List<GatewayServicePolicyArgs>> servicePolicies) {
            $.servicePolicies = servicePolicies;
            return this;
        }

        public Builder servicePolicies(List<GatewayServicePolicyArgs> servicePolicies) {
            return servicePolicies(Output.of(servicePolicies));
        }

        public Builder servicePolicies(GatewayServicePolicyArgs... servicePolicies) {
            return servicePolicies(List.of(servicePolicies));
        }

        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param ssrAdditionalConfigCmds additional CLI commands to append to the generated SSR config. **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder ssrAdditionalConfigCmds(@Nullable Output<List<String>> ssrAdditionalConfigCmds) {
            $.ssrAdditionalConfigCmds = ssrAdditionalConfigCmds;
            return this;
        }

        /**
         * @param ssrAdditionalConfigCmds additional CLI commands to append to the generated SSR config. **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder ssrAdditionalConfigCmds(List<String> ssrAdditionalConfigCmds) {
            return ssrAdditionalConfigCmds(Output.of(ssrAdditionalConfigCmds));
        }

        /**
         * @param ssrAdditionalConfigCmds additional CLI commands to append to the generated SSR config. **Note**: no check is done
         * 
         * @return builder
         * 
         */
        public Builder ssrAdditionalConfigCmds(String... ssrAdditionalConfigCmds) {
            return ssrAdditionalConfigCmds(List.of(ssrAdditionalConfigCmds));
        }

        /**
         * @param tunnelConfigs Property key is the tunnel name
         * 
         * @return builder
         * 
         */
        public Builder tunnelConfigs(@Nullable Output<Map<String,GatewayTunnelConfigsArgs>> tunnelConfigs) {
            $.tunnelConfigs = tunnelConfigs;
            return this;
        }

        /**
         * @param tunnelConfigs Property key is the tunnel name
         * 
         * @return builder
         * 
         */
        public Builder tunnelConfigs(Map<String,GatewayTunnelConfigsArgs> tunnelConfigs) {
            return tunnelConfigs(Output.of(tunnelConfigs));
        }

        public Builder tunnelProviderOptions(@Nullable Output<GatewayTunnelProviderOptionsArgs> tunnelProviderOptions) {
            $.tunnelProviderOptions = tunnelProviderOptions;
            return this;
        }

        public Builder tunnelProviderOptions(GatewayTunnelProviderOptionsArgs tunnelProviderOptions) {
            return tunnelProviderOptions(Output.of(tunnelProviderOptions));
        }

        /**
         * @param type Device Type. enum: `gateway`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Device Type. enum: `gateway`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param urlFilteringDenyMsg When a service policy denies a app_category, what message to show in user&#39;s browser
         * 
         * @return builder
         * 
         */
        public Builder urlFilteringDenyMsg(@Nullable Output<String> urlFilteringDenyMsg) {
            $.urlFilteringDenyMsg = urlFilteringDenyMsg;
            return this;
        }

        /**
         * @param urlFilteringDenyMsg When a service policy denies a app_category, what message to show in user&#39;s browser
         * 
         * @return builder
         * 
         */
        public Builder urlFilteringDenyMsg(String urlFilteringDenyMsg) {
            return urlFilteringDenyMsg(Output.of(urlFilteringDenyMsg));
        }

        /**
         * @param vars Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(@Nullable Output<Map<String,String>> vars) {
            $.vars = vars;
            return this;
        }

        /**
         * @param vars Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(Map<String,String> vars) {
            return vars(Output.of(vars));
        }

        public Builder vrfConfig(@Nullable Output<GatewayVrfConfigArgs> vrfConfig) {
            $.vrfConfig = vrfConfig;
            return this;
        }

        public Builder vrfConfig(GatewayVrfConfigArgs vrfConfig) {
            return vrfConfig(Output.of(vrfConfig));
        }

        /**
         * @param vrfInstances Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder vrfInstances(@Nullable Output<Map<String,GatewayVrfInstancesArgs>> vrfInstances) {
            $.vrfInstances = vrfInstances;
            return this;
        }

        /**
         * @param vrfInstances Property key is the network name
         * 
         * @return builder
         * 
         */
        public Builder vrfInstances(Map<String,GatewayVrfInstancesArgs> vrfInstances) {
            return vrfInstances(Output.of(vrfInstances));
        }

        /**
         * @param x X in pixel
         * 
         * @return builder
         * 
         */
        public Builder x(@Nullable Output<Double> x) {
            $.x = x;
            return this;
        }

        /**
         * @param x X in pixel
         * 
         * @return builder
         * 
         */
        public Builder x(Double x) {
            return x(Output.of(x));
        }

        /**
         * @param y Y in pixel
         * 
         * @return builder
         * 
         */
        public Builder y(@Nullable Output<Double> y) {
            $.y = y;
            return this;
        }

        /**
         * @param y Y in pixel
         * 
         * @return builder
         * 
         */
        public Builder y(Double y) {
            return y(Output.of(y));
        }

        public GatewayState build() {
            return $;
        }
    }

}
