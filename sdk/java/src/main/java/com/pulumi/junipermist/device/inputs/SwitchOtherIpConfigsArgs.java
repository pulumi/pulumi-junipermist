// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchOtherIpConfigsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchOtherIpConfigsArgs Empty = new SwitchOtherIpConfigsArgs();

    /**
     * For EVPN, if anycast is desired
     * 
     */
    @Import(name="evpnAnycast")
    private @Nullable Output<Boolean> evpnAnycast;

    /**
     * @return For EVPN, if anycast is desired
     * 
     */
    public Optional<Output<Boolean>> evpnAnycast() {
        return Optional.ofNullable(this.evpnAnycast);
    }

    /**
     * Required if `type`==`static`
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return Required if `type`==`static`
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Required if `type6`==`static`
     * 
     */
    @Import(name="ip6")
    private @Nullable Output<String> ip6;

    /**
     * @return Required if `type6`==`static`
     * 
     */
    public Optional<Output<String>> ip6() {
        return Optional.ofNullable(this.ip6);
    }

    /**
     * Optional, `subnet` from `network` definition will be used if defined
     * 
     */
    @Import(name="netmask")
    private @Nullable Output<String> netmask;

    /**
     * @return Optional, `subnet` from `network` definition will be used if defined
     * 
     */
    public Optional<Output<String>> netmask() {
        return Optional.ofNullable(this.netmask);
    }

    /**
     * Optional, `subnet` from `network` definition will be used if defined
     * 
     */
    @Import(name="netmask6")
    private @Nullable Output<String> netmask6;

    /**
     * @return Optional, `subnet` from `network` definition will be used if defined
     * 
     */
    public Optional<Output<String>> netmask6() {
        return Optional.ofNullable(this.netmask6);
    }

    /**
     * enum: `dhcp`, `static`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return enum: `dhcp`, `static`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * enum: `autoconf`, `dhcp`, `disabled`, `static`
     * 
     */
    @Import(name="type6")
    private @Nullable Output<String> type6;

    /**
     * @return enum: `autoconf`, `dhcp`, `disabled`, `static`
     * 
     */
    public Optional<Output<String>> type6() {
        return Optional.ofNullable(this.type6);
    }

    private SwitchOtherIpConfigsArgs() {}

    private SwitchOtherIpConfigsArgs(SwitchOtherIpConfigsArgs $) {
        this.evpnAnycast = $.evpnAnycast;
        this.ip = $.ip;
        this.ip6 = $.ip6;
        this.netmask = $.netmask;
        this.netmask6 = $.netmask6;
        this.type = $.type;
        this.type6 = $.type6;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchOtherIpConfigsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchOtherIpConfigsArgs $;

        public Builder() {
            $ = new SwitchOtherIpConfigsArgs();
        }

        public Builder(SwitchOtherIpConfigsArgs defaults) {
            $ = new SwitchOtherIpConfigsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param evpnAnycast For EVPN, if anycast is desired
         * 
         * @return builder
         * 
         */
        public Builder evpnAnycast(@Nullable Output<Boolean> evpnAnycast) {
            $.evpnAnycast = evpnAnycast;
            return this;
        }

        /**
         * @param evpnAnycast For EVPN, if anycast is desired
         * 
         * @return builder
         * 
         */
        public Builder evpnAnycast(Boolean evpnAnycast) {
            return evpnAnycast(Output.of(evpnAnycast));
        }

        /**
         * @param ip Required if `type`==`static`
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Required if `type`==`static`
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ip6 Required if `type6`==`static`
         * 
         * @return builder
         * 
         */
        public Builder ip6(@Nullable Output<String> ip6) {
            $.ip6 = ip6;
            return this;
        }

        /**
         * @param ip6 Required if `type6`==`static`
         * 
         * @return builder
         * 
         */
        public Builder ip6(String ip6) {
            return ip6(Output.of(ip6));
        }

        /**
         * @param netmask Optional, `subnet` from `network` definition will be used if defined
         * 
         * @return builder
         * 
         */
        public Builder netmask(@Nullable Output<String> netmask) {
            $.netmask = netmask;
            return this;
        }

        /**
         * @param netmask Optional, `subnet` from `network` definition will be used if defined
         * 
         * @return builder
         * 
         */
        public Builder netmask(String netmask) {
            return netmask(Output.of(netmask));
        }

        /**
         * @param netmask6 Optional, `subnet` from `network` definition will be used if defined
         * 
         * @return builder
         * 
         */
        public Builder netmask6(@Nullable Output<String> netmask6) {
            $.netmask6 = netmask6;
            return this;
        }

        /**
         * @param netmask6 Optional, `subnet` from `network` definition will be used if defined
         * 
         * @return builder
         * 
         */
        public Builder netmask6(String netmask6) {
            return netmask6(Output.of(netmask6));
        }

        /**
         * @param type enum: `dhcp`, `static`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type enum: `dhcp`, `static`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param type6 enum: `autoconf`, `dhcp`, `disabled`, `static`
         * 
         * @return builder
         * 
         */
        public Builder type6(@Nullable Output<String> type6) {
            $.type6 = type6;
            return this;
        }

        /**
         * @param type6 enum: `autoconf`, `dhcp`, `disabled`, `static`
         * 
         * @return builder
         * 
         */
        public Builder type6(String type6) {
            return type6(Output.of(type6));
        }

        public SwitchOtherIpConfigsArgs build() {
            return $;
        }
    }

}
