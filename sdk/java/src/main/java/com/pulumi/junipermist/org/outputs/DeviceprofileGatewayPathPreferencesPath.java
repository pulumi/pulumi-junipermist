// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeviceprofileGatewayPathPreferencesPath {
    private @Nullable Integer cost;
    /**
     * @return For SSR Only. `true`, if this specific path is undesired
     * 
     */
    private @Nullable Boolean disabled;
    /**
     * @return Only if `type`==`local`, if a different gateway is desired
     * 
     */
    private @Nullable String gatewayIp;
    /**
     * @return Only if `type`==`vpn`, if this vpn path can be used for internet
     * 
     */
    private @Nullable Boolean internetAccess;
    /**
     * @return Required when
     *   * `type`==`vpn`: the name of the VPN Path to use
     *   * `type`==`wan`: the name of the WAN interface to use
     * 
     */
    private @Nullable String name;
    /**
     * @return Required when `type`==`local`
     * 
     */
    private @Nullable List<String> networks;
    /**
     * @return If `type`==`local`, if destination IP is to be replaced
     * 
     */
    private @Nullable List<String> targetIps;
    /**
     * @return enum: `local`, `tunnel`, `vpn`, `wan`
     * 
     */
    private String type;
    /**
     * @return Optional if `type`==`vpn`
     * 
     */
    private @Nullable String wanName;

    private DeviceprofileGatewayPathPreferencesPath() {}
    public Optional<Integer> cost() {
        return Optional.ofNullable(this.cost);
    }
    /**
     * @return For SSR Only. `true`, if this specific path is undesired
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return Only if `type`==`local`, if a different gateway is desired
     * 
     */
    public Optional<String> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }
    /**
     * @return Only if `type`==`vpn`, if this vpn path can be used for internet
     * 
     */
    public Optional<Boolean> internetAccess() {
        return Optional.ofNullable(this.internetAccess);
    }
    /**
     * @return Required when
     *   * `type`==`vpn`: the name of the VPN Path to use
     *   * `type`==`wan`: the name of the WAN interface to use
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Required when `type`==`local`
     * 
     */
    public List<String> networks() {
        return this.networks == null ? List.of() : this.networks;
    }
    /**
     * @return If `type`==`local`, if destination IP is to be replaced
     * 
     */
    public List<String> targetIps() {
        return this.targetIps == null ? List.of() : this.targetIps;
    }
    /**
     * @return enum: `local`, `tunnel`, `vpn`, `wan`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Optional if `type`==`vpn`
     * 
     */
    public Optional<String> wanName() {
        return Optional.ofNullable(this.wanName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceprofileGatewayPathPreferencesPath defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer cost;
        private @Nullable Boolean disabled;
        private @Nullable String gatewayIp;
        private @Nullable Boolean internetAccess;
        private @Nullable String name;
        private @Nullable List<String> networks;
        private @Nullable List<String> targetIps;
        private String type;
        private @Nullable String wanName;
        public Builder() {}
        public Builder(DeviceprofileGatewayPathPreferencesPath defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cost = defaults.cost;
    	      this.disabled = defaults.disabled;
    	      this.gatewayIp = defaults.gatewayIp;
    	      this.internetAccess = defaults.internetAccess;
    	      this.name = defaults.name;
    	      this.networks = defaults.networks;
    	      this.targetIps = defaults.targetIps;
    	      this.type = defaults.type;
    	      this.wanName = defaults.wanName;
        }

        @CustomType.Setter
        public Builder cost(@Nullable Integer cost) {

            this.cost = cost;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {

            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayIp(@Nullable String gatewayIp) {

            this.gatewayIp = gatewayIp;
            return this;
        }
        @CustomType.Setter
        public Builder internetAccess(@Nullable Boolean internetAccess) {

            this.internetAccess = internetAccess;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networks(@Nullable List<String> networks) {

            this.networks = networks;
            return this;
        }
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder targetIps(@Nullable List<String> targetIps) {

            this.targetIps = targetIps;
            return this;
        }
        public Builder targetIps(String... targetIps) {
            return targetIps(List.of(targetIps));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("DeviceprofileGatewayPathPreferencesPath", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder wanName(@Nullable String wanName) {

            this.wanName = wanName;
            return this;
        }
        public DeviceprofileGatewayPathPreferencesPath build() {
            final var _resultValue = new DeviceprofileGatewayPathPreferencesPath();
            _resultValue.cost = cost;
            _resultValue.disabled = disabled;
            _resultValue.gatewayIp = gatewayIp;
            _resultValue.internetAccess = internetAccess;
            _resultValue.name = name;
            _resultValue.networks = networks;
            _resultValue.targetIps = targetIps;
            _resultValue.type = type;
            _resultValue.wanName = wanName;
            return _resultValue;
        }
    }
}
