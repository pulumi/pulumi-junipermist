// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApStatsDeviceApStatLldpStat {
    private String chassisId;
    /**
     * @return Whether it support LLDP-MED
     * 
     */
    private Boolean lldpMedSupported;
    /**
     * @return Switch’s management address (if advertised), can be IPv4, IPv6, or MAC
     * 
     */
    private String mgmtAddr;
    private List<String> mgmtAddrs;
    /**
     * @return ge-0/0/4
     * 
     */
    private String portDesc;
    private String portId;
    /**
     * @return In mW, provided/allocated by PSE
     * 
     */
    private Double powerAllocated;
    /**
     * @return In mW, total power needed by PD
     * 
     */
    private Double powerDraw;
    /**
     * @return Number of negotiations, if it keeps increasing, we don’ t have a stable power
     * 
     */
    private Integer powerRequestCount;
    /**
     * @return In mW, the current power requested by PD
     * 
     */
    private Double powerRequested;
    /**
     * @return Description provided by switch
     * 
     */
    private String systemDesc;
    /**
     * @return Name of the switch
     * 
     */
    private String systemName;

    private GetApStatsDeviceApStatLldpStat() {}
    public String chassisId() {
        return this.chassisId;
    }
    /**
     * @return Whether it support LLDP-MED
     * 
     */
    public Boolean lldpMedSupported() {
        return this.lldpMedSupported;
    }
    /**
     * @return Switch’s management address (if advertised), can be IPv4, IPv6, or MAC
     * 
     */
    public String mgmtAddr() {
        return this.mgmtAddr;
    }
    public List<String> mgmtAddrs() {
        return this.mgmtAddrs;
    }
    /**
     * @return ge-0/0/4
     * 
     */
    public String portDesc() {
        return this.portDesc;
    }
    public String portId() {
        return this.portId;
    }
    /**
     * @return In mW, provided/allocated by PSE
     * 
     */
    public Double powerAllocated() {
        return this.powerAllocated;
    }
    /**
     * @return In mW, total power needed by PD
     * 
     */
    public Double powerDraw() {
        return this.powerDraw;
    }
    /**
     * @return Number of negotiations, if it keeps increasing, we don’ t have a stable power
     * 
     */
    public Integer powerRequestCount() {
        return this.powerRequestCount;
    }
    /**
     * @return In mW, the current power requested by PD
     * 
     */
    public Double powerRequested() {
        return this.powerRequested;
    }
    /**
     * @return Description provided by switch
     * 
     */
    public String systemDesc() {
        return this.systemDesc;
    }
    /**
     * @return Name of the switch
     * 
     */
    public String systemName() {
        return this.systemName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApStatsDeviceApStatLldpStat defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String chassisId;
        private Boolean lldpMedSupported;
        private String mgmtAddr;
        private List<String> mgmtAddrs;
        private String portDesc;
        private String portId;
        private Double powerAllocated;
        private Double powerDraw;
        private Integer powerRequestCount;
        private Double powerRequested;
        private String systemDesc;
        private String systemName;
        public Builder() {}
        public Builder(GetApStatsDeviceApStatLldpStat defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chassisId = defaults.chassisId;
    	      this.lldpMedSupported = defaults.lldpMedSupported;
    	      this.mgmtAddr = defaults.mgmtAddr;
    	      this.mgmtAddrs = defaults.mgmtAddrs;
    	      this.portDesc = defaults.portDesc;
    	      this.portId = defaults.portId;
    	      this.powerAllocated = defaults.powerAllocated;
    	      this.powerDraw = defaults.powerDraw;
    	      this.powerRequestCount = defaults.powerRequestCount;
    	      this.powerRequested = defaults.powerRequested;
    	      this.systemDesc = defaults.systemDesc;
    	      this.systemName = defaults.systemName;
        }

        @CustomType.Setter
        public Builder chassisId(String chassisId) {
            if (chassisId == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "chassisId");
            }
            this.chassisId = chassisId;
            return this;
        }
        @CustomType.Setter
        public Builder lldpMedSupported(Boolean lldpMedSupported) {
            if (lldpMedSupported == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "lldpMedSupported");
            }
            this.lldpMedSupported = lldpMedSupported;
            return this;
        }
        @CustomType.Setter
        public Builder mgmtAddr(String mgmtAddr) {
            if (mgmtAddr == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "mgmtAddr");
            }
            this.mgmtAddr = mgmtAddr;
            return this;
        }
        @CustomType.Setter
        public Builder mgmtAddrs(List<String> mgmtAddrs) {
            if (mgmtAddrs == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "mgmtAddrs");
            }
            this.mgmtAddrs = mgmtAddrs;
            return this;
        }
        public Builder mgmtAddrs(String... mgmtAddrs) {
            return mgmtAddrs(List.of(mgmtAddrs));
        }
        @CustomType.Setter
        public Builder portDesc(String portDesc) {
            if (portDesc == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "portDesc");
            }
            this.portDesc = portDesc;
            return this;
        }
        @CustomType.Setter
        public Builder portId(String portId) {
            if (portId == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "portId");
            }
            this.portId = portId;
            return this;
        }
        @CustomType.Setter
        public Builder powerAllocated(Double powerAllocated) {
            if (powerAllocated == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "powerAllocated");
            }
            this.powerAllocated = powerAllocated;
            return this;
        }
        @CustomType.Setter
        public Builder powerDraw(Double powerDraw) {
            if (powerDraw == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "powerDraw");
            }
            this.powerDraw = powerDraw;
            return this;
        }
        @CustomType.Setter
        public Builder powerRequestCount(Integer powerRequestCount) {
            if (powerRequestCount == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "powerRequestCount");
            }
            this.powerRequestCount = powerRequestCount;
            return this;
        }
        @CustomType.Setter
        public Builder powerRequested(Double powerRequested) {
            if (powerRequested == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "powerRequested");
            }
            this.powerRequested = powerRequested;
            return this;
        }
        @CustomType.Setter
        public Builder systemDesc(String systemDesc) {
            if (systemDesc == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "systemDesc");
            }
            this.systemDesc = systemDesc;
            return this;
        }
        @CustomType.Setter
        public Builder systemName(String systemName) {
            if (systemName == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatLldpStat", "systemName");
            }
            this.systemName = systemName;
            return this;
        }
        public GetApStatsDeviceApStatLldpStat build() {
            final var _resultValue = new GetApStatsDeviceApStatLldpStat();
            _resultValue.chassisId = chassisId;
            _resultValue.lldpMedSupported = lldpMedSupported;
            _resultValue.mgmtAddr = mgmtAddr;
            _resultValue.mgmtAddrs = mgmtAddrs;
            _resultValue.portDesc = portDesc;
            _resultValue.portId = portId;
            _resultValue.powerAllocated = powerAllocated;
            _resultValue.powerDraw = powerDraw;
            _resultValue.powerRequestCount = powerRequestCount;
            _resultValue.powerRequested = powerRequested;
            _resultValue.systemDesc = systemDesc;
            _resultValue.systemName = systemName;
            return _resultValue;
        }
    }
}
