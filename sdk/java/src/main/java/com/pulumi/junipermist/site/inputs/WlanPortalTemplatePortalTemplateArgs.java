// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.site.inputs.WlanPortalTemplatePortalTemplateLocalesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WlanPortalTemplatePortalTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final WlanPortalTemplatePortalTemplateArgs Empty = new WlanPortalTemplatePortalTemplateArgs();

    @Import(name="accessCodeAlternateEmail")
    private @Nullable Output<String> accessCodeAlternateEmail;

    public Optional<Output<String>> accessCodeAlternateEmail() {
        return Optional.ofNullable(this.accessCodeAlternateEmail);
    }

    /**
     * defines alignment on portal. enum: `center`, `left`, `right`
     * 
     */
    @Import(name="alignment")
    private @Nullable Output<String> alignment;

    /**
     * @return defines alignment on portal. enum: `center`, `left`, `right`
     * 
     */
    public Optional<Output<String>> alignment() {
        return Optional.ofNullable(this.alignment);
    }

    /**
     * Label for Amazon auth button
     * 
     */
    @Import(name="authButtonAmazon")
    private @Nullable Output<String> authButtonAmazon;

    /**
     * @return Label for Amazon auth button
     * 
     */
    public Optional<Output<String>> authButtonAmazon() {
        return Optional.ofNullable(this.authButtonAmazon);
    }

    /**
     * Label for Azure auth button
     * 
     */
    @Import(name="authButtonAzure")
    private @Nullable Output<String> authButtonAzure;

    /**
     * @return Label for Azure auth button
     * 
     */
    public Optional<Output<String>> authButtonAzure() {
        return Optional.ofNullable(this.authButtonAzure);
    }

    /**
     * Label for Email auth button
     * 
     */
    @Import(name="authButtonEmail")
    private @Nullable Output<String> authButtonEmail;

    /**
     * @return Label for Email auth button
     * 
     */
    public Optional<Output<String>> authButtonEmail() {
        return Optional.ofNullable(this.authButtonEmail);
    }

    /**
     * Label for Facebook auth button
     * 
     */
    @Import(name="authButtonFacebook")
    private @Nullable Output<String> authButtonFacebook;

    /**
     * @return Label for Facebook auth button
     * 
     */
    public Optional<Output<String>> authButtonFacebook() {
        return Optional.ofNullable(this.authButtonFacebook);
    }

    /**
     * Label for Google auth button
     * 
     */
    @Import(name="authButtonGoogle")
    private @Nullable Output<String> authButtonGoogle;

    /**
     * @return Label for Google auth button
     * 
     */
    public Optional<Output<String>> authButtonGoogle() {
        return Optional.ofNullable(this.authButtonGoogle);
    }

    /**
     * Label for Microsoft auth button
     * 
     */
    @Import(name="authButtonMicrosoft")
    private @Nullable Output<String> authButtonMicrosoft;

    /**
     * @return Label for Microsoft auth button
     * 
     */
    public Optional<Output<String>> authButtonMicrosoft() {
        return Optional.ofNullable(this.authButtonMicrosoft);
    }

    /**
     * Label for passphrase auth button
     * 
     */
    @Import(name="authButtonPassphrase")
    private @Nullable Output<String> authButtonPassphrase;

    /**
     * @return Label for passphrase auth button
     * 
     */
    public Optional<Output<String>> authButtonPassphrase() {
        return Optional.ofNullable(this.authButtonPassphrase);
    }

    /**
     * Label for SMS auth button
     * 
     */
    @Import(name="authButtonSms")
    private @Nullable Output<String> authButtonSms;

    /**
     * @return Label for SMS auth button
     * 
     */
    public Optional<Output<String>> authButtonSms() {
        return Optional.ofNullable(this.authButtonSms);
    }

    /**
     * Label for Sponsor auth button
     * 
     */
    @Import(name="authButtonSponsor")
    private @Nullable Output<String> authButtonSponsor;

    /**
     * @return Label for Sponsor auth button
     * 
     */
    public Optional<Output<String>> authButtonSponsor() {
        return Optional.ofNullable(this.authButtonSponsor);
    }

    @Import(name="authLabel")
    private @Nullable Output<String> authLabel;

    public Optional<Output<String>> authLabel() {
        return Optional.ofNullable(this.authLabel);
    }

    /**
     * Label of the link to go back to /logon
     * 
     */
    @Import(name="backLink")
    private @Nullable Output<String> backLink;

    /**
     * @return Label of the link to go back to /logon
     * 
     */
    public Optional<Output<String>> backLink() {
        return Optional.ofNullable(this.backLink);
    }

    /**
     * Portal main color
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return Portal main color
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    @Import(name="colorDark")
    private @Nullable Output<String> colorDark;

    public Optional<Output<String>> colorDark() {
        return Optional.ofNullable(this.colorDark);
    }

    @Import(name="colorLight")
    private @Nullable Output<String> colorLight;

    public Optional<Output<String>> colorLight() {
        return Optional.ofNullable(this.colorLight);
    }

    /**
     * Whether company field is required
     * 
     */
    @Import(name="company")
    private @Nullable Output<Boolean> company;

    /**
     * @return Whether company field is required
     * 
     */
    public Optional<Output<Boolean>> company() {
        return Optional.ofNullable(this.company);
    }

    /**
     * Error message when company not provided
     * 
     */
    @Import(name="companyError")
    private @Nullable Output<String> companyError;

    /**
     * @return Error message when company not provided
     * 
     */
    public Optional<Output<String>> companyError() {
        return Optional.ofNullable(this.companyError);
    }

    /**
     * Label of company field
     * 
     */
    @Import(name="companyLabel")
    private @Nullable Output<String> companyLabel;

    /**
     * @return Label of company field
     * 
     */
    public Optional<Output<String>> companyLabel() {
        return Optional.ofNullable(this.companyLabel);
    }

    /**
     * Whether email field is required
     * 
     */
    @Import(name="email")
    private @Nullable Output<Boolean> email;

    /**
     * @return Whether email field is required
     * 
     */
    public Optional<Output<Boolean>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Error message when a user has valid social login but doesn&#39;t match specified email domains.
     * 
     */
    @Import(name="emailAccessDomainError")
    private @Nullable Output<String> emailAccessDomainError;

    /**
     * @return Error message when a user has valid social login but doesn&#39;t match specified email domains.
     * 
     */
    public Optional<Output<String>> emailAccessDomainError() {
        return Optional.ofNullable(this.emailAccessDomainError);
    }

    /**
     * Label for cancel confirmation code submission using email auth
     * 
     */
    @Import(name="emailCancel")
    private @Nullable Output<String> emailCancel;

    /**
     * @return Label for cancel confirmation code submission using email auth
     * 
     */
    public Optional<Output<String>> emailCancel() {
        return Optional.ofNullable(this.emailCancel);
    }

    @Import(name="emailCodeCancel")
    private @Nullable Output<String> emailCodeCancel;

    public Optional<Output<String>> emailCodeCancel() {
        return Optional.ofNullable(this.emailCodeCancel);
    }

    @Import(name="emailCodeError")
    private @Nullable Output<String> emailCodeError;

    public Optional<Output<String>> emailCodeError() {
        return Optional.ofNullable(this.emailCodeError);
    }

    @Import(name="emailCodeFieldLabel")
    private @Nullable Output<String> emailCodeFieldLabel;

    public Optional<Output<String>> emailCodeFieldLabel() {
        return Optional.ofNullable(this.emailCodeFieldLabel);
    }

    @Import(name="emailCodeMessage")
    private @Nullable Output<String> emailCodeMessage;

    public Optional<Output<String>> emailCodeMessage() {
        return Optional.ofNullable(this.emailCodeMessage);
    }

    @Import(name="emailCodeSubmit")
    private @Nullable Output<String> emailCodeSubmit;

    public Optional<Output<String>> emailCodeSubmit() {
        return Optional.ofNullable(this.emailCodeSubmit);
    }

    @Import(name="emailCodeTitle")
    private @Nullable Output<String> emailCodeTitle;

    public Optional<Output<String>> emailCodeTitle() {
        return Optional.ofNullable(this.emailCodeTitle);
    }

    /**
     * Error message when email not provided
     * 
     */
    @Import(name="emailError")
    private @Nullable Output<String> emailError;

    /**
     * @return Error message when email not provided
     * 
     */
    public Optional<Output<String>> emailError() {
        return Optional.ofNullable(this.emailError);
    }

    @Import(name="emailFieldLabel")
    private @Nullable Output<String> emailFieldLabel;

    public Optional<Output<String>> emailFieldLabel() {
        return Optional.ofNullable(this.emailFieldLabel);
    }

    /**
     * Label of email field
     * 
     */
    @Import(name="emailLabel")
    private @Nullable Output<String> emailLabel;

    /**
     * @return Label of email field
     * 
     */
    public Optional<Output<String>> emailLabel() {
        return Optional.ofNullable(this.emailLabel);
    }

    @Import(name="emailMessage")
    private @Nullable Output<String> emailMessage;

    public Optional<Output<String>> emailMessage() {
        return Optional.ofNullable(this.emailMessage);
    }

    /**
     * Label for confirmation code submit button using email auth
     * 
     */
    @Import(name="emailSubmit")
    private @Nullable Output<String> emailSubmit;

    /**
     * @return Label for confirmation code submit button using email auth
     * 
     */
    public Optional<Output<String>> emailSubmit() {
        return Optional.ofNullable(this.emailSubmit);
    }

    /**
     * Title for the Email registration
     * 
     */
    @Import(name="emailTitle")
    private @Nullable Output<String> emailTitle;

    /**
     * @return Title for the Email registration
     * 
     */
    public Optional<Output<String>> emailTitle() {
        return Optional.ofNullable(this.emailTitle);
    }

    /**
     * Whether to ask field1
     * 
     */
    @Import(name="field1")
    private @Nullable Output<Boolean> field1;

    /**
     * @return Whether to ask field1
     * 
     */
    public Optional<Output<Boolean>> field1() {
        return Optional.ofNullable(this.field1);
    }

    /**
     * Error message when field1 not provided
     * 
     */
    @Import(name="field1error")
    private @Nullable Output<String> field1error;

    /**
     * @return Error message when field1 not provided
     * 
     */
    public Optional<Output<String>> field1error() {
        return Optional.ofNullable(this.field1error);
    }

    /**
     * Label of field1
     * 
     */
    @Import(name="field1label")
    private @Nullable Output<String> field1label;

    /**
     * @return Label of field1
     * 
     */
    public Optional<Output<String>> field1label() {
        return Optional.ofNullable(this.field1label);
    }

    /**
     * Whether field1 is required field
     * 
     */
    @Import(name="field1required")
    private @Nullable Output<Boolean> field1required;

    /**
     * @return Whether field1 is required field
     * 
     */
    public Optional<Output<Boolean>> field1required() {
        return Optional.ofNullable(this.field1required);
    }

    /**
     * Whether to ask field2
     * 
     */
    @Import(name="field2")
    private @Nullable Output<Boolean> field2;

    /**
     * @return Whether to ask field2
     * 
     */
    public Optional<Output<Boolean>> field2() {
        return Optional.ofNullable(this.field2);
    }

    /**
     * Error message when field2 not provided
     * 
     */
    @Import(name="field2error")
    private @Nullable Output<String> field2error;

    /**
     * @return Error message when field2 not provided
     * 
     */
    public Optional<Output<String>> field2error() {
        return Optional.ofNullable(this.field2error);
    }

    /**
     * Label of field2
     * 
     */
    @Import(name="field2label")
    private @Nullable Output<String> field2label;

    /**
     * @return Label of field2
     * 
     */
    public Optional<Output<String>> field2label() {
        return Optional.ofNullable(this.field2label);
    }

    /**
     * Whether field2 is required field
     * 
     */
    @Import(name="field2required")
    private @Nullable Output<Boolean> field2required;

    /**
     * @return Whether field2 is required field
     * 
     */
    public Optional<Output<Boolean>> field2required() {
        return Optional.ofNullable(this.field2required);
    }

    /**
     * Whether to ask field3
     * 
     */
    @Import(name="field3")
    private @Nullable Output<Boolean> field3;

    /**
     * @return Whether to ask field3
     * 
     */
    public Optional<Output<Boolean>> field3() {
        return Optional.ofNullable(this.field3);
    }

    /**
     * Error message when field3 not provided
     * 
     */
    @Import(name="field3error")
    private @Nullable Output<String> field3error;

    /**
     * @return Error message when field3 not provided
     * 
     */
    public Optional<Output<String>> field3error() {
        return Optional.ofNullable(this.field3error);
    }

    /**
     * Label of field3
     * 
     */
    @Import(name="field3label")
    private @Nullable Output<String> field3label;

    /**
     * @return Label of field3
     * 
     */
    public Optional<Output<String>> field3label() {
        return Optional.ofNullable(this.field3label);
    }

    /**
     * Whether field3 is required field
     * 
     */
    @Import(name="field3required")
    private @Nullable Output<Boolean> field3required;

    /**
     * @return Whether field3 is required field
     * 
     */
    public Optional<Output<Boolean>> field3required() {
        return Optional.ofNullable(this.field3required);
    }

    /**
     * Whether to ask field4
     * 
     */
    @Import(name="field4")
    private @Nullable Output<Boolean> field4;

    /**
     * @return Whether to ask field4
     * 
     */
    public Optional<Output<Boolean>> field4() {
        return Optional.ofNullable(this.field4);
    }

    /**
     * Error message when field4 not provided
     * 
     */
    @Import(name="field4error")
    private @Nullable Output<String> field4error;

    /**
     * @return Error message when field4 not provided
     * 
     */
    public Optional<Output<String>> field4error() {
        return Optional.ofNullable(this.field4error);
    }

    /**
     * Label of field4
     * 
     */
    @Import(name="field4label")
    private @Nullable Output<String> field4label;

    /**
     * @return Label of field4
     * 
     */
    public Optional<Output<String>> field4label() {
        return Optional.ofNullable(this.field4label);
    }

    /**
     * Whether field4 is required field
     * 
     */
    @Import(name="field4required")
    private @Nullable Output<Boolean> field4required;

    /**
     * @return Whether field4 is required field
     * 
     */
    public Optional<Output<Boolean>> field4required() {
        return Optional.ofNullable(this.field4required);
    }

    /**
     * Can be used to localize the portal based on the User Agent. Allowed property key values are:
     *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
     *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
     *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
     *   `zh-Hans`, `zh-Hant`
     * 
     */
    @Import(name="locales")
    private @Nullable Output<Map<String,WlanPortalTemplatePortalTemplateLocalesArgs>> locales;

    /**
     * @return Can be used to localize the portal based on the User Agent. Allowed property key values are:
     *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
     *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
     *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
     *   `zh-Hans`, `zh-Hant`
     * 
     */
    public Optional<Output<Map<String,WlanPortalTemplatePortalTemplateLocalesArgs>>> locales() {
        return Optional.ofNullable(this.locales);
    }

    /**
     * path to the background image file. File must be a `png` image`
     * 
     */
    @Import(name="logo")
    private @Nullable Output<String> logo;

    /**
     * @return path to the background image file. File must be a `png` image`
     * 
     */
    public Optional<Output<String>> logo() {
        return Optional.ofNullable(this.logo);
    }

    /**
     * label of the link to go to /marketing_policy
     * 
     */
    @Import(name="marketingPolicyLink")
    private @Nullable Output<String> marketingPolicyLink;

    /**
     * @return label of the link to go to /marketing_policy
     * 
     */
    public Optional<Output<String>> marketingPolicyLink() {
        return Optional.ofNullable(this.marketingPolicyLink);
    }

    /**
     * Whether marketing policy optin is enabled
     * 
     */
    @Import(name="marketingPolicyOptIn")
    private @Nullable Output<Boolean> marketingPolicyOptIn;

    /**
     * @return Whether marketing policy optin is enabled
     * 
     */
    public Optional<Output<Boolean>> marketingPolicyOptIn() {
        return Optional.ofNullable(this.marketingPolicyOptIn);
    }

    /**
     * label for marketing optin
     * 
     */
    @Import(name="marketingPolicyOptInLabel")
    private @Nullable Output<String> marketingPolicyOptInLabel;

    /**
     * @return label for marketing optin
     * 
     */
    public Optional<Output<String>> marketingPolicyOptInLabel() {
        return Optional.ofNullable(this.marketingPolicyOptInLabel);
    }

    /**
     * marketing policy text
     * 
     */
    @Import(name="marketingPolicyOptInText")
    private @Nullable Output<String> marketingPolicyOptInText;

    /**
     * @return marketing policy text
     * 
     */
    public Optional<Output<String>> marketingPolicyOptInText() {
        return Optional.ofNullable(this.marketingPolicyOptInText);
    }

    @Import(name="message")
    private @Nullable Output<String> message;

    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    @Import(name="multiAuth")
    private @Nullable Output<Boolean> multiAuth;

    public Optional<Output<Boolean>> multiAuth() {
        return Optional.ofNullable(this.multiAuth);
    }

    /**
     * Whether name field is required
     * 
     */
    @Import(name="name")
    private @Nullable Output<Boolean> name;

    /**
     * @return Whether name field is required
     * 
     */
    public Optional<Output<Boolean>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Error message when name not provided
     * 
     */
    @Import(name="nameError")
    private @Nullable Output<String> nameError;

    /**
     * @return Error message when name not provided
     * 
     */
    public Optional<Output<String>> nameError() {
        return Optional.ofNullable(this.nameError);
    }

    /**
     * Label of name field
     * 
     */
    @Import(name="nameLabel")
    private @Nullable Output<String> nameLabel;

    /**
     * @return Label of name field
     * 
     */
    public Optional<Output<String>> nameLabel() {
        return Optional.ofNullable(this.nameLabel);
    }

    /**
     * Default value for the `Do not store` checkbox
     * 
     */
    @Import(name="optOutDefault")
    private @Nullable Output<Boolean> optOutDefault;

    /**
     * @return Default value for the `Do not store` checkbox
     * 
     */
    public Optional<Output<Boolean>> optOutDefault() {
        return Optional.ofNullable(this.optOutDefault);
    }

    /**
     * Whether to display Do Not Store My Personal Information
     * 
     */
    @Import(name="optout")
    private @Nullable Output<Boolean> optout;

    /**
     * @return Whether to display Do Not Store My Personal Information
     * 
     */
    public Optional<Output<Boolean>> optout() {
        return Optional.ofNullable(this.optout);
    }

    /**
     * Label for Do Not Store My Personal Information
     * 
     */
    @Import(name="optoutLabel")
    private @Nullable Output<String> optoutLabel;

    /**
     * @return Label for Do Not Store My Personal Information
     * 
     */
    public Optional<Output<String>> optoutLabel() {
        return Optional.ofNullable(this.optoutLabel);
    }

    @Import(name="pageTitle")
    private @Nullable Output<String> pageTitle;

    public Optional<Output<String>> pageTitle() {
        return Optional.ofNullable(this.pageTitle);
    }

    /**
     * Label for the Passphrase cancel button
     * 
     */
    @Import(name="passphraseCancel")
    private @Nullable Output<String> passphraseCancel;

    /**
     * @return Label for the Passphrase cancel button
     * 
     */
    public Optional<Output<String>> passphraseCancel() {
        return Optional.ofNullable(this.passphraseCancel);
    }

    /**
     * Error message when invalid passphrase is provided
     * 
     */
    @Import(name="passphraseError")
    private @Nullable Output<String> passphraseError;

    /**
     * @return Error message when invalid passphrase is provided
     * 
     */
    public Optional<Output<String>> passphraseError() {
        return Optional.ofNullable(this.passphraseError);
    }

    /**
     * Passphrase
     * 
     */
    @Import(name="passphraseLabel")
    private @Nullable Output<String> passphraseLabel;

    /**
     * @return Passphrase
     * 
     */
    public Optional<Output<String>> passphraseLabel() {
        return Optional.ofNullable(this.passphraseLabel);
    }

    @Import(name="passphraseMessage")
    private @Nullable Output<String> passphraseMessage;

    public Optional<Output<String>> passphraseMessage() {
        return Optional.ofNullable(this.passphraseMessage);
    }

    /**
     * Label for the Passphrase submit button
     * 
     */
    @Import(name="passphraseSubmit")
    private @Nullable Output<String> passphraseSubmit;

    /**
     * @return Label for the Passphrase submit button
     * 
     */
    public Optional<Output<String>> passphraseSubmit() {
        return Optional.ofNullable(this.passphraseSubmit);
    }

    /**
     * Title for passphrase details page
     * 
     */
    @Import(name="passphraseTitle")
    private @Nullable Output<String> passphraseTitle;

    /**
     * @return Title for passphrase details page
     * 
     */
    public Optional<Output<String>> passphraseTitle() {
        return Optional.ofNullable(this.passphraseTitle);
    }

    /**
     * Whether to show \&#34;Powered by Mist\&#34;
     * 
     */
    @Import(name="poweredBy")
    private @Nullable Output<Boolean> poweredBy;

    /**
     * @return Whether to show \&#34;Powered by Mist\&#34;
     * 
     */
    public Optional<Output<Boolean>> poweredBy() {
        return Optional.ofNullable(this.poweredBy);
    }

    /**
     * Whether to require the Privacy Term acceptance
     * 
     */
    @Import(name="privacy")
    private @Nullable Output<Boolean> privacy;

    /**
     * @return Whether to require the Privacy Term acceptance
     * 
     */
    public Optional<Output<Boolean>> privacy() {
        return Optional.ofNullable(this.privacy);
    }

    /**
     * Prefix of the label of the link to go to Privacy Policy
     * 
     */
    @Import(name="privacyPolicyAcceptLabel")
    private @Nullable Output<String> privacyPolicyAcceptLabel;

    /**
     * @return Prefix of the label of the link to go to Privacy Policy
     * 
     */
    public Optional<Output<String>> privacyPolicyAcceptLabel() {
        return Optional.ofNullable(this.privacyPolicyAcceptLabel);
    }

    /**
     * Error message when Privacy Policy not accepted
     * 
     */
    @Import(name="privacyPolicyError")
    private @Nullable Output<String> privacyPolicyError;

    /**
     * @return Error message when Privacy Policy not accepted
     * 
     */
    public Optional<Output<String>> privacyPolicyError() {
        return Optional.ofNullable(this.privacyPolicyError);
    }

    /**
     * Label of the link to go to Privacy Policy
     * 
     */
    @Import(name="privacyPolicyLink")
    private @Nullable Output<String> privacyPolicyLink;

    /**
     * @return Label of the link to go to Privacy Policy
     * 
     */
    public Optional<Output<String>> privacyPolicyLink() {
        return Optional.ofNullable(this.privacyPolicyLink);
    }

    /**
     * Text of the Privacy Policy
     * 
     */
    @Import(name="privacyPolicyText")
    private @Nullable Output<String> privacyPolicyText;

    /**
     * @return Text of the Privacy Policy
     * 
     */
    public Optional<Output<String>> privacyPolicyText() {
        return Optional.ofNullable(this.privacyPolicyText);
    }

    /**
     * Label to denote required field
     * 
     */
    @Import(name="requiredFieldLabel")
    private @Nullable Output<String> requiredFieldLabel;

    /**
     * @return Label to denote required field
     * 
     */
    public Optional<Output<String>> requiredFieldLabel() {
        return Optional.ofNullable(this.requiredFieldLabel);
    }

    @Import(name="responsiveLayout")
    private @Nullable Output<Boolean> responsiveLayout;

    public Optional<Output<Boolean>> responsiveLayout() {
        return Optional.ofNullable(this.responsiveLayout);
    }

    /**
     * Label of the button to signin
     * 
     */
    @Import(name="signInLabel")
    private @Nullable Output<String> signInLabel;

    /**
     * @return Label of the button to signin
     * 
     */
    public Optional<Output<String>> signInLabel() {
        return Optional.ofNullable(this.signInLabel);
    }

    @Import(name="smsCarrierDefault")
    private @Nullable Output<String> smsCarrierDefault;

    public Optional<Output<String>> smsCarrierDefault() {
        return Optional.ofNullable(this.smsCarrierDefault);
    }

    @Import(name="smsCarrierError")
    private @Nullable Output<String> smsCarrierError;

    public Optional<Output<String>> smsCarrierError() {
        return Optional.ofNullable(this.smsCarrierError);
    }

    /**
     * Label for mobile carrier drop-down list
     * 
     */
    @Import(name="smsCarrierFieldLabel")
    private @Nullable Output<String> smsCarrierFieldLabel;

    /**
     * @return Label for mobile carrier drop-down list
     * 
     */
    public Optional<Output<String>> smsCarrierFieldLabel() {
        return Optional.ofNullable(this.smsCarrierFieldLabel);
    }

    /**
     * Label for cancel confirmation code submission
     * 
     */
    @Import(name="smsCodeCancel")
    private @Nullable Output<String> smsCodeCancel;

    /**
     * @return Label for cancel confirmation code submission
     * 
     */
    public Optional<Output<String>> smsCodeCancel() {
        return Optional.ofNullable(this.smsCodeCancel);
    }

    /**
     * Error message when confirmation code is invalid
     * 
     */
    @Import(name="smsCodeError")
    private @Nullable Output<String> smsCodeError;

    /**
     * @return Error message when confirmation code is invalid
     * 
     */
    public Optional<Output<String>> smsCodeError() {
        return Optional.ofNullable(this.smsCodeError);
    }

    @Import(name="smsCodeFieldLabel")
    private @Nullable Output<String> smsCodeFieldLabel;

    public Optional<Output<String>> smsCodeFieldLabel() {
        return Optional.ofNullable(this.smsCodeFieldLabel);
    }

    @Import(name="smsCodeMessage")
    private @Nullable Output<String> smsCodeMessage;

    public Optional<Output<String>> smsCodeMessage() {
        return Optional.ofNullable(this.smsCodeMessage);
    }

    /**
     * Label for confirmation code submit button
     * 
     */
    @Import(name="smsCodeSubmit")
    private @Nullable Output<String> smsCodeSubmit;

    /**
     * @return Label for confirmation code submit button
     * 
     */
    public Optional<Output<String>> smsCodeSubmit() {
        return Optional.ofNullable(this.smsCodeSubmit);
    }

    @Import(name="smsCodeTitle")
    private @Nullable Output<String> smsCodeTitle;

    public Optional<Output<String>> smsCodeTitle() {
        return Optional.ofNullable(this.smsCodeTitle);
    }

    @Import(name="smsCountryFieldLabel")
    private @Nullable Output<String> smsCountryFieldLabel;

    public Optional<Output<String>> smsCountryFieldLabel() {
        return Optional.ofNullable(this.smsCountryFieldLabel);
    }

    @Import(name="smsCountryFormat")
    private @Nullable Output<String> smsCountryFormat;

    public Optional<Output<String>> smsCountryFormat() {
        return Optional.ofNullable(this.smsCountryFormat);
    }

    /**
     * Label for checkbox to specify that the user has access code
     * 
     */
    @Import(name="smsHaveAccessCode")
    private @Nullable Output<String> smsHaveAccessCode;

    /**
     * @return Label for checkbox to specify that the user has access code
     * 
     */
    public Optional<Output<String>> smsHaveAccessCode() {
        return Optional.ofNullable(this.smsHaveAccessCode);
    }

    @Import(name="smsIsTwilio")
    private @Nullable Output<Boolean> smsIsTwilio;

    public Optional<Output<Boolean>> smsIsTwilio() {
        return Optional.ofNullable(this.smsIsTwilio);
    }

    /**
     * Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
     * 
     */
    @Import(name="smsMessageFormat")
    private @Nullable Output<String> smsMessageFormat;

    /**
     * @return Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
     * 
     */
    public Optional<Output<String>> smsMessageFormat() {
        return Optional.ofNullable(this.smsMessageFormat);
    }

    /**
     * Label for canceling mobile details for SMS auth
     * 
     */
    @Import(name="smsNumberCancel")
    private @Nullable Output<String> smsNumberCancel;

    /**
     * @return Label for canceling mobile details for SMS auth
     * 
     */
    public Optional<Output<String>> smsNumberCancel() {
        return Optional.ofNullable(this.smsNumberCancel);
    }

    @Import(name="smsNumberError")
    private @Nullable Output<String> smsNumberError;

    public Optional<Output<String>> smsNumberError() {
        return Optional.ofNullable(this.smsNumberError);
    }

    /**
     * Label for field to provide mobile number
     * 
     */
    @Import(name="smsNumberFieldLabel")
    private @Nullable Output<String> smsNumberFieldLabel;

    /**
     * @return Label for field to provide mobile number
     * 
     */
    public Optional<Output<String>> smsNumberFieldLabel() {
        return Optional.ofNullable(this.smsNumberFieldLabel);
    }

    @Import(name="smsNumberFormat")
    private @Nullable Output<String> smsNumberFormat;

    public Optional<Output<String>> smsNumberFormat() {
        return Optional.ofNullable(this.smsNumberFormat);
    }

    @Import(name="smsNumberMessage")
    private @Nullable Output<String> smsNumberMessage;

    public Optional<Output<String>> smsNumberMessage() {
        return Optional.ofNullable(this.smsNumberMessage);
    }

    /**
     * Label for submit button for code generation
     * 
     */
    @Import(name="smsNumberSubmit")
    private @Nullable Output<String> smsNumberSubmit;

    /**
     * @return Label for submit button for code generation
     * 
     */
    public Optional<Output<String>> smsNumberSubmit() {
        return Optional.ofNullable(this.smsNumberSubmit);
    }

    /**
     * Title for phone number details
     * 
     */
    @Import(name="smsNumberTitle")
    private @Nullable Output<String> smsNumberTitle;

    /**
     * @return Title for phone number details
     * 
     */
    public Optional<Output<String>> smsNumberTitle() {
        return Optional.ofNullable(this.smsNumberTitle);
    }

    @Import(name="smsUsernameFormat")
    private @Nullable Output<String> smsUsernameFormat;

    public Optional<Output<String>> smsUsernameFormat() {
        return Optional.ofNullable(this.smsUsernameFormat);
    }

    /**
     * How long confirmation code should be considered valid (in minutes)
     * 
     */
    @Import(name="smsValidityDuration")
    private @Nullable Output<Integer> smsValidityDuration;

    /**
     * @return How long confirmation code should be considered valid (in minutes)
     * 
     */
    public Optional<Output<Integer>> smsValidityDuration() {
        return Optional.ofNullable(this.smsValidityDuration);
    }

    @Import(name="sponsorBackLink")
    private @Nullable Output<String> sponsorBackLink;

    public Optional<Output<String>> sponsorBackLink() {
        return Optional.ofNullable(this.sponsorBackLink);
    }

    @Import(name="sponsorCancel")
    private @Nullable Output<String> sponsorCancel;

    public Optional<Output<String>> sponsorCancel() {
        return Optional.ofNullable(this.sponsorCancel);
    }

    /**
     * Label for Sponsor Email
     * 
     */
    @Import(name="sponsorEmail")
    private @Nullable Output<String> sponsorEmail;

    /**
     * @return Label for Sponsor Email
     * 
     */
    public Optional<Output<String>> sponsorEmail() {
        return Optional.ofNullable(this.sponsorEmail);
    }

    @Import(name="sponsorEmailError")
    private @Nullable Output<String> sponsorEmailError;

    public Optional<Output<String>> sponsorEmailError() {
        return Optional.ofNullable(this.sponsorEmailError);
    }

    /**
     * HTML template to replace/override default sponsor email template
     * Sponsor Email Template supports following template variables:
     *   * `approve_url`: Renders URL to approve the request; optionally &amp;minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
     *   * `deny_url`: Renders URL to reject the request
     *   * `guest_email`: Renders Email ID of the guest
     *   * `guest_name`: Renders Name of the guest
     *   * `field1`: Renders value of the Custom Field 1
     *   * `field2`: Renders value of the Custom Field 2
     *   * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
     *   * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
     * 
     */
    @Import(name="sponsorEmailTemplate")
    private @Nullable Output<String> sponsorEmailTemplate;

    /**
     * @return HTML template to replace/override default sponsor email template
     * Sponsor Email Template supports following template variables:
     *   * `approve_url`: Renders URL to approve the request; optionally &amp;minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
     *   * `deny_url`: Renders URL to reject the request
     *   * `guest_email`: Renders Email ID of the guest
     *   * `guest_name`: Renders Name of the guest
     *   * `field1`: Renders value of the Custom Field 1
     *   * `field2`: Renders value of the Custom Field 2
     *   * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
     *   * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
     * 
     */
    public Optional<Output<String>> sponsorEmailTemplate() {
        return Optional.ofNullable(this.sponsorEmailTemplate);
    }

    @Import(name="sponsorInfoApproved")
    private @Nullable Output<String> sponsorInfoApproved;

    public Optional<Output<String>> sponsorInfoApproved() {
        return Optional.ofNullable(this.sponsorInfoApproved);
    }

    @Import(name="sponsorInfoDenied")
    private @Nullable Output<String> sponsorInfoDenied;

    public Optional<Output<String>> sponsorInfoDenied() {
        return Optional.ofNullable(this.sponsorInfoDenied);
    }

    @Import(name="sponsorInfoPending")
    private @Nullable Output<String> sponsorInfoPending;

    public Optional<Output<String>> sponsorInfoPending() {
        return Optional.ofNullable(this.sponsorInfoPending);
    }

    /**
     * Label for Sponsor Name
     * 
     */
    @Import(name="sponsorName")
    private @Nullable Output<String> sponsorName;

    /**
     * @return Label for Sponsor Name
     * 
     */
    public Optional<Output<String>> sponsorName() {
        return Optional.ofNullable(this.sponsorName);
    }

    @Import(name="sponsorNameError")
    private @Nullable Output<String> sponsorNameError;

    public Optional<Output<String>> sponsorNameError() {
        return Optional.ofNullable(this.sponsorNameError);
    }

    @Import(name="sponsorNotePending")
    private @Nullable Output<String> sponsorNotePending;

    public Optional<Output<String>> sponsorNotePending() {
        return Optional.ofNullable(this.sponsorNotePending);
    }

    /**
     * Submit button label request Wifi Access and notify sponsor about guest request
     * 
     */
    @Import(name="sponsorRequestAccess")
    private @Nullable Output<String> sponsorRequestAccess;

    /**
     * @return Submit button label request Wifi Access and notify sponsor about guest request
     * 
     */
    public Optional<Output<String>> sponsorRequestAccess() {
        return Optional.ofNullable(this.sponsorRequestAccess);
    }

    /**
     * Text to display if sponsor approves request
     * 
     */
    @Import(name="sponsorStatusApproved")
    private @Nullable Output<String> sponsorStatusApproved;

    /**
     * @return Text to display if sponsor approves request
     * 
     */
    public Optional<Output<String>> sponsorStatusApproved() {
        return Optional.ofNullable(this.sponsorStatusApproved);
    }

    /**
     * Text to display when sponsor denies request
     * 
     */
    @Import(name="sponsorStatusDenied")
    private @Nullable Output<String> sponsorStatusDenied;

    /**
     * @return Text to display when sponsor denies request
     * 
     */
    public Optional<Output<String>> sponsorStatusDenied() {
        return Optional.ofNullable(this.sponsorStatusDenied);
    }

    /**
     * Text to display if request is still pending
     * 
     */
    @Import(name="sponsorStatusPending")
    private @Nullable Output<String> sponsorStatusPending;

    /**
     * @return Text to display if request is still pending
     * 
     */
    public Optional<Output<String>> sponsorStatusPending() {
        return Optional.ofNullable(this.sponsorStatusPending);
    }

    /**
     * Submit button label to notify sponsor about guest request
     * 
     */
    @Import(name="sponsorSubmit")
    private @Nullable Output<String> sponsorSubmit;

    /**
     * @return Submit button label to notify sponsor about guest request
     * 
     */
    public Optional<Output<String>> sponsorSubmit() {
        return Optional.ofNullable(this.sponsorSubmit);
    }

    @Import(name="sponsorsError")
    private @Nullable Output<String> sponsorsError;

    public Optional<Output<String>> sponsorsError() {
        return Optional.ofNullable(this.sponsorsError);
    }

    @Import(name="sponsorsFieldLabel")
    private @Nullable Output<String> sponsorsFieldLabel;

    public Optional<Output<String>> sponsorsFieldLabel() {
        return Optional.ofNullable(this.sponsorsFieldLabel);
    }

    @Import(name="tos")
    private @Nullable Output<Boolean> tos;

    public Optional<Output<Boolean>> tos() {
        return Optional.ofNullable(this.tos);
    }

    /**
     * Prefix of the label of the link to go to tos
     * 
     */
    @Import(name="tosAcceptLabel")
    private @Nullable Output<String> tosAcceptLabel;

    /**
     * @return Prefix of the label of the link to go to tos
     * 
     */
    public Optional<Output<String>> tosAcceptLabel() {
        return Optional.ofNullable(this.tosAcceptLabel);
    }

    /**
     * Error message when tos not accepted
     * 
     */
    @Import(name="tosError")
    private @Nullable Output<String> tosError;

    /**
     * @return Error message when tos not accepted
     * 
     */
    public Optional<Output<String>> tosError() {
        return Optional.ofNullable(this.tosError);
    }

    /**
     * Label of the link to go to tos
     * 
     */
    @Import(name="tosLink")
    private @Nullable Output<String> tosLink;

    /**
     * @return Label of the link to go to tos
     * 
     */
    public Optional<Output<String>> tosLink() {
        return Optional.ofNullable(this.tosLink);
    }

    /**
     * Text of the Terms of Service
     * 
     */
    @Import(name="tosText")
    private @Nullable Output<String> tosText;

    /**
     * @return Text of the Terms of Service
     * 
     */
    public Optional<Output<String>> tosText() {
        return Optional.ofNullable(this.tosText);
    }

    private WlanPortalTemplatePortalTemplateArgs() {}

    private WlanPortalTemplatePortalTemplateArgs(WlanPortalTemplatePortalTemplateArgs $) {
        this.accessCodeAlternateEmail = $.accessCodeAlternateEmail;
        this.alignment = $.alignment;
        this.authButtonAmazon = $.authButtonAmazon;
        this.authButtonAzure = $.authButtonAzure;
        this.authButtonEmail = $.authButtonEmail;
        this.authButtonFacebook = $.authButtonFacebook;
        this.authButtonGoogle = $.authButtonGoogle;
        this.authButtonMicrosoft = $.authButtonMicrosoft;
        this.authButtonPassphrase = $.authButtonPassphrase;
        this.authButtonSms = $.authButtonSms;
        this.authButtonSponsor = $.authButtonSponsor;
        this.authLabel = $.authLabel;
        this.backLink = $.backLink;
        this.color = $.color;
        this.colorDark = $.colorDark;
        this.colorLight = $.colorLight;
        this.company = $.company;
        this.companyError = $.companyError;
        this.companyLabel = $.companyLabel;
        this.email = $.email;
        this.emailAccessDomainError = $.emailAccessDomainError;
        this.emailCancel = $.emailCancel;
        this.emailCodeCancel = $.emailCodeCancel;
        this.emailCodeError = $.emailCodeError;
        this.emailCodeFieldLabel = $.emailCodeFieldLabel;
        this.emailCodeMessage = $.emailCodeMessage;
        this.emailCodeSubmit = $.emailCodeSubmit;
        this.emailCodeTitle = $.emailCodeTitle;
        this.emailError = $.emailError;
        this.emailFieldLabel = $.emailFieldLabel;
        this.emailLabel = $.emailLabel;
        this.emailMessage = $.emailMessage;
        this.emailSubmit = $.emailSubmit;
        this.emailTitle = $.emailTitle;
        this.field1 = $.field1;
        this.field1error = $.field1error;
        this.field1label = $.field1label;
        this.field1required = $.field1required;
        this.field2 = $.field2;
        this.field2error = $.field2error;
        this.field2label = $.field2label;
        this.field2required = $.field2required;
        this.field3 = $.field3;
        this.field3error = $.field3error;
        this.field3label = $.field3label;
        this.field3required = $.field3required;
        this.field4 = $.field4;
        this.field4error = $.field4error;
        this.field4label = $.field4label;
        this.field4required = $.field4required;
        this.locales = $.locales;
        this.logo = $.logo;
        this.marketingPolicyLink = $.marketingPolicyLink;
        this.marketingPolicyOptIn = $.marketingPolicyOptIn;
        this.marketingPolicyOptInLabel = $.marketingPolicyOptInLabel;
        this.marketingPolicyOptInText = $.marketingPolicyOptInText;
        this.message = $.message;
        this.multiAuth = $.multiAuth;
        this.name = $.name;
        this.nameError = $.nameError;
        this.nameLabel = $.nameLabel;
        this.optOutDefault = $.optOutDefault;
        this.optout = $.optout;
        this.optoutLabel = $.optoutLabel;
        this.pageTitle = $.pageTitle;
        this.passphraseCancel = $.passphraseCancel;
        this.passphraseError = $.passphraseError;
        this.passphraseLabel = $.passphraseLabel;
        this.passphraseMessage = $.passphraseMessage;
        this.passphraseSubmit = $.passphraseSubmit;
        this.passphraseTitle = $.passphraseTitle;
        this.poweredBy = $.poweredBy;
        this.privacy = $.privacy;
        this.privacyPolicyAcceptLabel = $.privacyPolicyAcceptLabel;
        this.privacyPolicyError = $.privacyPolicyError;
        this.privacyPolicyLink = $.privacyPolicyLink;
        this.privacyPolicyText = $.privacyPolicyText;
        this.requiredFieldLabel = $.requiredFieldLabel;
        this.responsiveLayout = $.responsiveLayout;
        this.signInLabel = $.signInLabel;
        this.smsCarrierDefault = $.smsCarrierDefault;
        this.smsCarrierError = $.smsCarrierError;
        this.smsCarrierFieldLabel = $.smsCarrierFieldLabel;
        this.smsCodeCancel = $.smsCodeCancel;
        this.smsCodeError = $.smsCodeError;
        this.smsCodeFieldLabel = $.smsCodeFieldLabel;
        this.smsCodeMessage = $.smsCodeMessage;
        this.smsCodeSubmit = $.smsCodeSubmit;
        this.smsCodeTitle = $.smsCodeTitle;
        this.smsCountryFieldLabel = $.smsCountryFieldLabel;
        this.smsCountryFormat = $.smsCountryFormat;
        this.smsHaveAccessCode = $.smsHaveAccessCode;
        this.smsIsTwilio = $.smsIsTwilio;
        this.smsMessageFormat = $.smsMessageFormat;
        this.smsNumberCancel = $.smsNumberCancel;
        this.smsNumberError = $.smsNumberError;
        this.smsNumberFieldLabel = $.smsNumberFieldLabel;
        this.smsNumberFormat = $.smsNumberFormat;
        this.smsNumberMessage = $.smsNumberMessage;
        this.smsNumberSubmit = $.smsNumberSubmit;
        this.smsNumberTitle = $.smsNumberTitle;
        this.smsUsernameFormat = $.smsUsernameFormat;
        this.smsValidityDuration = $.smsValidityDuration;
        this.sponsorBackLink = $.sponsorBackLink;
        this.sponsorCancel = $.sponsorCancel;
        this.sponsorEmail = $.sponsorEmail;
        this.sponsorEmailError = $.sponsorEmailError;
        this.sponsorEmailTemplate = $.sponsorEmailTemplate;
        this.sponsorInfoApproved = $.sponsorInfoApproved;
        this.sponsorInfoDenied = $.sponsorInfoDenied;
        this.sponsorInfoPending = $.sponsorInfoPending;
        this.sponsorName = $.sponsorName;
        this.sponsorNameError = $.sponsorNameError;
        this.sponsorNotePending = $.sponsorNotePending;
        this.sponsorRequestAccess = $.sponsorRequestAccess;
        this.sponsorStatusApproved = $.sponsorStatusApproved;
        this.sponsorStatusDenied = $.sponsorStatusDenied;
        this.sponsorStatusPending = $.sponsorStatusPending;
        this.sponsorSubmit = $.sponsorSubmit;
        this.sponsorsError = $.sponsorsError;
        this.sponsorsFieldLabel = $.sponsorsFieldLabel;
        this.tos = $.tos;
        this.tosAcceptLabel = $.tosAcceptLabel;
        this.tosError = $.tosError;
        this.tosLink = $.tosLink;
        this.tosText = $.tosText;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WlanPortalTemplatePortalTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WlanPortalTemplatePortalTemplateArgs $;

        public Builder() {
            $ = new WlanPortalTemplatePortalTemplateArgs();
        }

        public Builder(WlanPortalTemplatePortalTemplateArgs defaults) {
            $ = new WlanPortalTemplatePortalTemplateArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessCodeAlternateEmail(@Nullable Output<String> accessCodeAlternateEmail) {
            $.accessCodeAlternateEmail = accessCodeAlternateEmail;
            return this;
        }

        public Builder accessCodeAlternateEmail(String accessCodeAlternateEmail) {
            return accessCodeAlternateEmail(Output.of(accessCodeAlternateEmail));
        }

        /**
         * @param alignment defines alignment on portal. enum: `center`, `left`, `right`
         * 
         * @return builder
         * 
         */
        public Builder alignment(@Nullable Output<String> alignment) {
            $.alignment = alignment;
            return this;
        }

        /**
         * @param alignment defines alignment on portal. enum: `center`, `left`, `right`
         * 
         * @return builder
         * 
         */
        public Builder alignment(String alignment) {
            return alignment(Output.of(alignment));
        }

        /**
         * @param authButtonAmazon Label for Amazon auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonAmazon(@Nullable Output<String> authButtonAmazon) {
            $.authButtonAmazon = authButtonAmazon;
            return this;
        }

        /**
         * @param authButtonAmazon Label for Amazon auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonAmazon(String authButtonAmazon) {
            return authButtonAmazon(Output.of(authButtonAmazon));
        }

        /**
         * @param authButtonAzure Label for Azure auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonAzure(@Nullable Output<String> authButtonAzure) {
            $.authButtonAzure = authButtonAzure;
            return this;
        }

        /**
         * @param authButtonAzure Label for Azure auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonAzure(String authButtonAzure) {
            return authButtonAzure(Output.of(authButtonAzure));
        }

        /**
         * @param authButtonEmail Label for Email auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonEmail(@Nullable Output<String> authButtonEmail) {
            $.authButtonEmail = authButtonEmail;
            return this;
        }

        /**
         * @param authButtonEmail Label for Email auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonEmail(String authButtonEmail) {
            return authButtonEmail(Output.of(authButtonEmail));
        }

        /**
         * @param authButtonFacebook Label for Facebook auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonFacebook(@Nullable Output<String> authButtonFacebook) {
            $.authButtonFacebook = authButtonFacebook;
            return this;
        }

        /**
         * @param authButtonFacebook Label for Facebook auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonFacebook(String authButtonFacebook) {
            return authButtonFacebook(Output.of(authButtonFacebook));
        }

        /**
         * @param authButtonGoogle Label for Google auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonGoogle(@Nullable Output<String> authButtonGoogle) {
            $.authButtonGoogle = authButtonGoogle;
            return this;
        }

        /**
         * @param authButtonGoogle Label for Google auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonGoogle(String authButtonGoogle) {
            return authButtonGoogle(Output.of(authButtonGoogle));
        }

        /**
         * @param authButtonMicrosoft Label for Microsoft auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonMicrosoft(@Nullable Output<String> authButtonMicrosoft) {
            $.authButtonMicrosoft = authButtonMicrosoft;
            return this;
        }

        /**
         * @param authButtonMicrosoft Label for Microsoft auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonMicrosoft(String authButtonMicrosoft) {
            return authButtonMicrosoft(Output.of(authButtonMicrosoft));
        }

        /**
         * @param authButtonPassphrase Label for passphrase auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonPassphrase(@Nullable Output<String> authButtonPassphrase) {
            $.authButtonPassphrase = authButtonPassphrase;
            return this;
        }

        /**
         * @param authButtonPassphrase Label for passphrase auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonPassphrase(String authButtonPassphrase) {
            return authButtonPassphrase(Output.of(authButtonPassphrase));
        }

        /**
         * @param authButtonSms Label for SMS auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonSms(@Nullable Output<String> authButtonSms) {
            $.authButtonSms = authButtonSms;
            return this;
        }

        /**
         * @param authButtonSms Label for SMS auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonSms(String authButtonSms) {
            return authButtonSms(Output.of(authButtonSms));
        }

        /**
         * @param authButtonSponsor Label for Sponsor auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonSponsor(@Nullable Output<String> authButtonSponsor) {
            $.authButtonSponsor = authButtonSponsor;
            return this;
        }

        /**
         * @param authButtonSponsor Label for Sponsor auth button
         * 
         * @return builder
         * 
         */
        public Builder authButtonSponsor(String authButtonSponsor) {
            return authButtonSponsor(Output.of(authButtonSponsor));
        }

        public Builder authLabel(@Nullable Output<String> authLabel) {
            $.authLabel = authLabel;
            return this;
        }

        public Builder authLabel(String authLabel) {
            return authLabel(Output.of(authLabel));
        }

        /**
         * @param backLink Label of the link to go back to /logon
         * 
         * @return builder
         * 
         */
        public Builder backLink(@Nullable Output<String> backLink) {
            $.backLink = backLink;
            return this;
        }

        /**
         * @param backLink Label of the link to go back to /logon
         * 
         * @return builder
         * 
         */
        public Builder backLink(String backLink) {
            return backLink(Output.of(backLink));
        }

        /**
         * @param color Portal main color
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color Portal main color
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        public Builder colorDark(@Nullable Output<String> colorDark) {
            $.colorDark = colorDark;
            return this;
        }

        public Builder colorDark(String colorDark) {
            return colorDark(Output.of(colorDark));
        }

        public Builder colorLight(@Nullable Output<String> colorLight) {
            $.colorLight = colorLight;
            return this;
        }

        public Builder colorLight(String colorLight) {
            return colorLight(Output.of(colorLight));
        }

        /**
         * @param company Whether company field is required
         * 
         * @return builder
         * 
         */
        public Builder company(@Nullable Output<Boolean> company) {
            $.company = company;
            return this;
        }

        /**
         * @param company Whether company field is required
         * 
         * @return builder
         * 
         */
        public Builder company(Boolean company) {
            return company(Output.of(company));
        }

        /**
         * @param companyError Error message when company not provided
         * 
         * @return builder
         * 
         */
        public Builder companyError(@Nullable Output<String> companyError) {
            $.companyError = companyError;
            return this;
        }

        /**
         * @param companyError Error message when company not provided
         * 
         * @return builder
         * 
         */
        public Builder companyError(String companyError) {
            return companyError(Output.of(companyError));
        }

        /**
         * @param companyLabel Label of company field
         * 
         * @return builder
         * 
         */
        public Builder companyLabel(@Nullable Output<String> companyLabel) {
            $.companyLabel = companyLabel;
            return this;
        }

        /**
         * @param companyLabel Label of company field
         * 
         * @return builder
         * 
         */
        public Builder companyLabel(String companyLabel) {
            return companyLabel(Output.of(companyLabel));
        }

        /**
         * @param email Whether email field is required
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<Boolean> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Whether email field is required
         * 
         * @return builder
         * 
         */
        public Builder email(Boolean email) {
            return email(Output.of(email));
        }

        /**
         * @param emailAccessDomainError Error message when a user has valid social login but doesn&#39;t match specified email domains.
         * 
         * @return builder
         * 
         */
        public Builder emailAccessDomainError(@Nullable Output<String> emailAccessDomainError) {
            $.emailAccessDomainError = emailAccessDomainError;
            return this;
        }

        /**
         * @param emailAccessDomainError Error message when a user has valid social login but doesn&#39;t match specified email domains.
         * 
         * @return builder
         * 
         */
        public Builder emailAccessDomainError(String emailAccessDomainError) {
            return emailAccessDomainError(Output.of(emailAccessDomainError));
        }

        /**
         * @param emailCancel Label for cancel confirmation code submission using email auth
         * 
         * @return builder
         * 
         */
        public Builder emailCancel(@Nullable Output<String> emailCancel) {
            $.emailCancel = emailCancel;
            return this;
        }

        /**
         * @param emailCancel Label for cancel confirmation code submission using email auth
         * 
         * @return builder
         * 
         */
        public Builder emailCancel(String emailCancel) {
            return emailCancel(Output.of(emailCancel));
        }

        public Builder emailCodeCancel(@Nullable Output<String> emailCodeCancel) {
            $.emailCodeCancel = emailCodeCancel;
            return this;
        }

        public Builder emailCodeCancel(String emailCodeCancel) {
            return emailCodeCancel(Output.of(emailCodeCancel));
        }

        public Builder emailCodeError(@Nullable Output<String> emailCodeError) {
            $.emailCodeError = emailCodeError;
            return this;
        }

        public Builder emailCodeError(String emailCodeError) {
            return emailCodeError(Output.of(emailCodeError));
        }

        public Builder emailCodeFieldLabel(@Nullable Output<String> emailCodeFieldLabel) {
            $.emailCodeFieldLabel = emailCodeFieldLabel;
            return this;
        }

        public Builder emailCodeFieldLabel(String emailCodeFieldLabel) {
            return emailCodeFieldLabel(Output.of(emailCodeFieldLabel));
        }

        public Builder emailCodeMessage(@Nullable Output<String> emailCodeMessage) {
            $.emailCodeMessage = emailCodeMessage;
            return this;
        }

        public Builder emailCodeMessage(String emailCodeMessage) {
            return emailCodeMessage(Output.of(emailCodeMessage));
        }

        public Builder emailCodeSubmit(@Nullable Output<String> emailCodeSubmit) {
            $.emailCodeSubmit = emailCodeSubmit;
            return this;
        }

        public Builder emailCodeSubmit(String emailCodeSubmit) {
            return emailCodeSubmit(Output.of(emailCodeSubmit));
        }

        public Builder emailCodeTitle(@Nullable Output<String> emailCodeTitle) {
            $.emailCodeTitle = emailCodeTitle;
            return this;
        }

        public Builder emailCodeTitle(String emailCodeTitle) {
            return emailCodeTitle(Output.of(emailCodeTitle));
        }

        /**
         * @param emailError Error message when email not provided
         * 
         * @return builder
         * 
         */
        public Builder emailError(@Nullable Output<String> emailError) {
            $.emailError = emailError;
            return this;
        }

        /**
         * @param emailError Error message when email not provided
         * 
         * @return builder
         * 
         */
        public Builder emailError(String emailError) {
            return emailError(Output.of(emailError));
        }

        public Builder emailFieldLabel(@Nullable Output<String> emailFieldLabel) {
            $.emailFieldLabel = emailFieldLabel;
            return this;
        }

        public Builder emailFieldLabel(String emailFieldLabel) {
            return emailFieldLabel(Output.of(emailFieldLabel));
        }

        /**
         * @param emailLabel Label of email field
         * 
         * @return builder
         * 
         */
        public Builder emailLabel(@Nullable Output<String> emailLabel) {
            $.emailLabel = emailLabel;
            return this;
        }

        /**
         * @param emailLabel Label of email field
         * 
         * @return builder
         * 
         */
        public Builder emailLabel(String emailLabel) {
            return emailLabel(Output.of(emailLabel));
        }

        public Builder emailMessage(@Nullable Output<String> emailMessage) {
            $.emailMessage = emailMessage;
            return this;
        }

        public Builder emailMessage(String emailMessage) {
            return emailMessage(Output.of(emailMessage));
        }

        /**
         * @param emailSubmit Label for confirmation code submit button using email auth
         * 
         * @return builder
         * 
         */
        public Builder emailSubmit(@Nullable Output<String> emailSubmit) {
            $.emailSubmit = emailSubmit;
            return this;
        }

        /**
         * @param emailSubmit Label for confirmation code submit button using email auth
         * 
         * @return builder
         * 
         */
        public Builder emailSubmit(String emailSubmit) {
            return emailSubmit(Output.of(emailSubmit));
        }

        /**
         * @param emailTitle Title for the Email registration
         * 
         * @return builder
         * 
         */
        public Builder emailTitle(@Nullable Output<String> emailTitle) {
            $.emailTitle = emailTitle;
            return this;
        }

        /**
         * @param emailTitle Title for the Email registration
         * 
         * @return builder
         * 
         */
        public Builder emailTitle(String emailTitle) {
            return emailTitle(Output.of(emailTitle));
        }

        /**
         * @param field1 Whether to ask field1
         * 
         * @return builder
         * 
         */
        public Builder field1(@Nullable Output<Boolean> field1) {
            $.field1 = field1;
            return this;
        }

        /**
         * @param field1 Whether to ask field1
         * 
         * @return builder
         * 
         */
        public Builder field1(Boolean field1) {
            return field1(Output.of(field1));
        }

        /**
         * @param field1error Error message when field1 not provided
         * 
         * @return builder
         * 
         */
        public Builder field1error(@Nullable Output<String> field1error) {
            $.field1error = field1error;
            return this;
        }

        /**
         * @param field1error Error message when field1 not provided
         * 
         * @return builder
         * 
         */
        public Builder field1error(String field1error) {
            return field1error(Output.of(field1error));
        }

        /**
         * @param field1label Label of field1
         * 
         * @return builder
         * 
         */
        public Builder field1label(@Nullable Output<String> field1label) {
            $.field1label = field1label;
            return this;
        }

        /**
         * @param field1label Label of field1
         * 
         * @return builder
         * 
         */
        public Builder field1label(String field1label) {
            return field1label(Output.of(field1label));
        }

        /**
         * @param field1required Whether field1 is required field
         * 
         * @return builder
         * 
         */
        public Builder field1required(@Nullable Output<Boolean> field1required) {
            $.field1required = field1required;
            return this;
        }

        /**
         * @param field1required Whether field1 is required field
         * 
         * @return builder
         * 
         */
        public Builder field1required(Boolean field1required) {
            return field1required(Output.of(field1required));
        }

        /**
         * @param field2 Whether to ask field2
         * 
         * @return builder
         * 
         */
        public Builder field2(@Nullable Output<Boolean> field2) {
            $.field2 = field2;
            return this;
        }

        /**
         * @param field2 Whether to ask field2
         * 
         * @return builder
         * 
         */
        public Builder field2(Boolean field2) {
            return field2(Output.of(field2));
        }

        /**
         * @param field2error Error message when field2 not provided
         * 
         * @return builder
         * 
         */
        public Builder field2error(@Nullable Output<String> field2error) {
            $.field2error = field2error;
            return this;
        }

        /**
         * @param field2error Error message when field2 not provided
         * 
         * @return builder
         * 
         */
        public Builder field2error(String field2error) {
            return field2error(Output.of(field2error));
        }

        /**
         * @param field2label Label of field2
         * 
         * @return builder
         * 
         */
        public Builder field2label(@Nullable Output<String> field2label) {
            $.field2label = field2label;
            return this;
        }

        /**
         * @param field2label Label of field2
         * 
         * @return builder
         * 
         */
        public Builder field2label(String field2label) {
            return field2label(Output.of(field2label));
        }

        /**
         * @param field2required Whether field2 is required field
         * 
         * @return builder
         * 
         */
        public Builder field2required(@Nullable Output<Boolean> field2required) {
            $.field2required = field2required;
            return this;
        }

        /**
         * @param field2required Whether field2 is required field
         * 
         * @return builder
         * 
         */
        public Builder field2required(Boolean field2required) {
            return field2required(Output.of(field2required));
        }

        /**
         * @param field3 Whether to ask field3
         * 
         * @return builder
         * 
         */
        public Builder field3(@Nullable Output<Boolean> field3) {
            $.field3 = field3;
            return this;
        }

        /**
         * @param field3 Whether to ask field3
         * 
         * @return builder
         * 
         */
        public Builder field3(Boolean field3) {
            return field3(Output.of(field3));
        }

        /**
         * @param field3error Error message when field3 not provided
         * 
         * @return builder
         * 
         */
        public Builder field3error(@Nullable Output<String> field3error) {
            $.field3error = field3error;
            return this;
        }

        /**
         * @param field3error Error message when field3 not provided
         * 
         * @return builder
         * 
         */
        public Builder field3error(String field3error) {
            return field3error(Output.of(field3error));
        }

        /**
         * @param field3label Label of field3
         * 
         * @return builder
         * 
         */
        public Builder field3label(@Nullable Output<String> field3label) {
            $.field3label = field3label;
            return this;
        }

        /**
         * @param field3label Label of field3
         * 
         * @return builder
         * 
         */
        public Builder field3label(String field3label) {
            return field3label(Output.of(field3label));
        }

        /**
         * @param field3required Whether field3 is required field
         * 
         * @return builder
         * 
         */
        public Builder field3required(@Nullable Output<Boolean> field3required) {
            $.field3required = field3required;
            return this;
        }

        /**
         * @param field3required Whether field3 is required field
         * 
         * @return builder
         * 
         */
        public Builder field3required(Boolean field3required) {
            return field3required(Output.of(field3required));
        }

        /**
         * @param field4 Whether to ask field4
         * 
         * @return builder
         * 
         */
        public Builder field4(@Nullable Output<Boolean> field4) {
            $.field4 = field4;
            return this;
        }

        /**
         * @param field4 Whether to ask field4
         * 
         * @return builder
         * 
         */
        public Builder field4(Boolean field4) {
            return field4(Output.of(field4));
        }

        /**
         * @param field4error Error message when field4 not provided
         * 
         * @return builder
         * 
         */
        public Builder field4error(@Nullable Output<String> field4error) {
            $.field4error = field4error;
            return this;
        }

        /**
         * @param field4error Error message when field4 not provided
         * 
         * @return builder
         * 
         */
        public Builder field4error(String field4error) {
            return field4error(Output.of(field4error));
        }

        /**
         * @param field4label Label of field4
         * 
         * @return builder
         * 
         */
        public Builder field4label(@Nullable Output<String> field4label) {
            $.field4label = field4label;
            return this;
        }

        /**
         * @param field4label Label of field4
         * 
         * @return builder
         * 
         */
        public Builder field4label(String field4label) {
            return field4label(Output.of(field4label));
        }

        /**
         * @param field4required Whether field4 is required field
         * 
         * @return builder
         * 
         */
        public Builder field4required(@Nullable Output<Boolean> field4required) {
            $.field4required = field4required;
            return this;
        }

        /**
         * @param field4required Whether field4 is required field
         * 
         * @return builder
         * 
         */
        public Builder field4required(Boolean field4required) {
            return field4required(Output.of(field4required));
        }

        /**
         * @param locales Can be used to localize the portal based on the User Agent. Allowed property key values are:
         *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
         *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
         *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
         *   `zh-Hans`, `zh-Hant`
         * 
         * @return builder
         * 
         */
        public Builder locales(@Nullable Output<Map<String,WlanPortalTemplatePortalTemplateLocalesArgs>> locales) {
            $.locales = locales;
            return this;
        }

        /**
         * @param locales Can be used to localize the portal based on the User Agent. Allowed property key values are:
         *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
         *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
         *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
         *   `zh-Hans`, `zh-Hant`
         * 
         * @return builder
         * 
         */
        public Builder locales(Map<String,WlanPortalTemplatePortalTemplateLocalesArgs> locales) {
            return locales(Output.of(locales));
        }

        /**
         * @param logo path to the background image file. File must be a `png` image`
         * 
         * @return builder
         * 
         */
        public Builder logo(@Nullable Output<String> logo) {
            $.logo = logo;
            return this;
        }

        /**
         * @param logo path to the background image file. File must be a `png` image`
         * 
         * @return builder
         * 
         */
        public Builder logo(String logo) {
            return logo(Output.of(logo));
        }

        /**
         * @param marketingPolicyLink label of the link to go to /marketing_policy
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyLink(@Nullable Output<String> marketingPolicyLink) {
            $.marketingPolicyLink = marketingPolicyLink;
            return this;
        }

        /**
         * @param marketingPolicyLink label of the link to go to /marketing_policy
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyLink(String marketingPolicyLink) {
            return marketingPolicyLink(Output.of(marketingPolicyLink));
        }

        /**
         * @param marketingPolicyOptIn Whether marketing policy optin is enabled
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyOptIn(@Nullable Output<Boolean> marketingPolicyOptIn) {
            $.marketingPolicyOptIn = marketingPolicyOptIn;
            return this;
        }

        /**
         * @param marketingPolicyOptIn Whether marketing policy optin is enabled
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyOptIn(Boolean marketingPolicyOptIn) {
            return marketingPolicyOptIn(Output.of(marketingPolicyOptIn));
        }

        /**
         * @param marketingPolicyOptInLabel label for marketing optin
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyOptInLabel(@Nullable Output<String> marketingPolicyOptInLabel) {
            $.marketingPolicyOptInLabel = marketingPolicyOptInLabel;
            return this;
        }

        /**
         * @param marketingPolicyOptInLabel label for marketing optin
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyOptInLabel(String marketingPolicyOptInLabel) {
            return marketingPolicyOptInLabel(Output.of(marketingPolicyOptInLabel));
        }

        /**
         * @param marketingPolicyOptInText marketing policy text
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyOptInText(@Nullable Output<String> marketingPolicyOptInText) {
            $.marketingPolicyOptInText = marketingPolicyOptInText;
            return this;
        }

        /**
         * @param marketingPolicyOptInText marketing policy text
         * 
         * @return builder
         * 
         */
        public Builder marketingPolicyOptInText(String marketingPolicyOptInText) {
            return marketingPolicyOptInText(Output.of(marketingPolicyOptInText));
        }

        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        public Builder message(String message) {
            return message(Output.of(message));
        }

        public Builder multiAuth(@Nullable Output<Boolean> multiAuth) {
            $.multiAuth = multiAuth;
            return this;
        }

        public Builder multiAuth(Boolean multiAuth) {
            return multiAuth(Output.of(multiAuth));
        }

        /**
         * @param name Whether name field is required
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<Boolean> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Whether name field is required
         * 
         * @return builder
         * 
         */
        public Builder name(Boolean name) {
            return name(Output.of(name));
        }

        /**
         * @param nameError Error message when name not provided
         * 
         * @return builder
         * 
         */
        public Builder nameError(@Nullable Output<String> nameError) {
            $.nameError = nameError;
            return this;
        }

        /**
         * @param nameError Error message when name not provided
         * 
         * @return builder
         * 
         */
        public Builder nameError(String nameError) {
            return nameError(Output.of(nameError));
        }

        /**
         * @param nameLabel Label of name field
         * 
         * @return builder
         * 
         */
        public Builder nameLabel(@Nullable Output<String> nameLabel) {
            $.nameLabel = nameLabel;
            return this;
        }

        /**
         * @param nameLabel Label of name field
         * 
         * @return builder
         * 
         */
        public Builder nameLabel(String nameLabel) {
            return nameLabel(Output.of(nameLabel));
        }

        /**
         * @param optOutDefault Default value for the `Do not store` checkbox
         * 
         * @return builder
         * 
         */
        public Builder optOutDefault(@Nullable Output<Boolean> optOutDefault) {
            $.optOutDefault = optOutDefault;
            return this;
        }

        /**
         * @param optOutDefault Default value for the `Do not store` checkbox
         * 
         * @return builder
         * 
         */
        public Builder optOutDefault(Boolean optOutDefault) {
            return optOutDefault(Output.of(optOutDefault));
        }

        /**
         * @param optout Whether to display Do Not Store My Personal Information
         * 
         * @return builder
         * 
         */
        public Builder optout(@Nullable Output<Boolean> optout) {
            $.optout = optout;
            return this;
        }

        /**
         * @param optout Whether to display Do Not Store My Personal Information
         * 
         * @return builder
         * 
         */
        public Builder optout(Boolean optout) {
            return optout(Output.of(optout));
        }

        /**
         * @param optoutLabel Label for Do Not Store My Personal Information
         * 
         * @return builder
         * 
         */
        public Builder optoutLabel(@Nullable Output<String> optoutLabel) {
            $.optoutLabel = optoutLabel;
            return this;
        }

        /**
         * @param optoutLabel Label for Do Not Store My Personal Information
         * 
         * @return builder
         * 
         */
        public Builder optoutLabel(String optoutLabel) {
            return optoutLabel(Output.of(optoutLabel));
        }

        public Builder pageTitle(@Nullable Output<String> pageTitle) {
            $.pageTitle = pageTitle;
            return this;
        }

        public Builder pageTitle(String pageTitle) {
            return pageTitle(Output.of(pageTitle));
        }

        /**
         * @param passphraseCancel Label for the Passphrase cancel button
         * 
         * @return builder
         * 
         */
        public Builder passphraseCancel(@Nullable Output<String> passphraseCancel) {
            $.passphraseCancel = passphraseCancel;
            return this;
        }

        /**
         * @param passphraseCancel Label for the Passphrase cancel button
         * 
         * @return builder
         * 
         */
        public Builder passphraseCancel(String passphraseCancel) {
            return passphraseCancel(Output.of(passphraseCancel));
        }

        /**
         * @param passphraseError Error message when invalid passphrase is provided
         * 
         * @return builder
         * 
         */
        public Builder passphraseError(@Nullable Output<String> passphraseError) {
            $.passphraseError = passphraseError;
            return this;
        }

        /**
         * @param passphraseError Error message when invalid passphrase is provided
         * 
         * @return builder
         * 
         */
        public Builder passphraseError(String passphraseError) {
            return passphraseError(Output.of(passphraseError));
        }

        /**
         * @param passphraseLabel Passphrase
         * 
         * @return builder
         * 
         */
        public Builder passphraseLabel(@Nullable Output<String> passphraseLabel) {
            $.passphraseLabel = passphraseLabel;
            return this;
        }

        /**
         * @param passphraseLabel Passphrase
         * 
         * @return builder
         * 
         */
        public Builder passphraseLabel(String passphraseLabel) {
            return passphraseLabel(Output.of(passphraseLabel));
        }

        public Builder passphraseMessage(@Nullable Output<String> passphraseMessage) {
            $.passphraseMessage = passphraseMessage;
            return this;
        }

        public Builder passphraseMessage(String passphraseMessage) {
            return passphraseMessage(Output.of(passphraseMessage));
        }

        /**
         * @param passphraseSubmit Label for the Passphrase submit button
         * 
         * @return builder
         * 
         */
        public Builder passphraseSubmit(@Nullable Output<String> passphraseSubmit) {
            $.passphraseSubmit = passphraseSubmit;
            return this;
        }

        /**
         * @param passphraseSubmit Label for the Passphrase submit button
         * 
         * @return builder
         * 
         */
        public Builder passphraseSubmit(String passphraseSubmit) {
            return passphraseSubmit(Output.of(passphraseSubmit));
        }

        /**
         * @param passphraseTitle Title for passphrase details page
         * 
         * @return builder
         * 
         */
        public Builder passphraseTitle(@Nullable Output<String> passphraseTitle) {
            $.passphraseTitle = passphraseTitle;
            return this;
        }

        /**
         * @param passphraseTitle Title for passphrase details page
         * 
         * @return builder
         * 
         */
        public Builder passphraseTitle(String passphraseTitle) {
            return passphraseTitle(Output.of(passphraseTitle));
        }

        /**
         * @param poweredBy Whether to show \&#34;Powered by Mist\&#34;
         * 
         * @return builder
         * 
         */
        public Builder poweredBy(@Nullable Output<Boolean> poweredBy) {
            $.poweredBy = poweredBy;
            return this;
        }

        /**
         * @param poweredBy Whether to show \&#34;Powered by Mist\&#34;
         * 
         * @return builder
         * 
         */
        public Builder poweredBy(Boolean poweredBy) {
            return poweredBy(Output.of(poweredBy));
        }

        /**
         * @param privacy Whether to require the Privacy Term acceptance
         * 
         * @return builder
         * 
         */
        public Builder privacy(@Nullable Output<Boolean> privacy) {
            $.privacy = privacy;
            return this;
        }

        /**
         * @param privacy Whether to require the Privacy Term acceptance
         * 
         * @return builder
         * 
         */
        public Builder privacy(Boolean privacy) {
            return privacy(Output.of(privacy));
        }

        /**
         * @param privacyPolicyAcceptLabel Prefix of the label of the link to go to Privacy Policy
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyAcceptLabel(@Nullable Output<String> privacyPolicyAcceptLabel) {
            $.privacyPolicyAcceptLabel = privacyPolicyAcceptLabel;
            return this;
        }

        /**
         * @param privacyPolicyAcceptLabel Prefix of the label of the link to go to Privacy Policy
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyAcceptLabel(String privacyPolicyAcceptLabel) {
            return privacyPolicyAcceptLabel(Output.of(privacyPolicyAcceptLabel));
        }

        /**
         * @param privacyPolicyError Error message when Privacy Policy not accepted
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyError(@Nullable Output<String> privacyPolicyError) {
            $.privacyPolicyError = privacyPolicyError;
            return this;
        }

        /**
         * @param privacyPolicyError Error message when Privacy Policy not accepted
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyError(String privacyPolicyError) {
            return privacyPolicyError(Output.of(privacyPolicyError));
        }

        /**
         * @param privacyPolicyLink Label of the link to go to Privacy Policy
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyLink(@Nullable Output<String> privacyPolicyLink) {
            $.privacyPolicyLink = privacyPolicyLink;
            return this;
        }

        /**
         * @param privacyPolicyLink Label of the link to go to Privacy Policy
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyLink(String privacyPolicyLink) {
            return privacyPolicyLink(Output.of(privacyPolicyLink));
        }

        /**
         * @param privacyPolicyText Text of the Privacy Policy
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyText(@Nullable Output<String> privacyPolicyText) {
            $.privacyPolicyText = privacyPolicyText;
            return this;
        }

        /**
         * @param privacyPolicyText Text of the Privacy Policy
         * 
         * @return builder
         * 
         */
        public Builder privacyPolicyText(String privacyPolicyText) {
            return privacyPolicyText(Output.of(privacyPolicyText));
        }

        /**
         * @param requiredFieldLabel Label to denote required field
         * 
         * @return builder
         * 
         */
        public Builder requiredFieldLabel(@Nullable Output<String> requiredFieldLabel) {
            $.requiredFieldLabel = requiredFieldLabel;
            return this;
        }

        /**
         * @param requiredFieldLabel Label to denote required field
         * 
         * @return builder
         * 
         */
        public Builder requiredFieldLabel(String requiredFieldLabel) {
            return requiredFieldLabel(Output.of(requiredFieldLabel));
        }

        public Builder responsiveLayout(@Nullable Output<Boolean> responsiveLayout) {
            $.responsiveLayout = responsiveLayout;
            return this;
        }

        public Builder responsiveLayout(Boolean responsiveLayout) {
            return responsiveLayout(Output.of(responsiveLayout));
        }

        /**
         * @param signInLabel Label of the button to signin
         * 
         * @return builder
         * 
         */
        public Builder signInLabel(@Nullable Output<String> signInLabel) {
            $.signInLabel = signInLabel;
            return this;
        }

        /**
         * @param signInLabel Label of the button to signin
         * 
         * @return builder
         * 
         */
        public Builder signInLabel(String signInLabel) {
            return signInLabel(Output.of(signInLabel));
        }

        public Builder smsCarrierDefault(@Nullable Output<String> smsCarrierDefault) {
            $.smsCarrierDefault = smsCarrierDefault;
            return this;
        }

        public Builder smsCarrierDefault(String smsCarrierDefault) {
            return smsCarrierDefault(Output.of(smsCarrierDefault));
        }

        public Builder smsCarrierError(@Nullable Output<String> smsCarrierError) {
            $.smsCarrierError = smsCarrierError;
            return this;
        }

        public Builder smsCarrierError(String smsCarrierError) {
            return smsCarrierError(Output.of(smsCarrierError));
        }

        /**
         * @param smsCarrierFieldLabel Label for mobile carrier drop-down list
         * 
         * @return builder
         * 
         */
        public Builder smsCarrierFieldLabel(@Nullable Output<String> smsCarrierFieldLabel) {
            $.smsCarrierFieldLabel = smsCarrierFieldLabel;
            return this;
        }

        /**
         * @param smsCarrierFieldLabel Label for mobile carrier drop-down list
         * 
         * @return builder
         * 
         */
        public Builder smsCarrierFieldLabel(String smsCarrierFieldLabel) {
            return smsCarrierFieldLabel(Output.of(smsCarrierFieldLabel));
        }

        /**
         * @param smsCodeCancel Label for cancel confirmation code submission
         * 
         * @return builder
         * 
         */
        public Builder smsCodeCancel(@Nullable Output<String> smsCodeCancel) {
            $.smsCodeCancel = smsCodeCancel;
            return this;
        }

        /**
         * @param smsCodeCancel Label for cancel confirmation code submission
         * 
         * @return builder
         * 
         */
        public Builder smsCodeCancel(String smsCodeCancel) {
            return smsCodeCancel(Output.of(smsCodeCancel));
        }

        /**
         * @param smsCodeError Error message when confirmation code is invalid
         * 
         * @return builder
         * 
         */
        public Builder smsCodeError(@Nullable Output<String> smsCodeError) {
            $.smsCodeError = smsCodeError;
            return this;
        }

        /**
         * @param smsCodeError Error message when confirmation code is invalid
         * 
         * @return builder
         * 
         */
        public Builder smsCodeError(String smsCodeError) {
            return smsCodeError(Output.of(smsCodeError));
        }

        public Builder smsCodeFieldLabel(@Nullable Output<String> smsCodeFieldLabel) {
            $.smsCodeFieldLabel = smsCodeFieldLabel;
            return this;
        }

        public Builder smsCodeFieldLabel(String smsCodeFieldLabel) {
            return smsCodeFieldLabel(Output.of(smsCodeFieldLabel));
        }

        public Builder smsCodeMessage(@Nullable Output<String> smsCodeMessage) {
            $.smsCodeMessage = smsCodeMessage;
            return this;
        }

        public Builder smsCodeMessage(String smsCodeMessage) {
            return smsCodeMessage(Output.of(smsCodeMessage));
        }

        /**
         * @param smsCodeSubmit Label for confirmation code submit button
         * 
         * @return builder
         * 
         */
        public Builder smsCodeSubmit(@Nullable Output<String> smsCodeSubmit) {
            $.smsCodeSubmit = smsCodeSubmit;
            return this;
        }

        /**
         * @param smsCodeSubmit Label for confirmation code submit button
         * 
         * @return builder
         * 
         */
        public Builder smsCodeSubmit(String smsCodeSubmit) {
            return smsCodeSubmit(Output.of(smsCodeSubmit));
        }

        public Builder smsCodeTitle(@Nullable Output<String> smsCodeTitle) {
            $.smsCodeTitle = smsCodeTitle;
            return this;
        }

        public Builder smsCodeTitle(String smsCodeTitle) {
            return smsCodeTitle(Output.of(smsCodeTitle));
        }

        public Builder smsCountryFieldLabel(@Nullable Output<String> smsCountryFieldLabel) {
            $.smsCountryFieldLabel = smsCountryFieldLabel;
            return this;
        }

        public Builder smsCountryFieldLabel(String smsCountryFieldLabel) {
            return smsCountryFieldLabel(Output.of(smsCountryFieldLabel));
        }

        public Builder smsCountryFormat(@Nullable Output<String> smsCountryFormat) {
            $.smsCountryFormat = smsCountryFormat;
            return this;
        }

        public Builder smsCountryFormat(String smsCountryFormat) {
            return smsCountryFormat(Output.of(smsCountryFormat));
        }

        /**
         * @param smsHaveAccessCode Label for checkbox to specify that the user has access code
         * 
         * @return builder
         * 
         */
        public Builder smsHaveAccessCode(@Nullable Output<String> smsHaveAccessCode) {
            $.smsHaveAccessCode = smsHaveAccessCode;
            return this;
        }

        /**
         * @param smsHaveAccessCode Label for checkbox to specify that the user has access code
         * 
         * @return builder
         * 
         */
        public Builder smsHaveAccessCode(String smsHaveAccessCode) {
            return smsHaveAccessCode(Output.of(smsHaveAccessCode));
        }

        public Builder smsIsTwilio(@Nullable Output<Boolean> smsIsTwilio) {
            $.smsIsTwilio = smsIsTwilio;
            return this;
        }

        public Builder smsIsTwilio(Boolean smsIsTwilio) {
            return smsIsTwilio(Output.of(smsIsTwilio));
        }

        /**
         * @param smsMessageFormat Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
         * 
         * @return builder
         * 
         */
        public Builder smsMessageFormat(@Nullable Output<String> smsMessageFormat) {
            $.smsMessageFormat = smsMessageFormat;
            return this;
        }

        /**
         * @param smsMessageFormat Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
         * 
         * @return builder
         * 
         */
        public Builder smsMessageFormat(String smsMessageFormat) {
            return smsMessageFormat(Output.of(smsMessageFormat));
        }

        /**
         * @param smsNumberCancel Label for canceling mobile details for SMS auth
         * 
         * @return builder
         * 
         */
        public Builder smsNumberCancel(@Nullable Output<String> smsNumberCancel) {
            $.smsNumberCancel = smsNumberCancel;
            return this;
        }

        /**
         * @param smsNumberCancel Label for canceling mobile details for SMS auth
         * 
         * @return builder
         * 
         */
        public Builder smsNumberCancel(String smsNumberCancel) {
            return smsNumberCancel(Output.of(smsNumberCancel));
        }

        public Builder smsNumberError(@Nullable Output<String> smsNumberError) {
            $.smsNumberError = smsNumberError;
            return this;
        }

        public Builder smsNumberError(String smsNumberError) {
            return smsNumberError(Output.of(smsNumberError));
        }

        /**
         * @param smsNumberFieldLabel Label for field to provide mobile number
         * 
         * @return builder
         * 
         */
        public Builder smsNumberFieldLabel(@Nullable Output<String> smsNumberFieldLabel) {
            $.smsNumberFieldLabel = smsNumberFieldLabel;
            return this;
        }

        /**
         * @param smsNumberFieldLabel Label for field to provide mobile number
         * 
         * @return builder
         * 
         */
        public Builder smsNumberFieldLabel(String smsNumberFieldLabel) {
            return smsNumberFieldLabel(Output.of(smsNumberFieldLabel));
        }

        public Builder smsNumberFormat(@Nullable Output<String> smsNumberFormat) {
            $.smsNumberFormat = smsNumberFormat;
            return this;
        }

        public Builder smsNumberFormat(String smsNumberFormat) {
            return smsNumberFormat(Output.of(smsNumberFormat));
        }

        public Builder smsNumberMessage(@Nullable Output<String> smsNumberMessage) {
            $.smsNumberMessage = smsNumberMessage;
            return this;
        }

        public Builder smsNumberMessage(String smsNumberMessage) {
            return smsNumberMessage(Output.of(smsNumberMessage));
        }

        /**
         * @param smsNumberSubmit Label for submit button for code generation
         * 
         * @return builder
         * 
         */
        public Builder smsNumberSubmit(@Nullable Output<String> smsNumberSubmit) {
            $.smsNumberSubmit = smsNumberSubmit;
            return this;
        }

        /**
         * @param smsNumberSubmit Label for submit button for code generation
         * 
         * @return builder
         * 
         */
        public Builder smsNumberSubmit(String smsNumberSubmit) {
            return smsNumberSubmit(Output.of(smsNumberSubmit));
        }

        /**
         * @param smsNumberTitle Title for phone number details
         * 
         * @return builder
         * 
         */
        public Builder smsNumberTitle(@Nullable Output<String> smsNumberTitle) {
            $.smsNumberTitle = smsNumberTitle;
            return this;
        }

        /**
         * @param smsNumberTitle Title for phone number details
         * 
         * @return builder
         * 
         */
        public Builder smsNumberTitle(String smsNumberTitle) {
            return smsNumberTitle(Output.of(smsNumberTitle));
        }

        public Builder smsUsernameFormat(@Nullable Output<String> smsUsernameFormat) {
            $.smsUsernameFormat = smsUsernameFormat;
            return this;
        }

        public Builder smsUsernameFormat(String smsUsernameFormat) {
            return smsUsernameFormat(Output.of(smsUsernameFormat));
        }

        /**
         * @param smsValidityDuration How long confirmation code should be considered valid (in minutes)
         * 
         * @return builder
         * 
         */
        public Builder smsValidityDuration(@Nullable Output<Integer> smsValidityDuration) {
            $.smsValidityDuration = smsValidityDuration;
            return this;
        }

        /**
         * @param smsValidityDuration How long confirmation code should be considered valid (in minutes)
         * 
         * @return builder
         * 
         */
        public Builder smsValidityDuration(Integer smsValidityDuration) {
            return smsValidityDuration(Output.of(smsValidityDuration));
        }

        public Builder sponsorBackLink(@Nullable Output<String> sponsorBackLink) {
            $.sponsorBackLink = sponsorBackLink;
            return this;
        }

        public Builder sponsorBackLink(String sponsorBackLink) {
            return sponsorBackLink(Output.of(sponsorBackLink));
        }

        public Builder sponsorCancel(@Nullable Output<String> sponsorCancel) {
            $.sponsorCancel = sponsorCancel;
            return this;
        }

        public Builder sponsorCancel(String sponsorCancel) {
            return sponsorCancel(Output.of(sponsorCancel));
        }

        /**
         * @param sponsorEmail Label for Sponsor Email
         * 
         * @return builder
         * 
         */
        public Builder sponsorEmail(@Nullable Output<String> sponsorEmail) {
            $.sponsorEmail = sponsorEmail;
            return this;
        }

        /**
         * @param sponsorEmail Label for Sponsor Email
         * 
         * @return builder
         * 
         */
        public Builder sponsorEmail(String sponsorEmail) {
            return sponsorEmail(Output.of(sponsorEmail));
        }

        public Builder sponsorEmailError(@Nullable Output<String> sponsorEmailError) {
            $.sponsorEmailError = sponsorEmailError;
            return this;
        }

        public Builder sponsorEmailError(String sponsorEmailError) {
            return sponsorEmailError(Output.of(sponsorEmailError));
        }

        /**
         * @param sponsorEmailTemplate HTML template to replace/override default sponsor email template
         * Sponsor Email Template supports following template variables:
         *   * `approve_url`: Renders URL to approve the request; optionally &amp;minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
         *   * `deny_url`: Renders URL to reject the request
         *   * `guest_email`: Renders Email ID of the guest
         *   * `guest_name`: Renders Name of the guest
         *   * `field1`: Renders value of the Custom Field 1
         *   * `field2`: Renders value of the Custom Field 2
         *   * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
         *   * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
         * 
         * @return builder
         * 
         */
        public Builder sponsorEmailTemplate(@Nullable Output<String> sponsorEmailTemplate) {
            $.sponsorEmailTemplate = sponsorEmailTemplate;
            return this;
        }

        /**
         * @param sponsorEmailTemplate HTML template to replace/override default sponsor email template
         * Sponsor Email Template supports following template variables:
         *   * `approve_url`: Renders URL to approve the request; optionally &amp;minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
         *   * `deny_url`: Renders URL to reject the request
         *   * `guest_email`: Renders Email ID of the guest
         *   * `guest_name`: Renders Name of the guest
         *   * `field1`: Renders value of the Custom Field 1
         *   * `field2`: Renders value of the Custom Field 2
         *   * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
         *   * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
         * 
         * @return builder
         * 
         */
        public Builder sponsorEmailTemplate(String sponsorEmailTemplate) {
            return sponsorEmailTemplate(Output.of(sponsorEmailTemplate));
        }

        public Builder sponsorInfoApproved(@Nullable Output<String> sponsorInfoApproved) {
            $.sponsorInfoApproved = sponsorInfoApproved;
            return this;
        }

        public Builder sponsorInfoApproved(String sponsorInfoApproved) {
            return sponsorInfoApproved(Output.of(sponsorInfoApproved));
        }

        public Builder sponsorInfoDenied(@Nullable Output<String> sponsorInfoDenied) {
            $.sponsorInfoDenied = sponsorInfoDenied;
            return this;
        }

        public Builder sponsorInfoDenied(String sponsorInfoDenied) {
            return sponsorInfoDenied(Output.of(sponsorInfoDenied));
        }

        public Builder sponsorInfoPending(@Nullable Output<String> sponsorInfoPending) {
            $.sponsorInfoPending = sponsorInfoPending;
            return this;
        }

        public Builder sponsorInfoPending(String sponsorInfoPending) {
            return sponsorInfoPending(Output.of(sponsorInfoPending));
        }

        /**
         * @param sponsorName Label for Sponsor Name
         * 
         * @return builder
         * 
         */
        public Builder sponsorName(@Nullable Output<String> sponsorName) {
            $.sponsorName = sponsorName;
            return this;
        }

        /**
         * @param sponsorName Label for Sponsor Name
         * 
         * @return builder
         * 
         */
        public Builder sponsorName(String sponsorName) {
            return sponsorName(Output.of(sponsorName));
        }

        public Builder sponsorNameError(@Nullable Output<String> sponsorNameError) {
            $.sponsorNameError = sponsorNameError;
            return this;
        }

        public Builder sponsorNameError(String sponsorNameError) {
            return sponsorNameError(Output.of(sponsorNameError));
        }

        public Builder sponsorNotePending(@Nullable Output<String> sponsorNotePending) {
            $.sponsorNotePending = sponsorNotePending;
            return this;
        }

        public Builder sponsorNotePending(String sponsorNotePending) {
            return sponsorNotePending(Output.of(sponsorNotePending));
        }

        /**
         * @param sponsorRequestAccess Submit button label request Wifi Access and notify sponsor about guest request
         * 
         * @return builder
         * 
         */
        public Builder sponsorRequestAccess(@Nullable Output<String> sponsorRequestAccess) {
            $.sponsorRequestAccess = sponsorRequestAccess;
            return this;
        }

        /**
         * @param sponsorRequestAccess Submit button label request Wifi Access and notify sponsor about guest request
         * 
         * @return builder
         * 
         */
        public Builder sponsorRequestAccess(String sponsorRequestAccess) {
            return sponsorRequestAccess(Output.of(sponsorRequestAccess));
        }

        /**
         * @param sponsorStatusApproved Text to display if sponsor approves request
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusApproved(@Nullable Output<String> sponsorStatusApproved) {
            $.sponsorStatusApproved = sponsorStatusApproved;
            return this;
        }

        /**
         * @param sponsorStatusApproved Text to display if sponsor approves request
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusApproved(String sponsorStatusApproved) {
            return sponsorStatusApproved(Output.of(sponsorStatusApproved));
        }

        /**
         * @param sponsorStatusDenied Text to display when sponsor denies request
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusDenied(@Nullable Output<String> sponsorStatusDenied) {
            $.sponsorStatusDenied = sponsorStatusDenied;
            return this;
        }

        /**
         * @param sponsorStatusDenied Text to display when sponsor denies request
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusDenied(String sponsorStatusDenied) {
            return sponsorStatusDenied(Output.of(sponsorStatusDenied));
        }

        /**
         * @param sponsorStatusPending Text to display if request is still pending
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusPending(@Nullable Output<String> sponsorStatusPending) {
            $.sponsorStatusPending = sponsorStatusPending;
            return this;
        }

        /**
         * @param sponsorStatusPending Text to display if request is still pending
         * 
         * @return builder
         * 
         */
        public Builder sponsorStatusPending(String sponsorStatusPending) {
            return sponsorStatusPending(Output.of(sponsorStatusPending));
        }

        /**
         * @param sponsorSubmit Submit button label to notify sponsor about guest request
         * 
         * @return builder
         * 
         */
        public Builder sponsorSubmit(@Nullable Output<String> sponsorSubmit) {
            $.sponsorSubmit = sponsorSubmit;
            return this;
        }

        /**
         * @param sponsorSubmit Submit button label to notify sponsor about guest request
         * 
         * @return builder
         * 
         */
        public Builder sponsorSubmit(String sponsorSubmit) {
            return sponsorSubmit(Output.of(sponsorSubmit));
        }

        public Builder sponsorsError(@Nullable Output<String> sponsorsError) {
            $.sponsorsError = sponsorsError;
            return this;
        }

        public Builder sponsorsError(String sponsorsError) {
            return sponsorsError(Output.of(sponsorsError));
        }

        public Builder sponsorsFieldLabel(@Nullable Output<String> sponsorsFieldLabel) {
            $.sponsorsFieldLabel = sponsorsFieldLabel;
            return this;
        }

        public Builder sponsorsFieldLabel(String sponsorsFieldLabel) {
            return sponsorsFieldLabel(Output.of(sponsorsFieldLabel));
        }

        public Builder tos(@Nullable Output<Boolean> tos) {
            $.tos = tos;
            return this;
        }

        public Builder tos(Boolean tos) {
            return tos(Output.of(tos));
        }

        /**
         * @param tosAcceptLabel Prefix of the label of the link to go to tos
         * 
         * @return builder
         * 
         */
        public Builder tosAcceptLabel(@Nullable Output<String> tosAcceptLabel) {
            $.tosAcceptLabel = tosAcceptLabel;
            return this;
        }

        /**
         * @param tosAcceptLabel Prefix of the label of the link to go to tos
         * 
         * @return builder
         * 
         */
        public Builder tosAcceptLabel(String tosAcceptLabel) {
            return tosAcceptLabel(Output.of(tosAcceptLabel));
        }

        /**
         * @param tosError Error message when tos not accepted
         * 
         * @return builder
         * 
         */
        public Builder tosError(@Nullable Output<String> tosError) {
            $.tosError = tosError;
            return this;
        }

        /**
         * @param tosError Error message when tos not accepted
         * 
         * @return builder
         * 
         */
        public Builder tosError(String tosError) {
            return tosError(Output.of(tosError));
        }

        /**
         * @param tosLink Label of the link to go to tos
         * 
         * @return builder
         * 
         */
        public Builder tosLink(@Nullable Output<String> tosLink) {
            $.tosLink = tosLink;
            return this;
        }

        /**
         * @param tosLink Label of the link to go to tos
         * 
         * @return builder
         * 
         */
        public Builder tosLink(String tosLink) {
            return tosLink(Output.of(tosLink));
        }

        /**
         * @param tosText Text of the Terms of Service
         * 
         * @return builder
         * 
         */
        public Builder tosText(@Nullable Output<String> tosText) {
            $.tosText = tosText;
            return this;
        }

        /**
         * @param tosText Text of the Terms of Service
         * 
         * @return builder
         * 
         */
        public Builder tosText(String tosText) {
            return tosText(Output.of(tosText));
        }

        public WlanPortalTemplatePortalTemplateArgs build() {
            return $;
        }
    }

}
