// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchDhcpSnoopingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchDhcpSnoopingArgs Empty = new SwitchDhcpSnoopingArgs();

    @Import(name="allNetworks")
    private @Nullable Output<Boolean> allNetworks;

    public Optional<Output<Boolean>> allNetworks() {
        return Optional.ofNullable(this.allNetworks);
    }

    /**
     * Enable for dynamic ARP inspection check
     * 
     */
    @Import(name="enableArpSpoofCheck")
    private @Nullable Output<Boolean> enableArpSpoofCheck;

    /**
     * @return Enable for dynamic ARP inspection check
     * 
     */
    public Optional<Output<Boolean>> enableArpSpoofCheck() {
        return Optional.ofNullable(this.enableArpSpoofCheck);
    }

    /**
     * Enable for check for forging source IP address
     * 
     */
    @Import(name="enableIpSourceGuard")
    private @Nullable Output<Boolean> enableIpSourceGuard;

    /**
     * @return Enable for check for forging source IP address
     * 
     */
    public Optional<Output<Boolean>> enableIpSourceGuard() {
        return Optional.ofNullable(this.enableIpSourceGuard);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * If `allNetworks`==`false`, list of network with DHCP snooping enabled
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return If `allNetworks`==`false`, list of network with DHCP snooping enabled
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    private SwitchDhcpSnoopingArgs() {}

    private SwitchDhcpSnoopingArgs(SwitchDhcpSnoopingArgs $) {
        this.allNetworks = $.allNetworks;
        this.enableArpSpoofCheck = $.enableArpSpoofCheck;
        this.enableIpSourceGuard = $.enableIpSourceGuard;
        this.enabled = $.enabled;
        this.networks = $.networks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchDhcpSnoopingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchDhcpSnoopingArgs $;

        public Builder() {
            $ = new SwitchDhcpSnoopingArgs();
        }

        public Builder(SwitchDhcpSnoopingArgs defaults) {
            $ = new SwitchDhcpSnoopingArgs(Objects.requireNonNull(defaults));
        }

        public Builder allNetworks(@Nullable Output<Boolean> allNetworks) {
            $.allNetworks = allNetworks;
            return this;
        }

        public Builder allNetworks(Boolean allNetworks) {
            return allNetworks(Output.of(allNetworks));
        }

        /**
         * @param enableArpSpoofCheck Enable for dynamic ARP inspection check
         * 
         * @return builder
         * 
         */
        public Builder enableArpSpoofCheck(@Nullable Output<Boolean> enableArpSpoofCheck) {
            $.enableArpSpoofCheck = enableArpSpoofCheck;
            return this;
        }

        /**
         * @param enableArpSpoofCheck Enable for dynamic ARP inspection check
         * 
         * @return builder
         * 
         */
        public Builder enableArpSpoofCheck(Boolean enableArpSpoofCheck) {
            return enableArpSpoofCheck(Output.of(enableArpSpoofCheck));
        }

        /**
         * @param enableIpSourceGuard Enable for check for forging source IP address
         * 
         * @return builder
         * 
         */
        public Builder enableIpSourceGuard(@Nullable Output<Boolean> enableIpSourceGuard) {
            $.enableIpSourceGuard = enableIpSourceGuard;
            return this;
        }

        /**
         * @param enableIpSourceGuard Enable for check for forging source IP address
         * 
         * @return builder
         * 
         */
        public Builder enableIpSourceGuard(Boolean enableIpSourceGuard) {
            return enableIpSourceGuard(Output.of(enableIpSourceGuard));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param networks If `allNetworks`==`false`, list of network with DHCP snooping enabled
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks If `allNetworks`==`false`, list of network with DHCP snooping enabled
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks If `allNetworks`==`false`, list of network with DHCP snooping enabled
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        public SwitchDhcpSnoopingArgs build() {
            return $;
        }
    }

}
