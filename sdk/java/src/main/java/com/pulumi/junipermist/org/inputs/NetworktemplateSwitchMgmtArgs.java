// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.org.inputs.NetworktemplateSwitchMgmtProtectReArgs;
import com.pulumi.junipermist.org.inputs.NetworktemplateSwitchMgmtTacacsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworktemplateSwitchMgmtArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworktemplateSwitchMgmtArgs Empty = new NetworktemplateSwitchMgmtArgs();

    @Import(name="configRevert")
    private @Nullable Output<Integer> configRevert;

    public Optional<Output<Integer>> configRevert() {
        return Optional.ofNullable(this.configRevert);
    }

    /**
     * restrict inbound-traffic to host
     * when enabled, all traffic that is not essential to our operation will be dropped
     * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we&#39;ll make sure it works
     * 
     */
    @Import(name="protectRe")
    private @Nullable Output<NetworktemplateSwitchMgmtProtectReArgs> protectRe;

    /**
     * @return restrict inbound-traffic to host
     * when enabled, all traffic that is not essential to our operation will be dropped
     * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we&#39;ll make sure it works
     * 
     */
    public Optional<Output<NetworktemplateSwitchMgmtProtectReArgs>> protectRe() {
        return Optional.ofNullable(this.protectRe);
    }

    @Import(name="rootPassword")
    private @Nullable Output<String> rootPassword;

    public Optional<Output<String>> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }

    @Import(name="tacacs")
    private @Nullable Output<NetworktemplateSwitchMgmtTacacsArgs> tacacs;

    public Optional<Output<NetworktemplateSwitchMgmtTacacsArgs>> tacacs() {
        return Optional.ofNullable(this.tacacs);
    }

    private NetworktemplateSwitchMgmtArgs() {}

    private NetworktemplateSwitchMgmtArgs(NetworktemplateSwitchMgmtArgs $) {
        this.configRevert = $.configRevert;
        this.protectRe = $.protectRe;
        this.rootPassword = $.rootPassword;
        this.tacacs = $.tacacs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworktemplateSwitchMgmtArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworktemplateSwitchMgmtArgs $;

        public Builder() {
            $ = new NetworktemplateSwitchMgmtArgs();
        }

        public Builder(NetworktemplateSwitchMgmtArgs defaults) {
            $ = new NetworktemplateSwitchMgmtArgs(Objects.requireNonNull(defaults));
        }

        public Builder configRevert(@Nullable Output<Integer> configRevert) {
            $.configRevert = configRevert;
            return this;
        }

        public Builder configRevert(Integer configRevert) {
            return configRevert(Output.of(configRevert));
        }

        /**
         * @param protectRe restrict inbound-traffic to host
         * when enabled, all traffic that is not essential to our operation will be dropped
         * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we&#39;ll make sure it works
         * 
         * @return builder
         * 
         */
        public Builder protectRe(@Nullable Output<NetworktemplateSwitchMgmtProtectReArgs> protectRe) {
            $.protectRe = protectRe;
            return this;
        }

        /**
         * @param protectRe restrict inbound-traffic to host
         * when enabled, all traffic that is not essential to our operation will be dropped
         * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we&#39;ll make sure it works
         * 
         * @return builder
         * 
         */
        public Builder protectRe(NetworktemplateSwitchMgmtProtectReArgs protectRe) {
            return protectRe(Output.of(protectRe));
        }

        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            $.rootPassword = rootPassword;
            return this;
        }

        public Builder rootPassword(String rootPassword) {
            return rootPassword(Output.of(rootPassword));
        }

        public Builder tacacs(@Nullable Output<NetworktemplateSwitchMgmtTacacsArgs> tacacs) {
            $.tacacs = tacacs;
            return this;
        }

        public Builder tacacs(NetworktemplateSwitchMgmtTacacsArgs tacacs) {
            return tacacs(Output.of(tacacs));
        }

        public NetworktemplateSwitchMgmtArgs build() {
            return $;
        }
    }

}
