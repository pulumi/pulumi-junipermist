// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetWlansOrgWlanPortal {
    /**
     * @return Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    private Boolean allowWlanIdRoam;
    /**
     * @return Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    private String amazonClientId;
    /**
     * @return Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    private String amazonClientSecret;
    /**
     * @return Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private List<String> amazonEmailDomains;
    /**
     * @return Whether amazon is enabled as a login method
     * 
     */
    private Boolean amazonEnabled;
    /**
     * @return Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
     * 
     */
    private Integer amazonExpire;
    /**
     * @return authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sms`, `sponsor`, `sso`
     * 
     */
    private String auth;
    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory app client id
     * 
     */
    private String azureClientId;
    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory app client secret
     * 
     */
    private String azureClientSecret;
    /**
     * @return Whether Azure Active Directory is enabled as a login method
     * 
     */
    private Boolean azureEnabled;
    /**
     * @return Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
     * 
     */
    private Integer azureExpire;
    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory tenant id.
     * 
     */
    private String azureTenantId;
    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    private String broadnetPassword;
    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    private String broadnetSid;
    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    private String broadnetUserId;
    /**
     * @return Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
     * 
     */
    private Boolean bypassWhenCloudDown;
    /**
     * @return Required if `sms_provider`==`clickatell`
     * 
     */
    private String clickatellApiKey;
    /**
     * @return Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    private Boolean crossSite;
    /**
     * @return Whether email (access code verification) is enabled as a login method
     * 
     */
    private Boolean emailEnabled;
    /**
     * @return Whether guest portal is enabled
     * 
     */
    private Boolean enabled;
    /**
     * @return How long to remain authorized, in minutes
     * 
     */
    private Integer expire;
    /**
     * @return Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
     * 
     */
    private String externalPortalUrl;
    /**
     * @return Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    private String facebookClientId;
    /**
     * @return Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    private String facebookClientSecret;
    /**
     * @return Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private List<String> facebookEmailDomains;
    /**
     * @return Whether facebook is enabled as a login method
     * 
     */
    private Boolean facebookEnabled;
    /**
     * @return Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
     * 
     */
    private Integer facebookExpire;
    /**
     * @return Whether to forward the user to another URL after authorized
     * 
     */
    private Boolean forward;
    /**
     * @return URL to forward the user to
     * 
     */
    private String forwardUrl;
    /**
     * @return Google OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    private String googleClientId;
    /**
     * @return Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    private String googleClientSecret;
    /**
     * @return Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private List<String> googleEmailDomains;
    /**
     * @return Whether Google is enabled as login method
     * 
     */
    private Boolean googleEnabled;
    /**
     * @return Optional if `google_enabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
     * 
     */
    private Integer googleExpire;
    /**
     * @return Required if `sms_provider`==`gupshup`
     * 
     */
    private String gupshupPassword;
    /**
     * @return Required if `sms_provider`==`gupshup`
     * 
     */
    private String gupshupUserid;
    /**
     * @return Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    private String microsoftClientId;
    /**
     * @return Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    private String microsoftClientSecret;
    /**
     * @return Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private List<String> microsoftEmailDomains;
    /**
     * @return Whether microsoft 365 is enabled as a login method
     * 
     */
    private Boolean microsoftEnabled;
    /**
     * @return Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
     * 
     */
    private Integer microsoftExpire;
    /**
     * @return Whether password is enabled
     * 
     */
    private Boolean passphraseEnabled;
    /**
     * @return Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
     * 
     */
    private Integer passphraseExpire;
    /**
     * @return Required if `passphrase_enabled`==`true`.
     * 
     */
    private String password;
    /**
     * @return Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
     * 
     */
    private Boolean predefinedSponsorsEnabled;
    /**
     * @return Whether to hide sponsorâ€™s email from list of sponsors
     * 
     */
    private Boolean predefinedSponsorsHideEmail;
    private Boolean privacy;
    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    private String puzzelPassword;
    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    private String puzzelServiceId;
    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    private String puzzelUsername;
    /**
     * @return Whether sms is enabled as a login method
     * 
     */
    private Boolean smsEnabled;
    /**
     * @return Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
     * 
     */
    private Integer smsExpire;
    /**
     * @return Optional if `sms_enabled`==`true`. SMS Message format
     * 
     */
    private String smsMessageFormat;
    /**
     * @return Optioanl if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
     * 
     */
    private String smsProvider;
    /**
     * @return Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
     * 
     */
    private Boolean sponsorAutoApprove;
    /**
     * @return List of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
     * 
     */
    private List<String> sponsorEmailDomains;
    /**
     * @return Whether sponsor is enabled
     * 
     */
    private Boolean sponsorEnabled;
    /**
     * @return Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
     * 
     */
    private Integer sponsorExpire;
    private String sponsorLinkValidityDuration;
    /**
     * @return Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
     * 
     */
    private Boolean sponsorNotifyAll;
    /**
     * @return Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor&#39;s action (approve/deny)
     * 
     */
    private Boolean sponsorStatusNotify;
    /**
     * @return object of allowed sponsors email with name. Required if `sponsor_enabled`
     *             is `true` and `sponsor_email_domains` is empty.
     * 
     *             Property key is the sponsor email, Property value is the sponsor name
     * 
     */
    private Map<String,String> sponsors;
    /**
     * @return Optional if `wlan_portal_auth`==`sso`, default role to assign if thereâ€™s no match. By default, an assertion is treated as invalid when thereâ€™s no role matched
     * 
     */
    private String ssoDefaultRole;
    /**
     * @return Optional if `wlan_portal_auth`==`sso`
     * 
     */
    private String ssoForcedRole;
    /**
     * @return Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)
     * 
     */
    private String ssoIdpCert;
    /**
     * @return Optioanl if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
     * 
     */
    private String ssoIdpSignAlgo;
    /**
     * @return Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL
     * 
     */
    private String ssoIdpSsoUrl;
    /**
     * @return Required if `wlan_portal_auth`==`sso`, IDP issuer URL
     * 
     */
    private String ssoIssuer;
    /**
     * @return Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`
     * 
     */
    private String ssoNameidFormat;
    /**
     * @return Required if `sms_provider`==`telstra`, Client ID provided by Telstra
     * 
     */
    private String telstraClientId;
    /**
     * @return Required if `sms_provider`==`telstra`, Client secret provided by Telstra
     * 
     */
    private String telstraClientSecret;
    /**
     * @return Required if `sms_provider`==`twilio`, Auth token account with twilio account
     * 
     */
    private String twilioAuthToken;
    /**
     * @return Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
     * 
     */
    private String twilioPhoneNumber;
    /**
     * @return Required if `sms_provider`==`twilio`, Account SID provided by Twilio
     * 
     */
    private String twilioSid;

    private GetWlansOrgWlanPortal() {}
    /**
     * @return Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    public Boolean allowWlanIdRoam() {
        return this.allowWlanIdRoam;
    }
    /**
     * @return Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    public String amazonClientId() {
        return this.amazonClientId;
    }
    /**
     * @return Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public String amazonClientSecret() {
        return this.amazonClientSecret;
    }
    /**
     * @return Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> amazonEmailDomains() {
        return this.amazonEmailDomains;
    }
    /**
     * @return Whether amazon is enabled as a login method
     * 
     */
    public Boolean amazonEnabled() {
        return this.amazonEnabled;
    }
    /**
     * @return Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
     * 
     */
    public Integer amazonExpire() {
        return this.amazonExpire;
    }
    /**
     * @return authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sms`, `sponsor`, `sso`
     * 
     */
    public String auth() {
        return this.auth;
    }
    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory app client id
     * 
     */
    public String azureClientId() {
        return this.azureClientId;
    }
    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory app client secret
     * 
     */
    public String azureClientSecret() {
        return this.azureClientSecret;
    }
    /**
     * @return Whether Azure Active Directory is enabled as a login method
     * 
     */
    public Boolean azureEnabled() {
        return this.azureEnabled;
    }
    /**
     * @return Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
     * 
     */
    public Integer azureExpire() {
        return this.azureExpire;
    }
    /**
     * @return Required if `azure_enabled`==`true`. Azure active directory tenant id.
     * 
     */
    public String azureTenantId() {
        return this.azureTenantId;
    }
    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    public String broadnetPassword() {
        return this.broadnetPassword;
    }
    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    public String broadnetSid() {
        return this.broadnetSid;
    }
    /**
     * @return Required if `sms_provider`==`broadnet`
     * 
     */
    public String broadnetUserId() {
        return this.broadnetUserId;
    }
    /**
     * @return Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
     * 
     */
    public Boolean bypassWhenCloudDown() {
        return this.bypassWhenCloudDown;
    }
    /**
     * @return Required if `sms_provider`==`clickatell`
     * 
     */
    public String clickatellApiKey() {
        return this.clickatellApiKey;
    }
    /**
     * @return Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    public Boolean crossSite() {
        return this.crossSite;
    }
    /**
     * @return Whether email (access code verification) is enabled as a login method
     * 
     */
    public Boolean emailEnabled() {
        return this.emailEnabled;
    }
    /**
     * @return Whether guest portal is enabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return How long to remain authorized, in minutes
     * 
     */
    public Integer expire() {
        return this.expire;
    }
    /**
     * @return Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
     * 
     */
    public String externalPortalUrl() {
        return this.externalPortalUrl;
    }
    /**
     * @return Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    public String facebookClientId() {
        return this.facebookClientId;
    }
    /**
     * @return Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public String facebookClientSecret() {
        return this.facebookClientSecret;
    }
    /**
     * @return Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> facebookEmailDomains() {
        return this.facebookEmailDomains;
    }
    /**
     * @return Whether facebook is enabled as a login method
     * 
     */
    public Boolean facebookEnabled() {
        return this.facebookEnabled;
    }
    /**
     * @return Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
     * 
     */
    public Integer facebookExpire() {
        return this.facebookExpire;
    }
    /**
     * @return Whether to forward the user to another URL after authorized
     * 
     */
    public Boolean forward() {
        return this.forward;
    }
    /**
     * @return URL to forward the user to
     * 
     */
    public String forwardUrl() {
        return this.forwardUrl;
    }
    /**
     * @return Google OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    public String googleClientId() {
        return this.googleClientId;
    }
    /**
     * @return Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public String googleClientSecret() {
        return this.googleClientSecret;
    }
    /**
     * @return Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> googleEmailDomains() {
        return this.googleEmailDomains;
    }
    /**
     * @return Whether Google is enabled as login method
     * 
     */
    public Boolean googleEnabled() {
        return this.googleEnabled;
    }
    /**
     * @return Optional if `google_enabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
     * 
     */
    public Integer googleExpire() {
        return this.googleExpire;
    }
    /**
     * @return Required if `sms_provider`==`gupshup`
     * 
     */
    public String gupshupPassword() {
        return this.gupshupPassword;
    }
    /**
     * @return Required if `sms_provider`==`gupshup`
     * 
     */
    public String gupshupUserid() {
        return this.gupshupUserid;
    }
    /**
     * @return Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    public String microsoftClientId() {
        return this.microsoftClientId;
    }
    /**
     * @return Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a corresponding value. Else leave blank.
     * 
     */
    public String microsoftClientSecret() {
        return this.microsoftClientSecret;
    }
    /**
     * @return Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> microsoftEmailDomains() {
        return this.microsoftEmailDomains;
    }
    /**
     * @return Whether microsoft 365 is enabled as a login method
     * 
     */
    public Boolean microsoftEnabled() {
        return this.microsoftEnabled;
    }
    /**
     * @return Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
     * 
     */
    public Integer microsoftExpire() {
        return this.microsoftExpire;
    }
    /**
     * @return Whether password is enabled
     * 
     */
    public Boolean passphraseEnabled() {
        return this.passphraseEnabled;
    }
    /**
     * @return Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
     * 
     */
    public Integer passphraseExpire() {
        return this.passphraseExpire;
    }
    /**
     * @return Required if `passphrase_enabled`==`true`.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
     * 
     */
    public Boolean predefinedSponsorsEnabled() {
        return this.predefinedSponsorsEnabled;
    }
    /**
     * @return Whether to hide sponsorâ€™s email from list of sponsors
     * 
     */
    public Boolean predefinedSponsorsHideEmail() {
        return this.predefinedSponsorsHideEmail;
    }
    public Boolean privacy() {
        return this.privacy;
    }
    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    public String puzzelPassword() {
        return this.puzzelPassword;
    }
    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    public String puzzelServiceId() {
        return this.puzzelServiceId;
    }
    /**
     * @return Required if `sms_provider`==`puzzel`
     * 
     */
    public String puzzelUsername() {
        return this.puzzelUsername;
    }
    /**
     * @return Whether sms is enabled as a login method
     * 
     */
    public Boolean smsEnabled() {
        return this.smsEnabled;
    }
    /**
     * @return Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
     * 
     */
    public Integer smsExpire() {
        return this.smsExpire;
    }
    /**
     * @return Optional if `sms_enabled`==`true`. SMS Message format
     * 
     */
    public String smsMessageFormat() {
        return this.smsMessageFormat;
    }
    /**
     * @return Optioanl if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
     * 
     */
    public String smsProvider() {
        return this.smsProvider;
    }
    /**
     * @return Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
     * 
     */
    public Boolean sponsorAutoApprove() {
        return this.sponsorAutoApprove;
    }
    /**
     * @return List of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
     * 
     */
    public List<String> sponsorEmailDomains() {
        return this.sponsorEmailDomains;
    }
    /**
     * @return Whether sponsor is enabled
     * 
     */
    public Boolean sponsorEnabled() {
        return this.sponsorEnabled;
    }
    /**
     * @return Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
     * 
     */
    public Integer sponsorExpire() {
        return this.sponsorExpire;
    }
    public String sponsorLinkValidityDuration() {
        return this.sponsorLinkValidityDuration;
    }
    /**
     * @return Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
     * 
     */
    public Boolean sponsorNotifyAll() {
        return this.sponsorNotifyAll;
    }
    /**
     * @return Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor&#39;s action (approve/deny)
     * 
     */
    public Boolean sponsorStatusNotify() {
        return this.sponsorStatusNotify;
    }
    /**
     * @return object of allowed sponsors email with name. Required if `sponsor_enabled`
     *             is `true` and `sponsor_email_domains` is empty.
     * 
     *             Property key is the sponsor email, Property value is the sponsor name
     * 
     */
    public Map<String,String> sponsors() {
        return this.sponsors;
    }
    /**
     * @return Optional if `wlan_portal_auth`==`sso`, default role to assign if thereâ€™s no match. By default, an assertion is treated as invalid when thereâ€™s no role matched
     * 
     */
    public String ssoDefaultRole() {
        return this.ssoDefaultRole;
    }
    /**
     * @return Optional if `wlan_portal_auth`==`sso`
     * 
     */
    public String ssoForcedRole() {
        return this.ssoForcedRole;
    }
    /**
     * @return Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)
     * 
     */
    public String ssoIdpCert() {
        return this.ssoIdpCert;
    }
    /**
     * @return Optioanl if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
     * 
     */
    public String ssoIdpSignAlgo() {
        return this.ssoIdpSignAlgo;
    }
    /**
     * @return Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL
     * 
     */
    public String ssoIdpSsoUrl() {
        return this.ssoIdpSsoUrl;
    }
    /**
     * @return Required if `wlan_portal_auth`==`sso`, IDP issuer URL
     * 
     */
    public String ssoIssuer() {
        return this.ssoIssuer;
    }
    /**
     * @return Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`
     * 
     */
    public String ssoNameidFormat() {
        return this.ssoNameidFormat;
    }
    /**
     * @return Required if `sms_provider`==`telstra`, Client ID provided by Telstra
     * 
     */
    public String telstraClientId() {
        return this.telstraClientId;
    }
    /**
     * @return Required if `sms_provider`==`telstra`, Client secret provided by Telstra
     * 
     */
    public String telstraClientSecret() {
        return this.telstraClientSecret;
    }
    /**
     * @return Required if `sms_provider`==`twilio`, Auth token account with twilio account
     * 
     */
    public String twilioAuthToken() {
        return this.twilioAuthToken;
    }
    /**
     * @return Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
     * 
     */
    public String twilioPhoneNumber() {
        return this.twilioPhoneNumber;
    }
    /**
     * @return Required if `sms_provider`==`twilio`, Account SID provided by Twilio
     * 
     */
    public String twilioSid() {
        return this.twilioSid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlansOrgWlanPortal defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowWlanIdRoam;
        private String amazonClientId;
        private String amazonClientSecret;
        private List<String> amazonEmailDomains;
        private Boolean amazonEnabled;
        private Integer amazonExpire;
        private String auth;
        private String azureClientId;
        private String azureClientSecret;
        private Boolean azureEnabled;
        private Integer azureExpire;
        private String azureTenantId;
        private String broadnetPassword;
        private String broadnetSid;
        private String broadnetUserId;
        private Boolean bypassWhenCloudDown;
        private String clickatellApiKey;
        private Boolean crossSite;
        private Boolean emailEnabled;
        private Boolean enabled;
        private Integer expire;
        private String externalPortalUrl;
        private String facebookClientId;
        private String facebookClientSecret;
        private List<String> facebookEmailDomains;
        private Boolean facebookEnabled;
        private Integer facebookExpire;
        private Boolean forward;
        private String forwardUrl;
        private String googleClientId;
        private String googleClientSecret;
        private List<String> googleEmailDomains;
        private Boolean googleEnabled;
        private Integer googleExpire;
        private String gupshupPassword;
        private String gupshupUserid;
        private String microsoftClientId;
        private String microsoftClientSecret;
        private List<String> microsoftEmailDomains;
        private Boolean microsoftEnabled;
        private Integer microsoftExpire;
        private Boolean passphraseEnabled;
        private Integer passphraseExpire;
        private String password;
        private Boolean predefinedSponsorsEnabled;
        private Boolean predefinedSponsorsHideEmail;
        private Boolean privacy;
        private String puzzelPassword;
        private String puzzelServiceId;
        private String puzzelUsername;
        private Boolean smsEnabled;
        private Integer smsExpire;
        private String smsMessageFormat;
        private String smsProvider;
        private Boolean sponsorAutoApprove;
        private List<String> sponsorEmailDomains;
        private Boolean sponsorEnabled;
        private Integer sponsorExpire;
        private String sponsorLinkValidityDuration;
        private Boolean sponsorNotifyAll;
        private Boolean sponsorStatusNotify;
        private Map<String,String> sponsors;
        private String ssoDefaultRole;
        private String ssoForcedRole;
        private String ssoIdpCert;
        private String ssoIdpSignAlgo;
        private String ssoIdpSsoUrl;
        private String ssoIssuer;
        private String ssoNameidFormat;
        private String telstraClientId;
        private String telstraClientSecret;
        private String twilioAuthToken;
        private String twilioPhoneNumber;
        private String twilioSid;
        public Builder() {}
        public Builder(GetWlansOrgWlanPortal defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowWlanIdRoam = defaults.allowWlanIdRoam;
    	      this.amazonClientId = defaults.amazonClientId;
    	      this.amazonClientSecret = defaults.amazonClientSecret;
    	      this.amazonEmailDomains = defaults.amazonEmailDomains;
    	      this.amazonEnabled = defaults.amazonEnabled;
    	      this.amazonExpire = defaults.amazonExpire;
    	      this.auth = defaults.auth;
    	      this.azureClientId = defaults.azureClientId;
    	      this.azureClientSecret = defaults.azureClientSecret;
    	      this.azureEnabled = defaults.azureEnabled;
    	      this.azureExpire = defaults.azureExpire;
    	      this.azureTenantId = defaults.azureTenantId;
    	      this.broadnetPassword = defaults.broadnetPassword;
    	      this.broadnetSid = defaults.broadnetSid;
    	      this.broadnetUserId = defaults.broadnetUserId;
    	      this.bypassWhenCloudDown = defaults.bypassWhenCloudDown;
    	      this.clickatellApiKey = defaults.clickatellApiKey;
    	      this.crossSite = defaults.crossSite;
    	      this.emailEnabled = defaults.emailEnabled;
    	      this.enabled = defaults.enabled;
    	      this.expire = defaults.expire;
    	      this.externalPortalUrl = defaults.externalPortalUrl;
    	      this.facebookClientId = defaults.facebookClientId;
    	      this.facebookClientSecret = defaults.facebookClientSecret;
    	      this.facebookEmailDomains = defaults.facebookEmailDomains;
    	      this.facebookEnabled = defaults.facebookEnabled;
    	      this.facebookExpire = defaults.facebookExpire;
    	      this.forward = defaults.forward;
    	      this.forwardUrl = defaults.forwardUrl;
    	      this.googleClientId = defaults.googleClientId;
    	      this.googleClientSecret = defaults.googleClientSecret;
    	      this.googleEmailDomains = defaults.googleEmailDomains;
    	      this.googleEnabled = defaults.googleEnabled;
    	      this.googleExpire = defaults.googleExpire;
    	      this.gupshupPassword = defaults.gupshupPassword;
    	      this.gupshupUserid = defaults.gupshupUserid;
    	      this.microsoftClientId = defaults.microsoftClientId;
    	      this.microsoftClientSecret = defaults.microsoftClientSecret;
    	      this.microsoftEmailDomains = defaults.microsoftEmailDomains;
    	      this.microsoftEnabled = defaults.microsoftEnabled;
    	      this.microsoftExpire = defaults.microsoftExpire;
    	      this.passphraseEnabled = defaults.passphraseEnabled;
    	      this.passphraseExpire = defaults.passphraseExpire;
    	      this.password = defaults.password;
    	      this.predefinedSponsorsEnabled = defaults.predefinedSponsorsEnabled;
    	      this.predefinedSponsorsHideEmail = defaults.predefinedSponsorsHideEmail;
    	      this.privacy = defaults.privacy;
    	      this.puzzelPassword = defaults.puzzelPassword;
    	      this.puzzelServiceId = defaults.puzzelServiceId;
    	      this.puzzelUsername = defaults.puzzelUsername;
    	      this.smsEnabled = defaults.smsEnabled;
    	      this.smsExpire = defaults.smsExpire;
    	      this.smsMessageFormat = defaults.smsMessageFormat;
    	      this.smsProvider = defaults.smsProvider;
    	      this.sponsorAutoApprove = defaults.sponsorAutoApprove;
    	      this.sponsorEmailDomains = defaults.sponsorEmailDomains;
    	      this.sponsorEnabled = defaults.sponsorEnabled;
    	      this.sponsorExpire = defaults.sponsorExpire;
    	      this.sponsorLinkValidityDuration = defaults.sponsorLinkValidityDuration;
    	      this.sponsorNotifyAll = defaults.sponsorNotifyAll;
    	      this.sponsorStatusNotify = defaults.sponsorStatusNotify;
    	      this.sponsors = defaults.sponsors;
    	      this.ssoDefaultRole = defaults.ssoDefaultRole;
    	      this.ssoForcedRole = defaults.ssoForcedRole;
    	      this.ssoIdpCert = defaults.ssoIdpCert;
    	      this.ssoIdpSignAlgo = defaults.ssoIdpSignAlgo;
    	      this.ssoIdpSsoUrl = defaults.ssoIdpSsoUrl;
    	      this.ssoIssuer = defaults.ssoIssuer;
    	      this.ssoNameidFormat = defaults.ssoNameidFormat;
    	      this.telstraClientId = defaults.telstraClientId;
    	      this.telstraClientSecret = defaults.telstraClientSecret;
    	      this.twilioAuthToken = defaults.twilioAuthToken;
    	      this.twilioPhoneNumber = defaults.twilioPhoneNumber;
    	      this.twilioSid = defaults.twilioSid;
        }

        @CustomType.Setter
        public Builder allowWlanIdRoam(Boolean allowWlanIdRoam) {
            if (allowWlanIdRoam == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "allowWlanIdRoam");
            }
            this.allowWlanIdRoam = allowWlanIdRoam;
            return this;
        }
        @CustomType.Setter
        public Builder amazonClientId(String amazonClientId) {
            if (amazonClientId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "amazonClientId");
            }
            this.amazonClientId = amazonClientId;
            return this;
        }
        @CustomType.Setter
        public Builder amazonClientSecret(String amazonClientSecret) {
            if (amazonClientSecret == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "amazonClientSecret");
            }
            this.amazonClientSecret = amazonClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder amazonEmailDomains(List<String> amazonEmailDomains) {
            if (amazonEmailDomains == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "amazonEmailDomains");
            }
            this.amazonEmailDomains = amazonEmailDomains;
            return this;
        }
        public Builder amazonEmailDomains(String... amazonEmailDomains) {
            return amazonEmailDomains(List.of(amazonEmailDomains));
        }
        @CustomType.Setter
        public Builder amazonEnabled(Boolean amazonEnabled) {
            if (amazonEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "amazonEnabled");
            }
            this.amazonEnabled = amazonEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder amazonExpire(Integer amazonExpire) {
            if (amazonExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "amazonExpire");
            }
            this.amazonExpire = amazonExpire;
            return this;
        }
        @CustomType.Setter
        public Builder auth(String auth) {
            if (auth == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "auth");
            }
            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder azureClientId(String azureClientId) {
            if (azureClientId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "azureClientId");
            }
            this.azureClientId = azureClientId;
            return this;
        }
        @CustomType.Setter
        public Builder azureClientSecret(String azureClientSecret) {
            if (azureClientSecret == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "azureClientSecret");
            }
            this.azureClientSecret = azureClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder azureEnabled(Boolean azureEnabled) {
            if (azureEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "azureEnabled");
            }
            this.azureEnabled = azureEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder azureExpire(Integer azureExpire) {
            if (azureExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "azureExpire");
            }
            this.azureExpire = azureExpire;
            return this;
        }
        @CustomType.Setter
        public Builder azureTenantId(String azureTenantId) {
            if (azureTenantId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "azureTenantId");
            }
            this.azureTenantId = azureTenantId;
            return this;
        }
        @CustomType.Setter
        public Builder broadnetPassword(String broadnetPassword) {
            if (broadnetPassword == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "broadnetPassword");
            }
            this.broadnetPassword = broadnetPassword;
            return this;
        }
        @CustomType.Setter
        public Builder broadnetSid(String broadnetSid) {
            if (broadnetSid == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "broadnetSid");
            }
            this.broadnetSid = broadnetSid;
            return this;
        }
        @CustomType.Setter
        public Builder broadnetUserId(String broadnetUserId) {
            if (broadnetUserId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "broadnetUserId");
            }
            this.broadnetUserId = broadnetUserId;
            return this;
        }
        @CustomType.Setter
        public Builder bypassWhenCloudDown(Boolean bypassWhenCloudDown) {
            if (bypassWhenCloudDown == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "bypassWhenCloudDown");
            }
            this.bypassWhenCloudDown = bypassWhenCloudDown;
            return this;
        }
        @CustomType.Setter
        public Builder clickatellApiKey(String clickatellApiKey) {
            if (clickatellApiKey == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "clickatellApiKey");
            }
            this.clickatellApiKey = clickatellApiKey;
            return this;
        }
        @CustomType.Setter
        public Builder crossSite(Boolean crossSite) {
            if (crossSite == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "crossSite");
            }
            this.crossSite = crossSite;
            return this;
        }
        @CustomType.Setter
        public Builder emailEnabled(Boolean emailEnabled) {
            if (emailEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "emailEnabled");
            }
            this.emailEnabled = emailEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder expire(Integer expire) {
            if (expire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "expire");
            }
            this.expire = expire;
            return this;
        }
        @CustomType.Setter
        public Builder externalPortalUrl(String externalPortalUrl) {
            if (externalPortalUrl == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "externalPortalUrl");
            }
            this.externalPortalUrl = externalPortalUrl;
            return this;
        }
        @CustomType.Setter
        public Builder facebookClientId(String facebookClientId) {
            if (facebookClientId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "facebookClientId");
            }
            this.facebookClientId = facebookClientId;
            return this;
        }
        @CustomType.Setter
        public Builder facebookClientSecret(String facebookClientSecret) {
            if (facebookClientSecret == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "facebookClientSecret");
            }
            this.facebookClientSecret = facebookClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder facebookEmailDomains(List<String> facebookEmailDomains) {
            if (facebookEmailDomains == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "facebookEmailDomains");
            }
            this.facebookEmailDomains = facebookEmailDomains;
            return this;
        }
        public Builder facebookEmailDomains(String... facebookEmailDomains) {
            return facebookEmailDomains(List.of(facebookEmailDomains));
        }
        @CustomType.Setter
        public Builder facebookEnabled(Boolean facebookEnabled) {
            if (facebookEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "facebookEnabled");
            }
            this.facebookEnabled = facebookEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder facebookExpire(Integer facebookExpire) {
            if (facebookExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "facebookExpire");
            }
            this.facebookExpire = facebookExpire;
            return this;
        }
        @CustomType.Setter
        public Builder forward(Boolean forward) {
            if (forward == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "forward");
            }
            this.forward = forward;
            return this;
        }
        @CustomType.Setter
        public Builder forwardUrl(String forwardUrl) {
            if (forwardUrl == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "forwardUrl");
            }
            this.forwardUrl = forwardUrl;
            return this;
        }
        @CustomType.Setter
        public Builder googleClientId(String googleClientId) {
            if (googleClientId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "googleClientId");
            }
            this.googleClientId = googleClientId;
            return this;
        }
        @CustomType.Setter
        public Builder googleClientSecret(String googleClientSecret) {
            if (googleClientSecret == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "googleClientSecret");
            }
            this.googleClientSecret = googleClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder googleEmailDomains(List<String> googleEmailDomains) {
            if (googleEmailDomains == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "googleEmailDomains");
            }
            this.googleEmailDomains = googleEmailDomains;
            return this;
        }
        public Builder googleEmailDomains(String... googleEmailDomains) {
            return googleEmailDomains(List.of(googleEmailDomains));
        }
        @CustomType.Setter
        public Builder googleEnabled(Boolean googleEnabled) {
            if (googleEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "googleEnabled");
            }
            this.googleEnabled = googleEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder googleExpire(Integer googleExpire) {
            if (googleExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "googleExpire");
            }
            this.googleExpire = googleExpire;
            return this;
        }
        @CustomType.Setter
        public Builder gupshupPassword(String gupshupPassword) {
            if (gupshupPassword == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "gupshupPassword");
            }
            this.gupshupPassword = gupshupPassword;
            return this;
        }
        @CustomType.Setter
        public Builder gupshupUserid(String gupshupUserid) {
            if (gupshupUserid == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "gupshupUserid");
            }
            this.gupshupUserid = gupshupUserid;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftClientId(String microsoftClientId) {
            if (microsoftClientId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "microsoftClientId");
            }
            this.microsoftClientId = microsoftClientId;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftClientSecret(String microsoftClientSecret) {
            if (microsoftClientSecret == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "microsoftClientSecret");
            }
            this.microsoftClientSecret = microsoftClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftEmailDomains(List<String> microsoftEmailDomains) {
            if (microsoftEmailDomains == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "microsoftEmailDomains");
            }
            this.microsoftEmailDomains = microsoftEmailDomains;
            return this;
        }
        public Builder microsoftEmailDomains(String... microsoftEmailDomains) {
            return microsoftEmailDomains(List.of(microsoftEmailDomains));
        }
        @CustomType.Setter
        public Builder microsoftEnabled(Boolean microsoftEnabled) {
            if (microsoftEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "microsoftEnabled");
            }
            this.microsoftEnabled = microsoftEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftExpire(Integer microsoftExpire) {
            if (microsoftExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "microsoftExpire");
            }
            this.microsoftExpire = microsoftExpire;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseEnabled(Boolean passphraseEnabled) {
            if (passphraseEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "passphraseEnabled");
            }
            this.passphraseEnabled = passphraseEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseExpire(Integer passphraseExpire) {
            if (passphraseExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "passphraseExpire");
            }
            this.passphraseExpire = passphraseExpire;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder predefinedSponsorsEnabled(Boolean predefinedSponsorsEnabled) {
            if (predefinedSponsorsEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "predefinedSponsorsEnabled");
            }
            this.predefinedSponsorsEnabled = predefinedSponsorsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder predefinedSponsorsHideEmail(Boolean predefinedSponsorsHideEmail) {
            if (predefinedSponsorsHideEmail == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "predefinedSponsorsHideEmail");
            }
            this.predefinedSponsorsHideEmail = predefinedSponsorsHideEmail;
            return this;
        }
        @CustomType.Setter
        public Builder privacy(Boolean privacy) {
            if (privacy == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "privacy");
            }
            this.privacy = privacy;
            return this;
        }
        @CustomType.Setter
        public Builder puzzelPassword(String puzzelPassword) {
            if (puzzelPassword == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "puzzelPassword");
            }
            this.puzzelPassword = puzzelPassword;
            return this;
        }
        @CustomType.Setter
        public Builder puzzelServiceId(String puzzelServiceId) {
            if (puzzelServiceId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "puzzelServiceId");
            }
            this.puzzelServiceId = puzzelServiceId;
            return this;
        }
        @CustomType.Setter
        public Builder puzzelUsername(String puzzelUsername) {
            if (puzzelUsername == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "puzzelUsername");
            }
            this.puzzelUsername = puzzelUsername;
            return this;
        }
        @CustomType.Setter
        public Builder smsEnabled(Boolean smsEnabled) {
            if (smsEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "smsEnabled");
            }
            this.smsEnabled = smsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder smsExpire(Integer smsExpire) {
            if (smsExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "smsExpire");
            }
            this.smsExpire = smsExpire;
            return this;
        }
        @CustomType.Setter
        public Builder smsMessageFormat(String smsMessageFormat) {
            if (smsMessageFormat == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "smsMessageFormat");
            }
            this.smsMessageFormat = smsMessageFormat;
            return this;
        }
        @CustomType.Setter
        public Builder smsProvider(String smsProvider) {
            if (smsProvider == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "smsProvider");
            }
            this.smsProvider = smsProvider;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorAutoApprove(Boolean sponsorAutoApprove) {
            if (sponsorAutoApprove == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsorAutoApprove");
            }
            this.sponsorAutoApprove = sponsorAutoApprove;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorEmailDomains(List<String> sponsorEmailDomains) {
            if (sponsorEmailDomains == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsorEmailDomains");
            }
            this.sponsorEmailDomains = sponsorEmailDomains;
            return this;
        }
        public Builder sponsorEmailDomains(String... sponsorEmailDomains) {
            return sponsorEmailDomains(List.of(sponsorEmailDomains));
        }
        @CustomType.Setter
        public Builder sponsorEnabled(Boolean sponsorEnabled) {
            if (sponsorEnabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsorEnabled");
            }
            this.sponsorEnabled = sponsorEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorExpire(Integer sponsorExpire) {
            if (sponsorExpire == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsorExpire");
            }
            this.sponsorExpire = sponsorExpire;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorLinkValidityDuration(String sponsorLinkValidityDuration) {
            if (sponsorLinkValidityDuration == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsorLinkValidityDuration");
            }
            this.sponsorLinkValidityDuration = sponsorLinkValidityDuration;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorNotifyAll(Boolean sponsorNotifyAll) {
            if (sponsorNotifyAll == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsorNotifyAll");
            }
            this.sponsorNotifyAll = sponsorNotifyAll;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorStatusNotify(Boolean sponsorStatusNotify) {
            if (sponsorStatusNotify == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsorStatusNotify");
            }
            this.sponsorStatusNotify = sponsorStatusNotify;
            return this;
        }
        @CustomType.Setter
        public Builder sponsors(Map<String,String> sponsors) {
            if (sponsors == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "sponsors");
            }
            this.sponsors = sponsors;
            return this;
        }
        @CustomType.Setter
        public Builder ssoDefaultRole(String ssoDefaultRole) {
            if (ssoDefaultRole == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "ssoDefaultRole");
            }
            this.ssoDefaultRole = ssoDefaultRole;
            return this;
        }
        @CustomType.Setter
        public Builder ssoForcedRole(String ssoForcedRole) {
            if (ssoForcedRole == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "ssoForcedRole");
            }
            this.ssoForcedRole = ssoForcedRole;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIdpCert(String ssoIdpCert) {
            if (ssoIdpCert == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "ssoIdpCert");
            }
            this.ssoIdpCert = ssoIdpCert;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIdpSignAlgo(String ssoIdpSignAlgo) {
            if (ssoIdpSignAlgo == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "ssoIdpSignAlgo");
            }
            this.ssoIdpSignAlgo = ssoIdpSignAlgo;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIdpSsoUrl(String ssoIdpSsoUrl) {
            if (ssoIdpSsoUrl == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "ssoIdpSsoUrl");
            }
            this.ssoIdpSsoUrl = ssoIdpSsoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIssuer(String ssoIssuer) {
            if (ssoIssuer == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "ssoIssuer");
            }
            this.ssoIssuer = ssoIssuer;
            return this;
        }
        @CustomType.Setter
        public Builder ssoNameidFormat(String ssoNameidFormat) {
            if (ssoNameidFormat == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "ssoNameidFormat");
            }
            this.ssoNameidFormat = ssoNameidFormat;
            return this;
        }
        @CustomType.Setter
        public Builder telstraClientId(String telstraClientId) {
            if (telstraClientId == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "telstraClientId");
            }
            this.telstraClientId = telstraClientId;
            return this;
        }
        @CustomType.Setter
        public Builder telstraClientSecret(String telstraClientSecret) {
            if (telstraClientSecret == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "telstraClientSecret");
            }
            this.telstraClientSecret = telstraClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder twilioAuthToken(String twilioAuthToken) {
            if (twilioAuthToken == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "twilioAuthToken");
            }
            this.twilioAuthToken = twilioAuthToken;
            return this;
        }
        @CustomType.Setter
        public Builder twilioPhoneNumber(String twilioPhoneNumber) {
            if (twilioPhoneNumber == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "twilioPhoneNumber");
            }
            this.twilioPhoneNumber = twilioPhoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder twilioSid(String twilioSid) {
            if (twilioSid == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanPortal", "twilioSid");
            }
            this.twilioSid = twilioSid;
            return this;
        }
        public GetWlansOrgWlanPortal build() {
            final var _resultValue = new GetWlansOrgWlanPortal();
            _resultValue.allowWlanIdRoam = allowWlanIdRoam;
            _resultValue.amazonClientId = amazonClientId;
            _resultValue.amazonClientSecret = amazonClientSecret;
            _resultValue.amazonEmailDomains = amazonEmailDomains;
            _resultValue.amazonEnabled = amazonEnabled;
            _resultValue.amazonExpire = amazonExpire;
            _resultValue.auth = auth;
            _resultValue.azureClientId = azureClientId;
            _resultValue.azureClientSecret = azureClientSecret;
            _resultValue.azureEnabled = azureEnabled;
            _resultValue.azureExpire = azureExpire;
            _resultValue.azureTenantId = azureTenantId;
            _resultValue.broadnetPassword = broadnetPassword;
            _resultValue.broadnetSid = broadnetSid;
            _resultValue.broadnetUserId = broadnetUserId;
            _resultValue.bypassWhenCloudDown = bypassWhenCloudDown;
            _resultValue.clickatellApiKey = clickatellApiKey;
            _resultValue.crossSite = crossSite;
            _resultValue.emailEnabled = emailEnabled;
            _resultValue.enabled = enabled;
            _resultValue.expire = expire;
            _resultValue.externalPortalUrl = externalPortalUrl;
            _resultValue.facebookClientId = facebookClientId;
            _resultValue.facebookClientSecret = facebookClientSecret;
            _resultValue.facebookEmailDomains = facebookEmailDomains;
            _resultValue.facebookEnabled = facebookEnabled;
            _resultValue.facebookExpire = facebookExpire;
            _resultValue.forward = forward;
            _resultValue.forwardUrl = forwardUrl;
            _resultValue.googleClientId = googleClientId;
            _resultValue.googleClientSecret = googleClientSecret;
            _resultValue.googleEmailDomains = googleEmailDomains;
            _resultValue.googleEnabled = googleEnabled;
            _resultValue.googleExpire = googleExpire;
            _resultValue.gupshupPassword = gupshupPassword;
            _resultValue.gupshupUserid = gupshupUserid;
            _resultValue.microsoftClientId = microsoftClientId;
            _resultValue.microsoftClientSecret = microsoftClientSecret;
            _resultValue.microsoftEmailDomains = microsoftEmailDomains;
            _resultValue.microsoftEnabled = microsoftEnabled;
            _resultValue.microsoftExpire = microsoftExpire;
            _resultValue.passphraseEnabled = passphraseEnabled;
            _resultValue.passphraseExpire = passphraseExpire;
            _resultValue.password = password;
            _resultValue.predefinedSponsorsEnabled = predefinedSponsorsEnabled;
            _resultValue.predefinedSponsorsHideEmail = predefinedSponsorsHideEmail;
            _resultValue.privacy = privacy;
            _resultValue.puzzelPassword = puzzelPassword;
            _resultValue.puzzelServiceId = puzzelServiceId;
            _resultValue.puzzelUsername = puzzelUsername;
            _resultValue.smsEnabled = smsEnabled;
            _resultValue.smsExpire = smsExpire;
            _resultValue.smsMessageFormat = smsMessageFormat;
            _resultValue.smsProvider = smsProvider;
            _resultValue.sponsorAutoApprove = sponsorAutoApprove;
            _resultValue.sponsorEmailDomains = sponsorEmailDomains;
            _resultValue.sponsorEnabled = sponsorEnabled;
            _resultValue.sponsorExpire = sponsorExpire;
            _resultValue.sponsorLinkValidityDuration = sponsorLinkValidityDuration;
            _resultValue.sponsorNotifyAll = sponsorNotifyAll;
            _resultValue.sponsorStatusNotify = sponsorStatusNotify;
            _resultValue.sponsors = sponsors;
            _resultValue.ssoDefaultRole = ssoDefaultRole;
            _resultValue.ssoForcedRole = ssoForcedRole;
            _resultValue.ssoIdpCert = ssoIdpCert;
            _resultValue.ssoIdpSignAlgo = ssoIdpSignAlgo;
            _resultValue.ssoIdpSsoUrl = ssoIdpSsoUrl;
            _resultValue.ssoIssuer = ssoIssuer;
            _resultValue.ssoNameidFormat = ssoNameidFormat;
            _resultValue.telstraClientId = telstraClientId;
            _resultValue.telstraClientSecret = telstraClientSecret;
            _resultValue.twilioAuthToken = twilioAuthToken;
            _resultValue.twilioPhoneNumber = twilioPhoneNumber;
            _resultValue.twilioSid = twilioSid;
            return _resultValue;
        }
    }
}
