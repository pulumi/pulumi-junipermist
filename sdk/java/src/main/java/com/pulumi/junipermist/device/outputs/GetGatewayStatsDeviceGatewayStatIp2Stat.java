// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGatewayStatsDeviceGatewayStatIp2Stat {
    private String dhcpServer;
    private List<String> dns;
    private List<String> dnsSuffixes;
    private String gateway;
    private String gateway6;
    private String ip;
    private String ip6;
    private Map<String,String> ips;
    private String netmask;
    private String netmask6;

    private GetGatewayStatsDeviceGatewayStatIp2Stat() {}
    public String dhcpServer() {
        return this.dhcpServer;
    }
    public List<String> dns() {
        return this.dns;
    }
    public List<String> dnsSuffixes() {
        return this.dnsSuffixes;
    }
    public String gateway() {
        return this.gateway;
    }
    public String gateway6() {
        return this.gateway6;
    }
    public String ip() {
        return this.ip;
    }
    public String ip6() {
        return this.ip6;
    }
    public Map<String,String> ips() {
        return this.ips;
    }
    public String netmask() {
        return this.netmask;
    }
    public String netmask6() {
        return this.netmask6;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayStatsDeviceGatewayStatIp2Stat defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dhcpServer;
        private List<String> dns;
        private List<String> dnsSuffixes;
        private String gateway;
        private String gateway6;
        private String ip;
        private String ip6;
        private Map<String,String> ips;
        private String netmask;
        private String netmask6;
        public Builder() {}
        public Builder(GetGatewayStatsDeviceGatewayStatIp2Stat defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcpServer = defaults.dhcpServer;
    	      this.dns = defaults.dns;
    	      this.dnsSuffixes = defaults.dnsSuffixes;
    	      this.gateway = defaults.gateway;
    	      this.gateway6 = defaults.gateway6;
    	      this.ip = defaults.ip;
    	      this.ip6 = defaults.ip6;
    	      this.ips = defaults.ips;
    	      this.netmask = defaults.netmask;
    	      this.netmask6 = defaults.netmask6;
        }

        @CustomType.Setter
        public Builder dhcpServer(String dhcpServer) {
            if (dhcpServer == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "dhcpServer");
            }
            this.dhcpServer = dhcpServer;
            return this;
        }
        @CustomType.Setter
        public Builder dns(List<String> dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "dns");
            }
            this.dns = dns;
            return this;
        }
        public Builder dns(String... dns) {
            return dns(List.of(dns));
        }
        @CustomType.Setter
        public Builder dnsSuffixes(List<String> dnsSuffixes) {
            if (dnsSuffixes == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "dnsSuffixes");
            }
            this.dnsSuffixes = dnsSuffixes;
            return this;
        }
        public Builder dnsSuffixes(String... dnsSuffixes) {
            return dnsSuffixes(List.of(dnsSuffixes));
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder gateway6(String gateway6) {
            if (gateway6 == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "gateway6");
            }
            this.gateway6 = gateway6;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder ip6(String ip6) {
            if (ip6 == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "ip6");
            }
            this.ip6 = ip6;
            return this;
        }
        @CustomType.Setter
        public Builder ips(Map<String,String> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "ips");
            }
            this.ips = ips;
            return this;
        }
        @CustomType.Setter
        public Builder netmask(String netmask) {
            if (netmask == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "netmask");
            }
            this.netmask = netmask;
            return this;
        }
        @CustomType.Setter
        public Builder netmask6(String netmask6) {
            if (netmask6 == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatIp2Stat", "netmask6");
            }
            this.netmask6 = netmask6;
            return this;
        }
        public GetGatewayStatsDeviceGatewayStatIp2Stat build() {
            final var _resultValue = new GetGatewayStatsDeviceGatewayStatIp2Stat();
            _resultValue.dhcpServer = dhcpServer;
            _resultValue.dns = dns;
            _resultValue.dnsSuffixes = dnsSuffixes;
            _resultValue.gateway = gateway;
            _resultValue.gateway6 = gateway6;
            _resultValue.ip = ip;
            _resultValue.ip6 = ip6;
            _resultValue.ips = ips;
            _resultValue.netmask = netmask;
            _resultValue.netmask6 = netmask6;
            return _resultValue;
        }
    }
}
