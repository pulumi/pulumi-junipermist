// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WlanPortal {
    /**
     * @return amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    private @Nullable String amazonClientId;
    /**
     * @return amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    private @Nullable String amazonClientSecret;
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private @Nullable List<String> amazonEmailDomains;
    /**
     * @return whether amazon is enabled as a login method
     * 
     */
    private @Nullable Boolean amazonEnabled;
    /**
     * @return interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
     * 
     */
    private @Nullable Double amazonExpire;
    /**
     * @return authentication scheme. enum: `external`, `none`, `sso`
     * 
     */
    private @Nullable String auth;
    /**
     * @return Required if `azure_enabled`==`true`.
     * Azure active directory app client id
     * 
     */
    private @Nullable String azureClientId;
    /**
     * @return Required if `azure_enabled`==`true`.
     * Azure active directory app client secret
     * 
     */
    private @Nullable String azureClientSecret;
    /**
     * @return whether Azure Active Directory is enabled as a login method
     * 
     */
    private @Nullable Boolean azureEnabled;
    /**
     * @return interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
     * 
     */
    private @Nullable Double azureExpire;
    /**
     * @return Required if `azure_enabled`==`true`.
     * Azure active directory tenant id.
     * 
     */
    private @Nullable String azureTenantId;
    /**
     * @return when `sms_provider`==`broadnet`
     * 
     */
    private @Nullable String broadnetPassword;
    /**
     * @return when `sms_provider`==`broadnet`
     * 
     */
    private @Nullable String broadnetSid;
    /**
     * @return when `sms_provider`==`broadnet`
     * 
     */
    private @Nullable String broadnetUserId;
    /**
     * @return whether to bypass the guest portal when cloud not reachable (and apply the default policies)
     * 
     */
    private @Nullable Boolean bypassWhenCloudDown;
    /**
     * @return when `sms_provider`==`clickatell`
     * 
     */
    private @Nullable String clickatellApiKey;
    /**
     * @return whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    private @Nullable Boolean crossSite;
    /**
     * @return whether email (access code verification) is enabled as a login method
     * 
     */
    private @Nullable Boolean emailEnabled;
    /**
     * @return whether guest portal is enabled
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return how long to remain authorized, in minutes
     * 
     */
    private @Nullable Double expire;
    /**
     * @return external portal URL (e.g. https://host/url) where we can append our query parameters to
     * 
     */
    private @Nullable String externalPortalUrl;
    /**
     * @return Required if `facebook_enabled`==`true`.
     * Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    private @Nullable String facebookClientId;
    /**
     * @return Required if `facebook_enabled`==`true`.
     * Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    private @Nullable String facebookClientSecret;
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private @Nullable List<String> facebookEmailDomains;
    /**
     * @return whether facebook is enabled as a login method
     * 
     */
    private @Nullable Boolean facebookEnabled;
    /**
     * @return interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
     * 
     */
    private @Nullable Double facebookExpire;
    /**
     * @return whether to forward the user to another URL after authorized
     * 
     */
    private @Nullable Boolean forward;
    /**
     * @return the URL to forward the user to
     * 
     */
    private @Nullable String forwardUrl;
    /**
     * @return Google OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    private @Nullable String googleClientId;
    /**
     * @return Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    private @Nullable String googleClientSecret;
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private @Nullable List<String> googleEmailDomains;
    /**
     * @return whether google is enabled as login method
     * 
     */
    private @Nullable Boolean googleEnabled;
    /**
     * @return interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
     * 
     */
    private @Nullable Double googleExpire;
    /**
     * @return when `sms_provider`==`gupshup`
     * 
     */
    private @Nullable String gupshupPassword;
    /**
     * @return when `sms_provider`==`gupshup`
     * 
     */
    private @Nullable String gupshupUserid;
    /**
     * @return microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    private @Nullable String microsoftClientId;
    /**
     * @return microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    private @Nullable String microsoftClientSecret;
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    private @Nullable List<String> microsoftEmailDomains;
    /**
     * @return whether microsoft 365 is enabled as a login method
     * 
     */
    private @Nullable Boolean microsoftEnabled;
    /**
     * @return interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
     * 
     */
    private @Nullable Double microsoftExpire;
    /**
     * @return whether password is enabled
     * 
     */
    private @Nullable Boolean passphraseEnabled;
    /**
     * @return interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
     * 
     */
    private @Nullable Double passphraseExpire;
    /**
     * @return passphrase
     * 
     */
    private @Nullable String password;
    /**
     * @return whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
     * 
     */
    private @Nullable Boolean predefinedSponsorsEnabled;
    private @Nullable Boolean privacy;
    /**
     * @return when `sms_provider`==`puzzel`
     * 
     */
    private @Nullable String puzzelPassword;
    /**
     * @return when `sms_provider`==`puzzel`
     * 
     */
    private @Nullable String puzzelServiceId;
    /**
     * @return when `sms_provider`==`puzzel`
     * 
     */
    private @Nullable String puzzelUsername;
    /**
     * @return whether sms is enabled as a login method
     * 
     */
    private @Nullable Boolean smsEnabled;
    /**
     * @return interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
     * 
     */
    private @Nullable Double smsExpire;
    private @Nullable String smsMessageFormat;
    /**
     * @return enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
     * 
     */
    private @Nullable String smsProvider;
    /**
     * @return whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
     * 
     */
    private @Nullable Boolean sponsorAutoApprove;
    /**
     * @return list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
     * 
     */
    private @Nullable List<String> sponsorEmailDomains;
    /**
     * @return whether sponsor is enabled
     * 
     */
    private @Nullable Boolean sponsorEnabled;
    /**
     * @return interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
     * 
     */
    private @Nullable Double sponsorExpire;
    /**
     * @return how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
     * 
     */
    private @Nullable Integer sponsorLinkValidityDuration;
    /**
     * @return whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
     * 
     */
    private @Nullable Boolean sponsorNotifyAll;
    /**
     * @return if enabled, guest will get email about sponsor&#39;s action (approve/deny)
     * 
     */
    private @Nullable Boolean sponsorStatusNotify;
    /**
     * @return object of allowed sponsors email with name. Required if `sponsor_enabled` is `true` and `sponsor_email_domains` is empty.
     * Property key is the sponsor email, Property value is the sponsor name
     * 
     */
    private @Nullable Map<String,String> sponsors;
    /**
     * @return default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
     * 
     */
    private @Nullable String ssoDefaultRole;
    private @Nullable String ssoForcedRole;
    /**
     * @return IDP Cert (used to verify the signed response)
     * 
     */
    private @Nullable String ssoIdpCert;
    /**
     * @return signing algorithm for SAML Assertion
     * 
     */
    private @Nullable String ssoIdpSignAlgo;
    /**
     * @return IDP Single-Sign-On URL
     * 
     */
    private @Nullable String ssoIdpSsoUrl;
    /**
     * @return IDP issuer URL
     * 
     */
    private @Nullable String ssoIssuer;
    /**
     * @return enum: `email`, `unspecified`
     * 
     */
    private @Nullable String ssoNameidFormat;
    /**
     * @return when `sms_provider`==`telstra`, Client ID provided by Telstra
     * 
     */
    private @Nullable String telstraClientId;
    /**
     * @return when `sms_provider`==`telstra`, Client secret provided by Telstra
     * 
     */
    private @Nullable String telstraClientSecret;
    /**
     * @return when `sms_provider`==`twilio`, Auth token account with twilio account
     * 
     */
    private @Nullable String twilioAuthToken;
    /**
     * @return when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
     * 
     */
    private @Nullable String twilioPhoneNumber;
    /**
     * @return when `sms_provider`==`twilio`, Account SID provided by Twilio
     * 
     */
    private @Nullable String twilioSid;

    private WlanPortal() {}
    /**
     * @return amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<String> amazonClientId() {
        return Optional.ofNullable(this.amazonClientId);
    }
    /**
     * @return amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    public Optional<String> amazonClientSecret() {
        return Optional.ofNullable(this.amazonClientSecret);
    }
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> amazonEmailDomains() {
        return this.amazonEmailDomains == null ? List.of() : this.amazonEmailDomains;
    }
    /**
     * @return whether amazon is enabled as a login method
     * 
     */
    public Optional<Boolean> amazonEnabled() {
        return Optional.ofNullable(this.amazonEnabled);
    }
    /**
     * @return interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Double> amazonExpire() {
        return Optional.ofNullable(this.amazonExpire);
    }
    /**
     * @return authentication scheme. enum: `external`, `none`, `sso`
     * 
     */
    public Optional<String> auth() {
        return Optional.ofNullable(this.auth);
    }
    /**
     * @return Required if `azure_enabled`==`true`.
     * Azure active directory app client id
     * 
     */
    public Optional<String> azureClientId() {
        return Optional.ofNullable(this.azureClientId);
    }
    /**
     * @return Required if `azure_enabled`==`true`.
     * Azure active directory app client secret
     * 
     */
    public Optional<String> azureClientSecret() {
        return Optional.ofNullable(this.azureClientSecret);
    }
    /**
     * @return whether Azure Active Directory is enabled as a login method
     * 
     */
    public Optional<Boolean> azureEnabled() {
        return Optional.ofNullable(this.azureEnabled);
    }
    /**
     * @return interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Double> azureExpire() {
        return Optional.ofNullable(this.azureExpire);
    }
    /**
     * @return Required if `azure_enabled`==`true`.
     * Azure active directory tenant id.
     * 
     */
    public Optional<String> azureTenantId() {
        return Optional.ofNullable(this.azureTenantId);
    }
    /**
     * @return when `sms_provider`==`broadnet`
     * 
     */
    public Optional<String> broadnetPassword() {
        return Optional.ofNullable(this.broadnetPassword);
    }
    /**
     * @return when `sms_provider`==`broadnet`
     * 
     */
    public Optional<String> broadnetSid() {
        return Optional.ofNullable(this.broadnetSid);
    }
    /**
     * @return when `sms_provider`==`broadnet`
     * 
     */
    public Optional<String> broadnetUserId() {
        return Optional.ofNullable(this.broadnetUserId);
    }
    /**
     * @return whether to bypass the guest portal when cloud not reachable (and apply the default policies)
     * 
     */
    public Optional<Boolean> bypassWhenCloudDown() {
        return Optional.ofNullable(this.bypassWhenCloudDown);
    }
    /**
     * @return when `sms_provider`==`clickatell`
     * 
     */
    public Optional<String> clickatellApiKey() {
        return Optional.ofNullable(this.clickatellApiKey);
    }
    /**
     * @return whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
     * 
     */
    public Optional<Boolean> crossSite() {
        return Optional.ofNullable(this.crossSite);
    }
    /**
     * @return whether email (access code verification) is enabled as a login method
     * 
     */
    public Optional<Boolean> emailEnabled() {
        return Optional.ofNullable(this.emailEnabled);
    }
    /**
     * @return whether guest portal is enabled
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return how long to remain authorized, in minutes
     * 
     */
    public Optional<Double> expire() {
        return Optional.ofNullable(this.expire);
    }
    /**
     * @return external portal URL (e.g. https://host/url) where we can append our query parameters to
     * 
     */
    public Optional<String> externalPortalUrl() {
        return Optional.ofNullable(this.externalPortalUrl);
    }
    /**
     * @return Required if `facebook_enabled`==`true`.
     * Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<String> facebookClientId() {
        return Optional.ofNullable(this.facebookClientId);
    }
    /**
     * @return Required if `facebook_enabled`==`true`.
     * Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    public Optional<String> facebookClientSecret() {
        return Optional.ofNullable(this.facebookClientSecret);
    }
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> facebookEmailDomains() {
        return this.facebookEmailDomains == null ? List.of() : this.facebookEmailDomains;
    }
    /**
     * @return whether facebook is enabled as a login method
     * 
     */
    public Optional<Boolean> facebookEnabled() {
        return Optional.ofNullable(this.facebookEnabled);
    }
    /**
     * @return interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Double> facebookExpire() {
        return Optional.ofNullable(this.facebookExpire);
    }
    /**
     * @return whether to forward the user to another URL after authorized
     * 
     */
    public Optional<Boolean> forward() {
        return Optional.ofNullable(this.forward);
    }
    /**
     * @return the URL to forward the user to
     * 
     */
    public Optional<String> forwardUrl() {
        return Optional.ofNullable(this.forwardUrl);
    }
    /**
     * @return Google OAuth2 app id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<String> googleClientId() {
        return Optional.ofNullable(this.googleClientId);
    }
    /**
     * @return Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    public Optional<String> googleClientSecret() {
        return Optional.ofNullable(this.googleClientSecret);
    }
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> googleEmailDomains() {
        return this.googleEmailDomains == null ? List.of() : this.googleEmailDomains;
    }
    /**
     * @return whether google is enabled as login method
     * 
     */
    public Optional<Boolean> googleEnabled() {
        return Optional.ofNullable(this.googleEnabled);
    }
    /**
     * @return interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Double> googleExpire() {
        return Optional.ofNullable(this.googleExpire);
    }
    /**
     * @return when `sms_provider`==`gupshup`
     * 
     */
    public Optional<String> gupshupPassword() {
        return Optional.ofNullable(this.gupshupPassword);
    }
    /**
     * @return when `sms_provider`==`gupshup`
     * 
     */
    public Optional<String> gupshupUserid() {
        return Optional.ofNullable(this.gupshupUserid);
    }
    /**
     * @return microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
     * 
     */
    public Optional<String> microsoftClientId() {
        return Optional.ofNullable(this.microsoftClientId);
    }
    /**
     * @return microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
     * 
     */
    public Optional<String> microsoftClientSecret() {
        return Optional.ofNullable(this.microsoftClientSecret);
    }
    /**
     * @return Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
     * 
     */
    public List<String> microsoftEmailDomains() {
        return this.microsoftEmailDomains == null ? List.of() : this.microsoftEmailDomains;
    }
    /**
     * @return whether microsoft 365 is enabled as a login method
     * 
     */
    public Optional<Boolean> microsoftEnabled() {
        return Optional.ofNullable(this.microsoftEnabled);
    }
    /**
     * @return interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Double> microsoftExpire() {
        return Optional.ofNullable(this.microsoftExpire);
    }
    /**
     * @return whether password is enabled
     * 
     */
    public Optional<Boolean> passphraseEnabled() {
        return Optional.ofNullable(this.passphraseEnabled);
    }
    /**
     * @return interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
     * 
     */
    public Optional<Double> passphraseExpire() {
        return Optional.ofNullable(this.passphraseExpire);
    }
    /**
     * @return passphrase
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
     * 
     */
    public Optional<Boolean> predefinedSponsorsEnabled() {
        return Optional.ofNullable(this.predefinedSponsorsEnabled);
    }
    public Optional<Boolean> privacy() {
        return Optional.ofNullable(this.privacy);
    }
    /**
     * @return when `sms_provider`==`puzzel`
     * 
     */
    public Optional<String> puzzelPassword() {
        return Optional.ofNullable(this.puzzelPassword);
    }
    /**
     * @return when `sms_provider`==`puzzel`
     * 
     */
    public Optional<String> puzzelServiceId() {
        return Optional.ofNullable(this.puzzelServiceId);
    }
    /**
     * @return when `sms_provider`==`puzzel`
     * 
     */
    public Optional<String> puzzelUsername() {
        return Optional.ofNullable(this.puzzelUsername);
    }
    /**
     * @return whether sms is enabled as a login method
     * 
     */
    public Optional<Boolean> smsEnabled() {
        return Optional.ofNullable(this.smsEnabled);
    }
    /**
     * @return interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Double> smsExpire() {
        return Optional.ofNullable(this.smsExpire);
    }
    public Optional<String> smsMessageFormat() {
        return Optional.ofNullable(this.smsMessageFormat);
    }
    /**
     * @return enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
     * 
     */
    public Optional<String> smsProvider() {
        return Optional.ofNullable(this.smsProvider);
    }
    /**
     * @return whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
     * 
     */
    public Optional<Boolean> sponsorAutoApprove() {
        return Optional.ofNullable(this.sponsorAutoApprove);
    }
    /**
     * @return list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
     * 
     */
    public List<String> sponsorEmailDomains() {
        return this.sponsorEmailDomains == null ? List.of() : this.sponsorEmailDomains;
    }
    /**
     * @return whether sponsor is enabled
     * 
     */
    public Optional<Boolean> sponsorEnabled() {
        return Optional.ofNullable(this.sponsorEnabled);
    }
    /**
     * @return interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
     * 
     */
    public Optional<Double> sponsorExpire() {
        return Optional.ofNullable(this.sponsorExpire);
    }
    /**
     * @return how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
     * 
     */
    public Optional<Integer> sponsorLinkValidityDuration() {
        return Optional.ofNullable(this.sponsorLinkValidityDuration);
    }
    /**
     * @return whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
     * 
     */
    public Optional<Boolean> sponsorNotifyAll() {
        return Optional.ofNullable(this.sponsorNotifyAll);
    }
    /**
     * @return if enabled, guest will get email about sponsor&#39;s action (approve/deny)
     * 
     */
    public Optional<Boolean> sponsorStatusNotify() {
        return Optional.ofNullable(this.sponsorStatusNotify);
    }
    /**
     * @return object of allowed sponsors email with name. Required if `sponsor_enabled` is `true` and `sponsor_email_domains` is empty.
     * Property key is the sponsor email, Property value is the sponsor name
     * 
     */
    public Map<String,String> sponsors() {
        return this.sponsors == null ? Map.of() : this.sponsors;
    }
    /**
     * @return default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
     * 
     */
    public Optional<String> ssoDefaultRole() {
        return Optional.ofNullable(this.ssoDefaultRole);
    }
    public Optional<String> ssoForcedRole() {
        return Optional.ofNullable(this.ssoForcedRole);
    }
    /**
     * @return IDP Cert (used to verify the signed response)
     * 
     */
    public Optional<String> ssoIdpCert() {
        return Optional.ofNullable(this.ssoIdpCert);
    }
    /**
     * @return signing algorithm for SAML Assertion
     * 
     */
    public Optional<String> ssoIdpSignAlgo() {
        return Optional.ofNullable(this.ssoIdpSignAlgo);
    }
    /**
     * @return IDP Single-Sign-On URL
     * 
     */
    public Optional<String> ssoIdpSsoUrl() {
        return Optional.ofNullable(this.ssoIdpSsoUrl);
    }
    /**
     * @return IDP issuer URL
     * 
     */
    public Optional<String> ssoIssuer() {
        return Optional.ofNullable(this.ssoIssuer);
    }
    /**
     * @return enum: `email`, `unspecified`
     * 
     */
    public Optional<String> ssoNameidFormat() {
        return Optional.ofNullable(this.ssoNameidFormat);
    }
    /**
     * @return when `sms_provider`==`telstra`, Client ID provided by Telstra
     * 
     */
    public Optional<String> telstraClientId() {
        return Optional.ofNullable(this.telstraClientId);
    }
    /**
     * @return when `sms_provider`==`telstra`, Client secret provided by Telstra
     * 
     */
    public Optional<String> telstraClientSecret() {
        return Optional.ofNullable(this.telstraClientSecret);
    }
    /**
     * @return when `sms_provider`==`twilio`, Auth token account with twilio account
     * 
     */
    public Optional<String> twilioAuthToken() {
        return Optional.ofNullable(this.twilioAuthToken);
    }
    /**
     * @return when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
     * 
     */
    public Optional<String> twilioPhoneNumber() {
        return Optional.ofNullable(this.twilioPhoneNumber);
    }
    /**
     * @return when `sms_provider`==`twilio`, Account SID provided by Twilio
     * 
     */
    public Optional<String> twilioSid() {
        return Optional.ofNullable(this.twilioSid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WlanPortal defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String amazonClientId;
        private @Nullable String amazonClientSecret;
        private @Nullable List<String> amazonEmailDomains;
        private @Nullable Boolean amazonEnabled;
        private @Nullable Double amazonExpire;
        private @Nullable String auth;
        private @Nullable String azureClientId;
        private @Nullable String azureClientSecret;
        private @Nullable Boolean azureEnabled;
        private @Nullable Double azureExpire;
        private @Nullable String azureTenantId;
        private @Nullable String broadnetPassword;
        private @Nullable String broadnetSid;
        private @Nullable String broadnetUserId;
        private @Nullable Boolean bypassWhenCloudDown;
        private @Nullable String clickatellApiKey;
        private @Nullable Boolean crossSite;
        private @Nullable Boolean emailEnabled;
        private @Nullable Boolean enabled;
        private @Nullable Double expire;
        private @Nullable String externalPortalUrl;
        private @Nullable String facebookClientId;
        private @Nullable String facebookClientSecret;
        private @Nullable List<String> facebookEmailDomains;
        private @Nullable Boolean facebookEnabled;
        private @Nullable Double facebookExpire;
        private @Nullable Boolean forward;
        private @Nullable String forwardUrl;
        private @Nullable String googleClientId;
        private @Nullable String googleClientSecret;
        private @Nullable List<String> googleEmailDomains;
        private @Nullable Boolean googleEnabled;
        private @Nullable Double googleExpire;
        private @Nullable String gupshupPassword;
        private @Nullable String gupshupUserid;
        private @Nullable String microsoftClientId;
        private @Nullable String microsoftClientSecret;
        private @Nullable List<String> microsoftEmailDomains;
        private @Nullable Boolean microsoftEnabled;
        private @Nullable Double microsoftExpire;
        private @Nullable Boolean passphraseEnabled;
        private @Nullable Double passphraseExpire;
        private @Nullable String password;
        private @Nullable Boolean predefinedSponsorsEnabled;
        private @Nullable Boolean privacy;
        private @Nullable String puzzelPassword;
        private @Nullable String puzzelServiceId;
        private @Nullable String puzzelUsername;
        private @Nullable Boolean smsEnabled;
        private @Nullable Double smsExpire;
        private @Nullable String smsMessageFormat;
        private @Nullable String smsProvider;
        private @Nullable Boolean sponsorAutoApprove;
        private @Nullable List<String> sponsorEmailDomains;
        private @Nullable Boolean sponsorEnabled;
        private @Nullable Double sponsorExpire;
        private @Nullable Integer sponsorLinkValidityDuration;
        private @Nullable Boolean sponsorNotifyAll;
        private @Nullable Boolean sponsorStatusNotify;
        private @Nullable Map<String,String> sponsors;
        private @Nullable String ssoDefaultRole;
        private @Nullable String ssoForcedRole;
        private @Nullable String ssoIdpCert;
        private @Nullable String ssoIdpSignAlgo;
        private @Nullable String ssoIdpSsoUrl;
        private @Nullable String ssoIssuer;
        private @Nullable String ssoNameidFormat;
        private @Nullable String telstraClientId;
        private @Nullable String telstraClientSecret;
        private @Nullable String twilioAuthToken;
        private @Nullable String twilioPhoneNumber;
        private @Nullable String twilioSid;
        public Builder() {}
        public Builder(WlanPortal defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amazonClientId = defaults.amazonClientId;
    	      this.amazonClientSecret = defaults.amazonClientSecret;
    	      this.amazonEmailDomains = defaults.amazonEmailDomains;
    	      this.amazonEnabled = defaults.amazonEnabled;
    	      this.amazonExpire = defaults.amazonExpire;
    	      this.auth = defaults.auth;
    	      this.azureClientId = defaults.azureClientId;
    	      this.azureClientSecret = defaults.azureClientSecret;
    	      this.azureEnabled = defaults.azureEnabled;
    	      this.azureExpire = defaults.azureExpire;
    	      this.azureTenantId = defaults.azureTenantId;
    	      this.broadnetPassword = defaults.broadnetPassword;
    	      this.broadnetSid = defaults.broadnetSid;
    	      this.broadnetUserId = defaults.broadnetUserId;
    	      this.bypassWhenCloudDown = defaults.bypassWhenCloudDown;
    	      this.clickatellApiKey = defaults.clickatellApiKey;
    	      this.crossSite = defaults.crossSite;
    	      this.emailEnabled = defaults.emailEnabled;
    	      this.enabled = defaults.enabled;
    	      this.expire = defaults.expire;
    	      this.externalPortalUrl = defaults.externalPortalUrl;
    	      this.facebookClientId = defaults.facebookClientId;
    	      this.facebookClientSecret = defaults.facebookClientSecret;
    	      this.facebookEmailDomains = defaults.facebookEmailDomains;
    	      this.facebookEnabled = defaults.facebookEnabled;
    	      this.facebookExpire = defaults.facebookExpire;
    	      this.forward = defaults.forward;
    	      this.forwardUrl = defaults.forwardUrl;
    	      this.googleClientId = defaults.googleClientId;
    	      this.googleClientSecret = defaults.googleClientSecret;
    	      this.googleEmailDomains = defaults.googleEmailDomains;
    	      this.googleEnabled = defaults.googleEnabled;
    	      this.googleExpire = defaults.googleExpire;
    	      this.gupshupPassword = defaults.gupshupPassword;
    	      this.gupshupUserid = defaults.gupshupUserid;
    	      this.microsoftClientId = defaults.microsoftClientId;
    	      this.microsoftClientSecret = defaults.microsoftClientSecret;
    	      this.microsoftEmailDomains = defaults.microsoftEmailDomains;
    	      this.microsoftEnabled = defaults.microsoftEnabled;
    	      this.microsoftExpire = defaults.microsoftExpire;
    	      this.passphraseEnabled = defaults.passphraseEnabled;
    	      this.passphraseExpire = defaults.passphraseExpire;
    	      this.password = defaults.password;
    	      this.predefinedSponsorsEnabled = defaults.predefinedSponsorsEnabled;
    	      this.privacy = defaults.privacy;
    	      this.puzzelPassword = defaults.puzzelPassword;
    	      this.puzzelServiceId = defaults.puzzelServiceId;
    	      this.puzzelUsername = defaults.puzzelUsername;
    	      this.smsEnabled = defaults.smsEnabled;
    	      this.smsExpire = defaults.smsExpire;
    	      this.smsMessageFormat = defaults.smsMessageFormat;
    	      this.smsProvider = defaults.smsProvider;
    	      this.sponsorAutoApprove = defaults.sponsorAutoApprove;
    	      this.sponsorEmailDomains = defaults.sponsorEmailDomains;
    	      this.sponsorEnabled = defaults.sponsorEnabled;
    	      this.sponsorExpire = defaults.sponsorExpire;
    	      this.sponsorLinkValidityDuration = defaults.sponsorLinkValidityDuration;
    	      this.sponsorNotifyAll = defaults.sponsorNotifyAll;
    	      this.sponsorStatusNotify = defaults.sponsorStatusNotify;
    	      this.sponsors = defaults.sponsors;
    	      this.ssoDefaultRole = defaults.ssoDefaultRole;
    	      this.ssoForcedRole = defaults.ssoForcedRole;
    	      this.ssoIdpCert = defaults.ssoIdpCert;
    	      this.ssoIdpSignAlgo = defaults.ssoIdpSignAlgo;
    	      this.ssoIdpSsoUrl = defaults.ssoIdpSsoUrl;
    	      this.ssoIssuer = defaults.ssoIssuer;
    	      this.ssoNameidFormat = defaults.ssoNameidFormat;
    	      this.telstraClientId = defaults.telstraClientId;
    	      this.telstraClientSecret = defaults.telstraClientSecret;
    	      this.twilioAuthToken = defaults.twilioAuthToken;
    	      this.twilioPhoneNumber = defaults.twilioPhoneNumber;
    	      this.twilioSid = defaults.twilioSid;
        }

        @CustomType.Setter
        public Builder amazonClientId(@Nullable String amazonClientId) {

            this.amazonClientId = amazonClientId;
            return this;
        }
        @CustomType.Setter
        public Builder amazonClientSecret(@Nullable String amazonClientSecret) {

            this.amazonClientSecret = amazonClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder amazonEmailDomains(@Nullable List<String> amazonEmailDomains) {

            this.amazonEmailDomains = amazonEmailDomains;
            return this;
        }
        public Builder amazonEmailDomains(String... amazonEmailDomains) {
            return amazonEmailDomains(List.of(amazonEmailDomains));
        }
        @CustomType.Setter
        public Builder amazonEnabled(@Nullable Boolean amazonEnabled) {

            this.amazonEnabled = amazonEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder amazonExpire(@Nullable Double amazonExpire) {

            this.amazonExpire = amazonExpire;
            return this;
        }
        @CustomType.Setter
        public Builder auth(@Nullable String auth) {

            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder azureClientId(@Nullable String azureClientId) {

            this.azureClientId = azureClientId;
            return this;
        }
        @CustomType.Setter
        public Builder azureClientSecret(@Nullable String azureClientSecret) {

            this.azureClientSecret = azureClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder azureEnabled(@Nullable Boolean azureEnabled) {

            this.azureEnabled = azureEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder azureExpire(@Nullable Double azureExpire) {

            this.azureExpire = azureExpire;
            return this;
        }
        @CustomType.Setter
        public Builder azureTenantId(@Nullable String azureTenantId) {

            this.azureTenantId = azureTenantId;
            return this;
        }
        @CustomType.Setter
        public Builder broadnetPassword(@Nullable String broadnetPassword) {

            this.broadnetPassword = broadnetPassword;
            return this;
        }
        @CustomType.Setter
        public Builder broadnetSid(@Nullable String broadnetSid) {

            this.broadnetSid = broadnetSid;
            return this;
        }
        @CustomType.Setter
        public Builder broadnetUserId(@Nullable String broadnetUserId) {

            this.broadnetUserId = broadnetUserId;
            return this;
        }
        @CustomType.Setter
        public Builder bypassWhenCloudDown(@Nullable Boolean bypassWhenCloudDown) {

            this.bypassWhenCloudDown = bypassWhenCloudDown;
            return this;
        }
        @CustomType.Setter
        public Builder clickatellApiKey(@Nullable String clickatellApiKey) {

            this.clickatellApiKey = clickatellApiKey;
            return this;
        }
        @CustomType.Setter
        public Builder crossSite(@Nullable Boolean crossSite) {

            this.crossSite = crossSite;
            return this;
        }
        @CustomType.Setter
        public Builder emailEnabled(@Nullable Boolean emailEnabled) {

            this.emailEnabled = emailEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder expire(@Nullable Double expire) {

            this.expire = expire;
            return this;
        }
        @CustomType.Setter
        public Builder externalPortalUrl(@Nullable String externalPortalUrl) {

            this.externalPortalUrl = externalPortalUrl;
            return this;
        }
        @CustomType.Setter
        public Builder facebookClientId(@Nullable String facebookClientId) {

            this.facebookClientId = facebookClientId;
            return this;
        }
        @CustomType.Setter
        public Builder facebookClientSecret(@Nullable String facebookClientSecret) {

            this.facebookClientSecret = facebookClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder facebookEmailDomains(@Nullable List<String> facebookEmailDomains) {

            this.facebookEmailDomains = facebookEmailDomains;
            return this;
        }
        public Builder facebookEmailDomains(String... facebookEmailDomains) {
            return facebookEmailDomains(List.of(facebookEmailDomains));
        }
        @CustomType.Setter
        public Builder facebookEnabled(@Nullable Boolean facebookEnabled) {

            this.facebookEnabled = facebookEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder facebookExpire(@Nullable Double facebookExpire) {

            this.facebookExpire = facebookExpire;
            return this;
        }
        @CustomType.Setter
        public Builder forward(@Nullable Boolean forward) {

            this.forward = forward;
            return this;
        }
        @CustomType.Setter
        public Builder forwardUrl(@Nullable String forwardUrl) {

            this.forwardUrl = forwardUrl;
            return this;
        }
        @CustomType.Setter
        public Builder googleClientId(@Nullable String googleClientId) {

            this.googleClientId = googleClientId;
            return this;
        }
        @CustomType.Setter
        public Builder googleClientSecret(@Nullable String googleClientSecret) {

            this.googleClientSecret = googleClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder googleEmailDomains(@Nullable List<String> googleEmailDomains) {

            this.googleEmailDomains = googleEmailDomains;
            return this;
        }
        public Builder googleEmailDomains(String... googleEmailDomains) {
            return googleEmailDomains(List.of(googleEmailDomains));
        }
        @CustomType.Setter
        public Builder googleEnabled(@Nullable Boolean googleEnabled) {

            this.googleEnabled = googleEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder googleExpire(@Nullable Double googleExpire) {

            this.googleExpire = googleExpire;
            return this;
        }
        @CustomType.Setter
        public Builder gupshupPassword(@Nullable String gupshupPassword) {

            this.gupshupPassword = gupshupPassword;
            return this;
        }
        @CustomType.Setter
        public Builder gupshupUserid(@Nullable String gupshupUserid) {

            this.gupshupUserid = gupshupUserid;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftClientId(@Nullable String microsoftClientId) {

            this.microsoftClientId = microsoftClientId;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftClientSecret(@Nullable String microsoftClientSecret) {

            this.microsoftClientSecret = microsoftClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftEmailDomains(@Nullable List<String> microsoftEmailDomains) {

            this.microsoftEmailDomains = microsoftEmailDomains;
            return this;
        }
        public Builder microsoftEmailDomains(String... microsoftEmailDomains) {
            return microsoftEmailDomains(List.of(microsoftEmailDomains));
        }
        @CustomType.Setter
        public Builder microsoftEnabled(@Nullable Boolean microsoftEnabled) {

            this.microsoftEnabled = microsoftEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder microsoftExpire(@Nullable Double microsoftExpire) {

            this.microsoftExpire = microsoftExpire;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseEnabled(@Nullable Boolean passphraseEnabled) {

            this.passphraseEnabled = passphraseEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder passphraseExpire(@Nullable Double passphraseExpire) {

            this.passphraseExpire = passphraseExpire;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder predefinedSponsorsEnabled(@Nullable Boolean predefinedSponsorsEnabled) {

            this.predefinedSponsorsEnabled = predefinedSponsorsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder privacy(@Nullable Boolean privacy) {

            this.privacy = privacy;
            return this;
        }
        @CustomType.Setter
        public Builder puzzelPassword(@Nullable String puzzelPassword) {

            this.puzzelPassword = puzzelPassword;
            return this;
        }
        @CustomType.Setter
        public Builder puzzelServiceId(@Nullable String puzzelServiceId) {

            this.puzzelServiceId = puzzelServiceId;
            return this;
        }
        @CustomType.Setter
        public Builder puzzelUsername(@Nullable String puzzelUsername) {

            this.puzzelUsername = puzzelUsername;
            return this;
        }
        @CustomType.Setter
        public Builder smsEnabled(@Nullable Boolean smsEnabled) {

            this.smsEnabled = smsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder smsExpire(@Nullable Double smsExpire) {

            this.smsExpire = smsExpire;
            return this;
        }
        @CustomType.Setter
        public Builder smsMessageFormat(@Nullable String smsMessageFormat) {

            this.smsMessageFormat = smsMessageFormat;
            return this;
        }
        @CustomType.Setter
        public Builder smsProvider(@Nullable String smsProvider) {

            this.smsProvider = smsProvider;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorAutoApprove(@Nullable Boolean sponsorAutoApprove) {

            this.sponsorAutoApprove = sponsorAutoApprove;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorEmailDomains(@Nullable List<String> sponsorEmailDomains) {

            this.sponsorEmailDomains = sponsorEmailDomains;
            return this;
        }
        public Builder sponsorEmailDomains(String... sponsorEmailDomains) {
            return sponsorEmailDomains(List.of(sponsorEmailDomains));
        }
        @CustomType.Setter
        public Builder sponsorEnabled(@Nullable Boolean sponsorEnabled) {

            this.sponsorEnabled = sponsorEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorExpire(@Nullable Double sponsorExpire) {

            this.sponsorExpire = sponsorExpire;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorLinkValidityDuration(@Nullable Integer sponsorLinkValidityDuration) {

            this.sponsorLinkValidityDuration = sponsorLinkValidityDuration;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorNotifyAll(@Nullable Boolean sponsorNotifyAll) {

            this.sponsorNotifyAll = sponsorNotifyAll;
            return this;
        }
        @CustomType.Setter
        public Builder sponsorStatusNotify(@Nullable Boolean sponsorStatusNotify) {

            this.sponsorStatusNotify = sponsorStatusNotify;
            return this;
        }
        @CustomType.Setter
        public Builder sponsors(@Nullable Map<String,String> sponsors) {

            this.sponsors = sponsors;
            return this;
        }
        @CustomType.Setter
        public Builder ssoDefaultRole(@Nullable String ssoDefaultRole) {

            this.ssoDefaultRole = ssoDefaultRole;
            return this;
        }
        @CustomType.Setter
        public Builder ssoForcedRole(@Nullable String ssoForcedRole) {

            this.ssoForcedRole = ssoForcedRole;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIdpCert(@Nullable String ssoIdpCert) {

            this.ssoIdpCert = ssoIdpCert;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIdpSignAlgo(@Nullable String ssoIdpSignAlgo) {

            this.ssoIdpSignAlgo = ssoIdpSignAlgo;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIdpSsoUrl(@Nullable String ssoIdpSsoUrl) {

            this.ssoIdpSsoUrl = ssoIdpSsoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder ssoIssuer(@Nullable String ssoIssuer) {

            this.ssoIssuer = ssoIssuer;
            return this;
        }
        @CustomType.Setter
        public Builder ssoNameidFormat(@Nullable String ssoNameidFormat) {

            this.ssoNameidFormat = ssoNameidFormat;
            return this;
        }
        @CustomType.Setter
        public Builder telstraClientId(@Nullable String telstraClientId) {

            this.telstraClientId = telstraClientId;
            return this;
        }
        @CustomType.Setter
        public Builder telstraClientSecret(@Nullable String telstraClientSecret) {

            this.telstraClientSecret = telstraClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder twilioAuthToken(@Nullable String twilioAuthToken) {

            this.twilioAuthToken = twilioAuthToken;
            return this;
        }
        @CustomType.Setter
        public Builder twilioPhoneNumber(@Nullable String twilioPhoneNumber) {

            this.twilioPhoneNumber = twilioPhoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder twilioSid(@Nullable String twilioSid) {

            this.twilioSid = twilioSid;
            return this;
        }
        public WlanPortal build() {
            final var _resultValue = new WlanPortal();
            _resultValue.amazonClientId = amazonClientId;
            _resultValue.amazonClientSecret = amazonClientSecret;
            _resultValue.amazonEmailDomains = amazonEmailDomains;
            _resultValue.amazonEnabled = amazonEnabled;
            _resultValue.amazonExpire = amazonExpire;
            _resultValue.auth = auth;
            _resultValue.azureClientId = azureClientId;
            _resultValue.azureClientSecret = azureClientSecret;
            _resultValue.azureEnabled = azureEnabled;
            _resultValue.azureExpire = azureExpire;
            _resultValue.azureTenantId = azureTenantId;
            _resultValue.broadnetPassword = broadnetPassword;
            _resultValue.broadnetSid = broadnetSid;
            _resultValue.broadnetUserId = broadnetUserId;
            _resultValue.bypassWhenCloudDown = bypassWhenCloudDown;
            _resultValue.clickatellApiKey = clickatellApiKey;
            _resultValue.crossSite = crossSite;
            _resultValue.emailEnabled = emailEnabled;
            _resultValue.enabled = enabled;
            _resultValue.expire = expire;
            _resultValue.externalPortalUrl = externalPortalUrl;
            _resultValue.facebookClientId = facebookClientId;
            _resultValue.facebookClientSecret = facebookClientSecret;
            _resultValue.facebookEmailDomains = facebookEmailDomains;
            _resultValue.facebookEnabled = facebookEnabled;
            _resultValue.facebookExpire = facebookExpire;
            _resultValue.forward = forward;
            _resultValue.forwardUrl = forwardUrl;
            _resultValue.googleClientId = googleClientId;
            _resultValue.googleClientSecret = googleClientSecret;
            _resultValue.googleEmailDomains = googleEmailDomains;
            _resultValue.googleEnabled = googleEnabled;
            _resultValue.googleExpire = googleExpire;
            _resultValue.gupshupPassword = gupshupPassword;
            _resultValue.gupshupUserid = gupshupUserid;
            _resultValue.microsoftClientId = microsoftClientId;
            _resultValue.microsoftClientSecret = microsoftClientSecret;
            _resultValue.microsoftEmailDomains = microsoftEmailDomains;
            _resultValue.microsoftEnabled = microsoftEnabled;
            _resultValue.microsoftExpire = microsoftExpire;
            _resultValue.passphraseEnabled = passphraseEnabled;
            _resultValue.passphraseExpire = passphraseExpire;
            _resultValue.password = password;
            _resultValue.predefinedSponsorsEnabled = predefinedSponsorsEnabled;
            _resultValue.privacy = privacy;
            _resultValue.puzzelPassword = puzzelPassword;
            _resultValue.puzzelServiceId = puzzelServiceId;
            _resultValue.puzzelUsername = puzzelUsername;
            _resultValue.smsEnabled = smsEnabled;
            _resultValue.smsExpire = smsExpire;
            _resultValue.smsMessageFormat = smsMessageFormat;
            _resultValue.smsProvider = smsProvider;
            _resultValue.sponsorAutoApprove = sponsorAutoApprove;
            _resultValue.sponsorEmailDomains = sponsorEmailDomains;
            _resultValue.sponsorEnabled = sponsorEnabled;
            _resultValue.sponsorExpire = sponsorExpire;
            _resultValue.sponsorLinkValidityDuration = sponsorLinkValidityDuration;
            _resultValue.sponsorNotifyAll = sponsorNotifyAll;
            _resultValue.sponsorStatusNotify = sponsorStatusNotify;
            _resultValue.sponsors = sponsors;
            _resultValue.ssoDefaultRole = ssoDefaultRole;
            _resultValue.ssoForcedRole = ssoForcedRole;
            _resultValue.ssoIdpCert = ssoIdpCert;
            _resultValue.ssoIdpSignAlgo = ssoIdpSignAlgo;
            _resultValue.ssoIdpSsoUrl = ssoIdpSsoUrl;
            _resultValue.ssoIssuer = ssoIssuer;
            _resultValue.ssoNameidFormat = ssoNameidFormat;
            _resultValue.telstraClientId = telstraClientId;
            _resultValue.telstraClientSecret = telstraClientSecret;
            _resultValue.twilioAuthToken = twilioAuthToken;
            _resultValue.twilioPhoneNumber = twilioPhoneNumber;
            _resultValue.twilioSid = twilioSid;
            return _resultValue;
        }
    }
}
