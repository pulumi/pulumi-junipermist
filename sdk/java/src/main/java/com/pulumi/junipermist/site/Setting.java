// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.junipermist.Utilities;
import com.pulumi.junipermist.site.SettingArgs;
import com.pulumi.junipermist.site.inputs.SettingState;
import com.pulumi.junipermist.site.outputs.SettingAnalytic;
import com.pulumi.junipermist.site.outputs.SettingAutoUpgrade;
import com.pulumi.junipermist.site.outputs.SettingAutoUpgradeEsl;
import com.pulumi.junipermist.site.outputs.SettingBleConfig;
import com.pulumi.junipermist.site.outputs.SettingConfigPushPolicy;
import com.pulumi.junipermist.site.outputs.SettingCriticalUrlMonitoring;
import com.pulumi.junipermist.site.outputs.SettingEngagement;
import com.pulumi.junipermist.site.outputs.SettingGatewayMgmt;
import com.pulumi.junipermist.site.outputs.SettingJuniperSrx;
import com.pulumi.junipermist.site.outputs.SettingLed;
import com.pulumi.junipermist.site.outputs.SettingMarvis;
import com.pulumi.junipermist.site.outputs.SettingOccupancy;
import com.pulumi.junipermist.site.outputs.SettingProxy;
import com.pulumi.junipermist.site.outputs.SettingRogue;
import com.pulumi.junipermist.site.outputs.SettingRtsa;
import com.pulumi.junipermist.site.outputs.SettingSimpleAlert;
import com.pulumi.junipermist.site.outputs.SettingSkyatp;
import com.pulumi.junipermist.site.outputs.SettingSleThresholds;
import com.pulumi.junipermist.site.outputs.SettingSrxApp;
import com.pulumi.junipermist.site.outputs.SettingSsr;
import com.pulumi.junipermist.site.outputs.SettingSyntheticTest;
import com.pulumi.junipermist.site.outputs.SettingUplinkPortConfig;
import com.pulumi.junipermist.site.outputs.SettingVna;
import com.pulumi.junipermist.site.outputs.SettingVsInstance;
import com.pulumi.junipermist.site.outputs.SettingWanVna;
import com.pulumi.junipermist.site.outputs.SettingWids;
import com.pulumi.junipermist.site.outputs.SettingWifi;
import com.pulumi.junipermist.site.outputs.SettingWiredVna;
import com.pulumi.junipermist.site.outputs.SettingZoneOccupancyAlert;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource manages the Site Settings.
 * 
 * The Site Settings can be used to customize the Site configuration and assign Site Variables (Sites Variables can be reused in configuration templates)
 * 
 * &gt; When using the Mist APIs, all the switch settings defined at the site level are stored under the site settings with all the rest of the site configuration (`/api/v1/sites/{site_id}/setting` Mist API Endpoint). To simplify this resource, all the site level switches related settings are moved into the `junipermist.site.Networktemplate` resource
 * 
 * !&gt; Only ONE `junipermist.site.Setting` resource can be configured per site. If multiple ones are configured, only the last one defined we be successfully deployed to Mist
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Using `pulumi import`, import `mist_site_setting` with:
 * 
 * Site Setting can be imported by specifying the site_id
 * 
 * ```sh
 * $ pulumi import junipermist:site/setting:Setting site_setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
 * ```
 * 
 */
@ResourceType(type="junipermist:site/setting:Setting")
public class Setting extends com.pulumi.resources.CustomResource {
    @Export(name="analytic", refs={SettingAnalytic.class}, tree="[0]")
    private Output<SettingAnalytic> analytic;

    public Output<SettingAnalytic> analytic() {
        return this.analytic;
    }
    /**
     * Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and `deviceUpdownThreshold` is ignored.
     * 
     */
    @Export(name="apUpdownThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> apUpdownThreshold;

    /**
     * @return Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and `deviceUpdownThreshold` is ignored.
     * 
     */
    public Output<Optional<Integer>> apUpdownThreshold() {
        return Codegen.optional(this.apUpdownThreshold);
    }
    /**
     * Auto Upgrade Settings
     * 
     */
    @Export(name="autoUpgrade", refs={SettingAutoUpgrade.class}, tree="[0]")
    private Output<SettingAutoUpgrade> autoUpgrade;

    /**
     * @return Auto Upgrade Settings
     * 
     */
    public Output<SettingAutoUpgrade> autoUpgrade() {
        return this.autoUpgrade;
    }
    /**
     * auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware upgrade
     * 
     */
    @Export(name="autoUpgradeEsl", refs={SettingAutoUpgradeEsl.class}, tree="[0]")
    private Output</* @Nullable */ SettingAutoUpgradeEsl> autoUpgradeEsl;

    /**
     * @return auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware upgrade
     * 
     */
    public Output<Optional<SettingAutoUpgradeEsl>> autoUpgradeEsl() {
        return Codegen.optional(this.autoUpgradeEsl);
    }
    /**
     * enable threshold-based bgp neighbor down delivery.
     * 
     */
    @Export(name="bgpNeighborUpdownThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bgpNeighborUpdownThreshold;

    /**
     * @return enable threshold-based bgp neighbor down delivery.
     * 
     */
    public Output<Optional<Integer>> bgpNeighborUpdownThreshold() {
        return Codegen.optional(this.bgpNeighborUpdownThreshold);
    }
    @Export(name="blacklistUrl", refs={String.class}, tree="[0]")
    private Output<String> blacklistUrl;

    public Output<String> blacklistUrl() {
        return this.blacklistUrl;
    }
    /**
     * BLE AP settings
     * 
     */
    @Export(name="bleConfig", refs={SettingBleConfig.class}, tree="[0]")
    private Output</* @Nullable */ SettingBleConfig> bleConfig;

    /**
     * @return BLE AP settings
     * 
     */
    public Output<Optional<SettingBleConfig>> bleConfig() {
        return Codegen.optional(this.bleConfig);
    }
    /**
     * Whether to enable ap auto config revert
     * 
     */
    @Export(name="configAutoRevert", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> configAutoRevert;

    /**
     * @return Whether to enable ap auto config revert
     * 
     */
    public Output<Boolean> configAutoRevert() {
        return this.configAutoRevert;
    }
    /**
     * Mist also uses some heuristic rules to prevent destructive configs from being pushed
     * 
     */
    @Export(name="configPushPolicy", refs={SettingConfigPushPolicy.class}, tree="[0]")
    private Output</* @Nullable */ SettingConfigPushPolicy> configPushPolicy;

    /**
     * @return Mist also uses some heuristic rules to prevent destructive configs from being pushed
     * 
     */
    public Output<Optional<SettingConfigPushPolicy>> configPushPolicy() {
        return Codegen.optional(this.configPushPolicy);
    }
    /**
     * You can define some URLs that&#39;s critical to site operations the latency will be captured and considered for site health
     * 
     */
    @Export(name="criticalUrlMonitoring", refs={SettingCriticalUrlMonitoring.class}, tree="[0]")
    private Output</* @Nullable */ SettingCriticalUrlMonitoring> criticalUrlMonitoring;

    /**
     * @return You can define some URLs that&#39;s critical to site operations the latency will be captured and considered for site health
     * 
     */
    public Output<Optional<SettingCriticalUrlMonitoring>> criticalUrlMonitoring() {
        return Codegen.optional(this.criticalUrlMonitoring);
    }
    /**
     * Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
     * 
     */
    @Export(name="defaultPortUsage", refs={String.class}, tree="[0]")
    private Output<String> defaultPortUsage;

    /**
     * @return Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
     * 
     */
    public Output<String> defaultPortUsage() {
        return this.defaultPortUsage;
    }
    /**
     * By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device type is desired, use the following
     * 
     */
    @Export(name="deviceUpdownThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> deviceUpdownThreshold;

    /**
     * @return By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device type is desired, use the following
     * 
     */
    public Output<Optional<Integer>> deviceUpdownThreshold() {
        return Codegen.optional(this.deviceUpdownThreshold);
    }
    @Export(name="enableUnii4", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableUnii4;

    public Output<Boolean> enableUnii4() {
        return this.enableUnii4;
    }
    /**
     * **Note**: if hours does not exist, it&#39;s treated as everyday of the week, 00:00-23:59. Currently, we don&#39;t allow multiple ranges for the same day
     * 
     */
    @Export(name="engagement", refs={SettingEngagement.class}, tree="[0]")
    private Output<SettingEngagement> engagement;

    /**
     * @return **Note**: if hours does not exist, it&#39;s treated as everyday of the week, 00:00-23:59. Currently, we don&#39;t allow multiple ranges for the same day
     * 
     */
    public Output<SettingEngagement> engagement() {
        return this.engagement;
    }
    /**
     * Gateway Site settings
     * 
     */
    @Export(name="gatewayMgmt", refs={SettingGatewayMgmt.class}, tree="[0]")
    private Output<SettingGatewayMgmt> gatewayMgmt;

    /**
     * @return Gateway Site settings
     * 
     */
    public Output<SettingGatewayMgmt> gatewayMgmt() {
        return this.gatewayMgmt;
    }
    /**
     * Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and `deviceUpdownThreshold` is ignored.
     * 
     */
    @Export(name="gatewayUpdownThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> gatewayUpdownThreshold;

    /**
     * @return Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and `deviceUpdownThreshold` is ignored.
     * 
     */
    public Output<Optional<Integer>> gatewayUpdownThreshold() {
        return Codegen.optional(this.gatewayUpdownThreshold);
    }
    @Export(name="juniperSrx", refs={SettingJuniperSrx.class}, tree="[0]")
    private Output</* @Nullable */ SettingJuniperSrx> juniperSrx;

    public Output<Optional<SettingJuniperSrx>> juniperSrx() {
        return Codegen.optional(this.juniperSrx);
    }
    /**
     * LED AP settings
     * 
     */
    @Export(name="led", refs={SettingLed.class}, tree="[0]")
    private Output<SettingLed> led;

    /**
     * @return LED AP settings
     * 
     */
    public Output<SettingLed> led() {
        return this.led;
    }
    @Export(name="marvis", refs={SettingMarvis.class}, tree="[0]")
    private Output</* @Nullable */ SettingMarvis> marvis;

    public Output<Optional<SettingMarvis>> marvis() {
        return Codegen.optional(this.marvis);
    }
    /**
     * Occupancy Analytics settings
     * 
     */
    @Export(name="occupancy", refs={SettingOccupancy.class}, tree="[0]")
    private Output<SettingOccupancy> occupancy;

    /**
     * @return Occupancy Analytics settings
     * 
     */
    public Output<SettingOccupancy> occupancy() {
        return this.occupancy;
    }
    /**
     * Whether to store the config on AP
     * 
     */
    @Export(name="persistConfigOnDevice", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> persistConfigOnDevice;

    /**
     * @return Whether to store the config on AP
     * 
     */
    public Output<Boolean> persistConfigOnDevice() {
        return this.persistConfigOnDevice;
    }
    /**
     * Proxy Configuration to talk to Mist
     * 
     */
    @Export(name="proxy", refs={SettingProxy.class}, tree="[0]")
    private Output</* @Nullable */ SettingProxy> proxy;

    /**
     * @return Proxy Configuration to talk to Mist
     * 
     */
    public Output<Optional<SettingProxy>> proxy() {
        return Codegen.optional(this.proxy);
    }
    /**
     * By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the existing configuration will be removed.
     * 
     */
    @Export(name="removeExistingConfigs", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> removeExistingConfigs;

    /**
     * @return By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the existing configuration will be removed.
     * 
     */
    public Output<Optional<Boolean>> removeExistingConfigs() {
        return Codegen.optional(this.removeExistingConfigs);
    }
    /**
     * Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name, serial number, battery %, temperature, humidity)
     * 
     */
    @Export(name="reportGatt", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> reportGatt;

    /**
     * @return Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name, serial number, battery %, temperature, humidity)
     * 
     */
    public Output<Optional<Boolean>> reportGatt() {
        return Codegen.optional(this.reportGatt);
    }
    /**
     * Rogue site settings
     * 
     */
    @Export(name="rogue", refs={SettingRogue.class}, tree="[0]")
    private Output<SettingRogue> rogue;

    /**
     * @return Rogue site settings
     * 
     */
    public Output<SettingRogue> rogue() {
        return this.rogue;
    }
    /**
     * Managed mobility
     * 
     */
    @Export(name="rtsa", refs={SettingRtsa.class}, tree="[0]")
    private Output<SettingRtsa> rtsa;

    /**
     * @return Managed mobility
     * 
     */
    public Output<SettingRtsa> rtsa() {
        return this.rtsa;
    }
    /**
     * Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute window, there are more than Y distinct client encountering over X failures
     * 
     */
    @Export(name="simpleAlert", refs={SettingSimpleAlert.class}, tree="[0]")
    private Output</* @Nullable */ SettingSimpleAlert> simpleAlert;

    /**
     * @return Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute window, there are more than Y distinct client encountering over X failures
     * 
     */
    public Output<Optional<SettingSimpleAlert>> simpleAlert() {
        return Codegen.optional(this.simpleAlert);
    }
    @Export(name="siteId", refs={String.class}, tree="[0]")
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }
    @Export(name="skyatp", refs={SettingSkyatp.class}, tree="[0]")
    private Output</* @Nullable */ SettingSkyatp> skyatp;

    public Output<Optional<SettingSkyatp>> skyatp() {
        return Codegen.optional(this.skyatp);
    }
    @Export(name="sleThresholds", refs={SettingSleThresholds.class}, tree="[0]")
    private Output</* @Nullable */ SettingSleThresholds> sleThresholds;

    public Output<Optional<SettingSleThresholds>> sleThresholds() {
        return Codegen.optional(this.sleThresholds);
    }
    @Export(name="srxApp", refs={SettingSrxApp.class}, tree="[0]")
    private Output</* @Nullable */ SettingSrxApp> srxApp;

    public Output<Optional<SettingSrxApp>> srxApp() {
        return Codegen.optional(this.srxApp);
    }
    /**
     * When limitSshAccess = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see Org:Setting)
     * 
     */
    @Export(name="sshKeys", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> sshKeys;

    /**
     * @return When limitSshAccess = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see Org:Setting)
     * 
     */
    public Output<List<String>> sshKeys() {
        return this.sshKeys;
    }
    @Export(name="ssr", refs={SettingSsr.class}, tree="[0]")
    private Output</* @Nullable */ SettingSsr> ssr;

    public Output<Optional<SettingSsr>> ssr() {
        return Codegen.optional(this.ssr);
    }
    /**
     * Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and `deviceUpdownThreshold` is ignored.
     * 
     */
    @Export(name="switchUpdownThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> switchUpdownThreshold;

    /**
     * @return Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and `deviceUpdownThreshold` is ignored.
     * 
     */
    public Output<Optional<Integer>> switchUpdownThreshold() {
        return Codegen.optional(this.switchUpdownThreshold);
    }
    @Export(name="syntheticTest", refs={SettingSyntheticTest.class}, tree="[0]")
    private Output<SettingSyntheticTest> syntheticTest;

    public Output<SettingSyntheticTest> syntheticTest() {
        return this.syntheticTest;
    }
    /**
     * Whether to track anonymous BLE assets (requires ‘track_asset’  enabled)
     * 
     */
    @Export(name="trackAnonymousDevices", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trackAnonymousDevices;

    /**
     * @return Whether to track anonymous BLE assets (requires ‘track_asset’  enabled)
     * 
     */
    public Output<Optional<Boolean>> trackAnonymousDevices() {
        return Codegen.optional(this.trackAnonymousDevices);
    }
    /**
     * AP Uplink port configuration
     * 
     */
    @Export(name="uplinkPortConfig", refs={SettingUplinkPortConfig.class}, tree="[0]")
    private Output<SettingUplinkPortConfig> uplinkPortConfig;

    /**
     * @return AP Uplink port configuration
     * 
     */
    public Output<SettingUplinkPortConfig> uplinkPortConfig() {
        return this.uplinkPortConfig;
    }
    /**
     * Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    @Export(name="vars", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> vars;

    /**
     * @return Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    public Output<Optional<Map<String,String>>> vars() {
        return Codegen.optional(this.vars);
    }
    @Export(name="vna", refs={SettingVna.class}, tree="[0]")
    private Output</* @Nullable */ SettingVna> vna;

    public Output<Optional<SettingVna>> vna() {
        return Codegen.optional(this.vna);
    }
    /**
     * enable threshold-based vpn path down delivery.
     * 
     */
    @Export(name="vpnPathUpdownThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> vpnPathUpdownThreshold;

    /**
     * @return enable threshold-based vpn path down delivery.
     * 
     */
    public Output<Optional<Integer>> vpnPathUpdownThreshold() {
        return Codegen.optional(this.vpnPathUpdownThreshold);
    }
    /**
     * enable threshold-based vpn peer down delivery.
     * 
     */
    @Export(name="vpnPeerUpdownThreshold", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> vpnPeerUpdownThreshold;

    /**
     * @return enable threshold-based vpn peer down delivery.
     * 
     */
    public Output<Optional<Integer>> vpnPeerUpdownThreshold() {
        return Codegen.optional(this.vpnPeerUpdownThreshold);
    }
    /**
     * Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
     * 
     */
    @Export(name="vsInstance", refs={Map.class,String.class,SettingVsInstance.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,SettingVsInstance>> vsInstance;

    /**
     * @return Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
     * 
     */
    public Output<Optional<Map<String,SettingVsInstance>>> vsInstance() {
        return Codegen.optional(this.vsInstance);
    }
    @Export(name="wanVna", refs={SettingWanVna.class}, tree="[0]")
    private Output</* @Nullable */ SettingWanVna> wanVna;

    public Output<Optional<SettingWanVna>> wanVna() {
        return Codegen.optional(this.wanVna);
    }
    @Export(name="watchedStationUrl", refs={String.class}, tree="[0]")
    private Output<String> watchedStationUrl;

    public Output<String> watchedStationUrl() {
        return this.watchedStationUrl;
    }
    @Export(name="whitelistUrl", refs={String.class}, tree="[0]")
    private Output<String> whitelistUrl;

    public Output<String> whitelistUrl() {
        return this.whitelistUrl;
    }
    /**
     * WIDS site settings
     * 
     */
    @Export(name="wids", refs={SettingWids.class}, tree="[0]")
    private Output<SettingWids> wids;

    /**
     * @return WIDS site settings
     * 
     */
    public Output<SettingWids> wids() {
        return this.wids;
    }
    /**
     * Wi-Fi site settings
     * 
     */
    @Export(name="wifi", refs={SettingWifi.class}, tree="[0]")
    private Output<SettingWifi> wifi;

    /**
     * @return Wi-Fi site settings
     * 
     */
    public Output<SettingWifi> wifi() {
        return this.wifi;
    }
    @Export(name="wiredVna", refs={SettingWiredVna.class}, tree="[0]")
    private Output</* @Nullable */ SettingWiredVna> wiredVna;

    public Output<Optional<SettingWiredVna>> wiredVna() {
        return Codegen.optional(this.wiredVna);
    }
    /**
     * Zone Occupancy alert site settings
     * 
     */
    @Export(name="zoneOccupancyAlert", refs={SettingZoneOccupancyAlert.class}, tree="[0]")
    private Output<SettingZoneOccupancyAlert> zoneOccupancyAlert;

    /**
     * @return Zone Occupancy alert site settings
     * 
     */
    public Output<SettingZoneOccupancyAlert> zoneOccupancyAlert() {
        return this.zoneOccupancyAlert;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Setting(java.lang.String name) {
        this(name, SettingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Setting(java.lang.String name, SettingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Setting(java.lang.String name, SettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:site/setting:Setting", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Setting(java.lang.String name, Output<java.lang.String> id, @Nullable SettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:site/setting:Setting", name, state, makeResourceOptions(options, id), false);
    }

    private static SettingArgs makeArgs(SettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SettingArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-junipermist")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Setting get(java.lang.String name, Output<java.lang.String> id, @Nullable SettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Setting(name, id, state, options);
    }
}
