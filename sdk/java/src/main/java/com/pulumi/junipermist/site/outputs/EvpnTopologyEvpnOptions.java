// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.junipermist.site.outputs.EvpnTopologyEvpnOptionsOverlay;
import com.pulumi.junipermist.site.outputs.EvpnTopologyEvpnOptionsUnderlay;
import com.pulumi.junipermist.site.outputs.EvpnTopologyEvpnOptionsVsInstances;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EvpnTopologyEvpnOptions {
    /**
     * @return Optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
     * 
     */
    private @Nullable String autoLoopbackSubnet;
    /**
     * @return Optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
     * 
     */
    private @Nullable String autoLoopbackSubnet6;
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    private @Nullable String autoRouterIdSubnet;
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    private @Nullable String autoRouterIdSubnet6;
    /**
     * @return Optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway. When `routed_at` != `core`, whether to do virtual-gateway at core as well
     * 
     */
    private @Nullable Boolean coreAsBorder;
    /**
     * @return if the mangement traffic goes inbnd, during installation, only the border/core switches are connected to the Internet to allow initial configuration to be pushed down and leave the downstream access switches stay in the Factory Default state enabling inband-ztp allows upstream switches to use LLDP to assign IP and gives Internet to downstream switches in that state
     * 
     */
    private @Nullable Boolean enableInbandZtp;
    private @Nullable EvpnTopologyEvpnOptionsOverlay overlay;
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address&#39;s v4_mac. If enabled, 00-00-5e-00-0X-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
     * 
     */
    private @Nullable Boolean perVlanVgaV4Mac;
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-02-01 as the virtual-gateway-address&#39;s v6_mac. If enabled, 00-00-5e-00-1X-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
     * 
     */
    private @Nullable Boolean perVlanVgaV6Mac;
    /**
     * @return optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
     * 
     */
    private @Nullable String routedAt;
    private @Nullable EvpnTopologyEvpnOptionsUnderlay underlay;
    /**
     * @return Optional, for EX9200 only to segregate virtual-switches
     * 
     */
    private @Nullable Map<String,EvpnTopologyEvpnOptionsVsInstances> vsInstances;

    private EvpnTopologyEvpnOptions() {}
    /**
     * @return Optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
     * 
     */
    public Optional<String> autoLoopbackSubnet() {
        return Optional.ofNullable(this.autoLoopbackSubnet);
    }
    /**
     * @return Optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
     * 
     */
    public Optional<String> autoLoopbackSubnet6() {
        return Optional.ofNullable(this.autoLoopbackSubnet6);
    }
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    public Optional<String> autoRouterIdSubnet() {
        return Optional.ofNullable(this.autoRouterIdSubnet);
    }
    /**
     * @return Optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
     * 
     */
    public Optional<String> autoRouterIdSubnet6() {
        return Optional.ofNullable(this.autoRouterIdSubnet6);
    }
    /**
     * @return Optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway. When `routed_at` != `core`, whether to do virtual-gateway at core as well
     * 
     */
    public Optional<Boolean> coreAsBorder() {
        return Optional.ofNullable(this.coreAsBorder);
    }
    /**
     * @return if the mangement traffic goes inbnd, during installation, only the border/core switches are connected to the Internet to allow initial configuration to be pushed down and leave the downstream access switches stay in the Factory Default state enabling inband-ztp allows upstream switches to use LLDP to assign IP and gives Internet to downstream switches in that state
     * 
     */
    public Optional<Boolean> enableInbandZtp() {
        return Optional.ofNullable(this.enableInbandZtp);
    }
    public Optional<EvpnTopologyEvpnOptionsOverlay> overlay() {
        return Optional.ofNullable(this.overlay);
    }
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address&#39;s v4_mac. If enabled, 00-00-5e-00-0X-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
     * 
     */
    public Optional<Boolean> perVlanVgaV4Mac() {
        return Optional.ofNullable(this.perVlanVgaV4Mac);
    }
    /**
     * @return Only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-02-01 as the virtual-gateway-address&#39;s v6_mac. If enabled, 00-00-5e-00-1X-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
     * 
     */
    public Optional<Boolean> perVlanVgaV6Mac() {
        return Optional.ofNullable(this.perVlanVgaV6Mac);
    }
    /**
     * @return optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
     * 
     */
    public Optional<String> routedAt() {
        return Optional.ofNullable(this.routedAt);
    }
    public Optional<EvpnTopologyEvpnOptionsUnderlay> underlay() {
        return Optional.ofNullable(this.underlay);
    }
    /**
     * @return Optional, for EX9200 only to segregate virtual-switches
     * 
     */
    public Map<String,EvpnTopologyEvpnOptionsVsInstances> vsInstances() {
        return this.vsInstances == null ? Map.of() : this.vsInstances;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EvpnTopologyEvpnOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String autoLoopbackSubnet;
        private @Nullable String autoLoopbackSubnet6;
        private @Nullable String autoRouterIdSubnet;
        private @Nullable String autoRouterIdSubnet6;
        private @Nullable Boolean coreAsBorder;
        private @Nullable Boolean enableInbandZtp;
        private @Nullable EvpnTopologyEvpnOptionsOverlay overlay;
        private @Nullable Boolean perVlanVgaV4Mac;
        private @Nullable Boolean perVlanVgaV6Mac;
        private @Nullable String routedAt;
        private @Nullable EvpnTopologyEvpnOptionsUnderlay underlay;
        private @Nullable Map<String,EvpnTopologyEvpnOptionsVsInstances> vsInstances;
        public Builder() {}
        public Builder(EvpnTopologyEvpnOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoLoopbackSubnet = defaults.autoLoopbackSubnet;
    	      this.autoLoopbackSubnet6 = defaults.autoLoopbackSubnet6;
    	      this.autoRouterIdSubnet = defaults.autoRouterIdSubnet;
    	      this.autoRouterIdSubnet6 = defaults.autoRouterIdSubnet6;
    	      this.coreAsBorder = defaults.coreAsBorder;
    	      this.enableInbandZtp = defaults.enableInbandZtp;
    	      this.overlay = defaults.overlay;
    	      this.perVlanVgaV4Mac = defaults.perVlanVgaV4Mac;
    	      this.perVlanVgaV6Mac = defaults.perVlanVgaV6Mac;
    	      this.routedAt = defaults.routedAt;
    	      this.underlay = defaults.underlay;
    	      this.vsInstances = defaults.vsInstances;
        }

        @CustomType.Setter
        public Builder autoLoopbackSubnet(@Nullable String autoLoopbackSubnet) {

            this.autoLoopbackSubnet = autoLoopbackSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder autoLoopbackSubnet6(@Nullable String autoLoopbackSubnet6) {

            this.autoLoopbackSubnet6 = autoLoopbackSubnet6;
            return this;
        }
        @CustomType.Setter
        public Builder autoRouterIdSubnet(@Nullable String autoRouterIdSubnet) {

            this.autoRouterIdSubnet = autoRouterIdSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder autoRouterIdSubnet6(@Nullable String autoRouterIdSubnet6) {

            this.autoRouterIdSubnet6 = autoRouterIdSubnet6;
            return this;
        }
        @CustomType.Setter
        public Builder coreAsBorder(@Nullable Boolean coreAsBorder) {

            this.coreAsBorder = coreAsBorder;
            return this;
        }
        @CustomType.Setter
        public Builder enableInbandZtp(@Nullable Boolean enableInbandZtp) {

            this.enableInbandZtp = enableInbandZtp;
            return this;
        }
        @CustomType.Setter
        public Builder overlay(@Nullable EvpnTopologyEvpnOptionsOverlay overlay) {

            this.overlay = overlay;
            return this;
        }
        @CustomType.Setter
        public Builder perVlanVgaV4Mac(@Nullable Boolean perVlanVgaV4Mac) {

            this.perVlanVgaV4Mac = perVlanVgaV4Mac;
            return this;
        }
        @CustomType.Setter
        public Builder perVlanVgaV6Mac(@Nullable Boolean perVlanVgaV6Mac) {

            this.perVlanVgaV6Mac = perVlanVgaV6Mac;
            return this;
        }
        @CustomType.Setter
        public Builder routedAt(@Nullable String routedAt) {

            this.routedAt = routedAt;
            return this;
        }
        @CustomType.Setter
        public Builder underlay(@Nullable EvpnTopologyEvpnOptionsUnderlay underlay) {

            this.underlay = underlay;
            return this;
        }
        @CustomType.Setter
        public Builder vsInstances(@Nullable Map<String,EvpnTopologyEvpnOptionsVsInstances> vsInstances) {

            this.vsInstances = vsInstances;
            return this;
        }
        public EvpnTopologyEvpnOptions build() {
            final var _resultValue = new EvpnTopologyEvpnOptions();
            _resultValue.autoLoopbackSubnet = autoLoopbackSubnet;
            _resultValue.autoLoopbackSubnet6 = autoLoopbackSubnet6;
            _resultValue.autoRouterIdSubnet = autoRouterIdSubnet;
            _resultValue.autoRouterIdSubnet6 = autoRouterIdSubnet6;
            _resultValue.coreAsBorder = coreAsBorder;
            _resultValue.enableInbandZtp = enableInbandZtp;
            _resultValue.overlay = overlay;
            _resultValue.perVlanVgaV4Mac = perVlanVgaV4Mac;
            _resultValue.perVlanVgaV6Mac = perVlanVgaV6Mac;
            _resultValue.routedAt = routedAt;
            _resultValue.underlay = underlay;
            _resultValue.vsInstances = vsInstances;
            return _resultValue;
        }
    }
}
