// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.junipermist.device.outputs.SwitchRadiusConfigAcctServer;
import com.pulumi.junipermist.device.outputs.SwitchRadiusConfigAuthServer;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SwitchRadiusConfig {
    /**
     * @return how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
     * 
     */
    private @Nullable Integer acctInterimInterval;
    private @Nullable List<SwitchRadiusConfigAcctServer> acctServers;
    private @Nullable List<SwitchRadiusConfigAuthServer> authServers;
    /**
     * @return radius auth session retries
     * 
     */
    private @Nullable Integer authServersRetries;
    /**
     * @return radius auth session timeout
     * 
     */
    private @Nullable Integer authServersTimeout;
    /**
     * @return use `network`or `source_ip`. Which network the RADIUS server resides, if there&#39;s static IP for this network, we&#39;d use it as source-ip
     * 
     */
    private @Nullable String network;
    /**
     * @return use `network`or `source_ip`
     * 
     */
    private @Nullable String sourceIp;

    private SwitchRadiusConfig() {}
    /**
     * @return how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
     * 
     */
    public Optional<Integer> acctInterimInterval() {
        return Optional.ofNullable(this.acctInterimInterval);
    }
    public List<SwitchRadiusConfigAcctServer> acctServers() {
        return this.acctServers == null ? List.of() : this.acctServers;
    }
    public List<SwitchRadiusConfigAuthServer> authServers() {
        return this.authServers == null ? List.of() : this.authServers;
    }
    /**
     * @return radius auth session retries
     * 
     */
    public Optional<Integer> authServersRetries() {
        return Optional.ofNullable(this.authServersRetries);
    }
    /**
     * @return radius auth session timeout
     * 
     */
    public Optional<Integer> authServersTimeout() {
        return Optional.ofNullable(this.authServersTimeout);
    }
    /**
     * @return use `network`or `source_ip`. Which network the RADIUS server resides, if there&#39;s static IP for this network, we&#39;d use it as source-ip
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return use `network`or `source_ip`
     * 
     */
    public Optional<String> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SwitchRadiusConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer acctInterimInterval;
        private @Nullable List<SwitchRadiusConfigAcctServer> acctServers;
        private @Nullable List<SwitchRadiusConfigAuthServer> authServers;
        private @Nullable Integer authServersRetries;
        private @Nullable Integer authServersTimeout;
        private @Nullable String network;
        private @Nullable String sourceIp;
        public Builder() {}
        public Builder(SwitchRadiusConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acctInterimInterval = defaults.acctInterimInterval;
    	      this.acctServers = defaults.acctServers;
    	      this.authServers = defaults.authServers;
    	      this.authServersRetries = defaults.authServersRetries;
    	      this.authServersTimeout = defaults.authServersTimeout;
    	      this.network = defaults.network;
    	      this.sourceIp = defaults.sourceIp;
        }

        @CustomType.Setter
        public Builder acctInterimInterval(@Nullable Integer acctInterimInterval) {

            this.acctInterimInterval = acctInterimInterval;
            return this;
        }
        @CustomType.Setter
        public Builder acctServers(@Nullable List<SwitchRadiusConfigAcctServer> acctServers) {

            this.acctServers = acctServers;
            return this;
        }
        public Builder acctServers(SwitchRadiusConfigAcctServer... acctServers) {
            return acctServers(List.of(acctServers));
        }
        @CustomType.Setter
        public Builder authServers(@Nullable List<SwitchRadiusConfigAuthServer> authServers) {

            this.authServers = authServers;
            return this;
        }
        public Builder authServers(SwitchRadiusConfigAuthServer... authServers) {
            return authServers(List.of(authServers));
        }
        @CustomType.Setter
        public Builder authServersRetries(@Nullable Integer authServersRetries) {

            this.authServersRetries = authServersRetries;
            return this;
        }
        @CustomType.Setter
        public Builder authServersTimeout(@Nullable Integer authServersTimeout) {

            this.authServersTimeout = authServersTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(@Nullable String sourceIp) {

            this.sourceIp = sourceIp;
            return this;
        }
        public SwitchRadiusConfig build() {
            final var _resultValue = new SwitchRadiusConfig();
            _resultValue.acctInterimInterval = acctInterimInterval;
            _resultValue.acctServers = acctServers;
            _resultValue.authServers = authServers;
            _resultValue.authServersRetries = authServersRetries;
            _resultValue.authServersTimeout = authServersTimeout;
            _resultValue.network = network;
            _resultValue.sourceIp = sourceIp;
            return _resultValue;
        }
    }
}
