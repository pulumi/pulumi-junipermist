// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConstTrafficTypesConstTrafficType {
    private String display;
    private Integer dscp;
    private String failoverPolicy;
    private Integer maxJitter;
    private Integer maxLatency;
    private Integer maxLoss;
    private String name;
    private String trafficClass;

    private GetConstTrafficTypesConstTrafficType() {}
    public String display() {
        return this.display;
    }
    public Integer dscp() {
        return this.dscp;
    }
    public String failoverPolicy() {
        return this.failoverPolicy;
    }
    public Integer maxJitter() {
        return this.maxJitter;
    }
    public Integer maxLatency() {
        return this.maxLatency;
    }
    public Integer maxLoss() {
        return this.maxLoss;
    }
    public String name() {
        return this.name;
    }
    public String trafficClass() {
        return this.trafficClass;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConstTrafficTypesConstTrafficType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String display;
        private Integer dscp;
        private String failoverPolicy;
        private Integer maxJitter;
        private Integer maxLatency;
        private Integer maxLoss;
        private String name;
        private String trafficClass;
        public Builder() {}
        public Builder(GetConstTrafficTypesConstTrafficType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.display = defaults.display;
    	      this.dscp = defaults.dscp;
    	      this.failoverPolicy = defaults.failoverPolicy;
    	      this.maxJitter = defaults.maxJitter;
    	      this.maxLatency = defaults.maxLatency;
    	      this.maxLoss = defaults.maxLoss;
    	      this.name = defaults.name;
    	      this.trafficClass = defaults.trafficClass;
        }

        @CustomType.Setter
        public Builder display(String display) {
            if (display == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "display");
            }
            this.display = display;
            return this;
        }
        @CustomType.Setter
        public Builder dscp(Integer dscp) {
            if (dscp == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "dscp");
            }
            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder failoverPolicy(String failoverPolicy) {
            if (failoverPolicy == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "failoverPolicy");
            }
            this.failoverPolicy = failoverPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder maxJitter(Integer maxJitter) {
            if (maxJitter == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "maxJitter");
            }
            this.maxJitter = maxJitter;
            return this;
        }
        @CustomType.Setter
        public Builder maxLatency(Integer maxLatency) {
            if (maxLatency == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "maxLatency");
            }
            this.maxLatency = maxLatency;
            return this;
        }
        @CustomType.Setter
        public Builder maxLoss(Integer maxLoss) {
            if (maxLoss == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "maxLoss");
            }
            this.maxLoss = maxLoss;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder trafficClass(String trafficClass) {
            if (trafficClass == null) {
              throw new MissingRequiredPropertyException("GetConstTrafficTypesConstTrafficType", "trafficClass");
            }
            this.trafficClass = trafficClass;
            return this;
        }
        public GetConstTrafficTypesConstTrafficType build() {
            final var _resultValue = new GetConstTrafficTypesConstTrafficType();
            _resultValue.display = display;
            _resultValue.dscp = dscp;
            _resultValue.failoverPolicy = failoverPolicy;
            _resultValue.maxJitter = maxJitter;
            _resultValue.maxLatency = maxLatency;
            _resultValue.maxLoss = maxLoss;
            _resultValue.name = name;
            _resultValue.trafficClass = trafficClass;
            return _resultValue;
        }
    }
}
