// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetApStatsDeviceApStatRadioStatBand5 {
    /**
     * @return channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
     * 
     */
    private Integer bandwidth;
    /**
     * @return current channel the radio is running on
     * 
     */
    private Integer channel;
    /**
     * @return Use dynamic chaining for downlink
     * 
     */
    private Boolean dynamicChainingEnalbed;
    /**
     * @return radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
     * 
     */
    private String mac;
    private Integer noiseFloor;
    private Integer numClients;
    /**
     * @return transmit power (in dBm)
     * 
     */
    private Integer power;
    private Integer rxBytes;
    private Integer rxPkts;
    private Integer txBytes;
    private Integer txPkts;
    private String usage;
    /**
     * @return all utilization in percentage
     * 
     */
    private Integer utilAll;
    /**
     * @return reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
     * 
     */
    private Integer utilNonWifi;
    /**
     * @return reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
     * 
     */
    private Integer utilRxInBss;
    /**
     * @return reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
     * 
     */
    private Integer utilRxOtherBss;
    /**
     * @return transmission utilization in percentage
     * 
     */
    private Integer utilTx;
    /**
     * @return reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
     * 
     */
    private Integer utilUndecodableWifi;
    /**
     * @return reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
     * 
     */
    private Integer utilUnknownWifi;

    private GetApStatsDeviceApStatRadioStatBand5() {}
    /**
     * @return channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return current channel the radio is running on
     * 
     */
    public Integer channel() {
        return this.channel;
    }
    /**
     * @return Use dynamic chaining for downlink
     * 
     */
    public Boolean dynamicChainingEnalbed() {
        return this.dynamicChainingEnalbed;
    }
    /**
     * @return radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
     * 
     */
    public String mac() {
        return this.mac;
    }
    public Integer noiseFloor() {
        return this.noiseFloor;
    }
    public Integer numClients() {
        return this.numClients;
    }
    /**
     * @return transmit power (in dBm)
     * 
     */
    public Integer power() {
        return this.power;
    }
    public Integer rxBytes() {
        return this.rxBytes;
    }
    public Integer rxPkts() {
        return this.rxPkts;
    }
    public Integer txBytes() {
        return this.txBytes;
    }
    public Integer txPkts() {
        return this.txPkts;
    }
    public String usage() {
        return this.usage;
    }
    /**
     * @return all utilization in percentage
     * 
     */
    public Integer utilAll() {
        return this.utilAll;
    }
    /**
     * @return reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
     * 
     */
    public Integer utilNonWifi() {
        return this.utilNonWifi;
    }
    /**
     * @return reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
     * 
     */
    public Integer utilRxInBss() {
        return this.utilRxInBss;
    }
    /**
     * @return reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
     * 
     */
    public Integer utilRxOtherBss() {
        return this.utilRxOtherBss;
    }
    /**
     * @return transmission utilization in percentage
     * 
     */
    public Integer utilTx() {
        return this.utilTx;
    }
    /**
     * @return reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
     * 
     */
    public Integer utilUndecodableWifi() {
        return this.utilUndecodableWifi;
    }
    /**
     * @return reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
     * 
     */
    public Integer utilUnknownWifi() {
        return this.utilUnknownWifi;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApStatsDeviceApStatRadioStatBand5 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer bandwidth;
        private Integer channel;
        private Boolean dynamicChainingEnalbed;
        private String mac;
        private Integer noiseFloor;
        private Integer numClients;
        private Integer power;
        private Integer rxBytes;
        private Integer rxPkts;
        private Integer txBytes;
        private Integer txPkts;
        private String usage;
        private Integer utilAll;
        private Integer utilNonWifi;
        private Integer utilRxInBss;
        private Integer utilRxOtherBss;
        private Integer utilTx;
        private Integer utilUndecodableWifi;
        private Integer utilUnknownWifi;
        public Builder() {}
        public Builder(GetApStatsDeviceApStatRadioStatBand5 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.channel = defaults.channel;
    	      this.dynamicChainingEnalbed = defaults.dynamicChainingEnalbed;
    	      this.mac = defaults.mac;
    	      this.noiseFloor = defaults.noiseFloor;
    	      this.numClients = defaults.numClients;
    	      this.power = defaults.power;
    	      this.rxBytes = defaults.rxBytes;
    	      this.rxPkts = defaults.rxPkts;
    	      this.txBytes = defaults.txBytes;
    	      this.txPkts = defaults.txPkts;
    	      this.usage = defaults.usage;
    	      this.utilAll = defaults.utilAll;
    	      this.utilNonWifi = defaults.utilNonWifi;
    	      this.utilRxInBss = defaults.utilRxInBss;
    	      this.utilRxOtherBss = defaults.utilRxOtherBss;
    	      this.utilTx = defaults.utilTx;
    	      this.utilUndecodableWifi = defaults.utilUndecodableWifi;
    	      this.utilUnknownWifi = defaults.utilUnknownWifi;
        }

        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder channel(Integer channel) {
            if (channel == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "channel");
            }
            this.channel = channel;
            return this;
        }
        @CustomType.Setter
        public Builder dynamicChainingEnalbed(Boolean dynamicChainingEnalbed) {
            if (dynamicChainingEnalbed == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "dynamicChainingEnalbed");
            }
            this.dynamicChainingEnalbed = dynamicChainingEnalbed;
            return this;
        }
        @CustomType.Setter
        public Builder mac(String mac) {
            if (mac == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "mac");
            }
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder noiseFloor(Integer noiseFloor) {
            if (noiseFloor == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "noiseFloor");
            }
            this.noiseFloor = noiseFloor;
            return this;
        }
        @CustomType.Setter
        public Builder numClients(Integer numClients) {
            if (numClients == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "numClients");
            }
            this.numClients = numClients;
            return this;
        }
        @CustomType.Setter
        public Builder power(Integer power) {
            if (power == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "power");
            }
            this.power = power;
            return this;
        }
        @CustomType.Setter
        public Builder rxBytes(Integer rxBytes) {
            if (rxBytes == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "rxBytes");
            }
            this.rxBytes = rxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder rxPkts(Integer rxPkts) {
            if (rxPkts == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "rxPkts");
            }
            this.rxPkts = rxPkts;
            return this;
        }
        @CustomType.Setter
        public Builder txBytes(Integer txBytes) {
            if (txBytes == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "txBytes");
            }
            this.txBytes = txBytes;
            return this;
        }
        @CustomType.Setter
        public Builder txPkts(Integer txPkts) {
            if (txPkts == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "txPkts");
            }
            this.txPkts = txPkts;
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            if (usage == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "usage");
            }
            this.usage = usage;
            return this;
        }
        @CustomType.Setter
        public Builder utilAll(Integer utilAll) {
            if (utilAll == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "utilAll");
            }
            this.utilAll = utilAll;
            return this;
        }
        @CustomType.Setter
        public Builder utilNonWifi(Integer utilNonWifi) {
            if (utilNonWifi == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "utilNonWifi");
            }
            this.utilNonWifi = utilNonWifi;
            return this;
        }
        @CustomType.Setter
        public Builder utilRxInBss(Integer utilRxInBss) {
            if (utilRxInBss == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "utilRxInBss");
            }
            this.utilRxInBss = utilRxInBss;
            return this;
        }
        @CustomType.Setter
        public Builder utilRxOtherBss(Integer utilRxOtherBss) {
            if (utilRxOtherBss == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "utilRxOtherBss");
            }
            this.utilRxOtherBss = utilRxOtherBss;
            return this;
        }
        @CustomType.Setter
        public Builder utilTx(Integer utilTx) {
            if (utilTx == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "utilTx");
            }
            this.utilTx = utilTx;
            return this;
        }
        @CustomType.Setter
        public Builder utilUndecodableWifi(Integer utilUndecodableWifi) {
            if (utilUndecodableWifi == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "utilUndecodableWifi");
            }
            this.utilUndecodableWifi = utilUndecodableWifi;
            return this;
        }
        @CustomType.Setter
        public Builder utilUnknownWifi(Integer utilUnknownWifi) {
            if (utilUnknownWifi == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStatRadioStatBand5", "utilUnknownWifi");
            }
            this.utilUnknownWifi = utilUnknownWifi;
            return this;
        }
        public GetApStatsDeviceApStatRadioStatBand5 build() {
            final var _resultValue = new GetApStatsDeviceApStatRadioStatBand5();
            _resultValue.bandwidth = bandwidth;
            _resultValue.channel = channel;
            _resultValue.dynamicChainingEnalbed = dynamicChainingEnalbed;
            _resultValue.mac = mac;
            _resultValue.noiseFloor = noiseFloor;
            _resultValue.numClients = numClients;
            _resultValue.power = power;
            _resultValue.rxBytes = rxBytes;
            _resultValue.rxPkts = rxPkts;
            _resultValue.txBytes = txBytes;
            _resultValue.txPkts = txPkts;
            _resultValue.usage = usage;
            _resultValue.utilAll = utilAll;
            _resultValue.utilNonWifi = utilNonWifi;
            _resultValue.utilRxInBss = utilRxInBss;
            _resultValue.utilRxOtherBss = utilRxOtherBss;
            _resultValue.utilTx = utilTx;
            _resultValue.utilUndecodableWifi = utilUndecodableWifi;
            _resultValue.utilUnknownWifi = utilUnknownWifi;
            return _resultValue;
        }
    }
}
