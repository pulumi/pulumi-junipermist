// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.junipermist.site.outputs.NetworktemplateRemoteSyslogArchive;
import com.pulumi.junipermist.site.outputs.NetworktemplateRemoteSyslogConsole;
import com.pulumi.junipermist.site.outputs.NetworktemplateRemoteSyslogFile;
import com.pulumi.junipermist.site.outputs.NetworktemplateRemoteSyslogServer;
import com.pulumi.junipermist.site.outputs.NetworktemplateRemoteSyslogUser;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworktemplateRemoteSyslog {
    private @Nullable NetworktemplateRemoteSyslogArchive archive;
    private @Nullable NetworktemplateRemoteSyslogConsole console;
    private @Nullable Boolean enabled;
    private @Nullable List<NetworktemplateRemoteSyslogFile> files;
    /**
     * @return If source_address is configured, will use the vlan firstly otherwise use source_ip
     * 
     */
    private @Nullable String network;
    private @Nullable Boolean sendToAllServers;
    private @Nullable List<NetworktemplateRemoteSyslogServer> servers;
    /**
     * @return enum: `millisecond`, `year`, `year millisecond`
     * 
     */
    private @Nullable String timeFormat;
    private @Nullable List<NetworktemplateRemoteSyslogUser> users;

    private NetworktemplateRemoteSyslog() {}
    public Optional<NetworktemplateRemoteSyslogArchive> archive() {
        return Optional.ofNullable(this.archive);
    }
    public Optional<NetworktemplateRemoteSyslogConsole> console() {
        return Optional.ofNullable(this.console);
    }
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    public List<NetworktemplateRemoteSyslogFile> files() {
        return this.files == null ? List.of() : this.files;
    }
    /**
     * @return If source_address is configured, will use the vlan firstly otherwise use source_ip
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    public Optional<Boolean> sendToAllServers() {
        return Optional.ofNullable(this.sendToAllServers);
    }
    public List<NetworktemplateRemoteSyslogServer> servers() {
        return this.servers == null ? List.of() : this.servers;
    }
    /**
     * @return enum: `millisecond`, `year`, `year millisecond`
     * 
     */
    public Optional<String> timeFormat() {
        return Optional.ofNullable(this.timeFormat);
    }
    public List<NetworktemplateRemoteSyslogUser> users() {
        return this.users == null ? List.of() : this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworktemplateRemoteSyslog defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable NetworktemplateRemoteSyslogArchive archive;
        private @Nullable NetworktemplateRemoteSyslogConsole console;
        private @Nullable Boolean enabled;
        private @Nullable List<NetworktemplateRemoteSyslogFile> files;
        private @Nullable String network;
        private @Nullable Boolean sendToAllServers;
        private @Nullable List<NetworktemplateRemoteSyslogServer> servers;
        private @Nullable String timeFormat;
        private @Nullable List<NetworktemplateRemoteSyslogUser> users;
        public Builder() {}
        public Builder(NetworktemplateRemoteSyslog defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archive = defaults.archive;
    	      this.console = defaults.console;
    	      this.enabled = defaults.enabled;
    	      this.files = defaults.files;
    	      this.network = defaults.network;
    	      this.sendToAllServers = defaults.sendToAllServers;
    	      this.servers = defaults.servers;
    	      this.timeFormat = defaults.timeFormat;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder archive(@Nullable NetworktemplateRemoteSyslogArchive archive) {

            this.archive = archive;
            return this;
        }
        @CustomType.Setter
        public Builder console(@Nullable NetworktemplateRemoteSyslogConsole console) {

            this.console = console;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder files(@Nullable List<NetworktemplateRemoteSyslogFile> files) {

            this.files = files;
            return this;
        }
        public Builder files(NetworktemplateRemoteSyslogFile... files) {
            return files(List.of(files));
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder sendToAllServers(@Nullable Boolean sendToAllServers) {

            this.sendToAllServers = sendToAllServers;
            return this;
        }
        @CustomType.Setter
        public Builder servers(@Nullable List<NetworktemplateRemoteSyslogServer> servers) {

            this.servers = servers;
            return this;
        }
        public Builder servers(NetworktemplateRemoteSyslogServer... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder timeFormat(@Nullable String timeFormat) {

            this.timeFormat = timeFormat;
            return this;
        }
        @CustomType.Setter
        public Builder users(@Nullable List<NetworktemplateRemoteSyslogUser> users) {

            this.users = users;
            return this;
        }
        public Builder users(NetworktemplateRemoteSyslogUser... users) {
            return users(List.of(users));
        }
        public NetworktemplateRemoteSyslog build() {
            final var _resultValue = new NetworktemplateRemoteSyslog();
            _resultValue.archive = archive;
            _resultValue.console = console;
            _resultValue.enabled = enabled;
            _resultValue.files = files;
            _resultValue.network = network;
            _resultValue.sendToAllServers = sendToAllServers;
            _resultValue.servers = servers;
            _resultValue.timeFormat = timeFormat;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
