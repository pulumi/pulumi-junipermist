// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.junipermist.Utilities;
import com.pulumi.junipermist.org.DeviceprofileGatewayArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayState;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayBgpConfig;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayDhcpdConfig;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayExtraRoutes6;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayExtraRoutes;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayIdpProfiles;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayIpConfigs;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayNetwork;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayOobIpConfig;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayPathPreferences;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayPortConfig;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayRoutingPolicies;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayServicePolicy;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayTunnelConfigs;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayTunnelProviderOptions;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayVrfConfig;
import com.pulumi.junipermist.org.outputs.DeviceprofileGatewayVrfInstances;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource manages the Gateway Device Profiles (HUB Profiles).
 * 
 * A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options. HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.
 * 
 * The Gateway Device Profile can be assigned to a gateway with the `junipermist.org.DeviceprofileAssign` resource.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.junipermist.org.DeviceprofileGateway;
 * import com.pulumi.junipermist.org.DeviceprofileGatewayArgs;
 * import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayServicePolicyArgs;
 * import com.pulumi.junipermist.org.inputs.DeviceprofileGatewayServicePolicyIdpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var deviceprofileGwOne = new DeviceprofileGateway("deviceprofileGwOne", DeviceprofileGatewayArgs.builder()
 *             .name("deviceprofile_gw_one")
 *             .orgId(terraformTest.id())
 *             .portConfig(Map.ofEntries(
 *                 Map.entry("ge-0/0/3", Map.ofEntries(
 *                     Map.entry("name", "FTTH"),
 *                     Map.entry("usage", "wan"),
 *                     Map.entry("aggregated", false),
 *                     Map.entry("redundant", false),
 *                     Map.entry("critical", false),
 *                     Map.entry("wanType", "broadband"),
 *                     Map.entry("ipConfig", Map.ofEntries(
 *                         Map.entry("type", "static"),
 *                         Map.entry("ip", "192.168.1.8"),
 *                         Map.entry("netmask", "/24"),
 *                         Map.entry("gateway", "192.168.1.1")
 *                     )),
 *                     Map.entry("disableAutoneg", false),
 *                     Map.entry("speed", "auto"),
 *                     Map.entry("duplex", "auto"),
 *                     Map.entry("wanSourceNat", Map.of("disabled", false)),
 *                     Map.entry("vpnPaths", Map.of("SSR_HUB_DC-MPLS.OrgOverlay", Map.ofEntries(
 *                         Map.entry("key", 0),
 *                         Map.entry("role", "spoke"),
 *                         Map.entry("bfdProfile", "broadband")
 *                     )))
 *                 )),
 *                 Map.entry("ge-0/0/5", Map.ofEntries(
 *                     Map.entry("usage", "lan"),
 *                     Map.entry("critical", false),
 *                     Map.entry("aggregated", true),
 *                     Map.entry("aeDisableLacp", false),
 *                     Map.entry("aeLacpForceUp", true),
 *                     Map.entry("aeIdx", 0),
 *                     Map.entry("redundant", false),
 *                     Map.entry("networks",                     
 *                         "PRD-Core",
 *                         "PRD-Mgmt",
 *                         "PRD-Lab")
 *                 ))
 *             ))
 *             .ipConfigs(Map.ofEntries(
 *                 Map.entry("PRD-Core", Map.ofEntries(
 *                     Map.entry("type", "static"),
 *                     Map.entry("ip", "10.3.100.9"),
 *                     Map.entry("netmask", "/24")
 *                 )),
 *                 Map.entry("PRD-Mgmt", Map.ofEntries(
 *                     Map.entry("type", "static"),
 *                     Map.entry("ip", "10.3.172.1"),
 *                     Map.entry("netmask", "/24")
 *                 )),
 *                 Map.entry("PRD-Lab", Map.ofEntries(
 *                     Map.entry("type", "static"),
 *                     Map.entry("ip", "10.3.171.1"),
 *                     Map.entry("netmask", "/24")
 *                 ))
 *             ))
 *             .servicePolicies(DeviceprofileGatewayServicePolicyArgs.builder()
 *                 .name("Policy-14")
 *                 .tenants("PRD-Core")
 *                 .services("any")
 *                 .action("allow")
 *                 .path_preference("HUB")
 *                 .idp(DeviceprofileGatewayServicePolicyIdpArgs.builder()
 *                     .enabled(true)
 *                     .profile("critical")
 *                     .alertOnly(false)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import `mist_org_deviceprofile_gateway` with:
 * 
 * Device Profile can be imported by specifying the org_id and the deviceprofile_id
 * 
 * ```sh
 * $ pulumi import junipermist:org/deviceprofileGateway:DeviceprofileGateway deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 * 
 */
@ResourceType(type="junipermist:org/deviceprofileGateway:DeviceprofileGateway")
public class DeviceprofileGateway extends com.pulumi.resources.CustomResource {
    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     * 
     */
    @Export(name="additionalConfigCmds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> additionalConfigCmds;

    /**
     * @return additional CLI commands to append to the generated Junos config. **Note**: no check is done
     * 
     */
    public Output<Optional<List<String>>> additionalConfigCmds() {
        return Codegen.optional(this.additionalConfigCmds);
    }
    @Export(name="bgpConfig", refs={Map.class,String.class,DeviceprofileGatewayBgpConfig.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayBgpConfig>> bgpConfig;

    public Output<Optional<Map<String,DeviceprofileGatewayBgpConfig>>> bgpConfig() {
        return Codegen.optional(this.bgpConfig);
    }
    @Export(name="dhcpdConfig", refs={DeviceprofileGatewayDhcpdConfig.class}, tree="[0]")
    private Output</* @Nullable */ DeviceprofileGatewayDhcpdConfig> dhcpdConfig;

    public Output<Optional<DeviceprofileGatewayDhcpdConfig>> dhcpdConfig() {
        return Codegen.optional(this.dhcpdConfig);
    }
    @Export(name="dnsOverride", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> dnsOverride;

    public Output<Boolean> dnsOverride() {
        return this.dnsOverride;
    }
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    @Export(name="dnsServers", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> dnsServers;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    public Output<Optional<List<String>>> dnsServers() {
        return Codegen.optional(this.dnsServers);
    }
    /**
     * Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    @Export(name="dnsSuffixes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> dnsSuffixes;

    /**
     * @return Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
     * 
     */
    public Output<Optional<List<String>>> dnsSuffixes() {
        return Codegen.optional(this.dnsSuffixes);
    }
    /**
     * Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;)
     * 
     */
    @Export(name="extraRoutes", refs={Map.class,String.class,DeviceprofileGatewayExtraRoutes.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayExtraRoutes>> extraRoutes;

    /**
     * @return Property key is the destination CIDR (e.g. &#34;10.0.0.0/8&#34;)
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayExtraRoutes>>> extraRoutes() {
        return Codegen.optional(this.extraRoutes);
    }
    /**
     * Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    @Export(name="extraRoutes6", refs={Map.class,String.class,DeviceprofileGatewayExtraRoutes6.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayExtraRoutes6>> extraRoutes6;

    /**
     * @return Property key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayExtraRoutes6>>> extraRoutes6() {
        return Codegen.optional(this.extraRoutes6);
    }
    /**
     * Property key is the profile name
     * 
     */
    @Export(name="idpProfiles", refs={Map.class,String.class,DeviceprofileGatewayIdpProfiles.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayIdpProfiles>> idpProfiles;

    /**
     * @return Property key is the profile name
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayIdpProfiles>>> idpProfiles() {
        return Codegen.optional(this.idpProfiles);
    }
    /**
     * Property key is the network name
     * 
     */
    @Export(name="ipConfigs", refs={Map.class,String.class,DeviceprofileGatewayIpConfigs.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayIpConfigs>> ipConfigs;

    /**
     * @return Property key is the network name
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayIpConfigs>>> ipConfigs() {
        return Codegen.optional(this.ipConfigs);
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    @Export(name="networks", refs={List.class,DeviceprofileGatewayNetwork.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DeviceprofileGatewayNetwork>> networks;

    public Output<Optional<List<DeviceprofileGatewayNetwork>>> networks() {
        return Codegen.optional(this.networks);
    }
    @Export(name="ntpOverride", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ntpOverride;

    public Output<Boolean> ntpOverride() {
        return this.ntpOverride;
    }
    /**
     * List of NTP servers specific to this device. By default, those in Site Settings will be used
     * 
     */
    @Export(name="ntpServers", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> ntpServers;

    /**
     * @return List of NTP servers specific to this device. By default, those in Site Settings will be used
     * 
     */
    public Output<Optional<List<String>>> ntpServers() {
        return Codegen.optional(this.ntpServers);
    }
    /**
     * Out-of-band (vme/em0/fxp0) IP config
     * 
     */
    @Export(name="oobIpConfig", refs={DeviceprofileGatewayOobIpConfig.class}, tree="[0]")
    private Output<DeviceprofileGatewayOobIpConfig> oobIpConfig;

    /**
     * @return Out-of-band (vme/em0/fxp0) IP config
     * 
     */
    public Output<DeviceprofileGatewayOobIpConfig> oobIpConfig() {
        return this.oobIpConfig;
    }
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * Property key is the path name
     * 
     */
    @Export(name="pathPreferences", refs={Map.class,String.class,DeviceprofileGatewayPathPreferences.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayPathPreferences>> pathPreferences;

    /**
     * @return Property key is the path name
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayPathPreferences>>> pathPreferences() {
        return Codegen.optional(this.pathPreferences);
    }
    /**
     * Property key is the port(s) name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    @Export(name="portConfig", refs={Map.class,String.class,DeviceprofileGatewayPortConfig.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayPortConfig>> portConfig;

    /**
     * @return Property key is the port(s) name or range (e.g. &#34;ge-0/0/0-10&#34;)
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayPortConfig>>> portConfig() {
        return Codegen.optional(this.portConfig);
    }
    /**
     * Auto assigned if not set
     * 
     */
    @Export(name="routerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> routerId;

    /**
     * @return Auto assigned if not set
     * 
     */
    public Output<Optional<String>> routerId() {
        return Codegen.optional(this.routerId);
    }
    /**
     * Property key is the routing policy name
     * 
     */
    @Export(name="routingPolicies", refs={Map.class,String.class,DeviceprofileGatewayRoutingPolicies.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayRoutingPolicies>> routingPolicies;

    /**
     * @return Property key is the routing policy name
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayRoutingPolicies>>> routingPolicies() {
        return Codegen.optional(this.routingPolicies);
    }
    @Export(name="servicePolicies", refs={List.class,DeviceprofileGatewayServicePolicy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DeviceprofileGatewayServicePolicy>> servicePolicies;

    public Output<Optional<List<DeviceprofileGatewayServicePolicy>>> servicePolicies() {
        return Codegen.optional(this.servicePolicies);
    }
    /**
     * Property key is the tunnel name
     * 
     */
    @Export(name="tunnelConfigs", refs={Map.class,String.class,DeviceprofileGatewayTunnelConfigs.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayTunnelConfigs>> tunnelConfigs;

    /**
     * @return Property key is the tunnel name
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayTunnelConfigs>>> tunnelConfigs() {
        return Codegen.optional(this.tunnelConfigs);
    }
    @Export(name="tunnelProviderOptions", refs={DeviceprofileGatewayTunnelProviderOptions.class}, tree="[0]")
    private Output</* @Nullable */ DeviceprofileGatewayTunnelProviderOptions> tunnelProviderOptions;

    public Output<Optional<DeviceprofileGatewayTunnelProviderOptions>> tunnelProviderOptions() {
        return Codegen.optional(this.tunnelProviderOptions);
    }
    /**
     * Device Type. enum: `gateway`
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Device Type. enum: `gateway`
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    @Export(name="vrfConfig", refs={DeviceprofileGatewayVrfConfig.class}, tree="[0]")
    private Output</* @Nullable */ DeviceprofileGatewayVrfConfig> vrfConfig;

    public Output<Optional<DeviceprofileGatewayVrfConfig>> vrfConfig() {
        return Codegen.optional(this.vrfConfig);
    }
    /**
     * Property key is the network name
     * 
     */
    @Export(name="vrfInstances", refs={Map.class,String.class,DeviceprofileGatewayVrfInstances.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,DeviceprofileGatewayVrfInstances>> vrfInstances;

    /**
     * @return Property key is the network name
     * 
     */
    public Output<Optional<Map<String,DeviceprofileGatewayVrfInstances>>> vrfInstances() {
        return Codegen.optional(this.vrfInstances);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DeviceprofileGateway(java.lang.String name) {
        this(name, DeviceprofileGatewayArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DeviceprofileGateway(java.lang.String name, DeviceprofileGatewayArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DeviceprofileGateway(java.lang.String name, DeviceprofileGatewayArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:org/deviceprofileGateway:DeviceprofileGateway", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DeviceprofileGateway(java.lang.String name, Output<java.lang.String> id, @Nullable DeviceprofileGatewayState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:org/deviceprofileGateway:DeviceprofileGateway", name, state, makeResourceOptions(options, id), false);
    }

    private static DeviceprofileGatewayArgs makeArgs(DeviceprofileGatewayArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DeviceprofileGatewayArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi/pulumi-junipermist")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DeviceprofileGateway get(java.lang.String name, Output<java.lang.String> id, @Nullable DeviceprofileGatewayState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DeviceprofileGateway(name, id, state, options);
    }
}
