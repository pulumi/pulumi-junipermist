// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAvprofilesOrgAvprofile {
    /**
     * @return When the object has been created, in epoch
     * 
     */
    private Double createdTime;
    /**
     * @return enum: `block`, `permit`
     * 
     */
    private String fallbackAction;
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    private String id;
    /**
     * @return In KB
     * 
     */
    private Integer maxFilesize;
    private List<String> mimeWhitelists;
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    private Double modifiedTime;
    private String name;
    private String orgId;
    /**
     * @return List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
     * 
     */
    private List<String> protocols;
    private List<String> urlWhitelists;

    private GetAvprofilesOrgAvprofile() {}
    /**
     * @return When the object has been created, in epoch
     * 
     */
    public Double createdTime() {
        return this.createdTime;
    }
    /**
     * @return enum: `block`, `permit`
     * 
     */
    public String fallbackAction() {
        return this.fallbackAction;
    }
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return In KB
     * 
     */
    public Integer maxFilesize() {
        return this.maxFilesize;
    }
    public List<String> mimeWhitelists() {
        return this.mimeWhitelists;
    }
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    public Double modifiedTime() {
        return this.modifiedTime;
    }
    public String name() {
        return this.name;
    }
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    public List<String> urlWhitelists() {
        return this.urlWhitelists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAvprofilesOrgAvprofile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double createdTime;
        private String fallbackAction;
        private String id;
        private Integer maxFilesize;
        private List<String> mimeWhitelists;
        private Double modifiedTime;
        private String name;
        private String orgId;
        private List<String> protocols;
        private List<String> urlWhitelists;
        public Builder() {}
        public Builder(GetAvprofilesOrgAvprofile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdTime = defaults.createdTime;
    	      this.fallbackAction = defaults.fallbackAction;
    	      this.id = defaults.id;
    	      this.maxFilesize = defaults.maxFilesize;
    	      this.mimeWhitelists = defaults.mimeWhitelists;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.protocols = defaults.protocols;
    	      this.urlWhitelists = defaults.urlWhitelists;
        }

        @CustomType.Setter
        public Builder createdTime(Double createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackAction(String fallbackAction) {
            if (fallbackAction == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "fallbackAction");
            }
            this.fallbackAction = fallbackAction;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxFilesize(Integer maxFilesize) {
            if (maxFilesize == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "maxFilesize");
            }
            this.maxFilesize = maxFilesize;
            return this;
        }
        @CustomType.Setter
        public Builder mimeWhitelists(List<String> mimeWhitelists) {
            if (mimeWhitelists == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "mimeWhitelists");
            }
            this.mimeWhitelists = mimeWhitelists;
            return this;
        }
        public Builder mimeWhitelists(String... mimeWhitelists) {
            return mimeWhitelists(List.of(mimeWhitelists));
        }
        @CustomType.Setter
        public Builder modifiedTime(Double modifiedTime) {
            if (modifiedTime == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "modifiedTime");
            }
            this.modifiedTime = modifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder urlWhitelists(List<String> urlWhitelists) {
            if (urlWhitelists == null) {
              throw new MissingRequiredPropertyException("GetAvprofilesOrgAvprofile", "urlWhitelists");
            }
            this.urlWhitelists = urlWhitelists;
            return this;
        }
        public Builder urlWhitelists(String... urlWhitelists) {
            return urlWhitelists(List.of(urlWhitelists));
        }
        public GetAvprofilesOrgAvprofile build() {
            final var _resultValue = new GetAvprofilesOrgAvprofile();
            _resultValue.createdTime = createdTime;
            _resultValue.fallbackAction = fallbackAction;
            _resultValue.id = id;
            _resultValue.maxFilesize = maxFilesize;
            _resultValue.mimeWhitelists = mimeWhitelists;
            _resultValue.modifiedTime = modifiedTime;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.protocols = protocols;
            _resultValue.urlWhitelists = urlWhitelists;
            return _resultValue;
        }
    }
}
