// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.junipermist.device.outputs.GatewayOobIpConfigNode1;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GatewayOobIpConfig {
    /**
     * @return if `type`==`static`
     * 
     */
    private @Nullable String gateway;
    /**
     * @return if `type`==`static`
     * 
     */
    private @Nullable String ip;
    /**
     * @return if `type`==`static`
     * 
     */
    private @Nullable String netmask;
    /**
     * @return for HA Cluster, node1 can have different IP Config
     * 
     */
    private @Nullable GatewayOobIpConfigNode1 node1;
    /**
     * @return enum: `dhcp`, `static`
     * 
     */
    private @Nullable String type;
    /**
     * @return if supported on the platform. If enabled, DNS will be using this routing-instance, too
     * 
     */
    private @Nullable Boolean useMgmtVrf;
    /**
     * @return for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
     * 
     */
    private @Nullable Boolean useMgmtVrfForHostOut;
    private @Nullable String vlanId;

    private GatewayOobIpConfig() {}
    /**
     * @return if `type`==`static`
     * 
     */
    public Optional<String> gateway() {
        return Optional.ofNullable(this.gateway);
    }
    /**
     * @return if `type`==`static`
     * 
     */
    public Optional<String> ip() {
        return Optional.ofNullable(this.ip);
    }
    /**
     * @return if `type`==`static`
     * 
     */
    public Optional<String> netmask() {
        return Optional.ofNullable(this.netmask);
    }
    /**
     * @return for HA Cluster, node1 can have different IP Config
     * 
     */
    public Optional<GatewayOobIpConfigNode1> node1() {
        return Optional.ofNullable(this.node1);
    }
    /**
     * @return enum: `dhcp`, `static`
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return if supported on the platform. If enabled, DNS will be using this routing-instance, too
     * 
     */
    public Optional<Boolean> useMgmtVrf() {
        return Optional.ofNullable(this.useMgmtVrf);
    }
    /**
     * @return for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
     * 
     */
    public Optional<Boolean> useMgmtVrfForHostOut() {
        return Optional.ofNullable(this.useMgmtVrfForHostOut);
    }
    public Optional<String> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GatewayOobIpConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String gateway;
        private @Nullable String ip;
        private @Nullable String netmask;
        private @Nullable GatewayOobIpConfigNode1 node1;
        private @Nullable String type;
        private @Nullable Boolean useMgmtVrf;
        private @Nullable Boolean useMgmtVrfForHostOut;
        private @Nullable String vlanId;
        public Builder() {}
        public Builder(GatewayOobIpConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gateway = defaults.gateway;
    	      this.ip = defaults.ip;
    	      this.netmask = defaults.netmask;
    	      this.node1 = defaults.node1;
    	      this.type = defaults.type;
    	      this.useMgmtVrf = defaults.useMgmtVrf;
    	      this.useMgmtVrfForHostOut = defaults.useMgmtVrfForHostOut;
    	      this.vlanId = defaults.vlanId;
        }

        @CustomType.Setter
        public Builder gateway(@Nullable String gateway) {

            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder ip(@Nullable String ip) {

            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder netmask(@Nullable String netmask) {

            this.netmask = netmask;
            return this;
        }
        @CustomType.Setter
        public Builder node1(@Nullable GatewayOobIpConfigNode1 node1) {

            this.node1 = node1;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder useMgmtVrf(@Nullable Boolean useMgmtVrf) {

            this.useMgmtVrf = useMgmtVrf;
            return this;
        }
        @CustomType.Setter
        public Builder useMgmtVrfForHostOut(@Nullable Boolean useMgmtVrfForHostOut) {

            this.useMgmtVrfForHostOut = useMgmtVrfForHostOut;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(@Nullable String vlanId) {

            this.vlanId = vlanId;
            return this;
        }
        public GatewayOobIpConfig build() {
            final var _resultValue = new GatewayOobIpConfig();
            _resultValue.gateway = gateway;
            _resultValue.ip = ip;
            _resultValue.netmask = netmask;
            _resultValue.node1 = node1;
            _resultValue.type = type;
            _resultValue.useMgmtVrf = useMgmtVrf;
            _resultValue.useMgmtVrfForHostOut = useMgmtVrfForHostOut;
            _resultValue.vlanId = vlanId;
            return _resultValue;
        }
    }
}
