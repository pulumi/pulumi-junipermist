// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SettingPasswordPolicy {
    /**
     * @return whether the policy is enabled
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return password expiry in days
     * 
     */
    private @Nullable Integer expiryInDays;
    /**
     * @return required password length
     * 
     */
    private @Nullable Integer minLength;
    /**
     * @return whether to require special character
     * 
     */
    private @Nullable Boolean requiresSpecialChar;
    /**
     * @return whether to require two-factor auth
     * 
     */
    private @Nullable Boolean requiresTwoFactorAuth;

    private SettingPasswordPolicy() {}
    /**
     * @return whether the policy is enabled
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return password expiry in days
     * 
     */
    public Optional<Integer> expiryInDays() {
        return Optional.ofNullable(this.expiryInDays);
    }
    /**
     * @return required password length
     * 
     */
    public Optional<Integer> minLength() {
        return Optional.ofNullable(this.minLength);
    }
    /**
     * @return whether to require special character
     * 
     */
    public Optional<Boolean> requiresSpecialChar() {
        return Optional.ofNullable(this.requiresSpecialChar);
    }
    /**
     * @return whether to require two-factor auth
     * 
     */
    public Optional<Boolean> requiresTwoFactorAuth() {
        return Optional.ofNullable(this.requiresTwoFactorAuth);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SettingPasswordPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable Integer expiryInDays;
        private @Nullable Integer minLength;
        private @Nullable Boolean requiresSpecialChar;
        private @Nullable Boolean requiresTwoFactorAuth;
        public Builder() {}
        public Builder(SettingPasswordPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.expiryInDays = defaults.expiryInDays;
    	      this.minLength = defaults.minLength;
    	      this.requiresSpecialChar = defaults.requiresSpecialChar;
    	      this.requiresTwoFactorAuth = defaults.requiresTwoFactorAuth;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder expiryInDays(@Nullable Integer expiryInDays) {

            this.expiryInDays = expiryInDays;
            return this;
        }
        @CustomType.Setter
        public Builder minLength(@Nullable Integer minLength) {

            this.minLength = minLength;
            return this;
        }
        @CustomType.Setter
        public Builder requiresSpecialChar(@Nullable Boolean requiresSpecialChar) {

            this.requiresSpecialChar = requiresSpecialChar;
            return this;
        }
        @CustomType.Setter
        public Builder requiresTwoFactorAuth(@Nullable Boolean requiresTwoFactorAuth) {

            this.requiresTwoFactorAuth = requiresTwoFactorAuth;
            return this;
        }
        public SettingPasswordPolicy build() {
            final var _resultValue = new SettingPasswordPolicy();
            _resultValue.enabled = enabled;
            _resultValue.expiryInDays = expiryInDays;
            _resultValue.minLength = minLength;
            _resultValue.requiresSpecialChar = requiresSpecialChar;
            _resultValue.requiresTwoFactorAuth = requiresTwoFactorAuth;
            return _resultValue;
        }
    }
}
