// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.junipermist.Utilities;
import com.pulumi.junipermist.inputs.GetSitesArgs;
import com.pulumi.junipermist.inputs.GetSitesPlainArgs;
import com.pulumi.junipermist.outputs.GetConstAlarmsResult;
import com.pulumi.junipermist.outputs.GetConstAppCategoriesResult;
import com.pulumi.junipermist.outputs.GetConstAppSubCategoriesResult;
import com.pulumi.junipermist.outputs.GetConstApplicationsResult;
import com.pulumi.junipermist.outputs.GetConstCountriesResult;
import com.pulumi.junipermist.outputs.GetConstFingerprintsResult;
import com.pulumi.junipermist.outputs.GetConstTrafficTypesResult;
import com.pulumi.junipermist.outputs.GetConstWebhooksResult;
import com.pulumi.junipermist.outputs.GetSitesResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class JunipermistFunctions {
    /**
     * This data source provides the list of available Alarms.
     * 
     * The alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAlarms = JunipermistFunctions.getConstAlarms();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAlarmsResult> getConstAlarms() {
        return getConstAlarms(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of available Alarms.
     * 
     * The alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAlarms = JunipermistFunctions.getConstAlarms();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAlarmsResult> getConstAlarmsPlain() {
        return getConstAlarmsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of available Alarms.
     * 
     * The alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAlarms = JunipermistFunctions.getConstAlarms();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAlarmsResult> getConstAlarms(InvokeArgs args) {
        return getConstAlarms(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of available Alarms.
     * 
     * The alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAlarms = JunipermistFunctions.getConstAlarms();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAlarmsResult> getConstAlarmsPlain(InvokeArgs args) {
        return getConstAlarmsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of available Alarms.
     * 
     * The alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAlarms = JunipermistFunctions.getConstAlarms();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAlarmsResult> getConstAlarms(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstAlarms:getConstAlarms", TypeShape.of(GetConstAlarmsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of available Alarms.
     * 
     * The alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAlarms = JunipermistFunctions.getConstAlarms();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAlarmsResult> getConstAlarms(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstAlarms:getConstAlarms", TypeShape.of(GetConstAlarmsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of available Alarms.
     * 
     * The alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAlarms = JunipermistFunctions.getConstAlarms();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAlarmsResult> getConstAlarmsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstAlarms:getConstAlarms", TypeShape.of(GetConstAlarmsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstAppCategories.
     * 
     * This information can be used as `app_categories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppCategoriesResult> getConstAppCategories() {
        return getConstAppCategories(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppCategories.
     * 
     * This information can be used as `app_categories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAppCategoriesResult> getConstAppCategoriesPlain() {
        return getConstAppCategoriesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppCategories.
     * 
     * This information can be used as `app_categories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppCategoriesResult> getConstAppCategories(InvokeArgs args) {
        return getConstAppCategories(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppCategories.
     * 
     * This information can be used as `app_categories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAppCategoriesResult> getConstAppCategoriesPlain(InvokeArgs args) {
        return getConstAppCategoriesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppCategories.
     * 
     * This information can be used as `app_categories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppCategoriesResult> getConstAppCategories(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstAppCategories:getConstAppCategories", TypeShape.of(GetConstAppCategoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstAppCategories.
     * 
     * This information can be used as `app_categories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppCategoriesResult> getConstAppCategories(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstAppCategories:getConstAppCategories", TypeShape.of(GetConstAppCategoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstAppCategories.
     * 
     * This information can be used as `app_categories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAppCategoriesResult> getConstAppCategoriesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstAppCategories:getConstAppCategories", TypeShape.of(GetConstAppCategoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstAppSubCategories.
     * 
     * This information can be used as `app_subcategories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppSubCategoriesResult> getConstAppSubCategories() {
        return getConstAppSubCategories(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppSubCategories.
     * 
     * This information can be used as `app_subcategories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAppSubCategoriesResult> getConstAppSubCategoriesPlain() {
        return getConstAppSubCategoriesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppSubCategories.
     * 
     * This information can be used as `app_subcategories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppSubCategoriesResult> getConstAppSubCategories(InvokeArgs args) {
        return getConstAppSubCategories(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppSubCategories.
     * 
     * This information can be used as `app_subcategories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAppSubCategoriesResult> getConstAppSubCategoriesPlain(InvokeArgs args) {
        return getConstAppSubCategoriesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstAppSubCategories.
     * 
     * This information can be used as `app_subcategories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppSubCategoriesResult> getConstAppSubCategories(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstAppSubCategories:getConstAppSubCategories", TypeShape.of(GetConstAppSubCategoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstAppSubCategories.
     * 
     * This information can be used as `app_subcategories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstAppSubCategoriesResult> getConstAppSubCategories(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstAppSubCategories:getConstAppSubCategories", TypeShape.of(GetConstAppSubCategoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstAppSubCategories.
     * 
     * This information can be used as `app_subcategories` in the `junipermist.org.Service` resource
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstAppSubCategoriesResult> getConstAppSubCategoriesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstAppSubCategories:getConstAppSubCategories", TypeShape.of(GetConstAppSubCategoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstApplications.
     * 
     * This information can be used as `apps` in:
     * * `junipermist.org.Service` resource
     * * `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`)
     * * `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfApplications = JunipermistFunctions.getConstApplications();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstApplicationsResult> getConstApplications() {
        return getConstApplications(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstApplications.
     * 
     * This information can be used as `apps` in:
     * * `junipermist.org.Service` resource
     * * `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`)
     * * `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfApplications = JunipermistFunctions.getConstApplications();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstApplicationsResult> getConstApplicationsPlain() {
        return getConstApplicationsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstApplications.
     * 
     * This information can be used as `apps` in:
     * * `junipermist.org.Service` resource
     * * `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`)
     * * `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfApplications = JunipermistFunctions.getConstApplications();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstApplicationsResult> getConstApplications(InvokeArgs args) {
        return getConstApplications(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstApplications.
     * 
     * This information can be used as `apps` in:
     * * `junipermist.org.Service` resource
     * * `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`)
     * * `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfApplications = JunipermistFunctions.getConstApplications();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstApplicationsResult> getConstApplicationsPlain(InvokeArgs args) {
        return getConstApplicationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstApplications.
     * 
     * This information can be used as `apps` in:
     * * `junipermist.org.Service` resource
     * * `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`)
     * * `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfApplications = JunipermistFunctions.getConstApplications();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstApplicationsResult> getConstApplications(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstApplications:getConstApplications", TypeShape.of(GetConstApplicationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstApplications.
     * 
     * This information can be used as `apps` in:
     * * `junipermist.org.Service` resource
     * * `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`)
     * * `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfApplications = JunipermistFunctions.getConstApplications();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstApplicationsResult> getConstApplications(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstApplications:getConstApplications", TypeShape.of(GetConstApplicationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstApplications.
     * 
     * This information can be used as `apps` in:
     * * `junipermist.org.Service` resource
     * * `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`)
     * * `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfApplications = JunipermistFunctions.getConstApplications();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstApplicationsResult> getConstApplicationsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstApplications:getConstApplications", TypeShape.of(GetConstApplicationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstCountries.
     * 
     * This information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfCountries = JunipermistFunctions.getConstCountries();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstCountriesResult> getConstCountries() {
        return getConstCountries(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstCountries.
     * 
     * This information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfCountries = JunipermistFunctions.getConstCountries();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstCountriesResult> getConstCountriesPlain() {
        return getConstCountriesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstCountries.
     * 
     * This information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfCountries = JunipermistFunctions.getConstCountries();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstCountriesResult> getConstCountries(InvokeArgs args) {
        return getConstCountries(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstCountries.
     * 
     * This information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfCountries = JunipermistFunctions.getConstCountries();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstCountriesResult> getConstCountriesPlain(InvokeArgs args) {
        return getConstCountriesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstCountries.
     * 
     * This information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfCountries = JunipermistFunctions.getConstCountries();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstCountriesResult> getConstCountries(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstCountries:getConstCountries", TypeShape.of(GetConstCountriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstCountries.
     * 
     * This information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfCountries = JunipermistFunctions.getConstCountries();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstCountriesResult> getConstCountries(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstCountries:getConstCountries", TypeShape.of(GetConstCountriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstCountries.
     * 
     * This information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfCountries = JunipermistFunctions.getConstCountries();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstCountriesResult> getConstCountriesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstCountries:getConstCountries", TypeShape.of(GetConstCountriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of list of supported Fingerprints.
     * 
     * The Fingerprint information can be used within `matching` and `not_matching` attributes of the NAC Rule resource (`junipermist.org.Nacrule`)
     * 
     * There are four different types of fingerprints available:* Family
     * * Model
     * * Mfg
     * * OS Type
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfFingerprints = JunipermistFunctions.getConstFingerprints();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstFingerprintsResult> getConstFingerprints() {
        return getConstFingerprints(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of list of supported Fingerprints.
     * 
     * The Fingerprint information can be used within `matching` and `not_matching` attributes of the NAC Rule resource (`junipermist.org.Nacrule`)
     * 
     * There are four different types of fingerprints available:* Family
     * * Model
     * * Mfg
     * * OS Type
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfFingerprints = JunipermistFunctions.getConstFingerprints();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstFingerprintsResult> getConstFingerprintsPlain() {
        return getConstFingerprintsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of list of supported Fingerprints.
     * 
     * The Fingerprint information can be used within `matching` and `not_matching` attributes of the NAC Rule resource (`junipermist.org.Nacrule`)
     * 
     * There are four different types of fingerprints available:* Family
     * * Model
     * * Mfg
     * * OS Type
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfFingerprints = JunipermistFunctions.getConstFingerprints();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstFingerprintsResult> getConstFingerprints(InvokeArgs args) {
        return getConstFingerprints(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of list of supported Fingerprints.
     * 
     * The Fingerprint information can be used within `matching` and `not_matching` attributes of the NAC Rule resource (`junipermist.org.Nacrule`)
     * 
     * There are four different types of fingerprints available:* Family
     * * Model
     * * Mfg
     * * OS Type
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfFingerprints = JunipermistFunctions.getConstFingerprints();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstFingerprintsResult> getConstFingerprintsPlain(InvokeArgs args) {
        return getConstFingerprintsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of list of supported Fingerprints.
     * 
     * The Fingerprint information can be used within `matching` and `not_matching` attributes of the NAC Rule resource (`junipermist.org.Nacrule`)
     * 
     * There are four different types of fingerprints available:* Family
     * * Model
     * * Mfg
     * * OS Type
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfFingerprints = JunipermistFunctions.getConstFingerprints();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstFingerprintsResult> getConstFingerprints(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstFingerprints:getConstFingerprints", TypeShape.of(GetConstFingerprintsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of list of supported Fingerprints.
     * 
     * The Fingerprint information can be used within `matching` and `not_matching` attributes of the NAC Rule resource (`junipermist.org.Nacrule`)
     * 
     * There are four different types of fingerprints available:* Family
     * * Model
     * * Mfg
     * * OS Type
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfFingerprints = JunipermistFunctions.getConstFingerprints();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstFingerprintsResult> getConstFingerprints(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstFingerprints:getConstFingerprints", TypeShape.of(GetConstFingerprintsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of list of supported Fingerprints.
     * 
     * The Fingerprint information can be used within `matching` and `not_matching` attributes of the NAC Rule resource (`junipermist.org.Nacrule`)
     * 
     * There are four different types of fingerprints available:* Family
     * * Model
     * * Mfg
     * * OS Type
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfFingerprints = JunipermistFunctions.getConstFingerprints();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstFingerprintsResult> getConstFingerprintsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstFingerprints:getConstFingerprints", TypeShape.of(GetConstFingerprintsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstTrafficTypes.
     * 
     * The Traffic Type values can be used to define the `traffic_type` attribute in the `junipermist.org.Service` resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstTrafficTypesResult> getConstTrafficTypes() {
        return getConstTrafficTypes(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstTrafficTypes.
     * 
     * The Traffic Type values can be used to define the `traffic_type` attribute in the `junipermist.org.Service` resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstTrafficTypesResult> getConstTrafficTypesPlain() {
        return getConstTrafficTypesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstTrafficTypes.
     * 
     * The Traffic Type values can be used to define the `traffic_type` attribute in the `junipermist.org.Service` resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstTrafficTypesResult> getConstTrafficTypes(InvokeArgs args) {
        return getConstTrafficTypes(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstTrafficTypes.
     * 
     * The Traffic Type values can be used to define the `traffic_type` attribute in the `junipermist.org.Service` resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstTrafficTypesResult> getConstTrafficTypesPlain(InvokeArgs args) {
        return getConstTrafficTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the of ConstTrafficTypes.
     * 
     * The Traffic Type values can be used to define the `traffic_type` attribute in the `junipermist.org.Service` resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstTrafficTypesResult> getConstTrafficTypes(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstTrafficTypes:getConstTrafficTypes", TypeShape.of(GetConstTrafficTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstTrafficTypes.
     * 
     * The Traffic Type values can be used to define the `traffic_type` attribute in the `junipermist.org.Service` resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstTrafficTypesResult> getConstTrafficTypes(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstTrafficTypes:getConstTrafficTypes", TypeShape.of(GetConstTrafficTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the of ConstTrafficTypes.
     * 
     * The Traffic Type values can be used to define the `traffic_type` attribute in the `junipermist.org.Service` resource.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstTrafficTypesResult> getConstTrafficTypesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstTrafficTypes:getConstTrafficTypes", TypeShape.of(GetConstTrafficTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Webhook Topics.
     * 
     * This information can be used to configure webhooks at the Org level (`junipermist.org.Webhook` resource) or at the Site level (`junipermist.site.Webhook` resource).
     * 
     * &gt; Only the Webhook topics with `for_org`==`  true ` are supported at the Org level.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstWebhooksResult> getConstWebhooks() {
        return getConstWebhooks(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Webhook Topics.
     * 
     * This information can be used to configure webhooks at the Org level (`junipermist.org.Webhook` resource) or at the Site level (`junipermist.site.Webhook` resource).
     * 
     * &gt; Only the Webhook topics with `for_org`==`  true ` are supported at the Org level.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstWebhooksResult> getConstWebhooksPlain() {
        return getConstWebhooksPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Webhook Topics.
     * 
     * This information can be used to configure webhooks at the Org level (`junipermist.org.Webhook` resource) or at the Site level (`junipermist.site.Webhook` resource).
     * 
     * &gt; Only the Webhook topics with `for_org`==`  true ` are supported at the Org level.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstWebhooksResult> getConstWebhooks(InvokeArgs args) {
        return getConstWebhooks(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Webhook Topics.
     * 
     * This information can be used to configure webhooks at the Org level (`junipermist.org.Webhook` resource) or at the Site level (`junipermist.site.Webhook` resource).
     * 
     * &gt; Only the Webhook topics with `for_org`==`  true ` are supported at the Org level.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstWebhooksResult> getConstWebhooksPlain(InvokeArgs args) {
        return getConstWebhooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Webhook Topics.
     * 
     * This information can be used to configure webhooks at the Org level (`junipermist.org.Webhook` resource) or at the Site level (`junipermist.site.Webhook` resource).
     * 
     * &gt; Only the Webhook topics with `for_org`==`  true ` are supported at the Org level.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstWebhooksResult> getConstWebhooks(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstWebhooks:getConstWebhooks", TypeShape.of(GetConstWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Webhook Topics.
     * 
     * This information can be used to configure webhooks at the Org level (`junipermist.org.Webhook` resource) or at the Site level (`junipermist.site.Webhook` resource).
     * 
     * &gt; Only the Webhook topics with `for_org`==`  true ` are supported at the Org level.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetConstWebhooksResult> getConstWebhooks(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getConstWebhooks:getConstWebhooks", TypeShape.of(GetConstWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Webhook Topics.
     * 
     * This information can be used to configure webhooks at the Org level (`junipermist.org.Webhook` resource) or at the Site level (`junipermist.site.Webhook` resource).
     * 
     * &gt; Only the Webhook topics with `for_org`==`  true ` are supported at the Org level.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetConstWebhooksResult> getConstWebhooksPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getConstWebhooks:getConstWebhooks", TypeShape.of(GetConstWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This datasource provides the list of sites in a Mist Organization.
     * A site represents a project, a deployment. A site contains a set of Maps, Wlans, Policies, Zones, ...
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import com.pulumi.junipermist.inputs.GetSitesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sites = JunipermistFunctions.getSites(GetSitesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSitesResult> getSites(GetSitesArgs args) {
        return getSites(args, InvokeOptions.Empty);
    }
    /**
     * This datasource provides the list of sites in a Mist Organization.
     * A site represents a project, a deployment. A site contains a set of Maps, Wlans, Policies, Zones, ...
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import com.pulumi.junipermist.inputs.GetSitesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sites = JunipermistFunctions.getSites(GetSitesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSitesResult> getSitesPlain(GetSitesPlainArgs args) {
        return getSitesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This datasource provides the list of sites in a Mist Organization.
     * A site represents a project, a deployment. A site contains a set of Maps, Wlans, Policies, Zones, ...
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import com.pulumi.junipermist.inputs.GetSitesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sites = JunipermistFunctions.getSites(GetSitesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSitesResult> getSites(GetSitesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getSites:getSites", TypeShape.of(GetSitesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This datasource provides the list of sites in a Mist Organization.
     * A site represents a project, a deployment. A site contains a set of Maps, Wlans, Policies, Zones, ...
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import com.pulumi.junipermist.inputs.GetSitesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sites = JunipermistFunctions.getSites(GetSitesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSitesResult> getSites(GetSitesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:index/getSites:getSites", TypeShape.of(GetSitesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This datasource provides the list of sites in a Mist Organization.
     * A site represents a project, a deployment. A site contains a set of Maps, Wlans, Policies, Zones, ...
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.JunipermistFunctions;
     * import com.pulumi.junipermist.inputs.GetSitesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sites = JunipermistFunctions.getSites(GetSitesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSitesResult> getSitesPlain(GetSitesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:index/getSites:getSites", TypeShape.of(GetSitesResult.class), args, Utilities.withVersion(options));
    }
}
