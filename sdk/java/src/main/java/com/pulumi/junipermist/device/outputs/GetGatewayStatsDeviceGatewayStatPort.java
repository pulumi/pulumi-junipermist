// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayStatsDeviceGatewayStatPort {
    /**
     * @return Indicates if interface is active/inactive
     * 
     */
    private Boolean active;
    /**
     * @return if `up`==`true` and has Authenticator role. enum: `authenticated`, `authenticating`, `held`, `init`
     * 
     */
    private String authState;
    /**
     * @return Indicates if interface is disabled
     * 
     */
    private Boolean disabled;
    private Boolean forSite;
    /**
     * @return Indicates full or half duplex
     * 
     */
    private Boolean fullDuplex;
    /**
     * @return Last sampled jitter of the interface
     * 
     */
    private Double jitter;
    /**
     * @return Last sampled latency of the interface
     * 
     */
    private Double latency;
    /**
     * @return Last sampled loss of the interface
     * 
     */
    private Double loss;
    /**
     * @return LTE ICCID value, Check for null/empty
     * 
     */
    private String lteIccid;
    /**
     * @return LTE IMEI value, Check for null/empty
     * 
     */
    private String lteImei;
    /**
     * @return LTE IMSI value, Check for null/empty
     * 
     */
    private String lteImsi;
    /**
     * @return Number of mac addresses in the forwarding table
     * 
     */
    private Integer macCount;
    /**
     * @return Limit on number of dynamically learned macs
     * 
     */
    private Integer macLimit;
    /**
     * @return chassis identifier of the chassis type listed
     * 
     */
    private String neighborMac;
    /**
     * @return Description supplied by the system on the interface E.g. &#34;GigabitEthernet2/0/39&#34;
     * 
     */
    private String neighborPortDesc;
    /**
     * @return Name supplied by the system on the interface E.g. neighbor system name E.g. &#34;Kumar-Acc-SW.mist.local&#34;
     * 
     */
    private String neighborSystemName;
    /**
     * @return Is the POE configured not be disabled.
     * 
     */
    private Boolean poeDisabled;
    /**
     * @return enum: `802.3af`, `802.3at`, `802.3bt`
     * 
     */
    private String poeMode;
    /**
     * @return Is the device attached to POE
     * 
     */
    private Boolean poeOn;
    private String portId;
    /**
     * @return Interface mac address
     * 
     */
    private String portMac;
    /**
     * @return gateway port usage. enum: `lan`
     * 
     */
    private String portUsage;
    /**
     * @return Amount of power being used by the interface at the time the command is executed. Unit in watts.
     * 
     */
    private Double powerDraw;
    /**
     * @return Broadcast input packets
     * 
     */
    private Integer rxBcastPkts;
    /**
     * @return Rate of receiving traffic, bits/seconds, last known
     * 
     */
    private Integer rxBps;
    /**
     * @return Amount of traffic received since connection
     * 
     */
    private Integer rxBytes;
    /**
     * @return Input errors
     * 
     */
    private Integer rxErrors;
    /**
     * @return Multicast input packets
     * 
     */
    private Integer rxMcastPkts;
    /**
     * @return Amount of packets received since connection
     * 
     */
    private Integer rxPkts;
    /**
     * @return Port speed
     * 
     */
    private Integer speed;
    /**
     * @return if `up`==`true`. enum: `alternate`, `backup`, `designated`, `root`, `root-prevented`
     * 
     */
    private String stpRole;
    /**
     * @return if `up`==`true`. enum: `blocking`, `disabled`, `forwarding`, `learning`, `listening`
     * 
     */
    private String stpState;
    /**
     * @return Broadcast output packets
     * 
     */
    private Integer txBcastPkts;
    /**
     * @return Rate of transmitting traffic, bits/seconds, last known
     * 
     */
    private Integer txBps;
    /**
     * @return Amount of traffic sent since connection
     * 
     */
    private Integer txBytes;
    /**
     * @return Output errors
     * 
     */
    private Integer txErrors;
    /**
     * @return Multicast output packets
     * 
     */
    private Integer txMcastPkts;
    /**
     * @return Amount of packets sent since connection
     * 
     */
    private Integer txPkts;
    /**
     * @return device type. enum: `ap`, `ble`, `gateway`, `mxedge`, `nac`, `switch`
     * 
     */
    private String type;
    /**
     * @return Indicates if interface is unconfigured
     * 
     */
    private Boolean unconfigured;
    /**
     * @return Indicates if interface is up
     * 
     */
    private Boolean up;
    /**
     * @return Optic Slot ModelName, Check for null/empty
     * 
     */
    private String xcvrModel;
    /**
     * @return Optic Slot Partnumber, Check for null/empty
     * 
     */
    private String xcvrPartNumber;
    /**
     * @return Optic Slot SerialNumber, Check for null/empty
     * 
     */
    private String xcvrSerial;

    private GetGatewayStatsDeviceGatewayStatPort() {}
    /**
     * @return Indicates if interface is active/inactive
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return if `up`==`true` and has Authenticator role. enum: `authenticated`, `authenticating`, `held`, `init`
     * 
     */
    public String authState() {
        return this.authState;
    }
    /**
     * @return Indicates if interface is disabled
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    public Boolean forSite() {
        return this.forSite;
    }
    /**
     * @return Indicates full or half duplex
     * 
     */
    public Boolean fullDuplex() {
        return this.fullDuplex;
    }
    /**
     * @return Last sampled jitter of the interface
     * 
     */
    public Double jitter() {
        return this.jitter;
    }
    /**
     * @return Last sampled latency of the interface
     * 
     */
    public Double latency() {
        return this.latency;
    }
    /**
     * @return Last sampled loss of the interface
     * 
     */
    public Double loss() {
        return this.loss;
    }
    /**
     * @return LTE ICCID value, Check for null/empty
     * 
     */
    public String lteIccid() {
        return this.lteIccid;
    }
    /**
     * @return LTE IMEI value, Check for null/empty
     * 
     */
    public String lteImei() {
        return this.lteImei;
    }
    /**
     * @return LTE IMSI value, Check for null/empty
     * 
     */
    public String lteImsi() {
        return this.lteImsi;
    }
    /**
     * @return Number of mac addresses in the forwarding table
     * 
     */
    public Integer macCount() {
        return this.macCount;
    }
    /**
     * @return Limit on number of dynamically learned macs
     * 
     */
    public Integer macLimit() {
        return this.macLimit;
    }
    /**
     * @return chassis identifier of the chassis type listed
     * 
     */
    public String neighborMac() {
        return this.neighborMac;
    }
    /**
     * @return Description supplied by the system on the interface E.g. &#34;GigabitEthernet2/0/39&#34;
     * 
     */
    public String neighborPortDesc() {
        return this.neighborPortDesc;
    }
    /**
     * @return Name supplied by the system on the interface E.g. neighbor system name E.g. &#34;Kumar-Acc-SW.mist.local&#34;
     * 
     */
    public String neighborSystemName() {
        return this.neighborSystemName;
    }
    /**
     * @return Is the POE configured not be disabled.
     * 
     */
    public Boolean poeDisabled() {
        return this.poeDisabled;
    }
    /**
     * @return enum: `802.3af`, `802.3at`, `802.3bt`
     * 
     */
    public String poeMode() {
        return this.poeMode;
    }
    /**
     * @return Is the device attached to POE
     * 
     */
    public Boolean poeOn() {
        return this.poeOn;
    }
    public String portId() {
        return this.portId;
    }
    /**
     * @return Interface mac address
     * 
     */
    public String portMac() {
        return this.portMac;
    }
    /**
     * @return gateway port usage. enum: `lan`
     * 
     */
    public String portUsage() {
        return this.portUsage;
    }
    /**
     * @return Amount of power being used by the interface at the time the command is executed. Unit in watts.
     * 
     */
    public Double powerDraw() {
        return this.powerDraw;
    }
    /**
     * @return Broadcast input packets
     * 
     */
    public Integer rxBcastPkts() {
        return this.rxBcastPkts;
    }
    /**
     * @return Rate of receiving traffic, bits/seconds, last known
     * 
     */
    public Integer rxBps() {
        return this.rxBps;
    }
    /**
     * @return Amount of traffic received since connection
     * 
     */
    public Integer rxBytes() {
        return this.rxBytes;
    }
    /**
     * @return Input errors
     * 
     */
    public Integer rxErrors() {
        return this.rxErrors;
    }
    /**
     * @return Multicast input packets
     * 
     */
    public Integer rxMcastPkts() {
        return this.rxMcastPkts;
    }
    /**
     * @return Amount of packets received since connection
     * 
     */
    public Integer rxPkts() {
        return this.rxPkts;
    }
    /**
     * @return Port speed
     * 
     */
    public Integer speed() {
        return this.speed;
    }
    /**
     * @return if `up`==`true`. enum: `alternate`, `backup`, `designated`, `root`, `root-prevented`
     * 
     */
    public String stpRole() {
        return this.stpRole;
    }
    /**
     * @return if `up`==`true`. enum: `blocking`, `disabled`, `forwarding`, `learning`, `listening`
     * 
     */
    public String stpState() {
        return this.stpState;
    }
    /**
     * @return Broadcast output packets
     * 
     */
    public Integer txBcastPkts() {
        return this.txBcastPkts;
    }
    /**
     * @return Rate of transmitting traffic, bits/seconds, last known
     * 
     */
    public Integer txBps() {
        return this.txBps;
    }
    /**
     * @return Amount of traffic sent since connection
     * 
     */
    public Integer txBytes() {
        return this.txBytes;
    }
    /**
     * @return Output errors
     * 
     */
    public Integer txErrors() {
        return this.txErrors;
    }
    /**
     * @return Multicast output packets
     * 
     */
    public Integer txMcastPkts() {
        return this.txMcastPkts;
    }
    /**
     * @return Amount of packets sent since connection
     * 
     */
    public Integer txPkts() {
        return this.txPkts;
    }
    /**
     * @return device type. enum: `ap`, `ble`, `gateway`, `mxedge`, `nac`, `switch`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Indicates if interface is unconfigured
     * 
     */
    public Boolean unconfigured() {
        return this.unconfigured;
    }
    /**
     * @return Indicates if interface is up
     * 
     */
    public Boolean up() {
        return this.up;
    }
    /**
     * @return Optic Slot ModelName, Check for null/empty
     * 
     */
    public String xcvrModel() {
        return this.xcvrModel;
    }
    /**
     * @return Optic Slot Partnumber, Check for null/empty
     * 
     */
    public String xcvrPartNumber() {
        return this.xcvrPartNumber;
    }
    /**
     * @return Optic Slot SerialNumber, Check for null/empty
     * 
     */
    public String xcvrSerial() {
        return this.xcvrSerial;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayStatsDeviceGatewayStatPort defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String authState;
        private Boolean disabled;
        private Boolean forSite;
        private Boolean fullDuplex;
        private Double jitter;
        private Double latency;
        private Double loss;
        private String lteIccid;
        private String lteImei;
        private String lteImsi;
        private Integer macCount;
        private Integer macLimit;
        private String neighborMac;
        private String neighborPortDesc;
        private String neighborSystemName;
        private Boolean poeDisabled;
        private String poeMode;
        private Boolean poeOn;
        private String portId;
        private String portMac;
        private String portUsage;
        private Double powerDraw;
        private Integer rxBcastPkts;
        private Integer rxBps;
        private Integer rxBytes;
        private Integer rxErrors;
        private Integer rxMcastPkts;
        private Integer rxPkts;
        private Integer speed;
        private String stpRole;
        private String stpState;
        private Integer txBcastPkts;
        private Integer txBps;
        private Integer txBytes;
        private Integer txErrors;
        private Integer txMcastPkts;
        private Integer txPkts;
        private String type;
        private Boolean unconfigured;
        private Boolean up;
        private String xcvrModel;
        private String xcvrPartNumber;
        private String xcvrSerial;
        public Builder() {}
        public Builder(GetGatewayStatsDeviceGatewayStatPort defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.authState = defaults.authState;
    	      this.disabled = defaults.disabled;
    	      this.forSite = defaults.forSite;
    	      this.fullDuplex = defaults.fullDuplex;
    	      this.jitter = defaults.jitter;
    	      this.latency = defaults.latency;
    	      this.loss = defaults.loss;
    	      this.lteIccid = defaults.lteIccid;
    	      this.lteImei = defaults.lteImei;
    	      this.lteImsi = defaults.lteImsi;
    	      this.macCount = defaults.macCount;
    	      this.macLimit = defaults.macLimit;
    	      this.neighborMac = defaults.neighborMac;
    	      this.neighborPortDesc = defaults.neighborPortDesc;
    	      this.neighborSystemName = defaults.neighborSystemName;
    	      this.poeDisabled = defaults.poeDisabled;
    	      this.poeMode = defaults.poeMode;
    	      this.poeOn = defaults.poeOn;
    	      this.portId = defaults.portId;
    	      this.portMac = defaults.portMac;
    	      this.portUsage = defaults.portUsage;
    	      this.powerDraw = defaults.powerDraw;
    	      this.rxBcastPkts = defaults.rxBcastPkts;
    	      this.rxBps = defaults.rxBps;
    	      this.rxBytes = defaults.rxBytes;
    	      this.rxErrors = defaults.rxErrors;
    	      this.rxMcastPkts = defaults.rxMcastPkts;
    	      this.rxPkts = defaults.rxPkts;
    	      this.speed = defaults.speed;
    	      this.stpRole = defaults.stpRole;
    	      this.stpState = defaults.stpState;
    	      this.txBcastPkts = defaults.txBcastPkts;
    	      this.txBps = defaults.txBps;
    	      this.txBytes = defaults.txBytes;
    	      this.txErrors = defaults.txErrors;
    	      this.txMcastPkts = defaults.txMcastPkts;
    	      this.txPkts = defaults.txPkts;
    	      this.type = defaults.type;
    	      this.unconfigured = defaults.unconfigured;
    	      this.up = defaults.up;
    	      this.xcvrModel = defaults.xcvrModel;
    	      this.xcvrPartNumber = defaults.xcvrPartNumber;
    	      this.xcvrSerial = defaults.xcvrSerial;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder authState(String authState) {
            if (authState == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "authState");
            }
            this.authState = authState;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder forSite(Boolean forSite) {
            if (forSite == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "forSite");
            }
            this.forSite = forSite;
            return this;
        }
        @CustomType.Setter
        public Builder fullDuplex(Boolean fullDuplex) {
            if (fullDuplex == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "fullDuplex");
            }
            this.fullDuplex = fullDuplex;
            return this;
        }
        @CustomType.Setter
        public Builder jitter(Double jitter) {
            if (jitter == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "jitter");
            }
            this.jitter = jitter;
            return this;
        }
        @CustomType.Setter
        public Builder latency(Double latency) {
            if (latency == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "latency");
            }
            this.latency = latency;
            return this;
        }
        @CustomType.Setter
        public Builder loss(Double loss) {
            if (loss == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "loss");
            }
            this.loss = loss;
            return this;
        }
        @CustomType.Setter
        public Builder lteIccid(String lteIccid) {
            if (lteIccid == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "lteIccid");
            }
            this.lteIccid = lteIccid;
            return this;
        }
        @CustomType.Setter
        public Builder lteImei(String lteImei) {
            if (lteImei == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "lteImei");
            }
            this.lteImei = lteImei;
            return this;
        }
        @CustomType.Setter
        public Builder lteImsi(String lteImsi) {
            if (lteImsi == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "lteImsi");
            }
            this.lteImsi = lteImsi;
            return this;
        }
        @CustomType.Setter
        public Builder macCount(Integer macCount) {
            if (macCount == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "macCount");
            }
            this.macCount = macCount;
            return this;
        }
        @CustomType.Setter
        public Builder macLimit(Integer macLimit) {
            if (macLimit == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "macLimit");
            }
            this.macLimit = macLimit;
            return this;
        }
        @CustomType.Setter
        public Builder neighborMac(String neighborMac) {
            if (neighborMac == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "neighborMac");
            }
            this.neighborMac = neighborMac;
            return this;
        }
        @CustomType.Setter
        public Builder neighborPortDesc(String neighborPortDesc) {
            if (neighborPortDesc == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "neighborPortDesc");
            }
            this.neighborPortDesc = neighborPortDesc;
            return this;
        }
        @CustomType.Setter
        public Builder neighborSystemName(String neighborSystemName) {
            if (neighborSystemName == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "neighborSystemName");
            }
            this.neighborSystemName = neighborSystemName;
            return this;
        }
        @CustomType.Setter
        public Builder poeDisabled(Boolean poeDisabled) {
            if (poeDisabled == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "poeDisabled");
            }
            this.poeDisabled = poeDisabled;
            return this;
        }
        @CustomType.Setter
        public Builder poeMode(String poeMode) {
            if (poeMode == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "poeMode");
            }
            this.poeMode = poeMode;
            return this;
        }
        @CustomType.Setter
        public Builder poeOn(Boolean poeOn) {
            if (poeOn == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "poeOn");
            }
            this.poeOn = poeOn;
            return this;
        }
        @CustomType.Setter
        public Builder portId(String portId) {
            if (portId == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "portId");
            }
            this.portId = portId;
            return this;
        }
        @CustomType.Setter
        public Builder portMac(String portMac) {
            if (portMac == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "portMac");
            }
            this.portMac = portMac;
            return this;
        }
        @CustomType.Setter
        public Builder portUsage(String portUsage) {
            if (portUsage == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "portUsage");
            }
            this.portUsage = portUsage;
            return this;
        }
        @CustomType.Setter
        public Builder powerDraw(Double powerDraw) {
            if (powerDraw == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "powerDraw");
            }
            this.powerDraw = powerDraw;
            return this;
        }
        @CustomType.Setter
        public Builder rxBcastPkts(Integer rxBcastPkts) {
            if (rxBcastPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "rxBcastPkts");
            }
            this.rxBcastPkts = rxBcastPkts;
            return this;
        }
        @CustomType.Setter
        public Builder rxBps(Integer rxBps) {
            if (rxBps == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "rxBps");
            }
            this.rxBps = rxBps;
            return this;
        }
        @CustomType.Setter
        public Builder rxBytes(Integer rxBytes) {
            if (rxBytes == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "rxBytes");
            }
            this.rxBytes = rxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder rxErrors(Integer rxErrors) {
            if (rxErrors == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "rxErrors");
            }
            this.rxErrors = rxErrors;
            return this;
        }
        @CustomType.Setter
        public Builder rxMcastPkts(Integer rxMcastPkts) {
            if (rxMcastPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "rxMcastPkts");
            }
            this.rxMcastPkts = rxMcastPkts;
            return this;
        }
        @CustomType.Setter
        public Builder rxPkts(Integer rxPkts) {
            if (rxPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "rxPkts");
            }
            this.rxPkts = rxPkts;
            return this;
        }
        @CustomType.Setter
        public Builder speed(Integer speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder stpRole(String stpRole) {
            if (stpRole == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "stpRole");
            }
            this.stpRole = stpRole;
            return this;
        }
        @CustomType.Setter
        public Builder stpState(String stpState) {
            if (stpState == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "stpState");
            }
            this.stpState = stpState;
            return this;
        }
        @CustomType.Setter
        public Builder txBcastPkts(Integer txBcastPkts) {
            if (txBcastPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "txBcastPkts");
            }
            this.txBcastPkts = txBcastPkts;
            return this;
        }
        @CustomType.Setter
        public Builder txBps(Integer txBps) {
            if (txBps == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "txBps");
            }
            this.txBps = txBps;
            return this;
        }
        @CustomType.Setter
        public Builder txBytes(Integer txBytes) {
            if (txBytes == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "txBytes");
            }
            this.txBytes = txBytes;
            return this;
        }
        @CustomType.Setter
        public Builder txErrors(Integer txErrors) {
            if (txErrors == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "txErrors");
            }
            this.txErrors = txErrors;
            return this;
        }
        @CustomType.Setter
        public Builder txMcastPkts(Integer txMcastPkts) {
            if (txMcastPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "txMcastPkts");
            }
            this.txMcastPkts = txMcastPkts;
            return this;
        }
        @CustomType.Setter
        public Builder txPkts(Integer txPkts) {
            if (txPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "txPkts");
            }
            this.txPkts = txPkts;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder unconfigured(Boolean unconfigured) {
            if (unconfigured == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "unconfigured");
            }
            this.unconfigured = unconfigured;
            return this;
        }
        @CustomType.Setter
        public Builder up(Boolean up) {
            if (up == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "up");
            }
            this.up = up;
            return this;
        }
        @CustomType.Setter
        public Builder xcvrModel(String xcvrModel) {
            if (xcvrModel == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "xcvrModel");
            }
            this.xcvrModel = xcvrModel;
            return this;
        }
        @CustomType.Setter
        public Builder xcvrPartNumber(String xcvrPartNumber) {
            if (xcvrPartNumber == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "xcvrPartNumber");
            }
            this.xcvrPartNumber = xcvrPartNumber;
            return this;
        }
        @CustomType.Setter
        public Builder xcvrSerial(String xcvrSerial) {
            if (xcvrSerial == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatPort", "xcvrSerial");
            }
            this.xcvrSerial = xcvrSerial;
            return this;
        }
        public GetGatewayStatsDeviceGatewayStatPort build() {
            final var _resultValue = new GetGatewayStatsDeviceGatewayStatPort();
            _resultValue.active = active;
            _resultValue.authState = authState;
            _resultValue.disabled = disabled;
            _resultValue.forSite = forSite;
            _resultValue.fullDuplex = fullDuplex;
            _resultValue.jitter = jitter;
            _resultValue.latency = latency;
            _resultValue.loss = loss;
            _resultValue.lteIccid = lteIccid;
            _resultValue.lteImei = lteImei;
            _resultValue.lteImsi = lteImsi;
            _resultValue.macCount = macCount;
            _resultValue.macLimit = macLimit;
            _resultValue.neighborMac = neighborMac;
            _resultValue.neighborPortDesc = neighborPortDesc;
            _resultValue.neighborSystemName = neighborSystemName;
            _resultValue.poeDisabled = poeDisabled;
            _resultValue.poeMode = poeMode;
            _resultValue.poeOn = poeOn;
            _resultValue.portId = portId;
            _resultValue.portMac = portMac;
            _resultValue.portUsage = portUsage;
            _resultValue.powerDraw = powerDraw;
            _resultValue.rxBcastPkts = rxBcastPkts;
            _resultValue.rxBps = rxBps;
            _resultValue.rxBytes = rxBytes;
            _resultValue.rxErrors = rxErrors;
            _resultValue.rxMcastPkts = rxMcastPkts;
            _resultValue.rxPkts = rxPkts;
            _resultValue.speed = speed;
            _resultValue.stpRole = stpRole;
            _resultValue.stpState = stpState;
            _resultValue.txBcastPkts = txBcastPkts;
            _resultValue.txBps = txBps;
            _resultValue.txBytes = txBytes;
            _resultValue.txErrors = txErrors;
            _resultValue.txMcastPkts = txMcastPkts;
            _resultValue.txPkts = txPkts;
            _resultValue.type = type;
            _resultValue.unconfigured = unconfigured;
            _resultValue.up = up;
            _resultValue.xcvrModel = xcvrModel;
            _resultValue.xcvrPartNumber = xcvrPartNumber;
            _resultValue.xcvrSerial = xcvrSerial;
            return _resultValue;
        }
    }
}
