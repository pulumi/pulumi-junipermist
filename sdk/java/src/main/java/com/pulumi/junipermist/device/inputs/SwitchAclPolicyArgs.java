// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.device.inputs.SwitchAclPolicyActionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SwitchAclPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final SwitchAclPolicyArgs Empty = new SwitchAclPolicyArgs();

    /**
     * ACL Policy Actions:
     *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
     *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<SwitchAclPolicyActionArgs>> actions;

    /**
     * @return ACL Policy Actions:
     *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
     *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
     * 
     */
    public Optional<Output<List<SwitchAclPolicyActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ACL Policy Source Tags:
     *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
     *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
     * 
     */
    @Import(name="srcTags")
    private @Nullable Output<List<String>> srcTags;

    /**
     * @return ACL Policy Source Tags:
     *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
     *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
     * 
     */
    public Optional<Output<List<String>>> srcTags() {
        return Optional.ofNullable(this.srcTags);
    }

    private SwitchAclPolicyArgs() {}

    private SwitchAclPolicyArgs(SwitchAclPolicyArgs $) {
        this.actions = $.actions;
        this.name = $.name;
        this.srcTags = $.srcTags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchAclPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchAclPolicyArgs $;

        public Builder() {
            $ = new SwitchAclPolicyArgs();
        }

        public Builder(SwitchAclPolicyArgs defaults) {
            $ = new SwitchAclPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions ACL Policy Actions:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<SwitchAclPolicyActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions ACL Policy Actions:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         * 
         * @return builder
         * 
         */
        public Builder actions(List<SwitchAclPolicyActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions ACL Policy Actions:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         * 
         * @return builder
         * 
         */
        public Builder actions(SwitchAclPolicyActionArgs... actions) {
            return actions(List.of(actions));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param srcTags ACL Policy Source Tags:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         * 
         * @return builder
         * 
         */
        public Builder srcTags(@Nullable Output<List<String>> srcTags) {
            $.srcTags = srcTags;
            return this;
        }

        /**
         * @param srcTags ACL Policy Source Tags:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         * 
         * @return builder
         * 
         */
        public Builder srcTags(List<String> srcTags) {
            return srcTags(Output.of(srcTags));
        }

        /**
         * @param srcTags ACL Policy Source Tags:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         * 
         * @return builder
         * 
         */
        public Builder srcTags(String... srcTags) {
            return srcTags(List.of(srcTags));
        }

        public SwitchAclPolicyArgs build() {
            return $;
        }
    }

}
