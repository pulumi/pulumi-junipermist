// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BaseState extends com.pulumi.resources.ResourceArgs {

    public static final BaseState Empty = new BaseState();

    @Import(name="alarmtemplateId")
    private @Nullable Output<String> alarmtemplateId;

    public Optional<Output<String>> alarmtemplateId() {
        return Optional.ofNullable(this.alarmtemplateId);
    }

    @Import(name="allowMist")
    private @Nullable Output<Boolean> allowMist;

    public Optional<Output<Boolean>> allowMist() {
        return Optional.ofNullable(this.allowMist);
    }

    @Import(name="mspId")
    private @Nullable Output<String> mspId;

    public Optional<Output<String>> mspId() {
        return Optional.ofNullable(this.mspId);
    }

    /**
     * logo uploaded by the MSP with advanced tier, only present if provided
     * 
     */
    @Import(name="mspLogoUrl")
    private @Nullable Output<String> mspLogoUrl;

    /**
     * @return logo uploaded by the MSP with advanced tier, only present if provided
     * 
     */
    public Optional<Output<String>> mspLogoUrl() {
        return Optional.ofNullable(this.mspLogoUrl);
    }

    /**
     * Name of the msp the org belongs to
     * 
     */
    @Import(name="mspName")
    private @Nullable Output<String> mspName;

    /**
     * @return Name of the msp the org belongs to
     * 
     */
    public Optional<Output<String>> mspName() {
        return Optional.ofNullable(this.mspName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="orggroupIds")
    private @Nullable Output<List<String>> orggroupIds;

    public Optional<Output<List<String>>> orggroupIds() {
        return Optional.ofNullable(this.orggroupIds);
    }

    @Import(name="sessionExpiry")
    private @Nullable Output<Integer> sessionExpiry;

    public Optional<Output<Integer>> sessionExpiry() {
        return Optional.ofNullable(this.sessionExpiry);
    }

    private BaseState() {}

    private BaseState(BaseState $) {
        this.alarmtemplateId = $.alarmtemplateId;
        this.allowMist = $.allowMist;
        this.mspId = $.mspId;
        this.mspLogoUrl = $.mspLogoUrl;
        this.mspName = $.mspName;
        this.name = $.name;
        this.orggroupIds = $.orggroupIds;
        this.sessionExpiry = $.sessionExpiry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BaseState $;

        public Builder() {
            $ = new BaseState();
        }

        public Builder(BaseState defaults) {
            $ = new BaseState(Objects.requireNonNull(defaults));
        }

        public Builder alarmtemplateId(@Nullable Output<String> alarmtemplateId) {
            $.alarmtemplateId = alarmtemplateId;
            return this;
        }

        public Builder alarmtemplateId(String alarmtemplateId) {
            return alarmtemplateId(Output.of(alarmtemplateId));
        }

        public Builder allowMist(@Nullable Output<Boolean> allowMist) {
            $.allowMist = allowMist;
            return this;
        }

        public Builder allowMist(Boolean allowMist) {
            return allowMist(Output.of(allowMist));
        }

        public Builder mspId(@Nullable Output<String> mspId) {
            $.mspId = mspId;
            return this;
        }

        public Builder mspId(String mspId) {
            return mspId(Output.of(mspId));
        }

        /**
         * @param mspLogoUrl logo uploaded by the MSP with advanced tier, only present if provided
         * 
         * @return builder
         * 
         */
        public Builder mspLogoUrl(@Nullable Output<String> mspLogoUrl) {
            $.mspLogoUrl = mspLogoUrl;
            return this;
        }

        /**
         * @param mspLogoUrl logo uploaded by the MSP with advanced tier, only present if provided
         * 
         * @return builder
         * 
         */
        public Builder mspLogoUrl(String mspLogoUrl) {
            return mspLogoUrl(Output.of(mspLogoUrl));
        }

        /**
         * @param mspName Name of the msp the org belongs to
         * 
         * @return builder
         * 
         */
        public Builder mspName(@Nullable Output<String> mspName) {
            $.mspName = mspName;
            return this;
        }

        /**
         * @param mspName Name of the msp the org belongs to
         * 
         * @return builder
         * 
         */
        public Builder mspName(String mspName) {
            return mspName(Output.of(mspName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder orggroupIds(@Nullable Output<List<String>> orggroupIds) {
            $.orggroupIds = orggroupIds;
            return this;
        }

        public Builder orggroupIds(List<String> orggroupIds) {
            return orggroupIds(Output.of(orggroupIds));
        }

        public Builder orggroupIds(String... orggroupIds) {
            return orggroupIds(List.of(orggroupIds));
        }

        public Builder sessionExpiry(@Nullable Output<Integer> sessionExpiry) {
            $.sessionExpiry = sessionExpiry;
            return this;
        }

        public Builder sessionExpiry(Integer sessionExpiry) {
            return sessionExpiry(Output.of(sessionExpiry));
        }

        public BaseState build() {
            return $;
        }
    }

}
