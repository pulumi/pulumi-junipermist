// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayRoutingPoliciesTermActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayRoutingPoliciesTermActionArgs Empty = new GatewayRoutingPoliciesTermActionArgs();

    @Import(name="accept")
    private @Nullable Output<Boolean> accept;

    public Optional<Output<Boolean>> accept() {
        return Optional.ofNullable(this.accept);
    }

    @Import(name="addCommunities")
    private @Nullable Output<List<String>> addCommunities;

    public Optional<Output<List<String>>> addCommunities() {
        return Optional.ofNullable(this.addCommunities);
    }

    /**
     * for SSR, hub decides how VRF routes are leaked on spoke
     * 
     */
    @Import(name="addTargetVrfs")
    private @Nullable Output<List<String>> addTargetVrfs;

    /**
     * @return for SSR, hub decides how VRF routes are leaked on spoke
     * 
     */
    public Optional<Output<List<String>>> addTargetVrfs() {
        return Optional.ofNullable(this.addTargetVrfs);
    }

    /**
     * when used as export policy, optional
     * 
     */
    @Import(name="communities")
    private @Nullable Output<List<String>> communities;

    /**
     * @return when used as export policy, optional
     * 
     */
    public Optional<Output<List<String>>> communities() {
        return Optional.ofNullable(this.communities);
    }

    /**
     * when used as export policy, optional. To exclude certain AS
     * 
     */
    @Import(name="excludeAsPaths")
    private @Nullable Output<List<String>> excludeAsPaths;

    /**
     * @return when used as export policy, optional. To exclude certain AS
     * 
     */
    public Optional<Output<List<String>>> excludeAsPaths() {
        return Optional.ofNullable(this.excludeAsPaths);
    }

    @Import(name="excludeCommunities")
    private @Nullable Output<List<String>> excludeCommunities;

    public Optional<Output<List<String>>> excludeCommunities() {
        return Optional.ofNullable(this.excludeCommunities);
    }

    /**
     * when used as export policy, optional
     * 
     */
    @Import(name="exportCommunitites")
    private @Nullable Output<List<String>> exportCommunitites;

    /**
     * @return when used as export policy, optional
     * 
     */
    public Optional<Output<List<String>>> exportCommunitites() {
        return Optional.ofNullable(this.exportCommunitites);
    }

    /**
     * optional, for an import policy, local_preference can be changed
     * 
     */
    @Import(name="localPreference")
    private @Nullable Output<String> localPreference;

    /**
     * @return optional, for an import policy, local_preference can be changed
     * 
     */
    public Optional<Output<String>> localPreference() {
        return Optional.ofNullable(this.localPreference);
    }

    /**
     * when used as export policy, optional. By default, the local AS will be prepended, to change it
     * 
     */
    @Import(name="prependAsPaths")
    private @Nullable Output<List<String>> prependAsPaths;

    /**
     * @return when used as export policy, optional. By default, the local AS will be prepended, to change it
     * 
     */
    public Optional<Output<List<String>>> prependAsPaths() {
        return Optional.ofNullable(this.prependAsPaths);
    }

    private GatewayRoutingPoliciesTermActionArgs() {}

    private GatewayRoutingPoliciesTermActionArgs(GatewayRoutingPoliciesTermActionArgs $) {
        this.accept = $.accept;
        this.addCommunities = $.addCommunities;
        this.addTargetVrfs = $.addTargetVrfs;
        this.communities = $.communities;
        this.excludeAsPaths = $.excludeAsPaths;
        this.excludeCommunities = $.excludeCommunities;
        this.exportCommunitites = $.exportCommunitites;
        this.localPreference = $.localPreference;
        this.prependAsPaths = $.prependAsPaths;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayRoutingPoliciesTermActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayRoutingPoliciesTermActionArgs $;

        public Builder() {
            $ = new GatewayRoutingPoliciesTermActionArgs();
        }

        public Builder(GatewayRoutingPoliciesTermActionArgs defaults) {
            $ = new GatewayRoutingPoliciesTermActionArgs(Objects.requireNonNull(defaults));
        }

        public Builder accept(@Nullable Output<Boolean> accept) {
            $.accept = accept;
            return this;
        }

        public Builder accept(Boolean accept) {
            return accept(Output.of(accept));
        }

        public Builder addCommunities(@Nullable Output<List<String>> addCommunities) {
            $.addCommunities = addCommunities;
            return this;
        }

        public Builder addCommunities(List<String> addCommunities) {
            return addCommunities(Output.of(addCommunities));
        }

        public Builder addCommunities(String... addCommunities) {
            return addCommunities(List.of(addCommunities));
        }

        /**
         * @param addTargetVrfs for SSR, hub decides how VRF routes are leaked on spoke
         * 
         * @return builder
         * 
         */
        public Builder addTargetVrfs(@Nullable Output<List<String>> addTargetVrfs) {
            $.addTargetVrfs = addTargetVrfs;
            return this;
        }

        /**
         * @param addTargetVrfs for SSR, hub decides how VRF routes are leaked on spoke
         * 
         * @return builder
         * 
         */
        public Builder addTargetVrfs(List<String> addTargetVrfs) {
            return addTargetVrfs(Output.of(addTargetVrfs));
        }

        /**
         * @param addTargetVrfs for SSR, hub decides how VRF routes are leaked on spoke
         * 
         * @return builder
         * 
         */
        public Builder addTargetVrfs(String... addTargetVrfs) {
            return addTargetVrfs(List.of(addTargetVrfs));
        }

        /**
         * @param communities when used as export policy, optional
         * 
         * @return builder
         * 
         */
        public Builder communities(@Nullable Output<List<String>> communities) {
            $.communities = communities;
            return this;
        }

        /**
         * @param communities when used as export policy, optional
         * 
         * @return builder
         * 
         */
        public Builder communities(List<String> communities) {
            return communities(Output.of(communities));
        }

        /**
         * @param communities when used as export policy, optional
         * 
         * @return builder
         * 
         */
        public Builder communities(String... communities) {
            return communities(List.of(communities));
        }

        /**
         * @param excludeAsPaths when used as export policy, optional. To exclude certain AS
         * 
         * @return builder
         * 
         */
        public Builder excludeAsPaths(@Nullable Output<List<String>> excludeAsPaths) {
            $.excludeAsPaths = excludeAsPaths;
            return this;
        }

        /**
         * @param excludeAsPaths when used as export policy, optional. To exclude certain AS
         * 
         * @return builder
         * 
         */
        public Builder excludeAsPaths(List<String> excludeAsPaths) {
            return excludeAsPaths(Output.of(excludeAsPaths));
        }

        /**
         * @param excludeAsPaths when used as export policy, optional. To exclude certain AS
         * 
         * @return builder
         * 
         */
        public Builder excludeAsPaths(String... excludeAsPaths) {
            return excludeAsPaths(List.of(excludeAsPaths));
        }

        public Builder excludeCommunities(@Nullable Output<List<String>> excludeCommunities) {
            $.excludeCommunities = excludeCommunities;
            return this;
        }

        public Builder excludeCommunities(List<String> excludeCommunities) {
            return excludeCommunities(Output.of(excludeCommunities));
        }

        public Builder excludeCommunities(String... excludeCommunities) {
            return excludeCommunities(List.of(excludeCommunities));
        }

        /**
         * @param exportCommunitites when used as export policy, optional
         * 
         * @return builder
         * 
         */
        public Builder exportCommunitites(@Nullable Output<List<String>> exportCommunitites) {
            $.exportCommunitites = exportCommunitites;
            return this;
        }

        /**
         * @param exportCommunitites when used as export policy, optional
         * 
         * @return builder
         * 
         */
        public Builder exportCommunitites(List<String> exportCommunitites) {
            return exportCommunitites(Output.of(exportCommunitites));
        }

        /**
         * @param exportCommunitites when used as export policy, optional
         * 
         * @return builder
         * 
         */
        public Builder exportCommunitites(String... exportCommunitites) {
            return exportCommunitites(List.of(exportCommunitites));
        }

        /**
         * @param localPreference optional, for an import policy, local_preference can be changed
         * 
         * @return builder
         * 
         */
        public Builder localPreference(@Nullable Output<String> localPreference) {
            $.localPreference = localPreference;
            return this;
        }

        /**
         * @param localPreference optional, for an import policy, local_preference can be changed
         * 
         * @return builder
         * 
         */
        public Builder localPreference(String localPreference) {
            return localPreference(Output.of(localPreference));
        }

        /**
         * @param prependAsPaths when used as export policy, optional. By default, the local AS will be prepended, to change it
         * 
         * @return builder
         * 
         */
        public Builder prependAsPaths(@Nullable Output<List<String>> prependAsPaths) {
            $.prependAsPaths = prependAsPaths;
            return this;
        }

        /**
         * @param prependAsPaths when used as export policy, optional. By default, the local AS will be prepended, to change it
         * 
         * @return builder
         * 
         */
        public Builder prependAsPaths(List<String> prependAsPaths) {
            return prependAsPaths(Output.of(prependAsPaths));
        }

        /**
         * @param prependAsPaths when used as export policy, optional. By default, the local AS will be prepended, to change it
         * 
         * @return builder
         * 
         */
        public Builder prependAsPaths(String... prependAsPaths) {
            return prependAsPaths(List.of(prependAsPaths));
        }

        public GatewayRoutingPoliciesTermActionArgs build() {
            return $;
        }
    }

}
