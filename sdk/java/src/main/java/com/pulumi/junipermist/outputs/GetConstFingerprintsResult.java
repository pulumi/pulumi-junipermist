// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConstFingerprintsResult {
    private List<String> families;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<String> mfgs;
    private List<String> models;
    private List<String> os;

    private GetConstFingerprintsResult() {}
    public List<String> families() {
        return this.families;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<String> mfgs() {
        return this.mfgs;
    }
    public List<String> models() {
        return this.models;
    }
    public List<String> os() {
        return this.os;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConstFingerprintsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> families;
        private String id;
        private List<String> mfgs;
        private List<String> models;
        private List<String> os;
        public Builder() {}
        public Builder(GetConstFingerprintsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.families = defaults.families;
    	      this.id = defaults.id;
    	      this.mfgs = defaults.mfgs;
    	      this.models = defaults.models;
    	      this.os = defaults.os;
        }

        @CustomType.Setter
        public Builder families(List<String> families) {
            if (families == null) {
              throw new MissingRequiredPropertyException("GetConstFingerprintsResult", "families");
            }
            this.families = families;
            return this;
        }
        public Builder families(String... families) {
            return families(List.of(families));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConstFingerprintsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mfgs(List<String> mfgs) {
            if (mfgs == null) {
              throw new MissingRequiredPropertyException("GetConstFingerprintsResult", "mfgs");
            }
            this.mfgs = mfgs;
            return this;
        }
        public Builder mfgs(String... mfgs) {
            return mfgs(List.of(mfgs));
        }
        @CustomType.Setter
        public Builder models(List<String> models) {
            if (models == null) {
              throw new MissingRequiredPropertyException("GetConstFingerprintsResult", "models");
            }
            this.models = models;
            return this;
        }
        public Builder models(String... models) {
            return models(List.of(models));
        }
        @CustomType.Setter
        public Builder os(List<String> os) {
            if (os == null) {
              throw new MissingRequiredPropertyException("GetConstFingerprintsResult", "os");
            }
            this.os = os;
            return this;
        }
        public Builder os(String... os) {
            return os(List.of(os));
        }
        public GetConstFingerprintsResult build() {
            final var _resultValue = new GetConstFingerprintsResult();
            _resultValue.families = families;
            _resultValue.id = id;
            _resultValue.mfgs = mfgs;
            _resultValue.models = models;
            _resultValue.os = os;
            return _resultValue;
        }
    }
}
