// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay {
    /**
     * @return Underlay BGP Base AS Number
     * 
     */
    private Integer asBase;
    private String routedIdPrefix;
    /**
     * @return underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
     * 
     */
    private String subnet;
    /**
     * @return if v6 is desired for underlay
     * 
     */
    private Boolean useIpv6;

    private GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay() {}
    /**
     * @return Underlay BGP Base AS Number
     * 
     */
    public Integer asBase() {
        return this.asBase;
    }
    public String routedIdPrefix() {
        return this.routedIdPrefix;
    }
    /**
     * @return underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return if v6 is desired for underlay
     * 
     */
    public Boolean useIpv6() {
        return this.useIpv6;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer asBase;
        private String routedIdPrefix;
        private String subnet;
        private Boolean useIpv6;
        public Builder() {}
        public Builder(GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asBase = defaults.asBase;
    	      this.routedIdPrefix = defaults.routedIdPrefix;
    	      this.subnet = defaults.subnet;
    	      this.useIpv6 = defaults.useIpv6;
        }

        @CustomType.Setter
        public Builder asBase(Integer asBase) {
            if (asBase == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay", "asBase");
            }
            this.asBase = asBase;
            return this;
        }
        @CustomType.Setter
        public Builder routedIdPrefix(String routedIdPrefix) {
            if (routedIdPrefix == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay", "routedIdPrefix");
            }
            this.routedIdPrefix = routedIdPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            if (subnet == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay", "subnet");
            }
            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder useIpv6(Boolean useIpv6) {
            if (useIpv6 == null) {
              throw new MissingRequiredPropertyException("GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay", "useIpv6");
            }
            this.useIpv6 = useIpv6;
            return this;
        }
        public GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay build() {
            final var _resultValue = new GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay();
            _resultValue.asBase = asBase;
            _resultValue.routedIdPrefix = routedIdPrefix;
            _resultValue.subnet = subnet;
            _resultValue.useIpv6 = useIpv6;
            return _resultValue;
        }
    }
}
