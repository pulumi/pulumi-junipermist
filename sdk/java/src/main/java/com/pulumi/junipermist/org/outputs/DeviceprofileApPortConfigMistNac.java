// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeviceprofileApPortConfigMistNac {
    /**
     * @return How frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled.
     * 
     */
    private @Nullable Integer acctInterimInterval;
    /**
     * @return Radius auth session retries. Following fast timers are set if `fastDot1xTimers` knob is enabled. &#34;retries&#34; are set to value of `authServersTimeout`. &#34;max-requests&#34; is also set when setting `authServersRetries` is set to default value to 3.
     * 
     */
    private @Nullable Integer authServersRetries;
    /**
     * @return Radius auth session timeout. Following fast timers are set if `fastDot1xTimers` knob is enabled. &#34;quite-period&#34; and &#34;transmit-period&#34; are set to half the value of `authServersTimeout`. &#34;supplicant-timeout&#34; is also set when setting `authServersTimeout` is set to default value of 10.
     * 
     */
    private @Nullable Integer authServersTimeout;
    /**
     * @return Allows a RADIUS server to dynamically modify the authorization status of a user session.
     * 
     */
    private @Nullable Boolean coaEnabled;
    /**
     * @return the communication port used for “Change of Authorization” (CoA) messages
     * 
     */
    private @Nullable Integer coaPort;
    /**
     * @return When enabled:
     *   * `authServers` is ignored
     *   * `acctServers` is ignored
     *   * `auth_servers_*` are ignored
     *   * `coaServers` is ignored
     *   * `radsec` is ignored
     *   * `coaEnabled` is assumed
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return If set to true, sets default fast-timers with values calculated from `authServersTimeout` and `authServerRetries`.
     * 
     */
    private @Nullable Boolean fastDot1xTimers;
    /**
     * @return Which network the mist nac server resides in
     * 
     */
    private @Nullable String network;
    /**
     * @return In case there is a static IP for this network, we can specify it using source ip
     * 
     */
    private @Nullable String sourceIp;

    private DeviceprofileApPortConfigMistNac() {}
    /**
     * @return How frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled.
     * 
     */
    public Optional<Integer> acctInterimInterval() {
        return Optional.ofNullable(this.acctInterimInterval);
    }
    /**
     * @return Radius auth session retries. Following fast timers are set if `fastDot1xTimers` knob is enabled. &#34;retries&#34; are set to value of `authServersTimeout`. &#34;max-requests&#34; is also set when setting `authServersRetries` is set to default value to 3.
     * 
     */
    public Optional<Integer> authServersRetries() {
        return Optional.ofNullable(this.authServersRetries);
    }
    /**
     * @return Radius auth session timeout. Following fast timers are set if `fastDot1xTimers` knob is enabled. &#34;quite-period&#34; and &#34;transmit-period&#34; are set to half the value of `authServersTimeout`. &#34;supplicant-timeout&#34; is also set when setting `authServersTimeout` is set to default value of 10.
     * 
     */
    public Optional<Integer> authServersTimeout() {
        return Optional.ofNullable(this.authServersTimeout);
    }
    /**
     * @return Allows a RADIUS server to dynamically modify the authorization status of a user session.
     * 
     */
    public Optional<Boolean> coaEnabled() {
        return Optional.ofNullable(this.coaEnabled);
    }
    /**
     * @return the communication port used for “Change of Authorization” (CoA) messages
     * 
     */
    public Optional<Integer> coaPort() {
        return Optional.ofNullable(this.coaPort);
    }
    /**
     * @return When enabled:
     *   * `authServers` is ignored
     *   * `acctServers` is ignored
     *   * `auth_servers_*` are ignored
     *   * `coaServers` is ignored
     *   * `radsec` is ignored
     *   * `coaEnabled` is assumed
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return If set to true, sets default fast-timers with values calculated from `authServersTimeout` and `authServerRetries`.
     * 
     */
    public Optional<Boolean> fastDot1xTimers() {
        return Optional.ofNullable(this.fastDot1xTimers);
    }
    /**
     * @return Which network the mist nac server resides in
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return In case there is a static IP for this network, we can specify it using source ip
     * 
     */
    public Optional<String> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceprofileApPortConfigMistNac defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer acctInterimInterval;
        private @Nullable Integer authServersRetries;
        private @Nullable Integer authServersTimeout;
        private @Nullable Boolean coaEnabled;
        private @Nullable Integer coaPort;
        private @Nullable Boolean enabled;
        private @Nullable Boolean fastDot1xTimers;
        private @Nullable String network;
        private @Nullable String sourceIp;
        public Builder() {}
        public Builder(DeviceprofileApPortConfigMistNac defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acctInterimInterval = defaults.acctInterimInterval;
    	      this.authServersRetries = defaults.authServersRetries;
    	      this.authServersTimeout = defaults.authServersTimeout;
    	      this.coaEnabled = defaults.coaEnabled;
    	      this.coaPort = defaults.coaPort;
    	      this.enabled = defaults.enabled;
    	      this.fastDot1xTimers = defaults.fastDot1xTimers;
    	      this.network = defaults.network;
    	      this.sourceIp = defaults.sourceIp;
        }

        @CustomType.Setter
        public Builder acctInterimInterval(@Nullable Integer acctInterimInterval) {

            this.acctInterimInterval = acctInterimInterval;
            return this;
        }
        @CustomType.Setter
        public Builder authServersRetries(@Nullable Integer authServersRetries) {

            this.authServersRetries = authServersRetries;
            return this;
        }
        @CustomType.Setter
        public Builder authServersTimeout(@Nullable Integer authServersTimeout) {

            this.authServersTimeout = authServersTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder coaEnabled(@Nullable Boolean coaEnabled) {

            this.coaEnabled = coaEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder coaPort(@Nullable Integer coaPort) {

            this.coaPort = coaPort;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder fastDot1xTimers(@Nullable Boolean fastDot1xTimers) {

            this.fastDot1xTimers = fastDot1xTimers;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(@Nullable String sourceIp) {

            this.sourceIp = sourceIp;
            return this;
        }
        public DeviceprofileApPortConfigMistNac build() {
            final var _resultValue = new DeviceprofileApPortConfigMistNac();
            _resultValue.acctInterimInterval = acctInterimInterval;
            _resultValue.authServersRetries = authServersRetries;
            _resultValue.authServersTimeout = authServersTimeout;
            _resultValue.coaEnabled = coaEnabled;
            _resultValue.coaPort = coaPort;
            _resultValue.enabled = enabled;
            _resultValue.fastDot1xTimers = fastDot1xTimers;
            _resultValue.network = network;
            _resultValue.sourceIp = sourceIp;
            return _resultValue;
        }
    }
}
