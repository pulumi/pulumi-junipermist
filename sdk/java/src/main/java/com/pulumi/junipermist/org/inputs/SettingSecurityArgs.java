// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingSecurityArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingSecurityArgs Empty = new SettingSecurityArgs();

    /**
     * Whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
     * 
     */
    @Import(name="disableLocalSsh")
    private @Nullable Output<Boolean> disableLocalSsh;

    /**
     * @return Whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
     * 
     */
    public Optional<Output<Boolean>> disableLocalSsh() {
        return Optional.ofNullable(this.disableLocalSsh);
    }

    /**
     * password required to zeroize devices (FIPS) on site level
     * 
     */
    @Import(name="fipsZeroizePassword")
    private @Nullable Output<String> fipsZeroizePassword;

    /**
     * @return password required to zeroize devices (FIPS) on site level
     * 
     */
    public Optional<Output<String>> fipsZeroizePassword() {
        return Optional.ofNullable(this.fipsZeroizePassword);
    }

    /**
     * Whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
     * 
     */
    @Import(name="limitSshAccess")
    private @Nullable Output<Boolean> limitSshAccess;

    /**
     * @return Whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
     * 
     */
    public Optional<Output<Boolean>> limitSshAccess() {
        return Optional.ofNullable(this.limitSshAccess);
    }

    private SettingSecurityArgs() {}

    private SettingSecurityArgs(SettingSecurityArgs $) {
        this.disableLocalSsh = $.disableLocalSsh;
        this.fipsZeroizePassword = $.fipsZeroizePassword;
        this.limitSshAccess = $.limitSshAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingSecurityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingSecurityArgs $;

        public Builder() {
            $ = new SettingSecurityArgs();
        }

        public Builder(SettingSecurityArgs defaults) {
            $ = new SettingSecurityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableLocalSsh Whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
         * 
         * @return builder
         * 
         */
        public Builder disableLocalSsh(@Nullable Output<Boolean> disableLocalSsh) {
            $.disableLocalSsh = disableLocalSsh;
            return this;
        }

        /**
         * @param disableLocalSsh Whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
         * 
         * @return builder
         * 
         */
        public Builder disableLocalSsh(Boolean disableLocalSsh) {
            return disableLocalSsh(Output.of(disableLocalSsh));
        }

        /**
         * @param fipsZeroizePassword password required to zeroize devices (FIPS) on site level
         * 
         * @return builder
         * 
         */
        public Builder fipsZeroizePassword(@Nullable Output<String> fipsZeroizePassword) {
            $.fipsZeroizePassword = fipsZeroizePassword;
            return this;
        }

        /**
         * @param fipsZeroizePassword password required to zeroize devices (FIPS) on site level
         * 
         * @return builder
         * 
         */
        public Builder fipsZeroizePassword(String fipsZeroizePassword) {
            return fipsZeroizePassword(Output.of(fipsZeroizePassword));
        }

        /**
         * @param limitSshAccess Whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
         * 
         * @return builder
         * 
         */
        public Builder limitSshAccess(@Nullable Output<Boolean> limitSshAccess) {
            $.limitSshAccess = limitSshAccess;
            return this;
        }

        /**
         * @param limitSshAccess Whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
         * 
         * @return builder
         * 
         */
        public Builder limitSshAccess(Boolean limitSshAccess) {
            return limitSshAccess(Output.of(limitSshAccess));
        }

        public SettingSecurityArgs build() {
            return $;
        }
    }

}
