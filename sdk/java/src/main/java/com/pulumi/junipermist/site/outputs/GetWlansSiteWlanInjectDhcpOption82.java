// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWlansSiteWlanInjectDhcpOption82 {
    /**
     * @return Information to set in the `circuit_id` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
     *   * {{AP_MAC}}
     *   * {{AP_MAC_DASHED}}
     *   * {{AP_MODEL}}
     *   * {{AP_NAME}}
     *   * {{SITE_NAME}}
     *   * {{SSID}}
     * 
     */
    private String circuitId;
    /**
     * @return Whether to inject option 82 when forwarding DHCP packets
     * 
     */
    private Boolean enabled;

    private GetWlansSiteWlanInjectDhcpOption82() {}
    /**
     * @return Information to set in the `circuit_id` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
     *   * {{AP_MAC}}
     *   * {{AP_MAC_DASHED}}
     *   * {{AP_MODEL}}
     *   * {{AP_NAME}}
     *   * {{SITE_NAME}}
     *   * {{SSID}}
     * 
     */
    public String circuitId() {
        return this.circuitId;
    }
    /**
     * @return Whether to inject option 82 when forwarding DHCP packets
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlansSiteWlanInjectDhcpOption82 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String circuitId;
        private Boolean enabled;
        public Builder() {}
        public Builder(GetWlansSiteWlanInjectDhcpOption82 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.circuitId = defaults.circuitId;
    	      this.enabled = defaults.enabled;
        }

        @CustomType.Setter
        public Builder circuitId(String circuitId) {
            if (circuitId == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanInjectDhcpOption82", "circuitId");
            }
            this.circuitId = circuitId;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWlansSiteWlanInjectDhcpOption82", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        public GetWlansSiteWlanInjectDhcpOption82 build() {
            final var _resultValue = new GetWlansSiteWlanInjectDhcpOption82();
            _resultValue.circuitId = circuitId;
            _resultValue.enabled = enabled;
            return _resultValue;
        }
    }
}
