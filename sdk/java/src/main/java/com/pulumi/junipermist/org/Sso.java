// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.junipermist.Utilities;
import com.pulumi.junipermist.org.SsoArgs;
import com.pulumi.junipermist.org.inputs.SsoState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource manages Org SSO Configuration.
 * 
 * Org SSO, or Single Sign-On, is a method of authentication that allows users to securely log in to multiple applications and websites with a single set of login credentials.\
 * It involves integrating the Org portal with an Identity Provider (IdP) using the Security Assertion Markup Language (SAML) framework.\
 * This enables users to authenticate themselves through their corporate IdP, eliminating the need to remember separate passwords or enter credentials each time they access the Org portal.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.junipermist.org.Sso;
 * import com.pulumi.junipermist.org.SsoArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ssoAdminOne = new Sso("ssoAdminOne", SsoArgs.builder()
 *             .orgId(terraformTest.id())
 *             .name("sso_admin_one")
 *             .customLogoutUrl("https://idp.com/logout")
 *             .idpCert("-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----")
 *             .idpSignAlgo("sha512")
 *             .idpSsoUrl("https://idp.com/login")
 *             .issuer("my_idp_issuer")
 *             .nameidFormat("email")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Using `pulumi import`, import `mist_org_sso` with:
 * 
 * Org PSK can be imported by specifying the org_id and the sso_id
 * 
 * ```sh
 * $ pulumi import junipermist:org/sso:Sso sso_admin_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 * 
 */
@ResourceType(type="junipermist:org/sso:Sso")
public class Sso extends com.pulumi.resources.CustomResource {
    /**
     * a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
     * different from SP-initiated SLO process)
     * 
     */
    @Export(name="customLogoutUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customLogoutUrl;

    /**
     * @return a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
     * different from SP-initiated SLO process)
     * 
     */
    public Output<Optional<String>> customLogoutUrl() {
        return Codegen.optional(this.customLogoutUrl);
    }
    /**
     * default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
     * matched
     * 
     */
    @Export(name="defaultRole", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultRole;

    /**
     * @return default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
     * matched
     * 
     */
    public Output<Optional<String>> defaultRole() {
        return Codegen.optional(this.defaultRole);
    }
    /**
     * Random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
     * `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
     * `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
     * 
     */
    @Export(name="domain", refs={String.class}, tree="[0]")
    private Output<String> domain;

    /**
     * @return Random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
     * `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
     * `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * IDP Cert (used to verify the signed response)
     * 
     */
    @Export(name="idpCert", refs={String.class}, tree="[0]")
    private Output<String> idpCert;

    /**
     * @return IDP Cert (used to verify the signed response)
     * 
     */
    public Output<String> idpCert() {
        return this.idpCert;
    }
    /**
     * Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
     * 
     */
    @Export(name="idpSignAlgo", refs={String.class}, tree="[0]")
    private Output<String> idpSignAlgo;

    /**
     * @return Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
     * 
     */
    public Output<String> idpSignAlgo() {
        return this.idpSignAlgo;
    }
    /**
     * IDP Single-Sign-On URL
     * 
     */
    @Export(name="idpSsoUrl", refs={String.class}, tree="[0]")
    private Output<String> idpSsoUrl;

    /**
     * @return IDP Single-Sign-On URL
     * 
     */
    public Output<String> idpSsoUrl() {
        return this.idpSsoUrl;
    }
    /**
     * ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
     * 
     */
    @Export(name="ignoreUnmatchedRoles", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreUnmatchedRoles;

    /**
     * @return ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
     * 
     */
    public Output<Optional<Boolean>> ignoreUnmatchedRoles() {
        return Codegen.optional(this.ignoreUnmatchedRoles);
    }
    /**
     * IDP issuer URL
     * 
     */
    @Export(name="issuer", refs={String.class}, tree="[0]")
    private Output<String> issuer;

    /**
     * @return IDP issuer URL
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }
    /**
     * Name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * enum: `email`, `unspecified`
     * 
     */
    @Export(name="nameidFormat", refs={String.class}, tree="[0]")
    private Output<String> nameidFormat;

    /**
     * @return enum: `email`, `unspecified`
     * 
     */
    public Output<String> nameidFormat() {
        return this.nameidFormat;
    }
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * custom role attribute parsing scheme. Supported Role Parsing Schemes
     * &lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Scheme&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;`cn`&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;The expected role attribute format in SAML
     * Assertion is “CN=cn,OU=ou1,OU=ou2,…”&lt;/li&gt;&lt;li&gt;CN (the key) is case insensitive and exactly 1 CN is expected (or the
     * entire entry will be ignored)&lt;/li&gt;&lt;/ul&gt;E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
     * “cn”&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * 
     */
    @Export(name="roleAttrExtraction", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> roleAttrExtraction;

    /**
     * @return custom role attribute parsing scheme. Supported Role Parsing Schemes
     * &lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Scheme&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;`cn`&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;The expected role attribute format in SAML
     * Assertion is “CN=cn,OU=ou1,OU=ou2,…”&lt;/li&gt;&lt;li&gt;CN (the key) is case insensitive and exactly 1 CN is expected (or the
     * entire entry will be ignored)&lt;/li&gt;&lt;/ul&gt;E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
     * “cn”&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * 
     */
    public Output<Optional<String>> roleAttrExtraction() {
        return Codegen.optional(this.roleAttrExtraction);
    }
    /**
     * name of the attribute in SAML Assertion to extract role from. Default: `Role`
     * 
     */
    @Export(name="roleAttrFrom", refs={String.class}, tree="[0]")
    private Output<String> roleAttrFrom;

    /**
     * @return name of the attribute in SAML Assertion to extract role from. Default: `Role`
     * 
     */
    public Output<String> roleAttrFrom() {
        return this.roleAttrFrom;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Sso(java.lang.String name) {
        this(name, SsoArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Sso(java.lang.String name, SsoArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Sso(java.lang.String name, SsoArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:org/sso:Sso", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Sso(java.lang.String name, Output<java.lang.String> id, @Nullable SsoState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("junipermist:org/sso:Sso", name, state, makeResourceOptions(options, id), false);
    }

    private static SsoArgs makeArgs(SsoArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SsoArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Sso get(java.lang.String name, Output<java.lang.String> id, @Nullable SsoState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Sso(name, id, state, options);
    }
}
