// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.junipermist.Utilities;
import com.pulumi.junipermist.org.inputs.GetAlarmtemplatesArgs;
import com.pulumi.junipermist.org.inputs.GetAlarmtemplatesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetDeviceprofilesApArgs;
import com.pulumi.junipermist.org.inputs.GetDeviceprofilesApPlainArgs;
import com.pulumi.junipermist.org.inputs.GetDeviceprofilesGatewayArgs;
import com.pulumi.junipermist.org.inputs.GetDeviceprofilesGatewayPlainArgs;
import com.pulumi.junipermist.org.inputs.GetEvpnTopologiesArgs;
import com.pulumi.junipermist.org.inputs.GetEvpnTopologiesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetGatewaytemplatesArgs;
import com.pulumi.junipermist.org.inputs.GetGatewaytemplatesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetIdpprofilesArgs;
import com.pulumi.junipermist.org.inputs.GetIdpprofilesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetInventoryArgs;
import com.pulumi.junipermist.org.inputs.GetInventoryPlainArgs;
import com.pulumi.junipermist.org.inputs.GetNacEndpointsArgs;
import com.pulumi.junipermist.org.inputs.GetNacEndpointsPlainArgs;
import com.pulumi.junipermist.org.inputs.GetNacidpMetadataArgs;
import com.pulumi.junipermist.org.inputs.GetNacidpMetadataPlainArgs;
import com.pulumi.junipermist.org.inputs.GetNacrulesArgs;
import com.pulumi.junipermist.org.inputs.GetNacrulesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetNactagsArgs;
import com.pulumi.junipermist.org.inputs.GetNactagsPlainArgs;
import com.pulumi.junipermist.org.inputs.GetNetworksArgs;
import com.pulumi.junipermist.org.inputs.GetNetworksPlainArgs;
import com.pulumi.junipermist.org.inputs.GetNetworktemplatesArgs;
import com.pulumi.junipermist.org.inputs.GetNetworktemplatesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetPsksArgs;
import com.pulumi.junipermist.org.inputs.GetPsksPlainArgs;
import com.pulumi.junipermist.org.inputs.GetRftemplatesArgs;
import com.pulumi.junipermist.org.inputs.GetRftemplatesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetServicepoliciesArgs;
import com.pulumi.junipermist.org.inputs.GetServicepoliciesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetServicesArgs;
import com.pulumi.junipermist.org.inputs.GetServicesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetSitegroupsArgs;
import com.pulumi.junipermist.org.inputs.GetSitegroupsPlainArgs;
import com.pulumi.junipermist.org.inputs.GetSsoMetadataArgs;
import com.pulumi.junipermist.org.inputs.GetSsoMetadataPlainArgs;
import com.pulumi.junipermist.org.inputs.GetSsoRolesArgs;
import com.pulumi.junipermist.org.inputs.GetSsoRolesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetVpnsArgs;
import com.pulumi.junipermist.org.inputs.GetVpnsPlainArgs;
import com.pulumi.junipermist.org.inputs.GetWebhooksArgs;
import com.pulumi.junipermist.org.inputs.GetWebhooksPlainArgs;
import com.pulumi.junipermist.org.inputs.GetWlansArgs;
import com.pulumi.junipermist.org.inputs.GetWlansPlainArgs;
import com.pulumi.junipermist.org.inputs.GetWlantemplatesArgs;
import com.pulumi.junipermist.org.inputs.GetWlantemplatesPlainArgs;
import com.pulumi.junipermist.org.inputs.GetWxtagsArgs;
import com.pulumi.junipermist.org.inputs.GetWxtagsPlainArgs;
import com.pulumi.junipermist.org.outputs.GetAlarmtemplatesResult;
import com.pulumi.junipermist.org.outputs.GetDeviceprofilesApResult;
import com.pulumi.junipermist.org.outputs.GetDeviceprofilesGatewayResult;
import com.pulumi.junipermist.org.outputs.GetEvpnTopologiesResult;
import com.pulumi.junipermist.org.outputs.GetGatewaytemplatesResult;
import com.pulumi.junipermist.org.outputs.GetIdpprofilesResult;
import com.pulumi.junipermist.org.outputs.GetInventoryResult;
import com.pulumi.junipermist.org.outputs.GetNacEndpointsResult;
import com.pulumi.junipermist.org.outputs.GetNacidpMetadataResult;
import com.pulumi.junipermist.org.outputs.GetNacrulesResult;
import com.pulumi.junipermist.org.outputs.GetNactagsResult;
import com.pulumi.junipermist.org.outputs.GetNetworksResult;
import com.pulumi.junipermist.org.outputs.GetNetworktemplatesResult;
import com.pulumi.junipermist.org.outputs.GetPsksResult;
import com.pulumi.junipermist.org.outputs.GetRftemplatesResult;
import com.pulumi.junipermist.org.outputs.GetServicepoliciesResult;
import com.pulumi.junipermist.org.outputs.GetServicesResult;
import com.pulumi.junipermist.org.outputs.GetSitegroupsResult;
import com.pulumi.junipermist.org.outputs.GetSsoMetadataResult;
import com.pulumi.junipermist.org.outputs.GetSsoRolesResult;
import com.pulumi.junipermist.org.outputs.GetVpnsResult;
import com.pulumi.junipermist.org.outputs.GetWebhooksResult;
import com.pulumi.junipermist.org.outputs.GetWlansResult;
import com.pulumi.junipermist.org.outputs.GetWlantemplatesResult;
import com.pulumi.junipermist.org.outputs.GetWxtagsResult;
import java.util.concurrent.CompletableFuture;

public final class OrgFunctions {
    /**
     * This data source provides the list of Alarm Templates.
     * 
     * An Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetAlarmtemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alarmtemplates = OrgFunctions.getAlarmtemplates(GetAlarmtemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAlarmtemplatesResult> getAlarmtemplates(GetAlarmtemplatesArgs args) {
        return getAlarmtemplates(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Alarm Templates.
     * 
     * An Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetAlarmtemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alarmtemplates = OrgFunctions.getAlarmtemplates(GetAlarmtemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAlarmtemplatesResult> getAlarmtemplatesPlain(GetAlarmtemplatesPlainArgs args) {
        return getAlarmtemplatesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Alarm Templates.
     * 
     * An Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetAlarmtemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alarmtemplates = OrgFunctions.getAlarmtemplates(GetAlarmtemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAlarmtemplatesResult> getAlarmtemplates(GetAlarmtemplatesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getAlarmtemplates:getAlarmtemplates", TypeShape.of(GetAlarmtemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Alarm Templates.
     * 
     * An Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetAlarmtemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var alarmtemplates = OrgFunctions.getAlarmtemplates(GetAlarmtemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAlarmtemplatesResult> getAlarmtemplatesPlain(GetAlarmtemplatesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getAlarmtemplates:getAlarmtemplates", TypeShape.of(GetAlarmtemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of AP Device Profiles.
     * 
     * AP Device profiles are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They are providing efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesApArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesAp(GetDeviceprofilesApArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeviceprofilesApResult> getDeviceprofilesAp(GetDeviceprofilesApArgs args) {
        return getDeviceprofilesAp(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of AP Device Profiles.
     * 
     * AP Device profiles are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They are providing efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesApArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesAp(GetDeviceprofilesApArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDeviceprofilesApResult> getDeviceprofilesApPlain(GetDeviceprofilesApPlainArgs args) {
        return getDeviceprofilesApPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of AP Device Profiles.
     * 
     * AP Device profiles are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They are providing efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesApArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesAp(GetDeviceprofilesApArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeviceprofilesApResult> getDeviceprofilesAp(GetDeviceprofilesApArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getDeviceprofilesAp:getDeviceprofilesAp", TypeShape.of(GetDeviceprofilesApResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of AP Device Profiles.
     * 
     * AP Device profiles are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They are providing efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesApArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesAp(GetDeviceprofilesApArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDeviceprofilesApResult> getDeviceprofilesApPlain(GetDeviceprofilesApPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getDeviceprofilesAp:getDeviceprofilesAp", TypeShape.of(GetDeviceprofilesApResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This provides the list of Gateway Device Profiles (Hub Profile).
     * 
     * A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options.
     * 
     * HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesGateway(GetDeviceprofilesGatewayArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeviceprofilesGatewayResult> getDeviceprofilesGateway(GetDeviceprofilesGatewayArgs args) {
        return getDeviceprofilesGateway(args, InvokeOptions.Empty);
    }
    /**
     * This provides the list of Gateway Device Profiles (Hub Profile).
     * 
     * A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options.
     * 
     * HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesGateway(GetDeviceprofilesGatewayArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDeviceprofilesGatewayResult> getDeviceprofilesGatewayPlain(GetDeviceprofilesGatewayPlainArgs args) {
        return getDeviceprofilesGatewayPlain(args, InvokeOptions.Empty);
    }
    /**
     * This provides the list of Gateway Device Profiles (Hub Profile).
     * 
     * A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options.
     * 
     * HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesGateway(GetDeviceprofilesGatewayArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDeviceprofilesGatewayResult> getDeviceprofilesGateway(GetDeviceprofilesGatewayArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getDeviceprofilesGateway:getDeviceprofilesGateway", TypeShape.of(GetDeviceprofilesGatewayResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This provides the list of Gateway Device Profiles (Hub Profile).
     * 
     * A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options.
     * 
     * HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetDeviceprofilesGatewayArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var deviceprofile = OrgFunctions.getDeviceprofilesGateway(GetDeviceprofilesGatewayArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDeviceprofilesGatewayResult> getDeviceprofilesGatewayPlain(GetDeviceprofilesGatewayPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getDeviceprofilesGateway:getDeviceprofilesGateway", TypeShape.of(GetDeviceprofilesGatewayResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Evpn Topologies
     * 
     * EVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetEvpnTopologiesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgEvpnTopologies = OrgFunctions.getEvpnTopologies(GetEvpnTopologiesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEvpnTopologiesResult> getEvpnTopologies(GetEvpnTopologiesArgs args) {
        return getEvpnTopologies(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Evpn Topologies
     * 
     * EVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetEvpnTopologiesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgEvpnTopologies = OrgFunctions.getEvpnTopologies(GetEvpnTopologiesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEvpnTopologiesResult> getEvpnTopologiesPlain(GetEvpnTopologiesPlainArgs args) {
        return getEvpnTopologiesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Evpn Topologies
     * 
     * EVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetEvpnTopologiesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgEvpnTopologies = OrgFunctions.getEvpnTopologies(GetEvpnTopologiesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetEvpnTopologiesResult> getEvpnTopologies(GetEvpnTopologiesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getEvpnTopologies:getEvpnTopologies", TypeShape.of(GetEvpnTopologiesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Evpn Topologies
     * 
     * EVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetEvpnTopologiesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgEvpnTopologies = OrgFunctions.getEvpnTopologies(GetEvpnTopologiesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetEvpnTopologiesResult> getEvpnTopologiesPlain(GetEvpnTopologiesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getEvpnTopologies:getEvpnTopologies", TypeShape.of(GetEvpnTopologiesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Gateway Templates.
     * 
     * A Gateway template can be used to define generic gateway configuration at the org level andbe applied to one or multiple Sites. It works like a blueprint of the network of the site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetGatewaytemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getGatewaytemplates(GetGatewaytemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGatewaytemplatesResult> getGatewaytemplates(GetGatewaytemplatesArgs args) {
        return getGatewaytemplates(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Gateway Templates.
     * 
     * A Gateway template can be used to define generic gateway configuration at the org level andbe applied to one or multiple Sites. It works like a blueprint of the network of the site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetGatewaytemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getGatewaytemplates(GetGatewaytemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGatewaytemplatesResult> getGatewaytemplatesPlain(GetGatewaytemplatesPlainArgs args) {
        return getGatewaytemplatesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Gateway Templates.
     * 
     * A Gateway template can be used to define generic gateway configuration at the org level andbe applied to one or multiple Sites. It works like a blueprint of the network of the site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetGatewaytemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getGatewaytemplates(GetGatewaytemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGatewaytemplatesResult> getGatewaytemplates(GetGatewaytemplatesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getGatewaytemplates:getGatewaytemplates", TypeShape.of(GetGatewaytemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Gateway Templates.
     * 
     * A Gateway template can be used to define generic gateway configuration at the org level andbe applied to one or multiple Sites. It works like a blueprint of the network of the site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetGatewaytemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getGatewaytemplates(GetGatewaytemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGatewaytemplatesResult> getGatewaytemplatesPlain(GetGatewaytemplatesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getGatewaytemplates:getGatewaytemplates", TypeShape.of(GetGatewaytemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance IDP Profiles.
     * 
     * An IDP Profile is a configuration setting that defines the behavior and actions of an intrusion detection and prevention (IDP) system. It specifies how the idp system should detect and respond to potential security threats or attacks on a network.
     * 
     * The profile includes rules and policies that determine which types of traffic or attacks should be monitored, what actions should be taken when a threat is detected, and any exceptions or exclusions for specific destinations or attack types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetIdpprofilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var idpprofiles = OrgFunctions.getIdpprofiles(GetIdpprofilesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIdpprofilesResult> getIdpprofiles(GetIdpprofilesArgs args) {
        return getIdpprofiles(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance IDP Profiles.
     * 
     * An IDP Profile is a configuration setting that defines the behavior and actions of an intrusion detection and prevention (IDP) system. It specifies how the idp system should detect and respond to potential security threats or attacks on a network.
     * 
     * The profile includes rules and policies that determine which types of traffic or attacks should be monitored, what actions should be taken when a threat is detected, and any exceptions or exclusions for specific destinations or attack types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetIdpprofilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var idpprofiles = OrgFunctions.getIdpprofiles(GetIdpprofilesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIdpprofilesResult> getIdpprofilesPlain(GetIdpprofilesPlainArgs args) {
        return getIdpprofilesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance IDP Profiles.
     * 
     * An IDP Profile is a configuration setting that defines the behavior and actions of an intrusion detection and prevention (IDP) system. It specifies how the idp system should detect and respond to potential security threats or attacks on a network.
     * 
     * The profile includes rules and policies that determine which types of traffic or attacks should be monitored, what actions should be taken when a threat is detected, and any exceptions or exclusions for specific destinations or attack types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetIdpprofilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var idpprofiles = OrgFunctions.getIdpprofiles(GetIdpprofilesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetIdpprofilesResult> getIdpprofiles(GetIdpprofilesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getIdpprofiles:getIdpprofiles", TypeShape.of(GetIdpprofilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance IDP Profiles.
     * 
     * An IDP Profile is a configuration setting that defines the behavior and actions of an intrusion detection and prevention (IDP) system. It specifies how the idp system should detect and respond to potential security threats or attacks on a network.
     * 
     * The profile includes rules and policies that determine which types of traffic or attacks should be monitored, what actions should be taken when a threat is detected, and any exceptions or exclusions for specific destinations or attack types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetIdpprofilesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var idpprofiles = OrgFunctions.getIdpprofiles(GetIdpprofilesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetIdpprofilesResult> getIdpprofilesPlain(GetIdpprofilesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getIdpprofiles:getIdpprofiles", TypeShape.of(GetIdpprofilesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Devices in the Org inventory.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetInventoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var inventory = OrgFunctions.getInventory(GetInventoryArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("485a0d000000")
     *             .model("EX4100-F-12P")
     *             .serial("F00000000000")
     *             .unassigned(false)
     *             .vc(true)
     *             .vcMac("485a0d000001")
     *             .siteId("4a422ae5-7ca0-4599-87a3-8e49aa63685f")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInventoryResult> getInventory(GetInventoryArgs args) {
        return getInventory(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Devices in the Org inventory.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetInventoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var inventory = OrgFunctions.getInventory(GetInventoryArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("485a0d000000")
     *             .model("EX4100-F-12P")
     *             .serial("F00000000000")
     *             .unassigned(false)
     *             .vc(true)
     *             .vcMac("485a0d000001")
     *             .siteId("4a422ae5-7ca0-4599-87a3-8e49aa63685f")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInventoryResult> getInventoryPlain(GetInventoryPlainArgs args) {
        return getInventoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Devices in the Org inventory.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetInventoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var inventory = OrgFunctions.getInventory(GetInventoryArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("485a0d000000")
     *             .model("EX4100-F-12P")
     *             .serial("F00000000000")
     *             .unassigned(false)
     *             .vc(true)
     *             .vcMac("485a0d000001")
     *             .siteId("4a422ae5-7ca0-4599-87a3-8e49aa63685f")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetInventoryResult> getInventory(GetInventoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getInventory:getInventory", TypeShape.of(GetInventoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Devices in the Org inventory.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetInventoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var inventory = OrgFunctions.getInventory(GetInventoryArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("485a0d000000")
     *             .model("EX4100-F-12P")
     *             .serial("F00000000000")
     *             .unassigned(false)
     *             .vc(true)
     *             .vcMac("485a0d000001")
     *             .siteId("4a422ae5-7ca0-4599-87a3-8e49aa63685f")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetInventoryResult> getInventoryPlain(GetInventoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getInventory:getInventory", TypeShape.of(GetInventoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of NAC Endpoints (User MACs).
     * 
     * NAC Endpoints (User MACs) provide a database of endpoints identified by their MAC addresses. They can be used assign each endpoint with various attributes, such as name, VLAN, role and client label.  Once an endpoint is labeled, the label name can be used to create `junipermist.org.Nactag` resource as match criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacEndpointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacEndpoints = OrgFunctions.getNacEndpoints(GetNacEndpointsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("4a422a000000")
     *             .labels("label_one")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNacEndpointsResult> getNacEndpoints(GetNacEndpointsArgs args) {
        return getNacEndpoints(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of NAC Endpoints (User MACs).
     * 
     * NAC Endpoints (User MACs) provide a database of endpoints identified by their MAC addresses. They can be used assign each endpoint with various attributes, such as name, VLAN, role and client label.  Once an endpoint is labeled, the label name can be used to create `junipermist.org.Nactag` resource as match criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacEndpointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacEndpoints = OrgFunctions.getNacEndpoints(GetNacEndpointsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("4a422a000000")
     *             .labels("label_one")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNacEndpointsResult> getNacEndpointsPlain(GetNacEndpointsPlainArgs args) {
        return getNacEndpointsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of NAC Endpoints (User MACs).
     * 
     * NAC Endpoints (User MACs) provide a database of endpoints identified by their MAC addresses. They can be used assign each endpoint with various attributes, such as name, VLAN, role and client label.  Once an endpoint is labeled, the label name can be used to create `junipermist.org.Nactag` resource as match criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacEndpointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacEndpoints = OrgFunctions.getNacEndpoints(GetNacEndpointsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("4a422a000000")
     *             .labels("label_one")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNacEndpointsResult> getNacEndpoints(GetNacEndpointsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getNacEndpoints:getNacEndpoints", TypeShape.of(GetNacEndpointsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of NAC Endpoints (User MACs).
     * 
     * NAC Endpoints (User MACs) provide a database of endpoints identified by their MAC addresses. They can be used assign each endpoint with various attributes, such as name, VLAN, role and client label.  Once an endpoint is labeled, the label name can be used to create `junipermist.org.Nactag` resource as match criteria.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacEndpointsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacEndpoints = OrgFunctions.getNacEndpoints(GetNacEndpointsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .mac("4a422a000000")
     *             .labels("label_one")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNacEndpointsResult> getNacEndpointsPlain(GetNacEndpointsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getNacEndpoints:getNacEndpoints", TypeShape.of(GetNacEndpointsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the NAC IDP Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacidpMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samlIdp = OrgFunctions.getNacidpMetadata(GetNacidpMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .nacidpId(samlIdpOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNacidpMetadataResult> getNacidpMetadata(GetNacidpMetadataArgs args) {
        return getNacidpMetadata(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the NAC IDP Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacidpMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samlIdp = OrgFunctions.getNacidpMetadata(GetNacidpMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .nacidpId(samlIdpOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNacidpMetadataResult> getNacidpMetadataPlain(GetNacidpMetadataPlainArgs args) {
        return getNacidpMetadataPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the NAC IDP Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacidpMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samlIdp = OrgFunctions.getNacidpMetadata(GetNacidpMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .nacidpId(samlIdpOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNacidpMetadataResult> getNacidpMetadata(GetNacidpMetadataArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getNacidpMetadata:getNacidpMetadata", TypeShape.of(GetNacidpMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the NAC IDP Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacidpMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samlIdp = OrgFunctions.getNacidpMetadata(GetNacidpMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .nacidpId(samlIdpOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNacidpMetadataResult> getNacidpMetadataPlain(GetNacidpMetadataPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getNacidpMetadata:getNacidpMetadata", TypeShape.of(GetNacidpMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of NAC Rules (Auth Policies).
     * 
     * A NAC Rule defines a list of critera (NAC Tag) the network client must match to execute the Rule, an action (Allow/Deny)and a list of RADIUS Attributes (NAC Tags) to return
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacrulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacrules = OrgFunctions.getNacrules(GetNacrulesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNacrulesResult> getNacrules(GetNacrulesArgs args) {
        return getNacrules(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of NAC Rules (Auth Policies).
     * 
     * A NAC Rule defines a list of critera (NAC Tag) the network client must match to execute the Rule, an action (Allow/Deny)and a list of RADIUS Attributes (NAC Tags) to return
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacrulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacrules = OrgFunctions.getNacrules(GetNacrulesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNacrulesResult> getNacrulesPlain(GetNacrulesPlainArgs args) {
        return getNacrulesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of NAC Rules (Auth Policies).
     * 
     * A NAC Rule defines a list of critera (NAC Tag) the network client must match to execute the Rule, an action (Allow/Deny)and a list of RADIUS Attributes (NAC Tags) to return
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacrulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacrules = OrgFunctions.getNacrules(GetNacrulesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNacrulesResult> getNacrules(GetNacrulesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getNacrules:getNacrules", TypeShape.of(GetNacrulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of NAC Rules (Auth Policies).
     * 
     * A NAC Rule defines a list of critera (NAC Tag) the network client must match to execute the Rule, an action (Allow/Deny)and a list of RADIUS Attributes (NAC Tags) to return
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNacrulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nacrules = OrgFunctions.getNacrules(GetNacrulesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNacrulesResult> getNacrulesPlain(GetNacrulesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getNacrules:getNacrules", TypeShape.of(GetNacrulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of NAC Tags (Auth Policy Labels).
     * 
     * The NAC Tags can be used in the NAC Rules to define the matching criterias or the returned RADIUS Attributes
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNactagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nactags = OrgFunctions.getNactags(GetNactagsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .type("match")
     *             .match("cert_issuer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNactagsResult> getNactags(GetNactagsArgs args) {
        return getNactags(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of NAC Tags (Auth Policy Labels).
     * 
     * The NAC Tags can be used in the NAC Rules to define the matching criterias or the returned RADIUS Attributes
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNactagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nactags = OrgFunctions.getNactags(GetNactagsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .type("match")
     *             .match("cert_issuer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNactagsResult> getNactagsPlain(GetNactagsPlainArgs args) {
        return getNactagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of NAC Tags (Auth Policy Labels).
     * 
     * The NAC Tags can be used in the NAC Rules to define the matching criterias or the returned RADIUS Attributes
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNactagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nactags = OrgFunctions.getNactags(GetNactagsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .type("match")
     *             .match("cert_issuer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNactagsResult> getNactags(GetNactagsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getNactags:getNactags", TypeShape.of(GetNactagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of NAC Tags (Auth Policy Labels).
     * 
     * The NAC Tags can be used in the NAC Rules to define the matching criterias or the returned RADIUS Attributes
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNactagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nactags = OrgFunctions.getNactags(GetNactagsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .type("match")
     *             .match("cert_issuer")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNactagsResult> getNactagsPlain(GetNactagsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getNactags:getNactags", TypeShape.of(GetNactagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance Networks.
     * 
     * The Networks are used in the `service_policies` from the Gateway configuration, Gateway templates or HUB Profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networks = OrgFunctions.getNetworks(GetNetworksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args) {
        return getNetworks(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance Networks.
     * 
     * The Networks are used in the `service_policies` from the Gateway configuration, Gateway templates or HUB Profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networks = OrgFunctions.getNetworks(GetNetworksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args) {
        return getNetworksPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance Networks.
     * 
     * The Networks are used in the `service_policies` from the Gateway configuration, Gateway templates or HUB Profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networks = OrgFunctions.getNetworks(GetNetworksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance Networks.
     * 
     * The Networks are used in the `service_policies` from the Gateway configuration, Gateway templates or HUB Profiles
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var networks = OrgFunctions.getNetworks(GetNetworksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Network Templates (Switch templates).
     * 
     * A network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings.\
     * Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworktemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getNetworktemplates(GetNetworktemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworktemplatesResult> getNetworktemplates(GetNetworktemplatesArgs args) {
        return getNetworktemplates(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Network Templates (Switch templates).
     * 
     * A network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings.\
     * Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworktemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getNetworktemplates(GetNetworktemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworktemplatesResult> getNetworktemplatesPlain(GetNetworktemplatesPlainArgs args) {
        return getNetworktemplatesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Network Templates (Switch templates).
     * 
     * A network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings.\
     * Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworktemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getNetworktemplates(GetNetworktemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworktemplatesResult> getNetworktemplates(GetNetworktemplatesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getNetworktemplates:getNetworktemplates", TypeShape.of(GetNetworktemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Network Templates (Switch templates).
     * 
     * A network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings.\
     * Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetNetworktemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getNetworktemplates(GetNetworktemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworktemplatesResult> getNetworktemplatesPlain(GetNetworktemplatesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getNetworktemplates:getNetworktemplates", TypeShape.of(GetNetworktemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list Org Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = OrgFunctions.getPsks(GetPsksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPsksResult> getPsks(GetPsksArgs args) {
        return getPsks(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list Org Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = OrgFunctions.getPsks(GetPsksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPsksResult> getPsksPlain(GetPsksPlainArgs args) {
        return getPsksPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list Org Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = OrgFunctions.getPsks(GetPsksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPsksResult> getPsks(GetPsksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getPsks:getPsks", TypeShape.of(GetPsksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list Org Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = OrgFunctions.getPsks(GetPsksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPsksResult> getPsksPlain(GetPsksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getPsks:getPsks", TypeShape.of(GetPsksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of RF Templates.
     * 
     * The RF Templates can be used to define Wireless Access Points radio configuration, and can be assigned to the sites
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetRftemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getRftemplates(GetRftemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRftemplatesResult> getRftemplates(GetRftemplatesArgs args) {
        return getRftemplates(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of RF Templates.
     * 
     * The RF Templates can be used to define Wireless Access Points radio configuration, and can be assigned to the sites
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetRftemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getRftemplates(GetRftemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRftemplatesResult> getRftemplatesPlain(GetRftemplatesPlainArgs args) {
        return getRftemplatesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of RF Templates.
     * 
     * The RF Templates can be used to define Wireless Access Points radio configuration, and can be assigned to the sites
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetRftemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getRftemplates(GetRftemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRftemplatesResult> getRftemplates(GetRftemplatesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getRftemplates:getRftemplates", TypeShape.of(GetRftemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of RF Templates.
     * 
     * The RF Templates can be used to define Wireless Access Points radio configuration, and can be assigned to the sites
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetRftemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getRftemplates(GetRftemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRftemplatesResult> getRftemplatesPlain(GetRftemplatesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getRftemplates:getRftemplates", TypeShape.of(GetRftemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance Service Policies (Application Policiess).
     * 
     * The Service Policies can be used in the `service_policies` object by referencing the Service Policy ID as the `servicepolicy_id` in:
     * * the Gateway configuration (`mist_device_gateway.service_policies`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies`)
     *   They can be used to manage common policies betweeen multiples configurations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicepoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var servicepolicies = OrgFunctions.getServicepolicies(GetServicepoliciesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicepoliciesResult> getServicepolicies(GetServicepoliciesArgs args) {
        return getServicepolicies(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance Service Policies (Application Policiess).
     * 
     * The Service Policies can be used in the `service_policies` object by referencing the Service Policy ID as the `servicepolicy_id` in:
     * * the Gateway configuration (`mist_device_gateway.service_policies`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies`)
     *   They can be used to manage common policies betweeen multiples configurations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicepoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var servicepolicies = OrgFunctions.getServicepolicies(GetServicepoliciesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicepoliciesResult> getServicepoliciesPlain(GetServicepoliciesPlainArgs args) {
        return getServicepoliciesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance Service Policies (Application Policiess).
     * 
     * The Service Policies can be used in the `service_policies` object by referencing the Service Policy ID as the `servicepolicy_id` in:
     * * the Gateway configuration (`mist_device_gateway.service_policies`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies`)
     *   They can be used to manage common policies betweeen multiples configurations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicepoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var servicepolicies = OrgFunctions.getServicepolicies(GetServicepoliciesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicepoliciesResult> getServicepolicies(GetServicepoliciesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getServicepolicies:getServicepolicies", TypeShape.of(GetServicepoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance Service Policies (Application Policiess).
     * 
     * The Service Policies can be used in the `service_policies` object by referencing the Service Policy ID as the `servicepolicy_id` in:
     * * the Gateway configuration (`mist_device_gateway.service_policies`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies`)
     *   They can be used to manage common policies betweeen multiples configurations
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicepoliciesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var servicepolicies = OrgFunctions.getServicepolicies(GetServicepoliciesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicepoliciesResult> getServicepoliciesPlain(GetServicepoliciesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getServicepolicies:getServicepolicies", TypeShape.of(GetServicepoliciesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance Services (Applications).
     * 
     * A Service is used to define a Custom Application that can be used in the `service_policies`. These Services can be referenced by their name in
     * * the Service Policies (`mist_org_servicepolicy.services`)
     * * the Gateway configuration (`mist_device_gateway.service_policies.services`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies.services`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies.services`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var services = OrgFunctions.getServices(GetServicesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicesResult> getServices(GetServicesArgs args) {
        return getServices(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance Services (Applications).
     * 
     * A Service is used to define a Custom Application that can be used in the `service_policies`. These Services can be referenced by their name in
     * * the Service Policies (`mist_org_servicepolicy.services`)
     * * the Gateway configuration (`mist_device_gateway.service_policies.services`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies.services`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies.services`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var services = OrgFunctions.getServices(GetServicesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicesResult> getServicesPlain(GetServicesPlainArgs args) {
        return getServicesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of WAN Assurance Services (Applications).
     * 
     * A Service is used to define a Custom Application that can be used in the `service_policies`. These Services can be referenced by their name in
     * * the Service Policies (`mist_org_servicepolicy.services`)
     * * the Gateway configuration (`mist_device_gateway.service_policies.services`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies.services`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies.services`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var services = OrgFunctions.getServices(GetServicesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicesResult> getServices(GetServicesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getServices:getServices", TypeShape.of(GetServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of WAN Assurance Services (Applications).
     * 
     * A Service is used to define a Custom Application that can be used in the `service_policies`. These Services can be referenced by their name in
     * * the Service Policies (`mist_org_servicepolicy.services`)
     * * the Gateway configuration (`mist_device_gateway.service_policies.services`)
     * * the Gateway Templates (`mist_org_gatewaytemplate.service_policies.services`)
     * * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies.services`)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetServicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var services = OrgFunctions.getServices(GetServicesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicesResult> getServicesPlain(GetServicesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getServices:getServices", TypeShape.of(GetServicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Site Groups (sitegroups).
     * 
     * A site group is a feature that allows users to group multiple sites together based on regions, functions, or other parameters for efficient management of devices.\
     * Sites can exist in multiple groups simultaneously, and site groups can be used to ensure consistent settings, manage administrator access, and apply specific templates to groups of sites.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSitegroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sitegroups = OrgFunctions.getSitegroups(GetSitegroupsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSitegroupsResult> getSitegroups(GetSitegroupsArgs args) {
        return getSitegroups(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Site Groups (sitegroups).
     * 
     * A site group is a feature that allows users to group multiple sites together based on regions, functions, or other parameters for efficient management of devices.\
     * Sites can exist in multiple groups simultaneously, and site groups can be used to ensure consistent settings, manage administrator access, and apply specific templates to groups of sites.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSitegroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sitegroups = OrgFunctions.getSitegroups(GetSitegroupsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSitegroupsResult> getSitegroupsPlain(GetSitegroupsPlainArgs args) {
        return getSitegroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Site Groups (sitegroups).
     * 
     * A site group is a feature that allows users to group multiple sites together based on regions, functions, or other parameters for efficient management of devices.\
     * Sites can exist in multiple groups simultaneously, and site groups can be used to ensure consistent settings, manage administrator access, and apply specific templates to groups of sites.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSitegroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sitegroups = OrgFunctions.getSitegroups(GetSitegroupsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSitegroupsResult> getSitegroups(GetSitegroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getSitegroups:getSitegroups", TypeShape.of(GetSitegroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Site Groups (sitegroups).
     * 
     * A site group is a feature that allows users to group multiple sites together based on regions, functions, or other parameters for efficient management of devices.\
     * Sites can exist in multiple groups simultaneously, and site groups can be used to ensure consistent settings, manage administrator access, and apply specific templates to groups of sites.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSitegroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sitegroups = OrgFunctions.getSitegroups(GetSitegroupsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSitegroupsResult> getSitegroupsPlain(GetSitegroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getSitegroups:getSitegroups", TypeShape.of(GetSitegroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the SSO Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoIdp = OrgFunctions.getSsoMetadata(GetSsoMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .ssoId(ssoOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSsoMetadataResult> getSsoMetadata(GetSsoMetadataArgs args) {
        return getSsoMetadata(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the SSO Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoIdp = OrgFunctions.getSsoMetadata(GetSsoMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .ssoId(ssoOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSsoMetadataResult> getSsoMetadataPlain(GetSsoMetadataPlainArgs args) {
        return getSsoMetadataPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the SSO Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoIdp = OrgFunctions.getSsoMetadata(GetSsoMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .ssoId(ssoOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSsoMetadataResult> getSsoMetadata(GetSsoMetadataArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getSsoMetadata:getSsoMetadata", TypeShape.of(GetSsoMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the SSO Metadata information.
     * 
     * The provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoMetadataArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoIdp = OrgFunctions.getSsoMetadata(GetSsoMetadataArgs.builder()
     *             .orgId(terraformTest.id())
     *             .ssoId(ssoOne.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSsoMetadataResult> getSsoMetadataPlain(GetSsoMetadataPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getSsoMetadata:getSsoMetadata", TypeShape.of(GetSsoMetadataResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This resource provides the list of SSO Roles.
     * 
     * SSO roles refer to the different functions assigned to users within a Single Sign-On (SSO) system.\
     * These roles determine the tasks and actions that users can perform within the SSO system. There are typically predefined roles and custom roles in an SSO system.\
     * Roles in SSO provide a well-defined separation of responsibility and visibility, allowing for granular-level access control on SSO objects..
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoRoles = OrgFunctions.getSsoRoles(GetSsoRolesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSsoRolesResult> getSsoRoles(GetSsoRolesArgs args) {
        return getSsoRoles(args, InvokeOptions.Empty);
    }
    /**
     * This resource provides the list of SSO Roles.
     * 
     * SSO roles refer to the different functions assigned to users within a Single Sign-On (SSO) system.\
     * These roles determine the tasks and actions that users can perform within the SSO system. There are typically predefined roles and custom roles in an SSO system.\
     * Roles in SSO provide a well-defined separation of responsibility and visibility, allowing for granular-level access control on SSO objects..
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoRoles = OrgFunctions.getSsoRoles(GetSsoRolesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSsoRolesResult> getSsoRolesPlain(GetSsoRolesPlainArgs args) {
        return getSsoRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This resource provides the list of SSO Roles.
     * 
     * SSO roles refer to the different functions assigned to users within a Single Sign-On (SSO) system.\
     * These roles determine the tasks and actions that users can perform within the SSO system. There are typically predefined roles and custom roles in an SSO system.\
     * Roles in SSO provide a well-defined separation of responsibility and visibility, allowing for granular-level access control on SSO objects..
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoRoles = OrgFunctions.getSsoRoles(GetSsoRolesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSsoRolesResult> getSsoRoles(GetSsoRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getSsoRoles:getSsoRoles", TypeShape.of(GetSsoRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This resource provides the list of SSO Roles.
     * 
     * SSO roles refer to the different functions assigned to users within a Single Sign-On (SSO) system.\
     * These roles determine the tasks and actions that users can perform within the SSO system. There are typically predefined roles and custom roles in an SSO system.\
     * Roles in SSO provide a well-defined separation of responsibility and visibility, allowing for granular-level access control on SSO objects..
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetSsoRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ssoRoles = OrgFunctions.getSsoRoles(GetSsoRolesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSsoRolesResult> getSsoRolesPlain(GetSsoRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getSsoRoles:getSsoRoles", TypeShape.of(GetSsoRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provide the list of the Org VPNs.
     * 
     */
    public static Output<GetVpnsResult> getVpns(GetVpnsArgs args) {
        return getVpns(args, InvokeOptions.Empty);
    }
    /**
     * This data source provide the list of the Org VPNs.
     * 
     */
    public static CompletableFuture<GetVpnsResult> getVpnsPlain(GetVpnsPlainArgs args) {
        return getVpnsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provide the list of the Org VPNs.
     * 
     */
    public static Output<GetVpnsResult> getVpns(GetVpnsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getVpns:getVpns", TypeShape.of(GetVpnsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provide the list of the Org VPNs.
     * 
     */
    public static CompletableFuture<GetVpnsResult> getVpnsPlain(GetVpnsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getVpns:getVpns", TypeShape.of(GetVpnsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Webhooks.
     * 
     * A Webhook is a configuration that allows real-time events and data from the Org to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, and audits updates at the org level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webhooks = OrgFunctions.getWebhooks(GetWebhooksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWebhooksResult> getWebhooks(GetWebhooksArgs args) {
        return getWebhooks(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Webhooks.
     * 
     * A Webhook is a configuration that allows real-time events and data from the Org to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, and audits updates at the org level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webhooks = OrgFunctions.getWebhooks(GetWebhooksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWebhooksResult> getWebhooksPlain(GetWebhooksPlainArgs args) {
        return getWebhooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Webhooks.
     * 
     * A Webhook is a configuration that allows real-time events and data from the Org to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, and audits updates at the org level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webhooks = OrgFunctions.getWebhooks(GetWebhooksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWebhooksResult> getWebhooks(GetWebhooksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getWebhooks:getWebhooks", TypeShape.of(GetWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Webhooks.
     * 
     * A Webhook is a configuration that allows real-time events and data from the Org to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, and audits updates at the org level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webhooks = OrgFunctions.getWebhooks(GetWebhooksArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWebhooksResult> getWebhooksPlain(GetWebhooksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getWebhooks:getWebhooks", TypeShape.of(GetWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgWlans = OrgFunctions.getWlans(GetWlansArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWlansResult> getWlans(GetWlansArgs args) {
        return getWlans(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgWlans = OrgFunctions.getWlans(GetWlansArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWlansResult> getWlansPlain(GetWlansPlainArgs args) {
        return getWlansPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Org Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgWlans = OrgFunctions.getWlans(GetWlansArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWlansResult> getWlans(GetWlansArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getWlans:getWlans", TypeShape.of(GetWlansResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Org Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var orgWlans = OrgFunctions.getWlans(GetWlansArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWlansResult> getWlansPlain(GetWlansPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getWlans:getWlans", TypeShape.of(GetWlansResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This datasource provides the list of WLAN Templates in a Mist Organization.
     * 
     * A WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level.\
     * WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles.\
     * They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlantemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getWlantemplates(GetWlantemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWlantemplatesResult> getWlantemplates(GetWlantemplatesArgs args) {
        return getWlantemplates(args, InvokeOptions.Empty);
    }
    /**
     * This datasource provides the list of WLAN Templates in a Mist Organization.
     * 
     * A WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level.\
     * WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles.\
     * They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlantemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getWlantemplates(GetWlantemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWlantemplatesResult> getWlantemplatesPlain(GetWlantemplatesPlainArgs args) {
        return getWlantemplatesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This datasource provides the list of WLAN Templates in a Mist Organization.
     * 
     * A WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level.\
     * WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles.\
     * They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlantemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getWlantemplates(GetWlantemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWlantemplatesResult> getWlantemplates(GetWlantemplatesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getWlantemplates:getWlantemplates", TypeShape.of(GetWlantemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This datasource provides the list of WLAN Templates in a Mist Organization.
     * 
     * A WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level.\
     * WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles.\
     * They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.org.OrgFunctions;
     * import com.pulumi.junipermist.org.inputs.GetWlantemplatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var templates = OrgFunctions.getWlantemplates(GetWlantemplatesArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWlantemplatesResult> getWlantemplatesPlain(GetWlantemplatesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getWlantemplates:getWlantemplates", TypeShape.of(GetWlantemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This resource provides the list of Org WxLan tags (labels).
     * A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used
     * * within the Org WxRules to create filtering rules:
     *   * `mist_org_wxrule.dst_allow_wxtags`
     *   * `mist_org_wxrule.dst_deny_wxtags`
     *   * `mist_org_wxrule.dst_wxtags`
     *   * `mist_org_wxrule.src_wxtags`
     * * within the Org WxRules to assign specific VLAN:
     *   * `mist_org_wxrule.apply_tags`
     * * in the WLANs configuration to assign a WLAN to specific APs:
     *   * `mist_org_wlan.wxtag_ids`
     * * to identify unknown application used by Wi-Fi clients
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.device.DeviceFunctions;
     * import com.pulumi.junipermist.device.inputs.GetSwitchStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var switchStats = DeviceFunctions.getSwitchStats(GetSwitchStatsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWxtagsResult> getWxtags(GetWxtagsArgs args) {
        return getWxtags(args, InvokeOptions.Empty);
    }
    /**
     * This resource provides the list of Org WxLan tags (labels).
     * A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used
     * * within the Org WxRules to create filtering rules:
     *   * `mist_org_wxrule.dst_allow_wxtags`
     *   * `mist_org_wxrule.dst_deny_wxtags`
     *   * `mist_org_wxrule.dst_wxtags`
     *   * `mist_org_wxrule.src_wxtags`
     * * within the Org WxRules to assign specific VLAN:
     *   * `mist_org_wxrule.apply_tags`
     * * in the WLANs configuration to assign a WLAN to specific APs:
     *   * `mist_org_wlan.wxtag_ids`
     * * to identify unknown application used by Wi-Fi clients
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.device.DeviceFunctions;
     * import com.pulumi.junipermist.device.inputs.GetSwitchStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var switchStats = DeviceFunctions.getSwitchStats(GetSwitchStatsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWxtagsResult> getWxtagsPlain(GetWxtagsPlainArgs args) {
        return getWxtagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This resource provides the list of Org WxLan tags (labels).
     * A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used
     * * within the Org WxRules to create filtering rules:
     *   * `mist_org_wxrule.dst_allow_wxtags`
     *   * `mist_org_wxrule.dst_deny_wxtags`
     *   * `mist_org_wxrule.dst_wxtags`
     *   * `mist_org_wxrule.src_wxtags`
     * * within the Org WxRules to assign specific VLAN:
     *   * `mist_org_wxrule.apply_tags`
     * * in the WLANs configuration to assign a WLAN to specific APs:
     *   * `mist_org_wlan.wxtag_ids`
     * * to identify unknown application used by Wi-Fi clients
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.device.DeviceFunctions;
     * import com.pulumi.junipermist.device.inputs.GetSwitchStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var switchStats = DeviceFunctions.getSwitchStats(GetSwitchStatsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWxtagsResult> getWxtags(GetWxtagsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:org/getWxtags:getWxtags", TypeShape.of(GetWxtagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This resource provides the list of Org WxLan tags (labels).
     * A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used
     * * within the Org WxRules to create filtering rules:
     *   * `mist_org_wxrule.dst_allow_wxtags`
     *   * `mist_org_wxrule.dst_deny_wxtags`
     *   * `mist_org_wxrule.dst_wxtags`
     *   * `mist_org_wxrule.src_wxtags`
     * * within the Org WxRules to assign specific VLAN:
     *   * `mist_org_wxrule.apply_tags`
     * * in the WLANs configuration to assign a WLAN to specific APs:
     *   * `mist_org_wlan.wxtag_ids`
     * * to identify unknown application used by Wi-Fi clients
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.device.DeviceFunctions;
     * import com.pulumi.junipermist.device.inputs.GetSwitchStatsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var switchStats = DeviceFunctions.getSwitchStats(GetSwitchStatsArgs.builder()
     *             .orgId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWxtagsResult> getWxtagsPlain(GetWxtagsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:org/getWxtags:getWxtags", TypeShape.of(GetWxtagsResult.class), args, Utilities.withVersion(options));
    }
}
