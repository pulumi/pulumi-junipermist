// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatAutoPlacement;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatAutoUpgradeStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatBleStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatEnvStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatEslStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatFwupdate;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatGps;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatIotStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatIpConfig;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatIpStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatL2tpStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatLastTrouble;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatLed;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatLldpStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatMeshDownlinks;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatMeshUplink;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatPortStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatRadioStat;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatSwitchRedundancy;
import com.pulumi.junipermist.device.outputs.GetApStatsDeviceApStatUsbStat;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetApStatsDeviceApStat {
    private GetApStatsDeviceApStatAutoPlacement autoPlacement;
    private GetApStatsDeviceApStatAutoUpgradeStat autoUpgradeStat;
    private GetApStatsDeviceApStatBleStat bleStat;
    private Double certExpiry;
    private Boolean configReverted;
    private Integer cpuSystem;
    private Integer cpuUtil;
    /**
     * @return When the object has been created, in epoch
     * 
     */
    private Double createdTime;
    private String deviceprofileId;
    /**
     * @return Device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage
     * 
     */
    private GetApStatsDeviceApStatEnvStat envStat;
    private GetApStatsDeviceApStatEslStat eslStat;
    private String extIp;
    private GetApStatsDeviceApStatFwupdate fwupdate;
    private GetApStatsDeviceApStatGps gps;
    private String hwRev;
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    private String id;
    private List<Integer> inactiveWiredVlans;
    private Map<String,GetApStatsDeviceApStatIotStat> iotStat;
    private String ip;
    /**
     * @return IP AP settings
     * 
     */
    private GetApStatsDeviceApStatIpConfig ipConfig;
    private GetApStatsDeviceApStatIpStat ipStat;
    /**
     * @return L2TP tunnel status (key is the wxtunnel_id)
     * 
     */
    private Map<String,GetApStatsDeviceApStatL2tpStat> l2tpStat;
    /**
     * @return Last seen timestamp
     * 
     */
    private Double lastSeen;
    /**
     * @return Last trouble code of switch
     * 
     */
    private GetApStatsDeviceApStatLastTrouble lastTrouble;
    /**
     * @return LED AP settings
     * 
     */
    private GetApStatsDeviceApStatLed led;
    /**
     * @return LLDP Stat (neighbor information, power negotiations)
     * 
     */
    private GetApStatsDeviceApStatLldpStat lldpStat;
    private Boolean locating;
    /**
     * @return Whether this AP is considered locked (placement / orientation has been vetted)
     * 
     */
    private Boolean locked;
    /**
     * @return Device mac
     * 
     */
    private String mac;
    private String mapId;
    private Integer memUsedKb;
    /**
     * @return Property key is the mesh downlink id (e.g. `00000000-0000-0000-1000-5c5b35000010`)
     * 
     */
    private Map<String,GetApStatsDeviceApStatMeshDownlinks> meshDownlinks;
    private GetApStatsDeviceApStatMeshUplink meshUplink;
    /**
     * @return Device model
     * 
     */
    private String model;
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    private Double modifiedTime;
    private String mount;
    private String name;
    private String notes;
    /**
     * @return How many wireless clients are currently connected
     * 
     */
    private Integer numClients;
    /**
     * @return How many WLANs are applied to the device
     * 
     */
    private Integer numWlans;
    private String orgId;
    /**
     * @return Property key is the port name (e.g. `eth0`)
     * 
     */
    private Map<String,GetApStatsDeviceApStatPortStat> portStat;
    /**
     * @return In mW, surplus if positive or deficit if negative
     * 
     */
    private Integer powerBudget;
    /**
     * @return Whether insufficient power
     * 
     */
    private Boolean powerConstrained;
    /**
     * @return Constrained mode
     * 
     */
    private String powerOpmode;
    /**
     * @return DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)
     * 
     */
    private String powerSrc;
    private GetApStatsDeviceApStatRadioStat radioStat;
    /**
     * @return Rate of receiving traffic, bits/seconds, last known
     * 
     */
    private Integer rxBps;
    /**
     * @return Amount of traffic received since connection
     * 
     */
    private Integer rxBytes;
    /**
     * @return Amount of packets received since connection
     * 
     */
    private Integer rxPkts;
    /**
     * @return Serial Number
     * 
     */
    private String serial;
    private String siteId;
    private String status;
    private GetApStatsDeviceApStatSwitchRedundancy switchRedundancy;
    /**
     * @return Rate of transmitting traffic, bits/seconds, last known
     * 
     */
    private Integer txBps;
    /**
     * @return Amount of traffic sent since connection
     * 
     */
    private Integer txBytes;
    /**
     * @return Amount of packets sent since connection
     * 
     */
    private Integer txPkts;
    /**
     * @return How long, in seconds, has the device been up (or rebooted)
     * 
     */
    private Double uptime;
    private GetApStatsDeviceApStatUsbStat usbStat;
    private String version;
    private Double x;
    private Double y;

    private GetApStatsDeviceApStat() {}
    public GetApStatsDeviceApStatAutoPlacement autoPlacement() {
        return this.autoPlacement;
    }
    public GetApStatsDeviceApStatAutoUpgradeStat autoUpgradeStat() {
        return this.autoUpgradeStat;
    }
    public GetApStatsDeviceApStatBleStat bleStat() {
        return this.bleStat;
    }
    public Double certExpiry() {
        return this.certExpiry;
    }
    public Boolean configReverted() {
        return this.configReverted;
    }
    public Integer cpuSystem() {
        return this.cpuSystem;
    }
    public Integer cpuUtil() {
        return this.cpuUtil;
    }
    /**
     * @return When the object has been created, in epoch
     * 
     */
    public Double createdTime() {
        return this.createdTime;
    }
    public String deviceprofileId() {
        return this.deviceprofileId;
    }
    /**
     * @return Device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage
     * 
     */
    public GetApStatsDeviceApStatEnvStat envStat() {
        return this.envStat;
    }
    public GetApStatsDeviceApStatEslStat eslStat() {
        return this.eslStat;
    }
    public String extIp() {
        return this.extIp;
    }
    public GetApStatsDeviceApStatFwupdate fwupdate() {
        return this.fwupdate;
    }
    public GetApStatsDeviceApStatGps gps() {
        return this.gps;
    }
    public String hwRev() {
        return this.hwRev;
    }
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    public String id() {
        return this.id;
    }
    public List<Integer> inactiveWiredVlans() {
        return this.inactiveWiredVlans;
    }
    public Map<String,GetApStatsDeviceApStatIotStat> iotStat() {
        return this.iotStat;
    }
    public String ip() {
        return this.ip;
    }
    /**
     * @return IP AP settings
     * 
     */
    public GetApStatsDeviceApStatIpConfig ipConfig() {
        return this.ipConfig;
    }
    public GetApStatsDeviceApStatIpStat ipStat() {
        return this.ipStat;
    }
    /**
     * @return L2TP tunnel status (key is the wxtunnel_id)
     * 
     */
    public Map<String,GetApStatsDeviceApStatL2tpStat> l2tpStat() {
        return this.l2tpStat;
    }
    /**
     * @return Last seen timestamp
     * 
     */
    public Double lastSeen() {
        return this.lastSeen;
    }
    /**
     * @return Last trouble code of switch
     * 
     */
    public GetApStatsDeviceApStatLastTrouble lastTrouble() {
        return this.lastTrouble;
    }
    /**
     * @return LED AP settings
     * 
     */
    public GetApStatsDeviceApStatLed led() {
        return this.led;
    }
    /**
     * @return LLDP Stat (neighbor information, power negotiations)
     * 
     */
    public GetApStatsDeviceApStatLldpStat lldpStat() {
        return this.lldpStat;
    }
    public Boolean locating() {
        return this.locating;
    }
    /**
     * @return Whether this AP is considered locked (placement / orientation has been vetted)
     * 
     */
    public Boolean locked() {
        return this.locked;
    }
    /**
     * @return Device mac
     * 
     */
    public String mac() {
        return this.mac;
    }
    public String mapId() {
        return this.mapId;
    }
    public Integer memUsedKb() {
        return this.memUsedKb;
    }
    /**
     * @return Property key is the mesh downlink id (e.g. `00000000-0000-0000-1000-5c5b35000010`)
     * 
     */
    public Map<String,GetApStatsDeviceApStatMeshDownlinks> meshDownlinks() {
        return this.meshDownlinks;
    }
    public GetApStatsDeviceApStatMeshUplink meshUplink() {
        return this.meshUplink;
    }
    /**
     * @return Device model
     * 
     */
    public String model() {
        return this.model;
    }
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    public Double modifiedTime() {
        return this.modifiedTime;
    }
    public String mount() {
        return this.mount;
    }
    public String name() {
        return this.name;
    }
    public String notes() {
        return this.notes;
    }
    /**
     * @return How many wireless clients are currently connected
     * 
     */
    public Integer numClients() {
        return this.numClients;
    }
    /**
     * @return How many WLANs are applied to the device
     * 
     */
    public Integer numWlans() {
        return this.numWlans;
    }
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Property key is the port name (e.g. `eth0`)
     * 
     */
    public Map<String,GetApStatsDeviceApStatPortStat> portStat() {
        return this.portStat;
    }
    /**
     * @return In mW, surplus if positive or deficit if negative
     * 
     */
    public Integer powerBudget() {
        return this.powerBudget;
    }
    /**
     * @return Whether insufficient power
     * 
     */
    public Boolean powerConstrained() {
        return this.powerConstrained;
    }
    /**
     * @return Constrained mode
     * 
     */
    public String powerOpmode() {
        return this.powerOpmode;
    }
    /**
     * @return DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)
     * 
     */
    public String powerSrc() {
        return this.powerSrc;
    }
    public GetApStatsDeviceApStatRadioStat radioStat() {
        return this.radioStat;
    }
    /**
     * @return Rate of receiving traffic, bits/seconds, last known
     * 
     */
    public Integer rxBps() {
        return this.rxBps;
    }
    /**
     * @return Amount of traffic received since connection
     * 
     */
    public Integer rxBytes() {
        return this.rxBytes;
    }
    /**
     * @return Amount of packets received since connection
     * 
     */
    public Integer rxPkts() {
        return this.rxPkts;
    }
    /**
     * @return Serial Number
     * 
     */
    public String serial() {
        return this.serial;
    }
    public String siteId() {
        return this.siteId;
    }
    public String status() {
        return this.status;
    }
    public GetApStatsDeviceApStatSwitchRedundancy switchRedundancy() {
        return this.switchRedundancy;
    }
    /**
     * @return Rate of transmitting traffic, bits/seconds, last known
     * 
     */
    public Integer txBps() {
        return this.txBps;
    }
    /**
     * @return Amount of traffic sent since connection
     * 
     */
    public Integer txBytes() {
        return this.txBytes;
    }
    /**
     * @return Amount of packets sent since connection
     * 
     */
    public Integer txPkts() {
        return this.txPkts;
    }
    /**
     * @return How long, in seconds, has the device been up (or rebooted)
     * 
     */
    public Double uptime() {
        return this.uptime;
    }
    public GetApStatsDeviceApStatUsbStat usbStat() {
        return this.usbStat;
    }
    public String version() {
        return this.version;
    }
    public Double x() {
        return this.x;
    }
    public Double y() {
        return this.y;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApStatsDeviceApStat defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetApStatsDeviceApStatAutoPlacement autoPlacement;
        private GetApStatsDeviceApStatAutoUpgradeStat autoUpgradeStat;
        private GetApStatsDeviceApStatBleStat bleStat;
        private Double certExpiry;
        private Boolean configReverted;
        private Integer cpuSystem;
        private Integer cpuUtil;
        private Double createdTime;
        private String deviceprofileId;
        private GetApStatsDeviceApStatEnvStat envStat;
        private GetApStatsDeviceApStatEslStat eslStat;
        private String extIp;
        private GetApStatsDeviceApStatFwupdate fwupdate;
        private GetApStatsDeviceApStatGps gps;
        private String hwRev;
        private String id;
        private List<Integer> inactiveWiredVlans;
        private Map<String,GetApStatsDeviceApStatIotStat> iotStat;
        private String ip;
        private GetApStatsDeviceApStatIpConfig ipConfig;
        private GetApStatsDeviceApStatIpStat ipStat;
        private Map<String,GetApStatsDeviceApStatL2tpStat> l2tpStat;
        private Double lastSeen;
        private GetApStatsDeviceApStatLastTrouble lastTrouble;
        private GetApStatsDeviceApStatLed led;
        private GetApStatsDeviceApStatLldpStat lldpStat;
        private Boolean locating;
        private Boolean locked;
        private String mac;
        private String mapId;
        private Integer memUsedKb;
        private Map<String,GetApStatsDeviceApStatMeshDownlinks> meshDownlinks;
        private GetApStatsDeviceApStatMeshUplink meshUplink;
        private String model;
        private Double modifiedTime;
        private String mount;
        private String name;
        private String notes;
        private Integer numClients;
        private Integer numWlans;
        private String orgId;
        private Map<String,GetApStatsDeviceApStatPortStat> portStat;
        private Integer powerBudget;
        private Boolean powerConstrained;
        private String powerOpmode;
        private String powerSrc;
        private GetApStatsDeviceApStatRadioStat radioStat;
        private Integer rxBps;
        private Integer rxBytes;
        private Integer rxPkts;
        private String serial;
        private String siteId;
        private String status;
        private GetApStatsDeviceApStatSwitchRedundancy switchRedundancy;
        private Integer txBps;
        private Integer txBytes;
        private Integer txPkts;
        private Double uptime;
        private GetApStatsDeviceApStatUsbStat usbStat;
        private String version;
        private Double x;
        private Double y;
        public Builder() {}
        public Builder(GetApStatsDeviceApStat defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoPlacement = defaults.autoPlacement;
    	      this.autoUpgradeStat = defaults.autoUpgradeStat;
    	      this.bleStat = defaults.bleStat;
    	      this.certExpiry = defaults.certExpiry;
    	      this.configReverted = defaults.configReverted;
    	      this.cpuSystem = defaults.cpuSystem;
    	      this.cpuUtil = defaults.cpuUtil;
    	      this.createdTime = defaults.createdTime;
    	      this.deviceprofileId = defaults.deviceprofileId;
    	      this.envStat = defaults.envStat;
    	      this.eslStat = defaults.eslStat;
    	      this.extIp = defaults.extIp;
    	      this.fwupdate = defaults.fwupdate;
    	      this.gps = defaults.gps;
    	      this.hwRev = defaults.hwRev;
    	      this.id = defaults.id;
    	      this.inactiveWiredVlans = defaults.inactiveWiredVlans;
    	      this.iotStat = defaults.iotStat;
    	      this.ip = defaults.ip;
    	      this.ipConfig = defaults.ipConfig;
    	      this.ipStat = defaults.ipStat;
    	      this.l2tpStat = defaults.l2tpStat;
    	      this.lastSeen = defaults.lastSeen;
    	      this.lastTrouble = defaults.lastTrouble;
    	      this.led = defaults.led;
    	      this.lldpStat = defaults.lldpStat;
    	      this.locating = defaults.locating;
    	      this.locked = defaults.locked;
    	      this.mac = defaults.mac;
    	      this.mapId = defaults.mapId;
    	      this.memUsedKb = defaults.memUsedKb;
    	      this.meshDownlinks = defaults.meshDownlinks;
    	      this.meshUplink = defaults.meshUplink;
    	      this.model = defaults.model;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.mount = defaults.mount;
    	      this.name = defaults.name;
    	      this.notes = defaults.notes;
    	      this.numClients = defaults.numClients;
    	      this.numWlans = defaults.numWlans;
    	      this.orgId = defaults.orgId;
    	      this.portStat = defaults.portStat;
    	      this.powerBudget = defaults.powerBudget;
    	      this.powerConstrained = defaults.powerConstrained;
    	      this.powerOpmode = defaults.powerOpmode;
    	      this.powerSrc = defaults.powerSrc;
    	      this.radioStat = defaults.radioStat;
    	      this.rxBps = defaults.rxBps;
    	      this.rxBytes = defaults.rxBytes;
    	      this.rxPkts = defaults.rxPkts;
    	      this.serial = defaults.serial;
    	      this.siteId = defaults.siteId;
    	      this.status = defaults.status;
    	      this.switchRedundancy = defaults.switchRedundancy;
    	      this.txBps = defaults.txBps;
    	      this.txBytes = defaults.txBytes;
    	      this.txPkts = defaults.txPkts;
    	      this.uptime = defaults.uptime;
    	      this.usbStat = defaults.usbStat;
    	      this.version = defaults.version;
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        @CustomType.Setter
        public Builder autoPlacement(GetApStatsDeviceApStatAutoPlacement autoPlacement) {
            if (autoPlacement == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "autoPlacement");
            }
            this.autoPlacement = autoPlacement;
            return this;
        }
        @CustomType.Setter
        public Builder autoUpgradeStat(GetApStatsDeviceApStatAutoUpgradeStat autoUpgradeStat) {
            if (autoUpgradeStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "autoUpgradeStat");
            }
            this.autoUpgradeStat = autoUpgradeStat;
            return this;
        }
        @CustomType.Setter
        public Builder bleStat(GetApStatsDeviceApStatBleStat bleStat) {
            if (bleStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "bleStat");
            }
            this.bleStat = bleStat;
            return this;
        }
        @CustomType.Setter
        public Builder certExpiry(Double certExpiry) {
            if (certExpiry == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "certExpiry");
            }
            this.certExpiry = certExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder configReverted(Boolean configReverted) {
            if (configReverted == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "configReverted");
            }
            this.configReverted = configReverted;
            return this;
        }
        @CustomType.Setter
        public Builder cpuSystem(Integer cpuSystem) {
            if (cpuSystem == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "cpuSystem");
            }
            this.cpuSystem = cpuSystem;
            return this;
        }
        @CustomType.Setter
        public Builder cpuUtil(Integer cpuUtil) {
            if (cpuUtil == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "cpuUtil");
            }
            this.cpuUtil = cpuUtil;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(Double createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder deviceprofileId(String deviceprofileId) {
            if (deviceprofileId == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "deviceprofileId");
            }
            this.deviceprofileId = deviceprofileId;
            return this;
        }
        @CustomType.Setter
        public Builder envStat(GetApStatsDeviceApStatEnvStat envStat) {
            if (envStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "envStat");
            }
            this.envStat = envStat;
            return this;
        }
        @CustomType.Setter
        public Builder eslStat(GetApStatsDeviceApStatEslStat eslStat) {
            if (eslStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "eslStat");
            }
            this.eslStat = eslStat;
            return this;
        }
        @CustomType.Setter
        public Builder extIp(String extIp) {
            if (extIp == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "extIp");
            }
            this.extIp = extIp;
            return this;
        }
        @CustomType.Setter
        public Builder fwupdate(GetApStatsDeviceApStatFwupdate fwupdate) {
            if (fwupdate == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "fwupdate");
            }
            this.fwupdate = fwupdate;
            return this;
        }
        @CustomType.Setter
        public Builder gps(GetApStatsDeviceApStatGps gps) {
            if (gps == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "gps");
            }
            this.gps = gps;
            return this;
        }
        @CustomType.Setter
        public Builder hwRev(String hwRev) {
            if (hwRev == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "hwRev");
            }
            this.hwRev = hwRev;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveWiredVlans(List<Integer> inactiveWiredVlans) {
            if (inactiveWiredVlans == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "inactiveWiredVlans");
            }
            this.inactiveWiredVlans = inactiveWiredVlans;
            return this;
        }
        public Builder inactiveWiredVlans(Integer... inactiveWiredVlans) {
            return inactiveWiredVlans(List.of(inactiveWiredVlans));
        }
        @CustomType.Setter
        public Builder iotStat(Map<String,GetApStatsDeviceApStatIotStat> iotStat) {
            if (iotStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "iotStat");
            }
            this.iotStat = iotStat;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder ipConfig(GetApStatsDeviceApStatIpConfig ipConfig) {
            if (ipConfig == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "ipConfig");
            }
            this.ipConfig = ipConfig;
            return this;
        }
        @CustomType.Setter
        public Builder ipStat(GetApStatsDeviceApStatIpStat ipStat) {
            if (ipStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "ipStat");
            }
            this.ipStat = ipStat;
            return this;
        }
        @CustomType.Setter
        public Builder l2tpStat(Map<String,GetApStatsDeviceApStatL2tpStat> l2tpStat) {
            if (l2tpStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "l2tpStat");
            }
            this.l2tpStat = l2tpStat;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(Double lastSeen) {
            if (lastSeen == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "lastSeen");
            }
            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder lastTrouble(GetApStatsDeviceApStatLastTrouble lastTrouble) {
            if (lastTrouble == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "lastTrouble");
            }
            this.lastTrouble = lastTrouble;
            return this;
        }
        @CustomType.Setter
        public Builder led(GetApStatsDeviceApStatLed led) {
            if (led == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "led");
            }
            this.led = led;
            return this;
        }
        @CustomType.Setter
        public Builder lldpStat(GetApStatsDeviceApStatLldpStat lldpStat) {
            if (lldpStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "lldpStat");
            }
            this.lldpStat = lldpStat;
            return this;
        }
        @CustomType.Setter
        public Builder locating(Boolean locating) {
            if (locating == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "locating");
            }
            this.locating = locating;
            return this;
        }
        @CustomType.Setter
        public Builder locked(Boolean locked) {
            if (locked == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "locked");
            }
            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder mac(String mac) {
            if (mac == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "mac");
            }
            this.mac = mac;
            return this;
        }
        @CustomType.Setter
        public Builder mapId(String mapId) {
            if (mapId == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "mapId");
            }
            this.mapId = mapId;
            return this;
        }
        @CustomType.Setter
        public Builder memUsedKb(Integer memUsedKb) {
            if (memUsedKb == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "memUsedKb");
            }
            this.memUsedKb = memUsedKb;
            return this;
        }
        @CustomType.Setter
        public Builder meshDownlinks(Map<String,GetApStatsDeviceApStatMeshDownlinks> meshDownlinks) {
            if (meshDownlinks == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "meshDownlinks");
            }
            this.meshDownlinks = meshDownlinks;
            return this;
        }
        @CustomType.Setter
        public Builder meshUplink(GetApStatsDeviceApStatMeshUplink meshUplink) {
            if (meshUplink == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "meshUplink");
            }
            this.meshUplink = meshUplink;
            return this;
        }
        @CustomType.Setter
        public Builder model(String model) {
            if (model == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "model");
            }
            this.model = model;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedTime(Double modifiedTime) {
            if (modifiedTime == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "modifiedTime");
            }
            this.modifiedTime = modifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder mount(String mount) {
            if (mount == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "mount");
            }
            this.mount = mount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notes(String notes) {
            if (notes == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "notes");
            }
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder numClients(Integer numClients) {
            if (numClients == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "numClients");
            }
            this.numClients = numClients;
            return this;
        }
        @CustomType.Setter
        public Builder numWlans(Integer numWlans) {
            if (numWlans == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "numWlans");
            }
            this.numWlans = numWlans;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder portStat(Map<String,GetApStatsDeviceApStatPortStat> portStat) {
            if (portStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "portStat");
            }
            this.portStat = portStat;
            return this;
        }
        @CustomType.Setter
        public Builder powerBudget(Integer powerBudget) {
            if (powerBudget == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "powerBudget");
            }
            this.powerBudget = powerBudget;
            return this;
        }
        @CustomType.Setter
        public Builder powerConstrained(Boolean powerConstrained) {
            if (powerConstrained == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "powerConstrained");
            }
            this.powerConstrained = powerConstrained;
            return this;
        }
        @CustomType.Setter
        public Builder powerOpmode(String powerOpmode) {
            if (powerOpmode == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "powerOpmode");
            }
            this.powerOpmode = powerOpmode;
            return this;
        }
        @CustomType.Setter
        public Builder powerSrc(String powerSrc) {
            if (powerSrc == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "powerSrc");
            }
            this.powerSrc = powerSrc;
            return this;
        }
        @CustomType.Setter
        public Builder radioStat(GetApStatsDeviceApStatRadioStat radioStat) {
            if (radioStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "radioStat");
            }
            this.radioStat = radioStat;
            return this;
        }
        @CustomType.Setter
        public Builder rxBps(Integer rxBps) {
            if (rxBps == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "rxBps");
            }
            this.rxBps = rxBps;
            return this;
        }
        @CustomType.Setter
        public Builder rxBytes(Integer rxBytes) {
            if (rxBytes == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "rxBytes");
            }
            this.rxBytes = rxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder rxPkts(Integer rxPkts) {
            if (rxPkts == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "rxPkts");
            }
            this.rxPkts = rxPkts;
            return this;
        }
        @CustomType.Setter
        public Builder serial(String serial) {
            if (serial == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "serial");
            }
            this.serial = serial;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder switchRedundancy(GetApStatsDeviceApStatSwitchRedundancy switchRedundancy) {
            if (switchRedundancy == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "switchRedundancy");
            }
            this.switchRedundancy = switchRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder txBps(Integer txBps) {
            if (txBps == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "txBps");
            }
            this.txBps = txBps;
            return this;
        }
        @CustomType.Setter
        public Builder txBytes(Integer txBytes) {
            if (txBytes == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "txBytes");
            }
            this.txBytes = txBytes;
            return this;
        }
        @CustomType.Setter
        public Builder txPkts(Integer txPkts) {
            if (txPkts == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "txPkts");
            }
            this.txPkts = txPkts;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(Double uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        @CustomType.Setter
        public Builder usbStat(GetApStatsDeviceApStatUsbStat usbStat) {
            if (usbStat == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "usbStat");
            }
            this.usbStat = usbStat;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder x(Double x) {
            if (x == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "x");
            }
            this.x = x;
            return this;
        }
        @CustomType.Setter
        public Builder y(Double y) {
            if (y == null) {
              throw new MissingRequiredPropertyException("GetApStatsDeviceApStat", "y");
            }
            this.y = y;
            return this;
        }
        public GetApStatsDeviceApStat build() {
            final var _resultValue = new GetApStatsDeviceApStat();
            _resultValue.autoPlacement = autoPlacement;
            _resultValue.autoUpgradeStat = autoUpgradeStat;
            _resultValue.bleStat = bleStat;
            _resultValue.certExpiry = certExpiry;
            _resultValue.configReverted = configReverted;
            _resultValue.cpuSystem = cpuSystem;
            _resultValue.cpuUtil = cpuUtil;
            _resultValue.createdTime = createdTime;
            _resultValue.deviceprofileId = deviceprofileId;
            _resultValue.envStat = envStat;
            _resultValue.eslStat = eslStat;
            _resultValue.extIp = extIp;
            _resultValue.fwupdate = fwupdate;
            _resultValue.gps = gps;
            _resultValue.hwRev = hwRev;
            _resultValue.id = id;
            _resultValue.inactiveWiredVlans = inactiveWiredVlans;
            _resultValue.iotStat = iotStat;
            _resultValue.ip = ip;
            _resultValue.ipConfig = ipConfig;
            _resultValue.ipStat = ipStat;
            _resultValue.l2tpStat = l2tpStat;
            _resultValue.lastSeen = lastSeen;
            _resultValue.lastTrouble = lastTrouble;
            _resultValue.led = led;
            _resultValue.lldpStat = lldpStat;
            _resultValue.locating = locating;
            _resultValue.locked = locked;
            _resultValue.mac = mac;
            _resultValue.mapId = mapId;
            _resultValue.memUsedKb = memUsedKb;
            _resultValue.meshDownlinks = meshDownlinks;
            _resultValue.meshUplink = meshUplink;
            _resultValue.model = model;
            _resultValue.modifiedTime = modifiedTime;
            _resultValue.mount = mount;
            _resultValue.name = name;
            _resultValue.notes = notes;
            _resultValue.numClients = numClients;
            _resultValue.numWlans = numWlans;
            _resultValue.orgId = orgId;
            _resultValue.portStat = portStat;
            _resultValue.powerBudget = powerBudget;
            _resultValue.powerConstrained = powerConstrained;
            _resultValue.powerOpmode = powerOpmode;
            _resultValue.powerSrc = powerSrc;
            _resultValue.radioStat = radioStat;
            _resultValue.rxBps = rxBps;
            _resultValue.rxBytes = rxBytes;
            _resultValue.rxPkts = rxPkts;
            _resultValue.serial = serial;
            _resultValue.siteId = siteId;
            _resultValue.status = status;
            _resultValue.switchRedundancy = switchRedundancy;
            _resultValue.txBps = txBps;
            _resultValue.txBytes = txBytes;
            _resultValue.txPkts = txPkts;
            _resultValue.uptime = uptime;
            _resultValue.usbStat = usbStat;
            _resultValue.version = version;
            _resultValue.x = x;
            _resultValue.y = y;
            return _resultValue;
        }
    }
}
