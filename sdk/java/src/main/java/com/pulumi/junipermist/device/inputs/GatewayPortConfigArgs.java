// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigIpConfigArgs;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigTrafficShapingArgs;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigVpnPathsArgs;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigWanExtraRoutes6Args;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigWanExtraRoutesArgs;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigWanProbeOverrideArgs;
import com.pulumi.junipermist.device.inputs.GatewayPortConfigWanSourceNatArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayPortConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayPortConfigArgs Empty = new GatewayPortConfigArgs();

    /**
     * If `aggregated`==`true`. To disable LCP support for the AE interface
     * 
     */
    @Import(name="aeDisableLacp")
    private @Nullable Output<Boolean> aeDisableLacp;

    /**
     * @return If `aggregated`==`true`. To disable LCP support for the AE interface
     * 
     */
    public Optional<Output<Boolean>> aeDisableLacp() {
        return Optional.ofNullable(this.aeDisableLacp);
    }

    /**
     * If `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
     * 
     */
    @Import(name="aeIdx")
    private @Nullable Output<String> aeIdx;

    /**
     * @return If `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
     * 
     */
    public Optional<Output<String>> aeIdx() {
        return Optional.ofNullable(this.aeIdx);
    }

    /**
     * For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only
     * 
     */
    @Import(name="aeLacpForceUp")
    private @Nullable Output<Boolean> aeLacpForceUp;

    /**
     * @return For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only
     * 
     */
    public Optional<Output<Boolean>> aeLacpForceUp() {
        return Optional.ofNullable(this.aeLacpForceUp);
    }

    @Import(name="aggregated")
    private @Nullable Output<Boolean> aggregated;

    public Optional<Output<Boolean>> aggregated() {
        return Optional.ofNullable(this.aggregated);
    }

    /**
     * To generate port up/down alarm, set it to true
     * 
     */
    @Import(name="critical")
    private @Nullable Output<Boolean> critical;

    /**
     * @return To generate port up/down alarm, set it to true
     * 
     */
    public Optional<Output<Boolean>> critical() {
        return Optional.ofNullable(this.critical);
    }

    /**
     * Interface Description. Can be a variable (i.e. &#34;{{myvar}}&#34;)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Interface Description. Can be a variable (i.e. &#34;{{myvar}}&#34;)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="disableAutoneg")
    private @Nullable Output<Boolean> disableAutoneg;

    public Optional<Output<Boolean>> disableAutoneg() {
        return Optional.ofNullable(this.disableAutoneg);
    }

    /**
     * Port admin up (true) / down (false)
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Port admin up (true) / down (false)
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * if `wanType`==`dsl`. enum: `adsl`, `vdsl`
     * 
     */
    @Import(name="dslType")
    private @Nullable Output<String> dslType;

    /**
     * @return if `wanType`==`dsl`. enum: `adsl`, `vdsl`
     * 
     */
    public Optional<Output<String>> dslType() {
        return Optional.ofNullable(this.dslType);
    }

    /**
     * If `wanType`==`dsl`, 16 bit int
     * 
     */
    @Import(name="dslVci")
    private @Nullable Output<Integer> dslVci;

    /**
     * @return If `wanType`==`dsl`, 16 bit int
     * 
     */
    public Optional<Output<Integer>> dslVci() {
        return Optional.ofNullable(this.dslVci);
    }

    /**
     * If `wanType`==`dsl`, 8 bit int
     * 
     */
    @Import(name="dslVpi")
    private @Nullable Output<Integer> dslVpi;

    /**
     * @return If `wanType`==`dsl`, 8 bit int
     * 
     */
    public Optional<Output<Integer>> dslVpi() {
        return Optional.ofNullable(this.dslVpi);
    }

    /**
     * enum: `auto`, `full`, `half`
     * 
     */
    @Import(name="duplex")
    private @Nullable Output<String> duplex;

    /**
     * @return enum: `auto`, `full`, `half`
     * 
     */
    public Optional<Output<String>> duplex() {
        return Optional.ofNullable(this.duplex);
    }

    /**
     * Junos IP Config
     * 
     */
    @Import(name="ipConfig")
    private @Nullable Output<GatewayPortConfigIpConfigArgs> ipConfig;

    /**
     * @return Junos IP Config
     * 
     */
    public Optional<Output<GatewayPortConfigIpConfigArgs>> ipConfig() {
        return Optional.ofNullable(this.ipConfig);
    }

    /**
     * If `wanType`==`lte`
     * 
     */
    @Import(name="lteApn")
    private @Nullable Output<String> lteApn;

    /**
     * @return If `wanType`==`lte`
     * 
     */
    public Optional<Output<String>> lteApn() {
        return Optional.ofNullable(this.lteApn);
    }

    /**
     * if `wanType`==`lte`. enum: `chap`, `none`, `pap`
     * 
     */
    @Import(name="lteAuth")
    private @Nullable Output<String> lteAuth;

    /**
     * @return if `wanType`==`lte`. enum: `chap`, `none`, `pap`
     * 
     */
    public Optional<Output<String>> lteAuth() {
        return Optional.ofNullable(this.lteAuth);
    }

    @Import(name="lteBackup")
    private @Nullable Output<Boolean> lteBackup;

    public Optional<Output<Boolean>> lteBackup() {
        return Optional.ofNullable(this.lteBackup);
    }

    /**
     * If `wanType`==`lte`
     * 
     */
    @Import(name="ltePassword")
    private @Nullable Output<String> ltePassword;

    /**
     * @return If `wanType`==`lte`
     * 
     */
    public Optional<Output<String>> ltePassword() {
        return Optional.ofNullable(this.ltePassword);
    }

    /**
     * If `wanType`==`lte`
     * 
     */
    @Import(name="lteUsername")
    private @Nullable Output<String> lteUsername;

    /**
     * @return If `wanType`==`lte`
     * 
     */
    public Optional<Output<String>> lteUsername() {
        return Optional.ofNullable(this.lteUsername);
    }

    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * Name that we&#39;ll use to derive config
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name that we&#39;ll use to derive config
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * if `usage`==`lan`, name of the `junipermist.org.Network` resource
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return if `usage`==`lan`, name of the `junipermist.org.Network` resource
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * For Q-in-Q
     * 
     */
    @Import(name="outerVlanId")
    private @Nullable Output<Integer> outerVlanId;

    /**
     * @return For Q-in-Q
     * 
     */
    public Optional<Output<Integer>> outerVlanId() {
        return Optional.ofNullable(this.outerVlanId);
    }

    @Import(name="poeDisabled")
    private @Nullable Output<Boolean> poeDisabled;

    public Optional<Output<Boolean>> poeDisabled() {
        return Optional.ofNullable(this.poeDisabled);
    }

    /**
     * Only for SRX and if `usage`==`lan`, the name of the Network to be used as the Untagged VLAN
     * 
     */
    @Import(name="portNetwork")
    private @Nullable Output<String> portNetwork;

    /**
     * @return Only for SRX and if `usage`==`lan`, the name of the Network to be used as the Untagged VLAN
     * 
     */
    public Optional<Output<String>> portNetwork() {
        return Optional.ofNullable(this.portNetwork);
    }

    /**
     * Whether to preserve dscp when sending traffic over VPN (SSR-only)
     * 
     */
    @Import(name="preserveDscp")
    private @Nullable Output<Boolean> preserveDscp;

    /**
     * @return Whether to preserve dscp when sending traffic over VPN (SSR-only)
     * 
     */
    public Optional<Output<Boolean>> preserveDscp() {
        return Optional.ofNullable(this.preserveDscp);
    }

    /**
     * If HA mode
     * 
     */
    @Import(name="redundant")
    private @Nullable Output<Boolean> redundant;

    /**
     * @return If HA mode
     * 
     */
    public Optional<Output<Boolean>> redundant() {
        return Optional.ofNullable(this.redundant);
    }

    /**
     * If HA mode, SRX Only - support redundancy-group. 1-128 for physical SRX, 1-64 for virtual SRX
     * 
     */
    @Import(name="redundantGroup")
    private @Nullable Output<Integer> redundantGroup;

    /**
     * @return If HA mode, SRX Only - support redundancy-group. 1-128 for physical SRX, 1-64 for virtual SRX
     * 
     */
    public Optional<Output<Integer>> redundantGroup() {
        return Optional.ofNullable(this.redundantGroup);
    }

    /**
     * For SRX only and if HA Mode
     * 
     */
    @Import(name="rethIdx")
    private @Nullable Output<String> rethIdx;

    /**
     * @return For SRX only and if HA Mode
     * 
     */
    public Optional<Output<String>> rethIdx() {
        return Optional.ofNullable(this.rethIdx);
    }

    /**
     * If HA mode
     * 
     */
    @Import(name="rethNode")
    private @Nullable Output<String> rethNode;

    /**
     * @return If HA mode
     * 
     */
    public Optional<Output<String>> rethNode() {
        return Optional.ofNullable(this.rethNode);
    }

    /**
     * SSR only - supporting vlan-based redundancy (matching the size of `networks`)
     * 
     */
    @Import(name="rethNodes")
    private @Nullable Output<List<String>> rethNodes;

    /**
     * @return SSR only - supporting vlan-based redundancy (matching the size of `networks`)
     * 
     */
    public Optional<Output<List<String>>> rethNodes() {
        return Optional.ofNullable(this.rethNodes);
    }

    @Import(name="speed")
    private @Nullable Output<String> speed;

    public Optional<Output<String>> speed() {
        return Optional.ofNullable(this.speed);
    }

    /**
     * When SSR is running as VM, this is required on certain hosting platforms
     * 
     */
    @Import(name="ssrNoVirtualMac")
    private @Nullable Output<Boolean> ssrNoVirtualMac;

    /**
     * @return When SSR is running as VM, this is required on certain hosting platforms
     * 
     */
    public Optional<Output<Boolean>> ssrNoVirtualMac() {
        return Optional.ofNullable(this.ssrNoVirtualMac);
    }

    /**
     * For SSR only
     * 
     */
    @Import(name="svrPortRange")
    private @Nullable Output<String> svrPortRange;

    /**
     * @return For SSR only
     * 
     */
    public Optional<Output<String>> svrPortRange() {
        return Optional.ofNullable(this.svrPortRange);
    }

    @Import(name="trafficShaping")
    private @Nullable Output<GatewayPortConfigTrafficShapingArgs> trafficShaping;

    public Optional<Output<GatewayPortConfigTrafficShapingArgs>> trafficShaping() {
        return Optional.ofNullable(this.trafficShaping);
    }

    /**
     * port usage name. enum: `haControl`, `haData`, `lan`, `wan`
     * 
     */
    @Import(name="usage", required=true)
    private Output<String> usage;

    /**
     * @return port usage name. enum: `haControl`, `haData`, `lan`, `wan`
     * 
     */
    public Output<String> usage() {
        return this.usage;
    }

    @Import(name="vlanId")
    private @Nullable Output<String> vlanId;

    public Optional<Output<String>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * Property key is the VPN name
     * 
     */
    @Import(name="vpnPaths")
    private @Nullable Output<Map<String,GatewayPortConfigVpnPathsArgs>> vpnPaths;

    /**
     * @return Property key is the VPN name
     * 
     */
    public Optional<Output<Map<String,GatewayPortConfigVpnPathsArgs>>> vpnPaths() {
        return Optional.ofNullable(this.vpnPaths);
    }

    /**
     * Only when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
     * 
     */
    @Import(name="wanArpPolicer")
    private @Nullable Output<String> wanArpPolicer;

    /**
     * @return Only when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
     * 
     */
    public Optional<Output<String>> wanArpPolicer() {
        return Optional.ofNullable(this.wanArpPolicer);
    }

    /**
     * If `wanType`==`wan`, disable speedtest
     * 
     */
    @Import(name="wanDisableSpeedtest")
    private @Nullable Output<Boolean> wanDisableSpeedtest;

    /**
     * @return If `wanType`==`wan`, disable speedtest
     * 
     */
    public Optional<Output<Boolean>> wanDisableSpeedtest() {
        return Optional.ofNullable(this.wanDisableSpeedtest);
    }

    /**
     * Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP
     * 
     */
    @Import(name="wanExtIp")
    private @Nullable Output<String> wanExtIp;

    /**
     * @return Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP
     * 
     */
    public Optional<Output<String>> wanExtIp() {
        return Optional.ofNullable(this.wanExtIp);
    }

    /**
     * Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;100.100.100.0/24&#34;)
     * 
     */
    @Import(name="wanExtraRoutes")
    private @Nullable Output<Map<String,GatewayPortConfigWanExtraRoutesArgs>> wanExtraRoutes;

    /**
     * @return Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;100.100.100.0/24&#34;)
     * 
     */
    public Optional<Output<Map<String,GatewayPortConfigWanExtraRoutesArgs>>> wanExtraRoutes() {
        return Optional.ofNullable(this.wanExtraRoutes);
    }

    /**
     * Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    @Import(name="wanExtraRoutes6")
    private @Nullable Output<Map<String,GatewayPortConfigWanExtraRoutes6Args>> wanExtraRoutes6;

    /**
     * @return Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
     * 
     */
    public Optional<Output<Map<String,GatewayPortConfigWanExtraRoutes6Args>>> wanExtraRoutes6() {
        return Optional.ofNullable(this.wanExtraRoutes6);
    }

    /**
     * Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
     * 
     */
    @Import(name="wanNetworks")
    private @Nullable Output<List<String>> wanNetworks;

    /**
     * @return Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
     * 
     */
    public Optional<Output<List<String>>> wanNetworks() {
        return Optional.ofNullable(this.wanNetworks);
    }

    /**
     * Only if `usage`==`wan`
     * 
     */
    @Import(name="wanProbeOverride")
    private @Nullable Output<GatewayPortConfigWanProbeOverrideArgs> wanProbeOverride;

    /**
     * @return Only if `usage`==`wan`
     * 
     */
    public Optional<Output<GatewayPortConfigWanProbeOverrideArgs>> wanProbeOverride() {
        return Optional.ofNullable(this.wanProbeOverride);
    }

    /**
     * Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip
     * 
     */
    @Import(name="wanSourceNat")
    private @Nullable Output<GatewayPortConfigWanSourceNatArgs> wanSourceNat;

    /**
     * @return Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip
     * 
     */
    public Optional<Output<GatewayPortConfigWanSourceNatArgs>> wanSourceNat() {
        return Optional.ofNullable(this.wanSourceNat);
    }

    /**
     * Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
     * 
     */
    @Import(name="wanType")
    private @Nullable Output<String> wanType;

    /**
     * @return Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
     * 
     */
    public Optional<Output<String>> wanType() {
        return Optional.ofNullable(this.wanType);
    }

    private GatewayPortConfigArgs() {}

    private GatewayPortConfigArgs(GatewayPortConfigArgs $) {
        this.aeDisableLacp = $.aeDisableLacp;
        this.aeIdx = $.aeIdx;
        this.aeLacpForceUp = $.aeLacpForceUp;
        this.aggregated = $.aggregated;
        this.critical = $.critical;
        this.description = $.description;
        this.disableAutoneg = $.disableAutoneg;
        this.disabled = $.disabled;
        this.dslType = $.dslType;
        this.dslVci = $.dslVci;
        this.dslVpi = $.dslVpi;
        this.duplex = $.duplex;
        this.ipConfig = $.ipConfig;
        this.lteApn = $.lteApn;
        this.lteAuth = $.lteAuth;
        this.lteBackup = $.lteBackup;
        this.ltePassword = $.ltePassword;
        this.lteUsername = $.lteUsername;
        this.mtu = $.mtu;
        this.name = $.name;
        this.networks = $.networks;
        this.outerVlanId = $.outerVlanId;
        this.poeDisabled = $.poeDisabled;
        this.portNetwork = $.portNetwork;
        this.preserveDscp = $.preserveDscp;
        this.redundant = $.redundant;
        this.redundantGroup = $.redundantGroup;
        this.rethIdx = $.rethIdx;
        this.rethNode = $.rethNode;
        this.rethNodes = $.rethNodes;
        this.speed = $.speed;
        this.ssrNoVirtualMac = $.ssrNoVirtualMac;
        this.svrPortRange = $.svrPortRange;
        this.trafficShaping = $.trafficShaping;
        this.usage = $.usage;
        this.vlanId = $.vlanId;
        this.vpnPaths = $.vpnPaths;
        this.wanArpPolicer = $.wanArpPolicer;
        this.wanDisableSpeedtest = $.wanDisableSpeedtest;
        this.wanExtIp = $.wanExtIp;
        this.wanExtraRoutes = $.wanExtraRoutes;
        this.wanExtraRoutes6 = $.wanExtraRoutes6;
        this.wanNetworks = $.wanNetworks;
        this.wanProbeOverride = $.wanProbeOverride;
        this.wanSourceNat = $.wanSourceNat;
        this.wanType = $.wanType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayPortConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayPortConfigArgs $;

        public Builder() {
            $ = new GatewayPortConfigArgs();
        }

        public Builder(GatewayPortConfigArgs defaults) {
            $ = new GatewayPortConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aeDisableLacp If `aggregated`==`true`. To disable LCP support for the AE interface
         * 
         * @return builder
         * 
         */
        public Builder aeDisableLacp(@Nullable Output<Boolean> aeDisableLacp) {
            $.aeDisableLacp = aeDisableLacp;
            return this;
        }

        /**
         * @param aeDisableLacp If `aggregated`==`true`. To disable LCP support for the AE interface
         * 
         * @return builder
         * 
         */
        public Builder aeDisableLacp(Boolean aeDisableLacp) {
            return aeDisableLacp(Output.of(aeDisableLacp));
        }

        /**
         * @param aeIdx If `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
         * 
         * @return builder
         * 
         */
        public Builder aeIdx(@Nullable Output<String> aeIdx) {
            $.aeIdx = aeIdx;
            return this;
        }

        /**
         * @param aeIdx If `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
         * 
         * @return builder
         * 
         */
        public Builder aeIdx(String aeIdx) {
            return aeIdx(Output.of(aeIdx));
        }

        /**
         * @param aeLacpForceUp For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only
         * 
         * @return builder
         * 
         */
        public Builder aeLacpForceUp(@Nullable Output<Boolean> aeLacpForceUp) {
            $.aeLacpForceUp = aeLacpForceUp;
            return this;
        }

        /**
         * @param aeLacpForceUp For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only
         * 
         * @return builder
         * 
         */
        public Builder aeLacpForceUp(Boolean aeLacpForceUp) {
            return aeLacpForceUp(Output.of(aeLacpForceUp));
        }

        public Builder aggregated(@Nullable Output<Boolean> aggregated) {
            $.aggregated = aggregated;
            return this;
        }

        public Builder aggregated(Boolean aggregated) {
            return aggregated(Output.of(aggregated));
        }

        /**
         * @param critical To generate port up/down alarm, set it to true
         * 
         * @return builder
         * 
         */
        public Builder critical(@Nullable Output<Boolean> critical) {
            $.critical = critical;
            return this;
        }

        /**
         * @param critical To generate port up/down alarm, set it to true
         * 
         * @return builder
         * 
         */
        public Builder critical(Boolean critical) {
            return critical(Output.of(critical));
        }

        /**
         * @param description Interface Description. Can be a variable (i.e. &#34;{{myvar}}&#34;)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Interface Description. Can be a variable (i.e. &#34;{{myvar}}&#34;)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder disableAutoneg(@Nullable Output<Boolean> disableAutoneg) {
            $.disableAutoneg = disableAutoneg;
            return this;
        }

        public Builder disableAutoneg(Boolean disableAutoneg) {
            return disableAutoneg(Output.of(disableAutoneg));
        }

        /**
         * @param disabled Port admin up (true) / down (false)
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Port admin up (true) / down (false)
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param dslType if `wanType`==`dsl`. enum: `adsl`, `vdsl`
         * 
         * @return builder
         * 
         */
        public Builder dslType(@Nullable Output<String> dslType) {
            $.dslType = dslType;
            return this;
        }

        /**
         * @param dslType if `wanType`==`dsl`. enum: `adsl`, `vdsl`
         * 
         * @return builder
         * 
         */
        public Builder dslType(String dslType) {
            return dslType(Output.of(dslType));
        }

        /**
         * @param dslVci If `wanType`==`dsl`, 16 bit int
         * 
         * @return builder
         * 
         */
        public Builder dslVci(@Nullable Output<Integer> dslVci) {
            $.dslVci = dslVci;
            return this;
        }

        /**
         * @param dslVci If `wanType`==`dsl`, 16 bit int
         * 
         * @return builder
         * 
         */
        public Builder dslVci(Integer dslVci) {
            return dslVci(Output.of(dslVci));
        }

        /**
         * @param dslVpi If `wanType`==`dsl`, 8 bit int
         * 
         * @return builder
         * 
         */
        public Builder dslVpi(@Nullable Output<Integer> dslVpi) {
            $.dslVpi = dslVpi;
            return this;
        }

        /**
         * @param dslVpi If `wanType`==`dsl`, 8 bit int
         * 
         * @return builder
         * 
         */
        public Builder dslVpi(Integer dslVpi) {
            return dslVpi(Output.of(dslVpi));
        }

        /**
         * @param duplex enum: `auto`, `full`, `half`
         * 
         * @return builder
         * 
         */
        public Builder duplex(@Nullable Output<String> duplex) {
            $.duplex = duplex;
            return this;
        }

        /**
         * @param duplex enum: `auto`, `full`, `half`
         * 
         * @return builder
         * 
         */
        public Builder duplex(String duplex) {
            return duplex(Output.of(duplex));
        }

        /**
         * @param ipConfig Junos IP Config
         * 
         * @return builder
         * 
         */
        public Builder ipConfig(@Nullable Output<GatewayPortConfigIpConfigArgs> ipConfig) {
            $.ipConfig = ipConfig;
            return this;
        }

        /**
         * @param ipConfig Junos IP Config
         * 
         * @return builder
         * 
         */
        public Builder ipConfig(GatewayPortConfigIpConfigArgs ipConfig) {
            return ipConfig(Output.of(ipConfig));
        }

        /**
         * @param lteApn If `wanType`==`lte`
         * 
         * @return builder
         * 
         */
        public Builder lteApn(@Nullable Output<String> lteApn) {
            $.lteApn = lteApn;
            return this;
        }

        /**
         * @param lteApn If `wanType`==`lte`
         * 
         * @return builder
         * 
         */
        public Builder lteApn(String lteApn) {
            return lteApn(Output.of(lteApn));
        }

        /**
         * @param lteAuth if `wanType`==`lte`. enum: `chap`, `none`, `pap`
         * 
         * @return builder
         * 
         */
        public Builder lteAuth(@Nullable Output<String> lteAuth) {
            $.lteAuth = lteAuth;
            return this;
        }

        /**
         * @param lteAuth if `wanType`==`lte`. enum: `chap`, `none`, `pap`
         * 
         * @return builder
         * 
         */
        public Builder lteAuth(String lteAuth) {
            return lteAuth(Output.of(lteAuth));
        }

        public Builder lteBackup(@Nullable Output<Boolean> lteBackup) {
            $.lteBackup = lteBackup;
            return this;
        }

        public Builder lteBackup(Boolean lteBackup) {
            return lteBackup(Output.of(lteBackup));
        }

        /**
         * @param ltePassword If `wanType`==`lte`
         * 
         * @return builder
         * 
         */
        public Builder ltePassword(@Nullable Output<String> ltePassword) {
            $.ltePassword = ltePassword;
            return this;
        }

        /**
         * @param ltePassword If `wanType`==`lte`
         * 
         * @return builder
         * 
         */
        public Builder ltePassword(String ltePassword) {
            return ltePassword(Output.of(ltePassword));
        }

        /**
         * @param lteUsername If `wanType`==`lte`
         * 
         * @return builder
         * 
         */
        public Builder lteUsername(@Nullable Output<String> lteUsername) {
            $.lteUsername = lteUsername;
            return this;
        }

        /**
         * @param lteUsername If `wanType`==`lte`
         * 
         * @return builder
         * 
         */
        public Builder lteUsername(String lteUsername) {
            return lteUsername(Output.of(lteUsername));
        }

        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param name Name that we&#39;ll use to derive config
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name that we&#39;ll use to derive config
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks if `usage`==`lan`, name of the `junipermist.org.Network` resource
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks if `usage`==`lan`, name of the `junipermist.org.Network` resource
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks if `usage`==`lan`, name of the `junipermist.org.Network` resource
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param outerVlanId For Q-in-Q
         * 
         * @return builder
         * 
         */
        public Builder outerVlanId(@Nullable Output<Integer> outerVlanId) {
            $.outerVlanId = outerVlanId;
            return this;
        }

        /**
         * @param outerVlanId For Q-in-Q
         * 
         * @return builder
         * 
         */
        public Builder outerVlanId(Integer outerVlanId) {
            return outerVlanId(Output.of(outerVlanId));
        }

        public Builder poeDisabled(@Nullable Output<Boolean> poeDisabled) {
            $.poeDisabled = poeDisabled;
            return this;
        }

        public Builder poeDisabled(Boolean poeDisabled) {
            return poeDisabled(Output.of(poeDisabled));
        }

        /**
         * @param portNetwork Only for SRX and if `usage`==`lan`, the name of the Network to be used as the Untagged VLAN
         * 
         * @return builder
         * 
         */
        public Builder portNetwork(@Nullable Output<String> portNetwork) {
            $.portNetwork = portNetwork;
            return this;
        }

        /**
         * @param portNetwork Only for SRX and if `usage`==`lan`, the name of the Network to be used as the Untagged VLAN
         * 
         * @return builder
         * 
         */
        public Builder portNetwork(String portNetwork) {
            return portNetwork(Output.of(portNetwork));
        }

        /**
         * @param preserveDscp Whether to preserve dscp when sending traffic over VPN (SSR-only)
         * 
         * @return builder
         * 
         */
        public Builder preserveDscp(@Nullable Output<Boolean> preserveDscp) {
            $.preserveDscp = preserveDscp;
            return this;
        }

        /**
         * @param preserveDscp Whether to preserve dscp when sending traffic over VPN (SSR-only)
         * 
         * @return builder
         * 
         */
        public Builder preserveDscp(Boolean preserveDscp) {
            return preserveDscp(Output.of(preserveDscp));
        }

        /**
         * @param redundant If HA mode
         * 
         * @return builder
         * 
         */
        public Builder redundant(@Nullable Output<Boolean> redundant) {
            $.redundant = redundant;
            return this;
        }

        /**
         * @param redundant If HA mode
         * 
         * @return builder
         * 
         */
        public Builder redundant(Boolean redundant) {
            return redundant(Output.of(redundant));
        }

        /**
         * @param redundantGroup If HA mode, SRX Only - support redundancy-group. 1-128 for physical SRX, 1-64 for virtual SRX
         * 
         * @return builder
         * 
         */
        public Builder redundantGroup(@Nullable Output<Integer> redundantGroup) {
            $.redundantGroup = redundantGroup;
            return this;
        }

        /**
         * @param redundantGroup If HA mode, SRX Only - support redundancy-group. 1-128 for physical SRX, 1-64 for virtual SRX
         * 
         * @return builder
         * 
         */
        public Builder redundantGroup(Integer redundantGroup) {
            return redundantGroup(Output.of(redundantGroup));
        }

        /**
         * @param rethIdx For SRX only and if HA Mode
         * 
         * @return builder
         * 
         */
        public Builder rethIdx(@Nullable Output<String> rethIdx) {
            $.rethIdx = rethIdx;
            return this;
        }

        /**
         * @param rethIdx For SRX only and if HA Mode
         * 
         * @return builder
         * 
         */
        public Builder rethIdx(String rethIdx) {
            return rethIdx(Output.of(rethIdx));
        }

        /**
         * @param rethNode If HA mode
         * 
         * @return builder
         * 
         */
        public Builder rethNode(@Nullable Output<String> rethNode) {
            $.rethNode = rethNode;
            return this;
        }

        /**
         * @param rethNode If HA mode
         * 
         * @return builder
         * 
         */
        public Builder rethNode(String rethNode) {
            return rethNode(Output.of(rethNode));
        }

        /**
         * @param rethNodes SSR only - supporting vlan-based redundancy (matching the size of `networks`)
         * 
         * @return builder
         * 
         */
        public Builder rethNodes(@Nullable Output<List<String>> rethNodes) {
            $.rethNodes = rethNodes;
            return this;
        }

        /**
         * @param rethNodes SSR only - supporting vlan-based redundancy (matching the size of `networks`)
         * 
         * @return builder
         * 
         */
        public Builder rethNodes(List<String> rethNodes) {
            return rethNodes(Output.of(rethNodes));
        }

        /**
         * @param rethNodes SSR only - supporting vlan-based redundancy (matching the size of `networks`)
         * 
         * @return builder
         * 
         */
        public Builder rethNodes(String... rethNodes) {
            return rethNodes(List.of(rethNodes));
        }

        public Builder speed(@Nullable Output<String> speed) {
            $.speed = speed;
            return this;
        }

        public Builder speed(String speed) {
            return speed(Output.of(speed));
        }

        /**
         * @param ssrNoVirtualMac When SSR is running as VM, this is required on certain hosting platforms
         * 
         * @return builder
         * 
         */
        public Builder ssrNoVirtualMac(@Nullable Output<Boolean> ssrNoVirtualMac) {
            $.ssrNoVirtualMac = ssrNoVirtualMac;
            return this;
        }

        /**
         * @param ssrNoVirtualMac When SSR is running as VM, this is required on certain hosting platforms
         * 
         * @return builder
         * 
         */
        public Builder ssrNoVirtualMac(Boolean ssrNoVirtualMac) {
            return ssrNoVirtualMac(Output.of(ssrNoVirtualMac));
        }

        /**
         * @param svrPortRange For SSR only
         * 
         * @return builder
         * 
         */
        public Builder svrPortRange(@Nullable Output<String> svrPortRange) {
            $.svrPortRange = svrPortRange;
            return this;
        }

        /**
         * @param svrPortRange For SSR only
         * 
         * @return builder
         * 
         */
        public Builder svrPortRange(String svrPortRange) {
            return svrPortRange(Output.of(svrPortRange));
        }

        public Builder trafficShaping(@Nullable Output<GatewayPortConfigTrafficShapingArgs> trafficShaping) {
            $.trafficShaping = trafficShaping;
            return this;
        }

        public Builder trafficShaping(GatewayPortConfigTrafficShapingArgs trafficShaping) {
            return trafficShaping(Output.of(trafficShaping));
        }

        /**
         * @param usage port usage name. enum: `haControl`, `haData`, `lan`, `wan`
         * 
         * @return builder
         * 
         */
        public Builder usage(Output<String> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage port usage name. enum: `haControl`, `haData`, `lan`, `wan`
         * 
         * @return builder
         * 
         */
        public Builder usage(String usage) {
            return usage(Output.of(usage));
        }

        public Builder vlanId(@Nullable Output<String> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        public Builder vlanId(String vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param vpnPaths Property key is the VPN name
         * 
         * @return builder
         * 
         */
        public Builder vpnPaths(@Nullable Output<Map<String,GatewayPortConfigVpnPathsArgs>> vpnPaths) {
            $.vpnPaths = vpnPaths;
            return this;
        }

        /**
         * @param vpnPaths Property key is the VPN name
         * 
         * @return builder
         * 
         */
        public Builder vpnPaths(Map<String,GatewayPortConfigVpnPathsArgs> vpnPaths) {
            return vpnPaths(Output.of(vpnPaths));
        }

        /**
         * @param wanArpPolicer Only when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
         * 
         * @return builder
         * 
         */
        public Builder wanArpPolicer(@Nullable Output<String> wanArpPolicer) {
            $.wanArpPolicer = wanArpPolicer;
            return this;
        }

        /**
         * @param wanArpPolicer Only when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
         * 
         * @return builder
         * 
         */
        public Builder wanArpPolicer(String wanArpPolicer) {
            return wanArpPolicer(Output.of(wanArpPolicer));
        }

        /**
         * @param wanDisableSpeedtest If `wanType`==`wan`, disable speedtest
         * 
         * @return builder
         * 
         */
        public Builder wanDisableSpeedtest(@Nullable Output<Boolean> wanDisableSpeedtest) {
            $.wanDisableSpeedtest = wanDisableSpeedtest;
            return this;
        }

        /**
         * @param wanDisableSpeedtest If `wanType`==`wan`, disable speedtest
         * 
         * @return builder
         * 
         */
        public Builder wanDisableSpeedtest(Boolean wanDisableSpeedtest) {
            return wanDisableSpeedtest(Output.of(wanDisableSpeedtest));
        }

        /**
         * @param wanExtIp Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP
         * 
         * @return builder
         * 
         */
        public Builder wanExtIp(@Nullable Output<String> wanExtIp) {
            $.wanExtIp = wanExtIp;
            return this;
        }

        /**
         * @param wanExtIp Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP
         * 
         * @return builder
         * 
         */
        public Builder wanExtIp(String wanExtIp) {
            return wanExtIp(Output.of(wanExtIp));
        }

        /**
         * @param wanExtraRoutes Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;100.100.100.0/24&#34;)
         * 
         * @return builder
         * 
         */
        public Builder wanExtraRoutes(@Nullable Output<Map<String,GatewayPortConfigWanExtraRoutesArgs>> wanExtraRoutes) {
            $.wanExtraRoutes = wanExtraRoutes;
            return this;
        }

        /**
         * @param wanExtraRoutes Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;100.100.100.0/24&#34;)
         * 
         * @return builder
         * 
         */
        public Builder wanExtraRoutes(Map<String,GatewayPortConfigWanExtraRoutesArgs> wanExtraRoutes) {
            return wanExtraRoutes(Output.of(wanExtraRoutes));
        }

        /**
         * @param wanExtraRoutes6 Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
         * 
         * @return builder
         * 
         */
        public Builder wanExtraRoutes6(@Nullable Output<Map<String,GatewayPortConfigWanExtraRoutes6Args>> wanExtraRoutes6) {
            $.wanExtraRoutes6 = wanExtraRoutes6;
            return this;
        }

        /**
         * @param wanExtraRoutes6 Only if `usage`==`wan`. Property Key is the destination CIDR (e.g. &#34;2a02:1234:420a:10c9::/64&#34;)
         * 
         * @return builder
         * 
         */
        public Builder wanExtraRoutes6(Map<String,GatewayPortConfigWanExtraRoutes6Args> wanExtraRoutes6) {
            return wanExtraRoutes6(Output.of(wanExtraRoutes6));
        }

        /**
         * @param wanNetworks Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
         * 
         * @return builder
         * 
         */
        public Builder wanNetworks(@Nullable Output<List<String>> wanNetworks) {
            $.wanNetworks = wanNetworks;
            return this;
        }

        /**
         * @param wanNetworks Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
         * 
         * @return builder
         * 
         */
        public Builder wanNetworks(List<String> wanNetworks) {
            return wanNetworks(Output.of(wanNetworks));
        }

        /**
         * @param wanNetworks Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
         * 
         * @return builder
         * 
         */
        public Builder wanNetworks(String... wanNetworks) {
            return wanNetworks(List.of(wanNetworks));
        }

        /**
         * @param wanProbeOverride Only if `usage`==`wan`
         * 
         * @return builder
         * 
         */
        public Builder wanProbeOverride(@Nullable Output<GatewayPortConfigWanProbeOverrideArgs> wanProbeOverride) {
            $.wanProbeOverride = wanProbeOverride;
            return this;
        }

        /**
         * @param wanProbeOverride Only if `usage`==`wan`
         * 
         * @return builder
         * 
         */
        public Builder wanProbeOverride(GatewayPortConfigWanProbeOverrideArgs wanProbeOverride) {
            return wanProbeOverride(Output.of(wanProbeOverride));
        }

        /**
         * @param wanSourceNat Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip
         * 
         * @return builder
         * 
         */
        public Builder wanSourceNat(@Nullable Output<GatewayPortConfigWanSourceNatArgs> wanSourceNat) {
            $.wanSourceNat = wanSourceNat;
            return this;
        }

        /**
         * @param wanSourceNat Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip
         * 
         * @return builder
         * 
         */
        public Builder wanSourceNat(GatewayPortConfigWanSourceNatArgs wanSourceNat) {
            return wanSourceNat(Output.of(wanSourceNat));
        }

        /**
         * @param wanType Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
         * 
         * @return builder
         * 
         */
        public Builder wanType(@Nullable Output<String> wanType) {
            $.wanType = wanType;
            return this;
        }

        /**
         * @param wanType Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
         * 
         * @return builder
         * 
         */
        public Builder wanType(String wanType) {
            return wanType(Output.of(wanType));
        }

        public GatewayPortConfigArgs build() {
            if ($.usage == null) {
                throw new MissingRequiredPropertyException("GatewayPortConfigArgs", "usage");
            }
            return $;
        }
    }

}
