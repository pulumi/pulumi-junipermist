// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SsoRolePrivilegeArgs extends com.pulumi.resources.ResourceArgs {

    public static final SsoRolePrivilegeArgs Empty = new SsoRolePrivilegeArgs();

    /**
     * access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * enum: `org`, `site`, `sitegroup`
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return enum: `org`, `site`, `sitegroup`
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Required if `scope`==`site`
     * 
     */
    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    /**
     * @return Required if `scope`==`site`
     * 
     */
    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * Required if `scope`==`sitegroup`
     * 
     */
    @Import(name="sitegroupId")
    private @Nullable Output<String> sitegroupId;

    /**
     * @return Required if `scope`==`sitegroup`
     * 
     */
    public Optional<Output<String>> sitegroupId() {
        return Optional.ofNullable(this.sitegroupId);
    }

    private SsoRolePrivilegeArgs() {}

    private SsoRolePrivilegeArgs(SsoRolePrivilegeArgs $) {
        this.role = $.role;
        this.scope = $.scope;
        this.siteId = $.siteId;
        this.sitegroupId = $.sitegroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SsoRolePrivilegeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SsoRolePrivilegeArgs $;

        public Builder() {
            $ = new SsoRolePrivilegeArgs();
        }

        public Builder(SsoRolePrivilegeArgs defaults) {
            $ = new SsoRolePrivilegeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param role access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param scope enum: `org`, `site`, `sitegroup`
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope enum: `org`, `site`, `sitegroup`
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param siteId Required if `scope`==`site`
         * 
         * @return builder
         * 
         */
        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Required if `scope`==`site`
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param sitegroupId Required if `scope`==`sitegroup`
         * 
         * @return builder
         * 
         */
        public Builder sitegroupId(@Nullable Output<String> sitegroupId) {
            $.sitegroupId = sitegroupId;
            return this;
        }

        /**
         * @param sitegroupId Required if `scope`==`sitegroup`
         * 
         * @return builder
         * 
         */
        public Builder sitegroupId(String sitegroupId) {
            return sitegroupId(Output.of(sitegroupId));
        }

        public SsoRolePrivilegeArgs build() {
            if ($.role == null) {
                throw new MissingRequiredPropertyException("SsoRolePrivilegeArgs", "role");
            }
            if ($.scope == null) {
                throw new MissingRequiredPropertyException("SsoRolePrivilegeArgs", "scope");
            }
            return $;
        }
    }

}
