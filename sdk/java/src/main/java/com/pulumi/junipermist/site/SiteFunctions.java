// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.junipermist.Utilities;
import com.pulumi.junipermist.site.inputs.GetPsksArgs;
import com.pulumi.junipermist.site.inputs.GetPsksPlainArgs;
import com.pulumi.junipermist.site.inputs.GetWebhooksArgs;
import com.pulumi.junipermist.site.inputs.GetWebhooksPlainArgs;
import com.pulumi.junipermist.site.inputs.GetWlansArgs;
import com.pulumi.junipermist.site.inputs.GetWlansPlainArgs;
import com.pulumi.junipermist.site.outputs.GetPsksResult;
import com.pulumi.junipermist.site.outputs.GetWebhooksResult;
import com.pulumi.junipermist.site.outputs.GetWlansResult;
import java.util.concurrent.CompletableFuture;

public final class SiteFunctions {
    /**
     * This data source provides the list of Site Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = SiteFunctions.getPsks(GetPsksArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPsksResult> getPsks(GetPsksArgs args) {
        return getPsks(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Site Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = SiteFunctions.getPsks(GetPsksArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPsksResult> getPsksPlain(GetPsksPlainArgs args) {
        return getPsksPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Site Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = SiteFunctions.getPsks(GetPsksArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPsksResult> getPsks(GetPsksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:site/getPsks:getPsks", TypeShape.of(GetPsksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = SiteFunctions.getPsks(GetPsksArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPsksResult> getPsks(GetPsksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:site/getPsks:getPsks", TypeShape.of(GetPsksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Psks.
     * 
     * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
     * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
     * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
     * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetPsksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var psksVip = SiteFunctions.getPsks(GetPsksArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .name("psk_one")
     *             .role("vip")
     *             .ssid("psk_ssid")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPsksResult> getPsksPlain(GetPsksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:site/getPsks:getPsks", TypeShape.of(GetPsksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Webhooks.
     * 
     * A Site Webhook is a configuration that allows real-time events and data from a specific site to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, audits, client sessions and location updates at the site level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWebhooksResult> getWebhooks(GetWebhooksArgs args) {
        return getWebhooks(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Site Webhooks.
     * 
     * A Site Webhook is a configuration that allows real-time events and data from a specific site to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, audits, client sessions and location updates at the site level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWebhooksResult> getWebhooksPlain(GetWebhooksPlainArgs args) {
        return getWebhooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Site Webhooks.
     * 
     * A Site Webhook is a configuration that allows real-time events and data from a specific site to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, audits, client sessions and location updates at the site level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWebhooksResult> getWebhooks(GetWebhooksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:site/getWebhooks:getWebhooks", TypeShape.of(GetWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Webhooks.
     * 
     * A Site Webhook is a configuration that allows real-time events and data from a specific site to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, audits, client sessions and location updates at the site level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWebhooksResult> getWebhooks(GetWebhooksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:site/getWebhooks:getWebhooks", TypeShape.of(GetWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Webhooks.
     * 
     * A Site Webhook is a configuration that allows real-time events and data from a specific site to be pushed to a provided url.\
     * It enables the collection of information about various topics such as device events, alarms, audits, client sessions and location updates at the site level.\
     * The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWebhooksResult> getWebhooksPlain(GetWebhooksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:site/getWebhooks:getWebhooks", TypeShape.of(GetWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var siteWlans = SiteFunctions.getWlans(GetWlansArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWlansResult> getWlans(GetWlansArgs args) {
        return getWlans(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Site Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var siteWlans = SiteFunctions.getWlans(GetWlansArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWlansResult> getWlansPlain(GetWlansPlainArgs args) {
        return getWlansPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source provides the list of Site Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var siteWlans = SiteFunctions.getWlans(GetWlansArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWlansResult> getWlans(GetWlansArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("junipermist:site/getWlans:getWlans", TypeShape.of(GetWlansResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var siteWlans = SiteFunctions.getWlans(GetWlansArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetWlansResult> getWlans(GetWlansArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("junipermist:site/getWlans:getWlans", TypeShape.of(GetWlansResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source provides the list of Site Wlans.
     * 
     * The WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.junipermist.site.SiteFunctions;
     * import com.pulumi.junipermist.site.inputs.GetWlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var siteWlans = SiteFunctions.getWlans(GetWlansArgs.builder()
     *             .siteId("15fca2ac-b1a6-47cc-9953-cc6906281550")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetWlansResult> getWlansPlain(GetWlansPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("junipermist:site/getWlans:getWlans", TypeShape.of(GetWlansResult.class), args, Utilities.withVersion(options));
    }
}
