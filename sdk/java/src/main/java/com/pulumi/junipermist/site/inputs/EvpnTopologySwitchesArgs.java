// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EvpnTopologySwitchesArgs extends com.pulumi.resources.ResourceArgs {

    public static final EvpnTopologySwitchesArgs Empty = new EvpnTopologySwitchesArgs();

    @Import(name="deviceprofileId")
    private @Nullable Output<String> deviceprofileId;

    public Optional<Output<String>> deviceprofileId() {
        return Optional.ofNullable(this.deviceprofileId);
    }

    @Import(name="evpnId")
    private @Nullable Output<Integer> evpnId;

    public Optional<Output<Integer>> evpnId() {
        return Optional.ofNullable(this.evpnId);
    }

    @Import(name="mac")
    private @Nullable Output<String> mac;

    public Optional<Output<String>> mac() {
        return Optional.ofNullable(this.mac);
    }

    @Import(name="model")
    private @Nullable Output<String> model;

    public Optional<Output<String>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * Optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
     *   * for CLOS, to group dist / access switches into pods
     *   * for ERB/CRB, to group dist / esilag-access into pods
     * 
     */
    @Import(name="pod")
    private @Nullable Output<Integer> pod;

    /**
     * @return Optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
     *   * for CLOS, to group dist / access switches into pods
     *   * for ERB/CRB, to group dist / esilag-access into pods
     * 
     */
    public Optional<Output<Integer>> pod() {
        return Optional.ofNullable(this.pod);
    }

    /**
     * By default, core switches are assumed to be connecting all pods.
     * if you want to limit the pods, you can specify pods.
     * 
     */
    @Import(name="pods")
    private @Nullable Output<List<Integer>> pods;

    /**
     * @return By default, core switches are assumed to be connecting all pods.
     * if you want to limit the pods, you can specify pods.
     * 
     */
    public Optional<Output<List<Integer>>> pods() {
        return Optional.ofNullable(this.pods);
    }

    /**
     * use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    @Import(name="routerId")
    private @Nullable Output<String> routerId;

    public Optional<Output<String>> routerId() {
        return Optional.ofNullable(this.routerId);
    }

    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    private EvpnTopologySwitchesArgs() {}

    private EvpnTopologySwitchesArgs(EvpnTopologySwitchesArgs $) {
        this.deviceprofileId = $.deviceprofileId;
        this.evpnId = $.evpnId;
        this.mac = $.mac;
        this.model = $.model;
        this.pod = $.pod;
        this.pods = $.pods;
        this.role = $.role;
        this.routerId = $.routerId;
        this.siteId = $.siteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EvpnTopologySwitchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EvpnTopologySwitchesArgs $;

        public Builder() {
            $ = new EvpnTopologySwitchesArgs();
        }

        public Builder(EvpnTopologySwitchesArgs defaults) {
            $ = new EvpnTopologySwitchesArgs(Objects.requireNonNull(defaults));
        }

        public Builder deviceprofileId(@Nullable Output<String> deviceprofileId) {
            $.deviceprofileId = deviceprofileId;
            return this;
        }

        public Builder deviceprofileId(String deviceprofileId) {
            return deviceprofileId(Output.of(deviceprofileId));
        }

        public Builder evpnId(@Nullable Output<Integer> evpnId) {
            $.evpnId = evpnId;
            return this;
        }

        public Builder evpnId(Integer evpnId) {
            return evpnId(Output.of(evpnId));
        }

        public Builder mac(@Nullable Output<String> mac) {
            $.mac = mac;
            return this;
        }

        public Builder mac(String mac) {
            return mac(Output.of(mac));
        }

        public Builder model(@Nullable Output<String> model) {
            $.model = model;
            return this;
        }

        public Builder model(String model) {
            return model(Output.of(model));
        }

        /**
         * @param pod Optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
         *   * for CLOS, to group dist / access switches into pods
         *   * for ERB/CRB, to group dist / esilag-access into pods
         * 
         * @return builder
         * 
         */
        public Builder pod(@Nullable Output<Integer> pod) {
            $.pod = pod;
            return this;
        }

        /**
         * @param pod Optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
         *   * for CLOS, to group dist / access switches into pods
         *   * for ERB/CRB, to group dist / esilag-access into pods
         * 
         * @return builder
         * 
         */
        public Builder pod(Integer pod) {
            return pod(Output.of(pod));
        }

        /**
         * @param pods By default, core switches are assumed to be connecting all pods.
         * if you want to limit the pods, you can specify pods.
         * 
         * @return builder
         * 
         */
        public Builder pods(@Nullable Output<List<Integer>> pods) {
            $.pods = pods;
            return this;
        }

        /**
         * @param pods By default, core switches are assumed to be connecting all pods.
         * if you want to limit the pods, you can specify pods.
         * 
         * @return builder
         * 
         */
        public Builder pods(List<Integer> pods) {
            return pods(Output.of(pods));
        }

        /**
         * @param pods By default, core switches are assumed to be connecting all pods.
         * if you want to limit the pods, you can specify pods.
         * 
         * @return builder
         * 
         */
        public Builder pods(Integer... pods) {
            return pods(List.of(pods));
        }

        /**
         * @param role use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder routerId(@Nullable Output<String> routerId) {
            $.routerId = routerId;
            return this;
        }

        public Builder routerId(String routerId) {
            return routerId(Output.of(routerId));
        }

        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public EvpnTopologySwitchesArgs build() {
            if ($.role == null) {
                throw new MissingRequiredPropertyException("EvpnTopologySwitchesArgs", "role");
            }
            return $;
        }
    }

}
