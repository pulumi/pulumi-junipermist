// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworktemplateNetworksArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworktemplateNetworksArgs Empty = new NetworktemplateNetworksArgs();

    /**
     * whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
     * NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
     * 
     */
    @Import(name="isolation")
    private @Nullable Output<Boolean> isolation;

    /**
     * @return whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
     * NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
     * 
     */
    public Optional<Output<Boolean>> isolation() {
        return Optional.ofNullable(this.isolation);
    }

    @Import(name="isolationVlanId")
    private @Nullable Output<String> isolationVlanId;

    public Optional<Output<String>> isolationVlanId() {
        return Optional.ofNullable(this.isolationVlanId);
    }

    /**
     * optional for pure switching, required when L3 / routing features are used
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return optional for pure switching, required when L3 / routing features are used
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    @Import(name="vlanId", required=true)
    private Output<String> vlanId;

    public Output<String> vlanId() {
        return this.vlanId;
    }

    private NetworktemplateNetworksArgs() {}

    private NetworktemplateNetworksArgs(NetworktemplateNetworksArgs $) {
        this.isolation = $.isolation;
        this.isolationVlanId = $.isolationVlanId;
        this.subnet = $.subnet;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworktemplateNetworksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworktemplateNetworksArgs $;

        public Builder() {
            $ = new NetworktemplateNetworksArgs();
        }

        public Builder(NetworktemplateNetworksArgs defaults) {
            $ = new NetworktemplateNetworksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isolation whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
         * NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
         * 
         * @return builder
         * 
         */
        public Builder isolation(@Nullable Output<Boolean> isolation) {
            $.isolation = isolation;
            return this;
        }

        /**
         * @param isolation whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
         * NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
         * 
         * @return builder
         * 
         */
        public Builder isolation(Boolean isolation) {
            return isolation(Output.of(isolation));
        }

        public Builder isolationVlanId(@Nullable Output<String> isolationVlanId) {
            $.isolationVlanId = isolationVlanId;
            return this;
        }

        public Builder isolationVlanId(String isolationVlanId) {
            return isolationVlanId(Output.of(isolationVlanId));
        }

        /**
         * @param subnet optional for pure switching, required when L3 / routing features are used
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet optional for pure switching, required when L3 / routing features are used
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public Builder vlanId(Output<String> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        public Builder vlanId(String vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public NetworktemplateNetworksArgs build() {
            if ($.vlanId == null) {
                throw new MissingRequiredPropertyException("NetworktemplateNetworksArgs", "vlanId");
            }
            return $;
        }
    }

}
