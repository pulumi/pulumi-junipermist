// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingZoneOccupancyAlertArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingZoneOccupancyAlertArgs Empty = new SettingZoneOccupancyAlertArgs();

    /**
     * list of email addresses to send email notifications when the alert threshold is reached
     * 
     */
    @Import(name="emailNotifiers")
    private @Nullable Output<List<String>> emailNotifiers;

    /**
     * @return list of email addresses to send email notifications when the alert threshold is reached
     * 
     */
    public Optional<Output<List<String>>> emailNotifiers() {
        return Optional.ofNullable(this.emailNotifiers);
    }

    /**
     * indicate whether zone occupancy alert is enabled for the site
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return indicate whether zone occupancy alert is enabled for the site
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy &gt; occupancy_limit) for a minimum duration specified in the threshold, in minutes
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Integer> threshold;

    /**
     * @return sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy &gt; occupancy_limit) for a minimum duration specified in the threshold, in minutes
     * 
     */
    public Optional<Output<Integer>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private SettingZoneOccupancyAlertArgs() {}

    private SettingZoneOccupancyAlertArgs(SettingZoneOccupancyAlertArgs $) {
        this.emailNotifiers = $.emailNotifiers;
        this.enabled = $.enabled;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingZoneOccupancyAlertArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingZoneOccupancyAlertArgs $;

        public Builder() {
            $ = new SettingZoneOccupancyAlertArgs();
        }

        public Builder(SettingZoneOccupancyAlertArgs defaults) {
            $ = new SettingZoneOccupancyAlertArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emailNotifiers list of email addresses to send email notifications when the alert threshold is reached
         * 
         * @return builder
         * 
         */
        public Builder emailNotifiers(@Nullable Output<List<String>> emailNotifiers) {
            $.emailNotifiers = emailNotifiers;
            return this;
        }

        /**
         * @param emailNotifiers list of email addresses to send email notifications when the alert threshold is reached
         * 
         * @return builder
         * 
         */
        public Builder emailNotifiers(List<String> emailNotifiers) {
            return emailNotifiers(Output.of(emailNotifiers));
        }

        /**
         * @param emailNotifiers list of email addresses to send email notifications when the alert threshold is reached
         * 
         * @return builder
         * 
         */
        public Builder emailNotifiers(String... emailNotifiers) {
            return emailNotifiers(List.of(emailNotifiers));
        }

        /**
         * @param enabled indicate whether zone occupancy alert is enabled for the site
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled indicate whether zone occupancy alert is enabled for the site
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param threshold sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy &gt; occupancy_limit) for a minimum duration specified in the threshold, in minutes
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy &gt; occupancy_limit) for a minimum duration specified in the threshold, in minutes
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        public SettingZoneOccupancyAlertArgs build() {
            return $;
        }
    }

}
