// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.device.inputs.ApPortConfigDynamicVlanArgs;
import com.pulumi.junipermist.device.inputs.ApPortConfigMistNacArgs;
import com.pulumi.junipermist.device.inputs.ApPortConfigRadiusConfigArgs;
import com.pulumi.junipermist.device.inputs.ApPortConfigRadsecArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApPortConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApPortConfigArgs Empty = new ApPortConfigArgs();

    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Optional dynamic vlan
     * 
     */
    @Import(name="dynamicVlan")
    private @Nullable Output<ApPortConfigDynamicVlanArgs> dynamicVlan;

    /**
     * @return Optional dynamic vlan
     * 
     */
    public Optional<Output<ApPortConfigDynamicVlanArgs>> dynamicVlan() {
        return Optional.ofNullable(this.dynamicVlan);
    }

    @Import(name="enableMacAuth")
    private @Nullable Output<Boolean> enableMacAuth;

    public Optional<Output<Boolean>> enableMacAuth() {
        return Optional.ofNullable(this.enableMacAuth);
    }

    /**
     * enum:
     *   * `all`: local breakout, All VLANs
     *   * `limited`: local breakout, only the VLANs configured in `port_vlan_id` and `vlan_ids`
     *   * `mxtunnel`: central breakout to an Org Mist Edge (requires `mxtunnel_id`)
     *   * `site_mxedge`: central breakout to a Site Mist Edge (requires `mxtunnel_name`)
     *   * `wxtunnel`&#39;: central breakout to an Org WxTunnel (requires `wxtunnel_id`)
     * 
     */
    @Import(name="forwarding")
    private @Nullable Output<String> forwarding;

    /**
     * @return enum:
     *   * `all`: local breakout, All VLANs
     *   * `limited`: local breakout, only the VLANs configured in `port_vlan_id` and `vlan_ids`
     *   * `mxtunnel`: central breakout to an Org Mist Edge (requires `mxtunnel_id`)
     *   * `site_mxedge`: central breakout to a Site Mist Edge (requires `mxtunnel_name`)
     *   * `wxtunnel`&#39;: central breakout to an Org WxTunnel (requires `wxtunnel_id`)
     * 
     */
    public Optional<Output<String>> forwarding() {
        return Optional.ofNullable(this.forwarding);
    }

    /**
     * When `true`, we&#39;ll do dot1x then mac_auth. enable this to prefer mac_auth
     * 
     */
    @Import(name="macAuthPreferred")
    private @Nullable Output<Boolean> macAuthPreferred;

    /**
     * @return When `true`, we&#39;ll do dot1x then mac_auth. enable this to prefer mac_auth
     * 
     */
    public Optional<Output<Boolean>> macAuthPreferred() {
        return Optional.ofNullable(this.macAuthPreferred);
    }

    /**
     * if `enable_mac_auth`==`true`, allows user to select an authentication protocol. enum: `eap-md5`, `eap-peap`, `pap`
     * 
     */
    @Import(name="macAuthProtocol")
    private @Nullable Output<String> macAuthProtocol;

    /**
     * @return if `enable_mac_auth`==`true`, allows user to select an authentication protocol. enum: `eap-md5`, `eap-peap`, `pap`
     * 
     */
    public Optional<Output<String>> macAuthProtocol() {
        return Optional.ofNullable(this.macAuthProtocol);
    }

    @Import(name="mistNac")
    private @Nullable Output<ApPortConfigMistNacArgs> mistNac;

    public Optional<Output<ApPortConfigMistNacArgs>> mistNac() {
        return Optional.ofNullable(this.mistNac);
    }

    /**
     * If `forwarding`==`mxtunnel`, vlan_ids comes from mxtunnel
     * 
     */
    @Import(name="mxTunnelId")
    private @Nullable Output<String> mxTunnelId;

    /**
     * @return If `forwarding`==`mxtunnel`, vlan_ids comes from mxtunnel
     * 
     */
    public Optional<Output<String>> mxTunnelId() {
        return Optional.ofNullable(this.mxTunnelId);
    }

    /**
     * If `forwarding`==`site_mxedge`, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
     * 
     */
    @Import(name="mxtunnelName")
    private @Nullable Output<String> mxtunnelName;

    /**
     * @return If `forwarding`==`site_mxedge`, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
     * 
     */
    public Optional<Output<String>> mxtunnelName() {
        return Optional.ofNullable(this.mxtunnelName);
    }

    /**
     * When doing port auth. enum: `dot1x`, `none`
     * 
     */
    @Import(name="portAuth")
    private @Nullable Output<String> portAuth;

    /**
     * @return When doing port auth. enum: `dot1x`, `none`
     * 
     */
    public Optional<Output<String>> portAuth() {
        return Optional.ofNullable(this.portAuth);
    }

    /**
     * If `forwarding`==`limited`
     * 
     */
    @Import(name="portVlanId")
    private @Nullable Output<Integer> portVlanId;

    /**
     * @return If `forwarding`==`limited`
     * 
     */
    public Optional<Output<Integer>> portVlanId() {
        return Optional.ofNullable(this.portVlanId);
    }

    /**
     * Junos Radius config
     * 
     */
    @Import(name="radiusConfig")
    private @Nullable Output<ApPortConfigRadiusConfigArgs> radiusConfig;

    /**
     * @return Junos Radius config
     * 
     */
    public Optional<Output<ApPortConfigRadiusConfigArgs>> radiusConfig() {
        return Optional.ofNullable(this.radiusConfig);
    }

    /**
     * RadSec settings
     * 
     */
    @Import(name="radsec")
    private @Nullable Output<ApPortConfigRadsecArgs> radsec;

    /**
     * @return RadSec settings
     * 
     */
    public Optional<Output<ApPortConfigRadsecArgs>> radsec() {
        return Optional.ofNullable(this.radsec);
    }

    /**
     * Optional to specify the vlan id for a tunnel if forwarding is for `wxtunnel`, `mxtunnel` or `site_mxedge`.
     *   * if vlan_id is not specified then it will use first one in vlan_ids[] of the mxtunnel.
     *   * if forwarding == site_mxedge, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return Optional to specify the vlan id for a tunnel if forwarding is for `wxtunnel`, `mxtunnel` or `site_mxedge`.
     *   * if vlan_id is not specified then it will use first one in vlan_ids[] of the mxtunnel.
     *   * if forwarding == site_mxedge, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * If `forwarding`==`limited`
     * 
     */
    @Import(name="vlanIds")
    private @Nullable Output<List<Integer>> vlanIds;

    /**
     * @return If `forwarding`==`limited`
     * 
     */
    public Optional<Output<List<Integer>>> vlanIds() {
        return Optional.ofNullable(this.vlanIds);
    }

    /**
     * If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
     * 
     */
    @Import(name="wxtunnelId")
    private @Nullable Output<String> wxtunnelId;

    /**
     * @return If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
     * 
     */
    public Optional<Output<String>> wxtunnelId() {
        return Optional.ofNullable(this.wxtunnelId);
    }

    /**
     * If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
     * 
     */
    @Import(name="wxtunnelRemoteId")
    private @Nullable Output<String> wxtunnelRemoteId;

    /**
     * @return If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
     * 
     */
    public Optional<Output<String>> wxtunnelRemoteId() {
        return Optional.ofNullable(this.wxtunnelRemoteId);
    }

    private ApPortConfigArgs() {}

    private ApPortConfigArgs(ApPortConfigArgs $) {
        this.disabled = $.disabled;
        this.dynamicVlan = $.dynamicVlan;
        this.enableMacAuth = $.enableMacAuth;
        this.forwarding = $.forwarding;
        this.macAuthPreferred = $.macAuthPreferred;
        this.macAuthProtocol = $.macAuthProtocol;
        this.mistNac = $.mistNac;
        this.mxTunnelId = $.mxTunnelId;
        this.mxtunnelName = $.mxtunnelName;
        this.portAuth = $.portAuth;
        this.portVlanId = $.portVlanId;
        this.radiusConfig = $.radiusConfig;
        this.radsec = $.radsec;
        this.vlanId = $.vlanId;
        this.vlanIds = $.vlanIds;
        this.wxtunnelId = $.wxtunnelId;
        this.wxtunnelRemoteId = $.wxtunnelRemoteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApPortConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApPortConfigArgs $;

        public Builder() {
            $ = new ApPortConfigArgs();
        }

        public Builder(ApPortConfigArgs defaults) {
            $ = new ApPortConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param dynamicVlan Optional dynamic vlan
         * 
         * @return builder
         * 
         */
        public Builder dynamicVlan(@Nullable Output<ApPortConfigDynamicVlanArgs> dynamicVlan) {
            $.dynamicVlan = dynamicVlan;
            return this;
        }

        /**
         * @param dynamicVlan Optional dynamic vlan
         * 
         * @return builder
         * 
         */
        public Builder dynamicVlan(ApPortConfigDynamicVlanArgs dynamicVlan) {
            return dynamicVlan(Output.of(dynamicVlan));
        }

        public Builder enableMacAuth(@Nullable Output<Boolean> enableMacAuth) {
            $.enableMacAuth = enableMacAuth;
            return this;
        }

        public Builder enableMacAuth(Boolean enableMacAuth) {
            return enableMacAuth(Output.of(enableMacAuth));
        }

        /**
         * @param forwarding enum:
         *   * `all`: local breakout, All VLANs
         *   * `limited`: local breakout, only the VLANs configured in `port_vlan_id` and `vlan_ids`
         *   * `mxtunnel`: central breakout to an Org Mist Edge (requires `mxtunnel_id`)
         *   * `site_mxedge`: central breakout to a Site Mist Edge (requires `mxtunnel_name`)
         *   * `wxtunnel`&#39;: central breakout to an Org WxTunnel (requires `wxtunnel_id`)
         * 
         * @return builder
         * 
         */
        public Builder forwarding(@Nullable Output<String> forwarding) {
            $.forwarding = forwarding;
            return this;
        }

        /**
         * @param forwarding enum:
         *   * `all`: local breakout, All VLANs
         *   * `limited`: local breakout, only the VLANs configured in `port_vlan_id` and `vlan_ids`
         *   * `mxtunnel`: central breakout to an Org Mist Edge (requires `mxtunnel_id`)
         *   * `site_mxedge`: central breakout to a Site Mist Edge (requires `mxtunnel_name`)
         *   * `wxtunnel`&#39;: central breakout to an Org WxTunnel (requires `wxtunnel_id`)
         * 
         * @return builder
         * 
         */
        public Builder forwarding(String forwarding) {
            return forwarding(Output.of(forwarding));
        }

        /**
         * @param macAuthPreferred When `true`, we&#39;ll do dot1x then mac_auth. enable this to prefer mac_auth
         * 
         * @return builder
         * 
         */
        public Builder macAuthPreferred(@Nullable Output<Boolean> macAuthPreferred) {
            $.macAuthPreferred = macAuthPreferred;
            return this;
        }

        /**
         * @param macAuthPreferred When `true`, we&#39;ll do dot1x then mac_auth. enable this to prefer mac_auth
         * 
         * @return builder
         * 
         */
        public Builder macAuthPreferred(Boolean macAuthPreferred) {
            return macAuthPreferred(Output.of(macAuthPreferred));
        }

        /**
         * @param macAuthProtocol if `enable_mac_auth`==`true`, allows user to select an authentication protocol. enum: `eap-md5`, `eap-peap`, `pap`
         * 
         * @return builder
         * 
         */
        public Builder macAuthProtocol(@Nullable Output<String> macAuthProtocol) {
            $.macAuthProtocol = macAuthProtocol;
            return this;
        }

        /**
         * @param macAuthProtocol if `enable_mac_auth`==`true`, allows user to select an authentication protocol. enum: `eap-md5`, `eap-peap`, `pap`
         * 
         * @return builder
         * 
         */
        public Builder macAuthProtocol(String macAuthProtocol) {
            return macAuthProtocol(Output.of(macAuthProtocol));
        }

        public Builder mistNac(@Nullable Output<ApPortConfigMistNacArgs> mistNac) {
            $.mistNac = mistNac;
            return this;
        }

        public Builder mistNac(ApPortConfigMistNacArgs mistNac) {
            return mistNac(Output.of(mistNac));
        }

        /**
         * @param mxTunnelId If `forwarding`==`mxtunnel`, vlan_ids comes from mxtunnel
         * 
         * @return builder
         * 
         */
        public Builder mxTunnelId(@Nullable Output<String> mxTunnelId) {
            $.mxTunnelId = mxTunnelId;
            return this;
        }

        /**
         * @param mxTunnelId If `forwarding`==`mxtunnel`, vlan_ids comes from mxtunnel
         * 
         * @return builder
         * 
         */
        public Builder mxTunnelId(String mxTunnelId) {
            return mxTunnelId(Output.of(mxTunnelId));
        }

        /**
         * @param mxtunnelName If `forwarding`==`site_mxedge`, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
         * 
         * @return builder
         * 
         */
        public Builder mxtunnelName(@Nullable Output<String> mxtunnelName) {
            $.mxtunnelName = mxtunnelName;
            return this;
        }

        /**
         * @param mxtunnelName If `forwarding`==`site_mxedge`, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
         * 
         * @return builder
         * 
         */
        public Builder mxtunnelName(String mxtunnelName) {
            return mxtunnelName(Output.of(mxtunnelName));
        }

        /**
         * @param portAuth When doing port auth. enum: `dot1x`, `none`
         * 
         * @return builder
         * 
         */
        public Builder portAuth(@Nullable Output<String> portAuth) {
            $.portAuth = portAuth;
            return this;
        }

        /**
         * @param portAuth When doing port auth. enum: `dot1x`, `none`
         * 
         * @return builder
         * 
         */
        public Builder portAuth(String portAuth) {
            return portAuth(Output.of(portAuth));
        }

        /**
         * @param portVlanId If `forwarding`==`limited`
         * 
         * @return builder
         * 
         */
        public Builder portVlanId(@Nullable Output<Integer> portVlanId) {
            $.portVlanId = portVlanId;
            return this;
        }

        /**
         * @param portVlanId If `forwarding`==`limited`
         * 
         * @return builder
         * 
         */
        public Builder portVlanId(Integer portVlanId) {
            return portVlanId(Output.of(portVlanId));
        }

        /**
         * @param radiusConfig Junos Radius config
         * 
         * @return builder
         * 
         */
        public Builder radiusConfig(@Nullable Output<ApPortConfigRadiusConfigArgs> radiusConfig) {
            $.radiusConfig = radiusConfig;
            return this;
        }

        /**
         * @param radiusConfig Junos Radius config
         * 
         * @return builder
         * 
         */
        public Builder radiusConfig(ApPortConfigRadiusConfigArgs radiusConfig) {
            return radiusConfig(Output.of(radiusConfig));
        }

        /**
         * @param radsec RadSec settings
         * 
         * @return builder
         * 
         */
        public Builder radsec(@Nullable Output<ApPortConfigRadsecArgs> radsec) {
            $.radsec = radsec;
            return this;
        }

        /**
         * @param radsec RadSec settings
         * 
         * @return builder
         * 
         */
        public Builder radsec(ApPortConfigRadsecArgs radsec) {
            return radsec(Output.of(radsec));
        }

        /**
         * @param vlanId Optional to specify the vlan id for a tunnel if forwarding is for `wxtunnel`, `mxtunnel` or `site_mxedge`.
         *   * if vlan_id is not specified then it will use first one in vlan_ids[] of the mxtunnel.
         *   * if forwarding == site_mxedge, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId Optional to specify the vlan id for a tunnel if forwarding is for `wxtunnel`, `mxtunnel` or `site_mxedge`.
         *   * if vlan_id is not specified then it will use first one in vlan_ids[] of the mxtunnel.
         *   * if forwarding == site_mxedge, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param vlanIds If `forwarding`==`limited`
         * 
         * @return builder
         * 
         */
        public Builder vlanIds(@Nullable Output<List<Integer>> vlanIds) {
            $.vlanIds = vlanIds;
            return this;
        }

        /**
         * @param vlanIds If `forwarding`==`limited`
         * 
         * @return builder
         * 
         */
        public Builder vlanIds(List<Integer> vlanIds) {
            return vlanIds(Output.of(vlanIds));
        }

        /**
         * @param vlanIds If `forwarding`==`limited`
         * 
         * @return builder
         * 
         */
        public Builder vlanIds(Integer... vlanIds) {
            return vlanIds(List.of(vlanIds));
        }

        /**
         * @param wxtunnelId If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
         * 
         * @return builder
         * 
         */
        public Builder wxtunnelId(@Nullable Output<String> wxtunnelId) {
            $.wxtunnelId = wxtunnelId;
            return this;
        }

        /**
         * @param wxtunnelId If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
         * 
         * @return builder
         * 
         */
        public Builder wxtunnelId(String wxtunnelId) {
            return wxtunnelId(Output.of(wxtunnelId));
        }

        /**
         * @param wxtunnelRemoteId If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
         * 
         * @return builder
         * 
         */
        public Builder wxtunnelRemoteId(@Nullable Output<String> wxtunnelRemoteId) {
            $.wxtunnelRemoteId = wxtunnelRemoteId;
            return this;
        }

        /**
         * @param wxtunnelRemoteId If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
         * 
         * @return builder
         * 
         */
        public Builder wxtunnelRemoteId(String wxtunnelRemoteId) {
            return wxtunnelRemoteId(Output.of(wxtunnelRemoteId));
        }

        public ApPortConfigArgs build() {
            return $;
        }
    }

}
