// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.inputs.DeviceprofileApAeroscoutArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApBleConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApEslConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApIpConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApLacpConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApLedArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApMeshArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApPortConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApPwrConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApRadioConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApUplinkPortConfigArgs;
import com.pulumi.junipermist.org.inputs.DeviceprofileApUsbConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceprofileApArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceprofileApArgs Empty = new DeviceprofileApArgs();

    /**
     * Aeroscout AP settings
     * 
     */
    @Import(name="aeroscout")
    private @Nullable Output<DeviceprofileApAeroscoutArgs> aeroscout;

    /**
     * @return Aeroscout AP settings
     * 
     */
    public Optional<Output<DeviceprofileApAeroscoutArgs>> aeroscout() {
        return Optional.ofNullable(this.aeroscout);
    }

    /**
     * BLE AP settings
     * 
     */
    @Import(name="bleConfig")
    private @Nullable Output<DeviceprofileApBleConfigArgs> bleConfig;

    /**
     * @return BLE AP settings
     * 
     */
    public Optional<Output<DeviceprofileApBleConfigArgs>> bleConfig() {
        return Optional.ofNullable(this.bleConfig);
    }

    /**
     * Whether to disable eth1 port
     * 
     */
    @Import(name="disableEth1")
    private @Nullable Output<Boolean> disableEth1;

    /**
     * @return Whether to disable eth1 port
     * 
     */
    public Optional<Output<Boolean>> disableEth1() {
        return Optional.ofNullable(this.disableEth1);
    }

    /**
     * Whether to disable eth2 port
     * 
     */
    @Import(name="disableEth2")
    private @Nullable Output<Boolean> disableEth2;

    /**
     * @return Whether to disable eth2 port
     * 
     */
    public Optional<Output<Boolean>> disableEth2() {
        return Optional.ofNullable(this.disableEth2);
    }

    /**
     * Whether to disable eth3 port
     * 
     */
    @Import(name="disableEth3")
    private @Nullable Output<Boolean> disableEth3;

    /**
     * @return Whether to disable eth3 port
     * 
     */
    public Optional<Output<Boolean>> disableEth3() {
        return Optional.ofNullable(this.disableEth3);
    }

    /**
     * Whether to disable module port
     * 
     */
    @Import(name="disableModule")
    private @Nullable Output<Boolean> disableModule;

    /**
     * @return Whether to disable module port
     * 
     */
    public Optional<Output<Boolean>> disableModule() {
        return Optional.ofNullable(this.disableModule);
    }

    @Import(name="eslConfig")
    private @Nullable Output<DeviceprofileApEslConfigArgs> eslConfig;

    public Optional<Output<DeviceprofileApEslConfigArgs>> eslConfig() {
        return Optional.ofNullable(this.eslConfig);
    }

    /**
     * IP AP settings
     * 
     */
    @Import(name="ipConfig")
    private @Nullable Output<DeviceprofileApIpConfigArgs> ipConfig;

    /**
     * @return IP AP settings
     * 
     */
    public Optional<Output<DeviceprofileApIpConfigArgs>> ipConfig() {
        return Optional.ofNullable(this.ipConfig);
    }

    @Import(name="lacpConfig")
    private @Nullable Output<DeviceprofileApLacpConfigArgs> lacpConfig;

    public Optional<Output<DeviceprofileApLacpConfigArgs>> lacpConfig() {
        return Optional.ofNullable(this.lacpConfig);
    }

    /**
     * LED AP settings
     * 
     */
    @Import(name="led")
    private @Nullable Output<DeviceprofileApLedArgs> led;

    /**
     * @return LED AP settings
     * 
     */
    public Optional<Output<DeviceprofileApLedArgs>> led() {
        return Optional.ofNullable(this.led);
    }

    /**
     * Mesh AP settings
     * 
     */
    @Import(name="mesh")
    private @Nullable Output<DeviceprofileApMeshArgs> mesh;

    /**
     * @return Mesh AP settings
     * 
     */
    public Optional<Output<DeviceprofileApMeshArgs>> mesh() {
        return Optional.ofNullable(this.mesh);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="ntpServers")
    private @Nullable Output<List<String>> ntpServers;

    public Optional<Output<List<String>>> ntpServers() {
        return Optional.ofNullable(this.ntpServers);
    }

    @Import(name="orgId", required=true)
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     * 
     */
    @Import(name="poePassthrough")
    private @Nullable Output<Boolean> poePassthrough;

    /**
     * @return Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     * 
     */
    public Optional<Output<Boolean>> poePassthrough() {
        return Optional.ofNullable(this.poePassthrough);
    }

    /**
     * eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
     * precedence over switch_config (deprecated)
     * 
     */
    @Import(name="portConfig")
    private @Nullable Output<Map<String,DeviceprofileApPortConfigArgs>> portConfig;

    /**
     * @return eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
     * precedence over switch_config (deprecated)
     * 
     */
    public Optional<Output<Map<String,DeviceprofileApPortConfigArgs>>> portConfig() {
        return Optional.ofNullable(this.portConfig);
    }

    /**
     * Power related configs
     * 
     */
    @Import(name="pwrConfig")
    private @Nullable Output<DeviceprofileApPwrConfigArgs> pwrConfig;

    /**
     * @return Power related configs
     * 
     */
    public Optional<Output<DeviceprofileApPwrConfigArgs>> pwrConfig() {
        return Optional.ofNullable(this.pwrConfig);
    }

    /**
     * Radio AP settings
     * 
     */
    @Import(name="radioConfig")
    private @Nullable Output<DeviceprofileApRadioConfigArgs> radioConfig;

    /**
     * @return Radio AP settings
     * 
     */
    public Optional<Output<DeviceprofileApRadioConfigArgs>> radioConfig() {
        return Optional.ofNullable(this.radioConfig);
    }

    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    /**
     * AP Uplink port configuration
     * 
     */
    @Import(name="uplinkPortConfig")
    private @Nullable Output<DeviceprofileApUplinkPortConfigArgs> uplinkPortConfig;

    /**
     * @return AP Uplink port configuration
     * 
     */
    public Optional<Output<DeviceprofileApUplinkPortConfigArgs>> uplinkPortConfig() {
        return Optional.ofNullable(this.uplinkPortConfig);
    }

    /**
     * USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
     * moved to ESL Config.
     * 
     */
    @Import(name="usbConfig")
    private @Nullable Output<DeviceprofileApUsbConfigArgs> usbConfig;

    /**
     * @return USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
     * moved to ESL Config.
     * 
     */
    public Optional<Output<DeviceprofileApUsbConfigArgs>> usbConfig() {
        return Optional.ofNullable(this.usbConfig);
    }

    /**
     * Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    @Import(name="vars")
    private @Nullable Output<Map<String,String>> vars;

    /**
     * @return Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    public Optional<Output<Map<String,String>>> vars() {
        return Optional.ofNullable(this.vars);
    }

    private DeviceprofileApArgs() {}

    private DeviceprofileApArgs(DeviceprofileApArgs $) {
        this.aeroscout = $.aeroscout;
        this.bleConfig = $.bleConfig;
        this.disableEth1 = $.disableEth1;
        this.disableEth2 = $.disableEth2;
        this.disableEth3 = $.disableEth3;
        this.disableModule = $.disableModule;
        this.eslConfig = $.eslConfig;
        this.ipConfig = $.ipConfig;
        this.lacpConfig = $.lacpConfig;
        this.led = $.led;
        this.mesh = $.mesh;
        this.name = $.name;
        this.ntpServers = $.ntpServers;
        this.orgId = $.orgId;
        this.poePassthrough = $.poePassthrough;
        this.portConfig = $.portConfig;
        this.pwrConfig = $.pwrConfig;
        this.radioConfig = $.radioConfig;
        this.siteId = $.siteId;
        this.uplinkPortConfig = $.uplinkPortConfig;
        this.usbConfig = $.usbConfig;
        this.vars = $.vars;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceprofileApArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceprofileApArgs $;

        public Builder() {
            $ = new DeviceprofileApArgs();
        }

        public Builder(DeviceprofileApArgs defaults) {
            $ = new DeviceprofileApArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aeroscout Aeroscout AP settings
         * 
         * @return builder
         * 
         */
        public Builder aeroscout(@Nullable Output<DeviceprofileApAeroscoutArgs> aeroscout) {
            $.aeroscout = aeroscout;
            return this;
        }

        /**
         * @param aeroscout Aeroscout AP settings
         * 
         * @return builder
         * 
         */
        public Builder aeroscout(DeviceprofileApAeroscoutArgs aeroscout) {
            return aeroscout(Output.of(aeroscout));
        }

        /**
         * @param bleConfig BLE AP settings
         * 
         * @return builder
         * 
         */
        public Builder bleConfig(@Nullable Output<DeviceprofileApBleConfigArgs> bleConfig) {
            $.bleConfig = bleConfig;
            return this;
        }

        /**
         * @param bleConfig BLE AP settings
         * 
         * @return builder
         * 
         */
        public Builder bleConfig(DeviceprofileApBleConfigArgs bleConfig) {
            return bleConfig(Output.of(bleConfig));
        }

        /**
         * @param disableEth1 Whether to disable eth1 port
         * 
         * @return builder
         * 
         */
        public Builder disableEth1(@Nullable Output<Boolean> disableEth1) {
            $.disableEth1 = disableEth1;
            return this;
        }

        /**
         * @param disableEth1 Whether to disable eth1 port
         * 
         * @return builder
         * 
         */
        public Builder disableEth1(Boolean disableEth1) {
            return disableEth1(Output.of(disableEth1));
        }

        /**
         * @param disableEth2 Whether to disable eth2 port
         * 
         * @return builder
         * 
         */
        public Builder disableEth2(@Nullable Output<Boolean> disableEth2) {
            $.disableEth2 = disableEth2;
            return this;
        }

        /**
         * @param disableEth2 Whether to disable eth2 port
         * 
         * @return builder
         * 
         */
        public Builder disableEth2(Boolean disableEth2) {
            return disableEth2(Output.of(disableEth2));
        }

        /**
         * @param disableEth3 Whether to disable eth3 port
         * 
         * @return builder
         * 
         */
        public Builder disableEth3(@Nullable Output<Boolean> disableEth3) {
            $.disableEth3 = disableEth3;
            return this;
        }

        /**
         * @param disableEth3 Whether to disable eth3 port
         * 
         * @return builder
         * 
         */
        public Builder disableEth3(Boolean disableEth3) {
            return disableEth3(Output.of(disableEth3));
        }

        /**
         * @param disableModule Whether to disable module port
         * 
         * @return builder
         * 
         */
        public Builder disableModule(@Nullable Output<Boolean> disableModule) {
            $.disableModule = disableModule;
            return this;
        }

        /**
         * @param disableModule Whether to disable module port
         * 
         * @return builder
         * 
         */
        public Builder disableModule(Boolean disableModule) {
            return disableModule(Output.of(disableModule));
        }

        public Builder eslConfig(@Nullable Output<DeviceprofileApEslConfigArgs> eslConfig) {
            $.eslConfig = eslConfig;
            return this;
        }

        public Builder eslConfig(DeviceprofileApEslConfigArgs eslConfig) {
            return eslConfig(Output.of(eslConfig));
        }

        /**
         * @param ipConfig IP AP settings
         * 
         * @return builder
         * 
         */
        public Builder ipConfig(@Nullable Output<DeviceprofileApIpConfigArgs> ipConfig) {
            $.ipConfig = ipConfig;
            return this;
        }

        /**
         * @param ipConfig IP AP settings
         * 
         * @return builder
         * 
         */
        public Builder ipConfig(DeviceprofileApIpConfigArgs ipConfig) {
            return ipConfig(Output.of(ipConfig));
        }

        public Builder lacpConfig(@Nullable Output<DeviceprofileApLacpConfigArgs> lacpConfig) {
            $.lacpConfig = lacpConfig;
            return this;
        }

        public Builder lacpConfig(DeviceprofileApLacpConfigArgs lacpConfig) {
            return lacpConfig(Output.of(lacpConfig));
        }

        /**
         * @param led LED AP settings
         * 
         * @return builder
         * 
         */
        public Builder led(@Nullable Output<DeviceprofileApLedArgs> led) {
            $.led = led;
            return this;
        }

        /**
         * @param led LED AP settings
         * 
         * @return builder
         * 
         */
        public Builder led(DeviceprofileApLedArgs led) {
            return led(Output.of(led));
        }

        /**
         * @param mesh Mesh AP settings
         * 
         * @return builder
         * 
         */
        public Builder mesh(@Nullable Output<DeviceprofileApMeshArgs> mesh) {
            $.mesh = mesh;
            return this;
        }

        /**
         * @param mesh Mesh AP settings
         * 
         * @return builder
         * 
         */
        public Builder mesh(DeviceprofileApMeshArgs mesh) {
            return mesh(Output.of(mesh));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder ntpServers(@Nullable Output<List<String>> ntpServers) {
            $.ntpServers = ntpServers;
            return this;
        }

        public Builder ntpServers(List<String> ntpServers) {
            return ntpServers(Output.of(ntpServers));
        }

        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }

        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param poePassthrough Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
         * 
         * @return builder
         * 
         */
        public Builder poePassthrough(@Nullable Output<Boolean> poePassthrough) {
            $.poePassthrough = poePassthrough;
            return this;
        }

        /**
         * @param poePassthrough Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
         * 
         * @return builder
         * 
         */
        public Builder poePassthrough(Boolean poePassthrough) {
            return poePassthrough(Output.of(poePassthrough));
        }

        /**
         * @param portConfig eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
         * precedence over switch_config (deprecated)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(@Nullable Output<Map<String,DeviceprofileApPortConfigArgs>> portConfig) {
            $.portConfig = portConfig;
            return this;
        }

        /**
         * @param portConfig eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
         * precedence over switch_config (deprecated)
         * 
         * @return builder
         * 
         */
        public Builder portConfig(Map<String,DeviceprofileApPortConfigArgs> portConfig) {
            return portConfig(Output.of(portConfig));
        }

        /**
         * @param pwrConfig Power related configs
         * 
         * @return builder
         * 
         */
        public Builder pwrConfig(@Nullable Output<DeviceprofileApPwrConfigArgs> pwrConfig) {
            $.pwrConfig = pwrConfig;
            return this;
        }

        /**
         * @param pwrConfig Power related configs
         * 
         * @return builder
         * 
         */
        public Builder pwrConfig(DeviceprofileApPwrConfigArgs pwrConfig) {
            return pwrConfig(Output.of(pwrConfig));
        }

        /**
         * @param radioConfig Radio AP settings
         * 
         * @return builder
         * 
         */
        public Builder radioConfig(@Nullable Output<DeviceprofileApRadioConfigArgs> radioConfig) {
            $.radioConfig = radioConfig;
            return this;
        }

        /**
         * @param radioConfig Radio AP settings
         * 
         * @return builder
         * 
         */
        public Builder radioConfig(DeviceprofileApRadioConfigArgs radioConfig) {
            return radioConfig(Output.of(radioConfig));
        }

        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param uplinkPortConfig AP Uplink port configuration
         * 
         * @return builder
         * 
         */
        public Builder uplinkPortConfig(@Nullable Output<DeviceprofileApUplinkPortConfigArgs> uplinkPortConfig) {
            $.uplinkPortConfig = uplinkPortConfig;
            return this;
        }

        /**
         * @param uplinkPortConfig AP Uplink port configuration
         * 
         * @return builder
         * 
         */
        public Builder uplinkPortConfig(DeviceprofileApUplinkPortConfigArgs uplinkPortConfig) {
            return uplinkPortConfig(Output.of(uplinkPortConfig));
        }

        /**
         * @param usbConfig USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
         * moved to ESL Config.
         * 
         * @return builder
         * 
         */
        public Builder usbConfig(@Nullable Output<DeviceprofileApUsbConfigArgs> usbConfig) {
            $.usbConfig = usbConfig;
            return this;
        }

        /**
         * @param usbConfig USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
         * moved to ESL Config.
         * 
         * @return builder
         * 
         */
        public Builder usbConfig(DeviceprofileApUsbConfigArgs usbConfig) {
            return usbConfig(Output.of(usbConfig));
        }

        /**
         * @param vars Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(@Nullable Output<Map<String,String>> vars) {
            $.vars = vars;
            return this;
        }

        /**
         * @param vars Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(Map<String,String> vars) {
            return vars(Output.of(vars));
        }

        public DeviceprofileApArgs build() {
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("DeviceprofileApArgs", "orgId");
            }
            return $;
        }
    }

}
