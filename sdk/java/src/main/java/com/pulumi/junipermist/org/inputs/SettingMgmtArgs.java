// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingMgmtArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingMgmtArgs Empty = new SettingMgmtArgs();

    /**
     * List of Mist Tunnels
     * 
     */
    @Import(name="mxtunnelIds")
    private @Nullable Output<List<String>> mxtunnelIds;

    /**
     * @return List of Mist Tunnels
     * 
     */
    public Optional<Output<List<String>>> mxtunnelIds() {
        return Optional.ofNullable(this.mxtunnelIds);
    }

    /**
     * Whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
     * 
     */
    @Import(name="useMxtunnel")
    private @Nullable Output<Boolean> useMxtunnel;

    /**
     * @return Whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
     * 
     */
    public Optional<Output<Boolean>> useMxtunnel() {
        return Optional.ofNullable(this.useMxtunnel);
    }

    /**
     * Whether to use wxtunnel for mgmt connectivity
     * 
     */
    @Import(name="useWxtunnel")
    private @Nullable Output<Boolean> useWxtunnel;

    /**
     * @return Whether to use wxtunnel for mgmt connectivity
     * 
     */
    public Optional<Output<Boolean>> useWxtunnel() {
        return Optional.ofNullable(this.useWxtunnel);
    }

    private SettingMgmtArgs() {}

    private SettingMgmtArgs(SettingMgmtArgs $) {
        this.mxtunnelIds = $.mxtunnelIds;
        this.useMxtunnel = $.useMxtunnel;
        this.useWxtunnel = $.useWxtunnel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingMgmtArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingMgmtArgs $;

        public Builder() {
            $ = new SettingMgmtArgs();
        }

        public Builder(SettingMgmtArgs defaults) {
            $ = new SettingMgmtArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mxtunnelIds List of Mist Tunnels
         * 
         * @return builder
         * 
         */
        public Builder mxtunnelIds(@Nullable Output<List<String>> mxtunnelIds) {
            $.mxtunnelIds = mxtunnelIds;
            return this;
        }

        /**
         * @param mxtunnelIds List of Mist Tunnels
         * 
         * @return builder
         * 
         */
        public Builder mxtunnelIds(List<String> mxtunnelIds) {
            return mxtunnelIds(Output.of(mxtunnelIds));
        }

        /**
         * @param mxtunnelIds List of Mist Tunnels
         * 
         * @return builder
         * 
         */
        public Builder mxtunnelIds(String... mxtunnelIds) {
            return mxtunnelIds(List.of(mxtunnelIds));
        }

        /**
         * @param useMxtunnel Whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
         * 
         * @return builder
         * 
         */
        public Builder useMxtunnel(@Nullable Output<Boolean> useMxtunnel) {
            $.useMxtunnel = useMxtunnel;
            return this;
        }

        /**
         * @param useMxtunnel Whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
         * 
         * @return builder
         * 
         */
        public Builder useMxtunnel(Boolean useMxtunnel) {
            return useMxtunnel(Output.of(useMxtunnel));
        }

        /**
         * @param useWxtunnel Whether to use wxtunnel for mgmt connectivity
         * 
         * @return builder
         * 
         */
        public Builder useWxtunnel(@Nullable Output<Boolean> useWxtunnel) {
            $.useWxtunnel = useWxtunnel;
            return this;
        }

        /**
         * @param useWxtunnel Whether to use wxtunnel for mgmt connectivity
         * 
         * @return builder
         * 
         */
        public Builder useWxtunnel(Boolean useWxtunnel) {
            return useWxtunnel(Output.of(useWxtunnel));
        }

        public SettingMgmtArgs build() {
            return $;
        }
    }

}
