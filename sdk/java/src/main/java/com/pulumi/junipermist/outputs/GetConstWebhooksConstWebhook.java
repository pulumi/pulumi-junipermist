// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConstWebhooksConstWebhook {
    /**
     * @return supports single event per message results
     * 
     */
    private Boolean allowsSingleEventPerMessage;
    /**
     * @return Can be used in org webhooks, optional
     * 
     */
    private Boolean forOrg;
    /**
     * @return Supports webhook delivery results /api/v1/:scope/:scope*id/webhooks/:webhook*id/events/search
     * 
     */
    private Boolean hasDeliveryResults;
    /**
     * @return Internal topic (not selectable in site/org webhooks)
     * 
     */
    private Boolean internal;
    /**
     * @return Webhook topic name
     * 
     */
    private String key;

    private GetConstWebhooksConstWebhook() {}
    /**
     * @return supports single event per message results
     * 
     */
    public Boolean allowsSingleEventPerMessage() {
        return this.allowsSingleEventPerMessage;
    }
    /**
     * @return Can be used in org webhooks, optional
     * 
     */
    public Boolean forOrg() {
        return this.forOrg;
    }
    /**
     * @return Supports webhook delivery results /api/v1/:scope/:scope*id/webhooks/:webhook*id/events/search
     * 
     */
    public Boolean hasDeliveryResults() {
        return this.hasDeliveryResults;
    }
    /**
     * @return Internal topic (not selectable in site/org webhooks)
     * 
     */
    public Boolean internal() {
        return this.internal;
    }
    /**
     * @return Webhook topic name
     * 
     */
    public String key() {
        return this.key;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConstWebhooksConstWebhook defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowsSingleEventPerMessage;
        private Boolean forOrg;
        private Boolean hasDeliveryResults;
        private Boolean internal;
        private String key;
        public Builder() {}
        public Builder(GetConstWebhooksConstWebhook defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowsSingleEventPerMessage = defaults.allowsSingleEventPerMessage;
    	      this.forOrg = defaults.forOrg;
    	      this.hasDeliveryResults = defaults.hasDeliveryResults;
    	      this.internal = defaults.internal;
    	      this.key = defaults.key;
        }

        @CustomType.Setter
        public Builder allowsSingleEventPerMessage(Boolean allowsSingleEventPerMessage) {
            if (allowsSingleEventPerMessage == null) {
              throw new MissingRequiredPropertyException("GetConstWebhooksConstWebhook", "allowsSingleEventPerMessage");
            }
            this.allowsSingleEventPerMessage = allowsSingleEventPerMessage;
            return this;
        }
        @CustomType.Setter
        public Builder forOrg(Boolean forOrg) {
            if (forOrg == null) {
              throw new MissingRequiredPropertyException("GetConstWebhooksConstWebhook", "forOrg");
            }
            this.forOrg = forOrg;
            return this;
        }
        @CustomType.Setter
        public Builder hasDeliveryResults(Boolean hasDeliveryResults) {
            if (hasDeliveryResults == null) {
              throw new MissingRequiredPropertyException("GetConstWebhooksConstWebhook", "hasDeliveryResults");
            }
            this.hasDeliveryResults = hasDeliveryResults;
            return this;
        }
        @CustomType.Setter
        public Builder internal(Boolean internal) {
            if (internal == null) {
              throw new MissingRequiredPropertyException("GetConstWebhooksConstWebhook", "internal");
            }
            this.internal = internal;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetConstWebhooksConstWebhook", "key");
            }
            this.key = key;
            return this;
        }
        public GetConstWebhooksConstWebhook build() {
            final var _resultValue = new GetConstWebhooksConstWebhook();
            _resultValue.allowsSingleEventPerMessage = allowsSingleEventPerMessage;
            _resultValue.forOrg = forOrg;
            _resultValue.hasDeliveryResults = hasDeliveryResults;
            _resultValue.internal = internal;
            _resultValue.key = key;
            return _resultValue;
        }
    }
}
