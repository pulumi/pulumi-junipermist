// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NetworktemplateDhcpSnooping {
    private @Nullable Boolean allNetworks;
    /**
     * @return Enable for dynamic ARP inspection check
     * 
     */
    private @Nullable Boolean enableArpSpoofCheck;
    /**
     * @return Enable for check for forging source IP address
     * 
     */
    private @Nullable Boolean enableIpSourceGuard;
    private @Nullable Boolean enabled;
    /**
     * @return If `all_networks`==`false`, list of network with DHCP snooping enabled
     * 
     */
    private @Nullable List<String> networks;

    private NetworktemplateDhcpSnooping() {}
    public Optional<Boolean> allNetworks() {
        return Optional.ofNullable(this.allNetworks);
    }
    /**
     * @return Enable for dynamic ARP inspection check
     * 
     */
    public Optional<Boolean> enableArpSpoofCheck() {
        return Optional.ofNullable(this.enableArpSpoofCheck);
    }
    /**
     * @return Enable for check for forging source IP address
     * 
     */
    public Optional<Boolean> enableIpSourceGuard() {
        return Optional.ofNullable(this.enableIpSourceGuard);
    }
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return If `all_networks`==`false`, list of network with DHCP snooping enabled
     * 
     */
    public List<String> networks() {
        return this.networks == null ? List.of() : this.networks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworktemplateDhcpSnooping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allNetworks;
        private @Nullable Boolean enableArpSpoofCheck;
        private @Nullable Boolean enableIpSourceGuard;
        private @Nullable Boolean enabled;
        private @Nullable List<String> networks;
        public Builder() {}
        public Builder(NetworktemplateDhcpSnooping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allNetworks = defaults.allNetworks;
    	      this.enableArpSpoofCheck = defaults.enableArpSpoofCheck;
    	      this.enableIpSourceGuard = defaults.enableIpSourceGuard;
    	      this.enabled = defaults.enabled;
    	      this.networks = defaults.networks;
        }

        @CustomType.Setter
        public Builder allNetworks(@Nullable Boolean allNetworks) {

            this.allNetworks = allNetworks;
            return this;
        }
        @CustomType.Setter
        public Builder enableArpSpoofCheck(@Nullable Boolean enableArpSpoofCheck) {

            this.enableArpSpoofCheck = enableArpSpoofCheck;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpSourceGuard(@Nullable Boolean enableIpSourceGuard) {

            this.enableIpSourceGuard = enableIpSourceGuard;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder networks(@Nullable List<String> networks) {

            this.networks = networks;
            return this;
        }
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }
        public NetworktemplateDhcpSnooping build() {
            final var _resultValue = new NetworktemplateDhcpSnooping();
            _resultValue.allNetworks = allNetworks;
            _resultValue.enableArpSpoofCheck = enableArpSpoofCheck;
            _resultValue.enableIpSourceGuard = enableIpSourceGuard;
            _resultValue.enabled = enabled;
            _resultValue.networks = networks;
            return _resultValue;
        }
    }
}
