// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworktemplateSwitchMatchingRuleOobIpConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworktemplateSwitchMatchingRuleOobIpConfigArgs Empty = new NetworktemplateSwitchMatchingRuleOobIpConfigArgs();

    /**
     * enum: `dhcp`, `static`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return enum: `dhcp`, `static`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * If supported on the platform. If enabled, DNS will be using this routing-instance, too
     * 
     */
    @Import(name="useMgmtVrf")
    private @Nullable Output<Boolean> useMgmtVrf;

    /**
     * @return If supported on the platform. If enabled, DNS will be using this routing-instance, too
     * 
     */
    public Optional<Output<Boolean>> useMgmtVrf() {
        return Optional.ofNullable(this.useMgmtVrf);
    }

    /**
     * For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
     * 
     */
    @Import(name="useMgmtVrfForHostOut")
    private @Nullable Output<Boolean> useMgmtVrfForHostOut;

    /**
     * @return For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
     * 
     */
    public Optional<Output<Boolean>> useMgmtVrfForHostOut() {
        return Optional.ofNullable(this.useMgmtVrfForHostOut);
    }

    private NetworktemplateSwitchMatchingRuleOobIpConfigArgs() {}

    private NetworktemplateSwitchMatchingRuleOobIpConfigArgs(NetworktemplateSwitchMatchingRuleOobIpConfigArgs $) {
        this.type = $.type;
        this.useMgmtVrf = $.useMgmtVrf;
        this.useMgmtVrfForHostOut = $.useMgmtVrfForHostOut;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworktemplateSwitchMatchingRuleOobIpConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworktemplateSwitchMatchingRuleOobIpConfigArgs $;

        public Builder() {
            $ = new NetworktemplateSwitchMatchingRuleOobIpConfigArgs();
        }

        public Builder(NetworktemplateSwitchMatchingRuleOobIpConfigArgs defaults) {
            $ = new NetworktemplateSwitchMatchingRuleOobIpConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type enum: `dhcp`, `static`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type enum: `dhcp`, `static`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useMgmtVrf If supported on the platform. If enabled, DNS will be using this routing-instance, too
         * 
         * @return builder
         * 
         */
        public Builder useMgmtVrf(@Nullable Output<Boolean> useMgmtVrf) {
            $.useMgmtVrf = useMgmtVrf;
            return this;
        }

        /**
         * @param useMgmtVrf If supported on the platform. If enabled, DNS will be using this routing-instance, too
         * 
         * @return builder
         * 
         */
        public Builder useMgmtVrf(Boolean useMgmtVrf) {
            return useMgmtVrf(Output.of(useMgmtVrf));
        }

        /**
         * @param useMgmtVrfForHostOut For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         * 
         * @return builder
         * 
         */
        public Builder useMgmtVrfForHostOut(@Nullable Output<Boolean> useMgmtVrfForHostOut) {
            $.useMgmtVrfForHostOut = useMgmtVrfForHostOut;
            return this;
        }

        /**
         * @param useMgmtVrfForHostOut For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         * 
         * @return builder
         * 
         */
        public Builder useMgmtVrfForHostOut(Boolean useMgmtVrfForHostOut) {
            return useMgmtVrfForHostOut(Output.of(useMgmtVrfForHostOut));
        }

        public NetworktemplateSwitchMatchingRuleOobIpConfigArgs build() {
            return $;
        }
    }

}
