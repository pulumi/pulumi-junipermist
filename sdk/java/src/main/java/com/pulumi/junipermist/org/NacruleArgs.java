// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.inputs.NacruleMatchingArgs;
import com.pulumi.junipermist.org.inputs.NacruleNotMatchingArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NacruleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NacruleArgs Empty = new NacruleArgs();

    /**
     * enum: `allow`, `block`
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return enum: `allow`, `block`
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * All optional, this goes into Access-Accept
     * 
     */
    @Import(name="applyTags")
    private @Nullable Output<List<String>> applyTags;

    /**
     * @return All optional, this goes into Access-Accept
     * 
     */
    public Optional<Output<List<String>>> applyTags() {
        return Optional.ofNullable(this.applyTags);
    }

    /**
     * Enabled or not
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enabled or not
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="matching")
    private @Nullable Output<NacruleMatchingArgs> matching;

    public Optional<Output<NacruleMatchingArgs>> matching() {
        return Optional.ofNullable(this.matching);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="notMatching")
    private @Nullable Output<NacruleNotMatchingArgs> notMatching;

    public Optional<Output<NacruleNotMatchingArgs>> notMatching() {
        return Optional.ofNullable(this.notMatching);
    }

    /**
     * Order of the rule, lower value implies higher priority
     * 
     */
    @Import(name="order", required=true)
    private Output<Integer> order;

    /**
     * @return Order of the rule, lower value implies higher priority
     * 
     */
    public Output<Integer> order() {
        return this.order;
    }

    @Import(name="orgId", required=true)
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }

    private NacruleArgs() {}

    private NacruleArgs(NacruleArgs $) {
        this.action = $.action;
        this.applyTags = $.applyTags;
        this.enabled = $.enabled;
        this.matching = $.matching;
        this.name = $.name;
        this.notMatching = $.notMatching;
        this.order = $.order;
        this.orgId = $.orgId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NacruleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NacruleArgs $;

        public Builder() {
            $ = new NacruleArgs();
        }

        public Builder(NacruleArgs defaults) {
            $ = new NacruleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action enum: `allow`, `block`
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action enum: `allow`, `block`
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param applyTags All optional, this goes into Access-Accept
         * 
         * @return builder
         * 
         */
        public Builder applyTags(@Nullable Output<List<String>> applyTags) {
            $.applyTags = applyTags;
            return this;
        }

        /**
         * @param applyTags All optional, this goes into Access-Accept
         * 
         * @return builder
         * 
         */
        public Builder applyTags(List<String> applyTags) {
            return applyTags(Output.of(applyTags));
        }

        /**
         * @param applyTags All optional, this goes into Access-Accept
         * 
         * @return builder
         * 
         */
        public Builder applyTags(String... applyTags) {
            return applyTags(List.of(applyTags));
        }

        /**
         * @param enabled Enabled or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enabled or not
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder matching(@Nullable Output<NacruleMatchingArgs> matching) {
            $.matching = matching;
            return this;
        }

        public Builder matching(NacruleMatchingArgs matching) {
            return matching(Output.of(matching));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder notMatching(@Nullable Output<NacruleNotMatchingArgs> notMatching) {
            $.notMatching = notMatching;
            return this;
        }

        public Builder notMatching(NacruleNotMatchingArgs notMatching) {
            return notMatching(Output.of(notMatching));
        }

        /**
         * @param order Order of the rule, lower value implies higher priority
         * 
         * @return builder
         * 
         */
        public Builder order(Output<Integer> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Order of the rule, lower value implies higher priority
         * 
         * @return builder
         * 
         */
        public Builder order(Integer order) {
            return order(Output.of(order));
        }

        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        public NacruleArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("NacruleArgs", "action");
            }
            if ($.order == null) {
                throw new MissingRequiredPropertyException("NacruleArgs", "order");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("NacruleArgs", "orgId");
            }
            return $;
        }
    }

}
