// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.device.inputs.GatewayTunnelConfigsAutoProvisionLatlngArgs;
import com.pulumi.junipermist.device.inputs.GatewayTunnelConfigsAutoProvisionPrimaryArgs;
import com.pulumi.junipermist.device.inputs.GatewayTunnelConfigsAutoProvisionSecondaryArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayTunnelConfigsAutoProvisionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayTunnelConfigsAutoProvisionArgs Empty = new GatewayTunnelConfigsAutoProvisionArgs();

    /**
     * Enable auto provisioning for the tunnel. If enabled, the `primary` and `secondary` nodes will be ignored.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable auto provisioning for the tunnel. If enabled, the `primary` and `secondary` nodes will be ignored.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * API override for POP selection
     * 
     */
    @Import(name="latlng")
    private @Nullable Output<GatewayTunnelConfigsAutoProvisionLatlngArgs> latlng;

    /**
     * @return API override for POP selection
     * 
     */
    public Optional<Output<GatewayTunnelConfigsAutoProvisionLatlngArgs>> latlng() {
        return Optional.ofNullable(this.latlng);
    }

    @Import(name="primary")
    private @Nullable Output<GatewayTunnelConfigsAutoProvisionPrimaryArgs> primary;

    public Optional<Output<GatewayTunnelConfigsAutoProvisionPrimaryArgs>> primary() {
        return Optional.ofNullable(this.primary);
    }

    /**
     * enum: `jse-ipsec`, `zscaler-ipsec`
     * 
     */
    @Import(name="provider", required=true)
    private Output<String> provider;

    /**
     * @return enum: `jse-ipsec`, `zscaler-ipsec`
     * 
     */
    public Output<String> provider() {
        return this.provider;
    }

    /**
     * API override for POP selection in the case user wants to override the auto discovery of remote network location and force the tunnel to use the specified peer location.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return API override for POP selection in the case user wants to override the auto discovery of remote network location and force the tunnel to use the specified peer location.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="secondary")
    private @Nullable Output<GatewayTunnelConfigsAutoProvisionSecondaryArgs> secondary;

    public Optional<Output<GatewayTunnelConfigsAutoProvisionSecondaryArgs>> secondary() {
        return Optional.ofNullable(this.secondary);
    }

    /**
     * if `provider`==`prisma-ipsec`. By default, we&#39;ll use the location of the site to determine the optimal Remote Network location, optionally, serviceConnection can be considered, then we&#39;ll also consider this along with the site location. Define serviceConnection if the traffic is to be routed to a specific service connection. This field takes a service connection name that is configured in the Prisma cloud, Prisma Access Setup &gt; Service Connections.
     * 
     */
    @Import(name="serviceConnection")
    private @Nullable Output<String> serviceConnection;

    /**
     * @return if `provider`==`prisma-ipsec`. By default, we&#39;ll use the location of the site to determine the optimal Remote Network location, optionally, serviceConnection can be considered, then we&#39;ll also consider this along with the site location. Define serviceConnection if the traffic is to be routed to a specific service connection. This field takes a service connection name that is configured in the Prisma cloud, Prisma Access Setup &gt; Service Connections.
     * 
     */
    public Optional<Output<String>> serviceConnection() {
        return Optional.ofNullable(this.serviceConnection);
    }

    private GatewayTunnelConfigsAutoProvisionArgs() {}

    private GatewayTunnelConfigsAutoProvisionArgs(GatewayTunnelConfigsAutoProvisionArgs $) {
        this.enabled = $.enabled;
        this.latlng = $.latlng;
        this.primary = $.primary;
        this.provider = $.provider;
        this.region = $.region;
        this.secondary = $.secondary;
        this.serviceConnection = $.serviceConnection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayTunnelConfigsAutoProvisionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayTunnelConfigsAutoProvisionArgs $;

        public Builder() {
            $ = new GatewayTunnelConfigsAutoProvisionArgs();
        }

        public Builder(GatewayTunnelConfigsAutoProvisionArgs defaults) {
            $ = new GatewayTunnelConfigsAutoProvisionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Enable auto provisioning for the tunnel. If enabled, the `primary` and `secondary` nodes will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable auto provisioning for the tunnel. If enabled, the `primary` and `secondary` nodes will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param latlng API override for POP selection
         * 
         * @return builder
         * 
         */
        public Builder latlng(@Nullable Output<GatewayTunnelConfigsAutoProvisionLatlngArgs> latlng) {
            $.latlng = latlng;
            return this;
        }

        /**
         * @param latlng API override for POP selection
         * 
         * @return builder
         * 
         */
        public Builder latlng(GatewayTunnelConfigsAutoProvisionLatlngArgs latlng) {
            return latlng(Output.of(latlng));
        }

        public Builder primary(@Nullable Output<GatewayTunnelConfigsAutoProvisionPrimaryArgs> primary) {
            $.primary = primary;
            return this;
        }

        public Builder primary(GatewayTunnelConfigsAutoProvisionPrimaryArgs primary) {
            return primary(Output.of(primary));
        }

        /**
         * @param provider enum: `jse-ipsec`, `zscaler-ipsec`
         * 
         * @return builder
         * 
         */
        public Builder provider(Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider enum: `jse-ipsec`, `zscaler-ipsec`
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param region API override for POP selection in the case user wants to override the auto discovery of remote network location and force the tunnel to use the specified peer location.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region API override for POP selection in the case user wants to override the auto discovery of remote network location and force the tunnel to use the specified peer location.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder secondary(@Nullable Output<GatewayTunnelConfigsAutoProvisionSecondaryArgs> secondary) {
            $.secondary = secondary;
            return this;
        }

        public Builder secondary(GatewayTunnelConfigsAutoProvisionSecondaryArgs secondary) {
            return secondary(Output.of(secondary));
        }

        /**
         * @param serviceConnection if `provider`==`prisma-ipsec`. By default, we&#39;ll use the location of the site to determine the optimal Remote Network location, optionally, serviceConnection can be considered, then we&#39;ll also consider this along with the site location. Define serviceConnection if the traffic is to be routed to a specific service connection. This field takes a service connection name that is configured in the Prisma cloud, Prisma Access Setup &gt; Service Connections.
         * 
         * @return builder
         * 
         */
        public Builder serviceConnection(@Nullable Output<String> serviceConnection) {
            $.serviceConnection = serviceConnection;
            return this;
        }

        /**
         * @param serviceConnection if `provider`==`prisma-ipsec`. By default, we&#39;ll use the location of the site to determine the optimal Remote Network location, optionally, serviceConnection can be considered, then we&#39;ll also consider this along with the site location. Define serviceConnection if the traffic is to be routed to a specific service connection. This field takes a service connection name that is configured in the Prisma cloud, Prisma Access Setup &gt; Service Connections.
         * 
         * @return builder
         * 
         */
        public Builder serviceConnection(String serviceConnection) {
            return serviceConnection(Output.of(serviceConnection));
        }

        public GatewayTunnelConfigsAutoProvisionArgs build() {
            if ($.provider == null) {
                throw new MissingRequiredPropertyException("GatewayTunnelConfigsAutoProvisionArgs", "provider");
            }
            return $;
        }
    }

}
