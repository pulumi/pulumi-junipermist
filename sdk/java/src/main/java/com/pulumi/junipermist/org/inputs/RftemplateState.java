// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.junipermist.org.inputs.RftemplateBand24Args;
import com.pulumi.junipermist.org.inputs.RftemplateBand5Args;
import com.pulumi.junipermist.org.inputs.RftemplateBand5On24RadioArgs;
import com.pulumi.junipermist.org.inputs.RftemplateBand6Args;
import com.pulumi.junipermist.org.inputs.RftemplateModelSpecificArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RftemplateState extends com.pulumi.resources.ResourceArgs {

    public static final RftemplateState Empty = new RftemplateState();

    @Import(name="antGain24")
    private @Nullable Output<Integer> antGain24;

    public Optional<Output<Integer>> antGain24() {
        return Optional.ofNullable(this.antGain24);
    }

    @Import(name="antGain5")
    private @Nullable Output<Integer> antGain5;

    public Optional<Output<Integer>> antGain5() {
        return Optional.ofNullable(this.antGain5);
    }

    @Import(name="antGain6")
    private @Nullable Output<Integer> antGain6;

    public Optional<Output<Integer>> antGain6() {
        return Optional.ofNullable(this.antGain6);
    }

    /**
     * Radio Band AP settings
     * 
     */
    @Import(name="band24")
    private @Nullable Output<RftemplateBand24Args> band24;

    /**
     * @return Radio Band AP settings
     * 
     */
    public Optional<Output<RftemplateBand24Args>> band24() {
        return Optional.ofNullable(this.band24);
    }

    /**
     * enum: `24`, `5`, `6`, `auto`
     * 
     */
    @Import(name="band24Usage")
    private @Nullable Output<String> band24Usage;

    /**
     * @return enum: `24`, `5`, `6`, `auto`
     * 
     */
    public Optional<Output<String>> band24Usage() {
        return Optional.ofNullable(this.band24Usage);
    }

    /**
     * Radio Band AP settings
     * 
     */
    @Import(name="band5")
    private @Nullable Output<RftemplateBand5Args> band5;

    /**
     * @return Radio Band AP settings
     * 
     */
    public Optional<Output<RftemplateBand5Args>> band5() {
        return Optional.ofNullable(this.band5);
    }

    /**
     * Radio Band AP settings
     * 
     */
    @Import(name="band5On24Radio")
    private @Nullable Output<RftemplateBand5On24RadioArgs> band5On24Radio;

    /**
     * @return Radio Band AP settings
     * 
     */
    public Optional<Output<RftemplateBand5On24RadioArgs>> band5On24Radio() {
        return Optional.ofNullable(this.band5On24Radio);
    }

    /**
     * Radio Band AP settings
     * 
     */
    @Import(name="band6")
    private @Nullable Output<RftemplateBand6Args> band6;

    /**
     * @return Radio Band AP settings
     * 
     */
    public Optional<Output<RftemplateBand6Args>> band6() {
        return Optional.ofNullable(this.band6);
    }

    /**
     * Optional, country code to use. If specified, this gets applied to all sites using the RF Template
     * 
     */
    @Import(name="countryCode")
    private @Nullable Output<String> countryCode;

    /**
     * @return Optional, country code to use. If specified, this gets applied to all sites using the RF Template
     * 
     */
    public Optional<Output<String>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    /**
     * overwrites for a specific model. If a band is specified, it will shadow the default. Property key is the model name (e.g. &#34;AP63&#34;)
     * 
     */
    @Import(name="modelSpecific")
    private @Nullable Output<Map<String,RftemplateModelSpecificArgs>> modelSpecific;

    /**
     * @return overwrites for a specific model. If a band is specified, it will shadow the default. Property key is the model name (e.g. &#34;AP63&#34;)
     * 
     */
    public Optional<Output<Map<String,RftemplateModelSpecificArgs>>> modelSpecific() {
        return Optional.ofNullable(this.modelSpecific);
    }

    /**
     * The name of the RF template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the RF template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Whether scanning radio is enabled
     * 
     */
    @Import(name="scanningEnabled")
    private @Nullable Output<Boolean> scanningEnabled;

    /**
     * @return Whether scanning radio is enabled
     * 
     */
    public Optional<Output<Boolean>> scanningEnabled() {
        return Optional.ofNullable(this.scanningEnabled);
    }

    private RftemplateState() {}

    private RftemplateState(RftemplateState $) {
        this.antGain24 = $.antGain24;
        this.antGain5 = $.antGain5;
        this.antGain6 = $.antGain6;
        this.band24 = $.band24;
        this.band24Usage = $.band24Usage;
        this.band5 = $.band5;
        this.band5On24Radio = $.band5On24Radio;
        this.band6 = $.band6;
        this.countryCode = $.countryCode;
        this.modelSpecific = $.modelSpecific;
        this.name = $.name;
        this.orgId = $.orgId;
        this.scanningEnabled = $.scanningEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RftemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RftemplateState $;

        public Builder() {
            $ = new RftemplateState();
        }

        public Builder(RftemplateState defaults) {
            $ = new RftemplateState(Objects.requireNonNull(defaults));
        }

        public Builder antGain24(@Nullable Output<Integer> antGain24) {
            $.antGain24 = antGain24;
            return this;
        }

        public Builder antGain24(Integer antGain24) {
            return antGain24(Output.of(antGain24));
        }

        public Builder antGain5(@Nullable Output<Integer> antGain5) {
            $.antGain5 = antGain5;
            return this;
        }

        public Builder antGain5(Integer antGain5) {
            return antGain5(Output.of(antGain5));
        }

        public Builder antGain6(@Nullable Output<Integer> antGain6) {
            $.antGain6 = antGain6;
            return this;
        }

        public Builder antGain6(Integer antGain6) {
            return antGain6(Output.of(antGain6));
        }

        /**
         * @param band24 Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band24(@Nullable Output<RftemplateBand24Args> band24) {
            $.band24 = band24;
            return this;
        }

        /**
         * @param band24 Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band24(RftemplateBand24Args band24) {
            return band24(Output.of(band24));
        }

        /**
         * @param band24Usage enum: `24`, `5`, `6`, `auto`
         * 
         * @return builder
         * 
         */
        public Builder band24Usage(@Nullable Output<String> band24Usage) {
            $.band24Usage = band24Usage;
            return this;
        }

        /**
         * @param band24Usage enum: `24`, `5`, `6`, `auto`
         * 
         * @return builder
         * 
         */
        public Builder band24Usage(String band24Usage) {
            return band24Usage(Output.of(band24Usage));
        }

        /**
         * @param band5 Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band5(@Nullable Output<RftemplateBand5Args> band5) {
            $.band5 = band5;
            return this;
        }

        /**
         * @param band5 Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band5(RftemplateBand5Args band5) {
            return band5(Output.of(band5));
        }

        /**
         * @param band5On24Radio Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band5On24Radio(@Nullable Output<RftemplateBand5On24RadioArgs> band5On24Radio) {
            $.band5On24Radio = band5On24Radio;
            return this;
        }

        /**
         * @param band5On24Radio Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band5On24Radio(RftemplateBand5On24RadioArgs band5On24Radio) {
            return band5On24Radio(Output.of(band5On24Radio));
        }

        /**
         * @param band6 Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band6(@Nullable Output<RftemplateBand6Args> band6) {
            $.band6 = band6;
            return this;
        }

        /**
         * @param band6 Radio Band AP settings
         * 
         * @return builder
         * 
         */
        public Builder band6(RftemplateBand6Args band6) {
            return band6(Output.of(band6));
        }

        /**
         * @param countryCode Optional, country code to use. If specified, this gets applied to all sites using the RF Template
         * 
         * @return builder
         * 
         */
        public Builder countryCode(@Nullable Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode Optional, country code to use. If specified, this gets applied to all sites using the RF Template
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param modelSpecific overwrites for a specific model. If a band is specified, it will shadow the default. Property key is the model name (e.g. &#34;AP63&#34;)
         * 
         * @return builder
         * 
         */
        public Builder modelSpecific(@Nullable Output<Map<String,RftemplateModelSpecificArgs>> modelSpecific) {
            $.modelSpecific = modelSpecific;
            return this;
        }

        /**
         * @param modelSpecific overwrites for a specific model. If a band is specified, it will shadow the default. Property key is the model name (e.g. &#34;AP63&#34;)
         * 
         * @return builder
         * 
         */
        public Builder modelSpecific(Map<String,RftemplateModelSpecificArgs> modelSpecific) {
            return modelSpecific(Output.of(modelSpecific));
        }

        /**
         * @param name The name of the RF template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the RF template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param scanningEnabled Whether scanning radio is enabled
         * 
         * @return builder
         * 
         */
        public Builder scanningEnabled(@Nullable Output<Boolean> scanningEnabled) {
            $.scanningEnabled = scanningEnabled;
            return this;
        }

        /**
         * @param scanningEnabled Whether scanning radio is enabled
         * 
         * @return builder
         * 
         */
        public Builder scanningEnabled(Boolean scanningEnabled) {
            return scanningEnabled(Output.of(scanningEnabled));
        }

        public RftemplateState build() {
            return $;
        }
    }

}
