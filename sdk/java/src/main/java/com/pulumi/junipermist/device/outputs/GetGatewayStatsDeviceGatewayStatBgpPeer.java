// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayStatsDeviceGatewayStatBgpPeer {
    /**
     * @return If this is created for evpn overlay
     * 
     */
    private Boolean evpnOverlay;
    /**
     * @return If this is created for overlay
     * 
     */
    private Boolean forOverlay;
    private String localAs;
    private String neighbor;
    private String neighborAs;
    /**
     * @return If it&#39;s another device in the same org
     * 
     */
    private String neighborMac;
    /**
     * @return Node0/node1
     * 
     */
    private String node;
    /**
     * @return Amount of packets received since connection
     * 
     */
    private Integer rxPkts;
    /**
     * @return Number of received routes
     * 
     */
    private Integer rxRoutes;
    /**
     * @return enum: `active`, `connect`, `established`, `idle`, `openConfig`, `openSent`
     * 
     */
    private String state;
    /**
     * @return Epoch (seconds)
     * 
     */
    private Double timestamp;
    /**
     * @return Amount of packets sent since connection
     * 
     */
    private Integer txPkts;
    private Integer txRoutes;
    private Boolean up;
    private Integer uptime;
    private String vrfName;

    private GetGatewayStatsDeviceGatewayStatBgpPeer() {}
    /**
     * @return If this is created for evpn overlay
     * 
     */
    public Boolean evpnOverlay() {
        return this.evpnOverlay;
    }
    /**
     * @return If this is created for overlay
     * 
     */
    public Boolean forOverlay() {
        return this.forOverlay;
    }
    public String localAs() {
        return this.localAs;
    }
    public String neighbor() {
        return this.neighbor;
    }
    public String neighborAs() {
        return this.neighborAs;
    }
    /**
     * @return If it&#39;s another device in the same org
     * 
     */
    public String neighborMac() {
        return this.neighborMac;
    }
    /**
     * @return Node0/node1
     * 
     */
    public String node() {
        return this.node;
    }
    /**
     * @return Amount of packets received since connection
     * 
     */
    public Integer rxPkts() {
        return this.rxPkts;
    }
    /**
     * @return Number of received routes
     * 
     */
    public Integer rxRoutes() {
        return this.rxRoutes;
    }
    /**
     * @return enum: `active`, `connect`, `established`, `idle`, `openConfig`, `openSent`
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Epoch (seconds)
     * 
     */
    public Double timestamp() {
        return this.timestamp;
    }
    /**
     * @return Amount of packets sent since connection
     * 
     */
    public Integer txPkts() {
        return this.txPkts;
    }
    public Integer txRoutes() {
        return this.txRoutes;
    }
    public Boolean up() {
        return this.up;
    }
    public Integer uptime() {
        return this.uptime;
    }
    public String vrfName() {
        return this.vrfName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayStatsDeviceGatewayStatBgpPeer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean evpnOverlay;
        private Boolean forOverlay;
        private String localAs;
        private String neighbor;
        private String neighborAs;
        private String neighborMac;
        private String node;
        private Integer rxPkts;
        private Integer rxRoutes;
        private String state;
        private Double timestamp;
        private Integer txPkts;
        private Integer txRoutes;
        private Boolean up;
        private Integer uptime;
        private String vrfName;
        public Builder() {}
        public Builder(GetGatewayStatsDeviceGatewayStatBgpPeer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.evpnOverlay = defaults.evpnOverlay;
    	      this.forOverlay = defaults.forOverlay;
    	      this.localAs = defaults.localAs;
    	      this.neighbor = defaults.neighbor;
    	      this.neighborAs = defaults.neighborAs;
    	      this.neighborMac = defaults.neighborMac;
    	      this.node = defaults.node;
    	      this.rxPkts = defaults.rxPkts;
    	      this.rxRoutes = defaults.rxRoutes;
    	      this.state = defaults.state;
    	      this.timestamp = defaults.timestamp;
    	      this.txPkts = defaults.txPkts;
    	      this.txRoutes = defaults.txRoutes;
    	      this.up = defaults.up;
    	      this.uptime = defaults.uptime;
    	      this.vrfName = defaults.vrfName;
        }

        @CustomType.Setter
        public Builder evpnOverlay(Boolean evpnOverlay) {
            if (evpnOverlay == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "evpnOverlay");
            }
            this.evpnOverlay = evpnOverlay;
            return this;
        }
        @CustomType.Setter
        public Builder forOverlay(Boolean forOverlay) {
            if (forOverlay == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "forOverlay");
            }
            this.forOverlay = forOverlay;
            return this;
        }
        @CustomType.Setter
        public Builder localAs(String localAs) {
            if (localAs == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "localAs");
            }
            this.localAs = localAs;
            return this;
        }
        @CustomType.Setter
        public Builder neighbor(String neighbor) {
            if (neighbor == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "neighbor");
            }
            this.neighbor = neighbor;
            return this;
        }
        @CustomType.Setter
        public Builder neighborAs(String neighborAs) {
            if (neighborAs == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "neighborAs");
            }
            this.neighborAs = neighborAs;
            return this;
        }
        @CustomType.Setter
        public Builder neighborMac(String neighborMac) {
            if (neighborMac == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "neighborMac");
            }
            this.neighborMac = neighborMac;
            return this;
        }
        @CustomType.Setter
        public Builder node(String node) {
            if (node == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "node");
            }
            this.node = node;
            return this;
        }
        @CustomType.Setter
        public Builder rxPkts(Integer rxPkts) {
            if (rxPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "rxPkts");
            }
            this.rxPkts = rxPkts;
            return this;
        }
        @CustomType.Setter
        public Builder rxRoutes(Integer rxRoutes) {
            if (rxRoutes == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "rxRoutes");
            }
            this.rxRoutes = rxRoutes;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder timestamp(Double timestamp) {
            if (timestamp == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "timestamp");
            }
            this.timestamp = timestamp;
            return this;
        }
        @CustomType.Setter
        public Builder txPkts(Integer txPkts) {
            if (txPkts == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "txPkts");
            }
            this.txPkts = txPkts;
            return this;
        }
        @CustomType.Setter
        public Builder txRoutes(Integer txRoutes) {
            if (txRoutes == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "txRoutes");
            }
            this.txRoutes = txRoutes;
            return this;
        }
        @CustomType.Setter
        public Builder up(Boolean up) {
            if (up == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "up");
            }
            this.up = up;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(Integer uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        @CustomType.Setter
        public Builder vrfName(String vrfName) {
            if (vrfName == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatBgpPeer", "vrfName");
            }
            this.vrfName = vrfName;
            return this;
        }
        public GetGatewayStatsDeviceGatewayStatBgpPeer build() {
            final var _resultValue = new GetGatewayStatsDeviceGatewayStatBgpPeer();
            _resultValue.evpnOverlay = evpnOverlay;
            _resultValue.forOverlay = forOverlay;
            _resultValue.localAs = localAs;
            _resultValue.neighbor = neighbor;
            _resultValue.neighborAs = neighborAs;
            _resultValue.neighborMac = neighborMac;
            _resultValue.node = node;
            _resultValue.rxPkts = rxPkts;
            _resultValue.rxRoutes = rxRoutes;
            _resultValue.state = state;
            _resultValue.timestamp = timestamp;
            _resultValue.txPkts = txPkts;
            _resultValue.txRoutes = txRoutes;
            _resultValue.up = up;
            _resultValue.uptime = uptime;
            _resultValue.vrfName = vrfName;
            return _resultValue;
        }
    }
}
