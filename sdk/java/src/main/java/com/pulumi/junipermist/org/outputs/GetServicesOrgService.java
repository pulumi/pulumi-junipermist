// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.org.outputs.GetServicesOrgServiceSpec;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServicesOrgService {
    /**
     * @return If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
     * 
     */
    private List<String> addresses;
    /**
     * @return When `type`==`app_categories`, list of application categories are available through List App Category Definitions
     * 
     */
    private List<String> appCategories;
    /**
     * @return When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
     * 
     */
    private List<String> appSubcategories;
    /**
     * @return When `type`==`apps`, list of applications are available through:
     *   * List Applications
     *   * List Gateway Applications
     *   * /insight/top_app_by-bytes?wired=true
     * 
     */
    private List<String> apps;
    /**
     * @return 0 means unlimited
     * 
     */
    private Integer clientLimitDown;
    /**
     * @return 0 means unlimited
     * 
     */
    private Integer clientLimitUp;
    /**
     * @return When the object has been created, in epoch
     * 
     */
    private Double createdTime;
    private String description;
    private String dscp;
    /**
     * @return enum: `non_revertable`, `none`, `revertable`
     * 
     */
    private String failoverPolicy;
    /**
     * @return If `type`==`custom`, web filtering
     * 
     */
    private List<String> hostnames;
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    private String id;
    private String maxJitter;
    private String maxLatency;
    private String maxLoss;
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    private Double modifiedTime;
    private String name;
    private String orgId;
    /**
     * @return 0 means unlimited
     * 
     */
    private Integer serviceLimitDown;
    /**
     * @return 0 means unlimited
     * 
     */
    private Integer serviceLimitUp;
    /**
     * @return Whether to enable measure SLE
     * 
     */
    private Boolean sleEnabled;
    /**
     * @return When `type`==`custom`, optional, if it doesn&#39;t exist, http and https is assumed
     * 
     */
    private List<GetServicesOrgServiceSpec> specs;
    private Boolean ssrRelaxedTcpStateEnforcement;
    /**
     * @return when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
     * 
     */
    private String trafficClass;
    /**
     * @return values from List Traffic Types
     * 
     */
    private String trafficType;
    /**
     * @return enum: `app_categories`, `apps`, `custom`, `urls`
     * 
     */
    private String type;
    /**
     * @return When `type`==`urls`, no need for spec as URL can encode the ports being used
     * 
     */
    private List<String> urls;

    private GetServicesOrgService() {}
    /**
     * @return If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
     * 
     */
    public List<String> addresses() {
        return this.addresses;
    }
    /**
     * @return When `type`==`app_categories`, list of application categories are available through List App Category Definitions
     * 
     */
    public List<String> appCategories() {
        return this.appCategories;
    }
    /**
     * @return When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
     * 
     */
    public List<String> appSubcategories() {
        return this.appSubcategories;
    }
    /**
     * @return When `type`==`apps`, list of applications are available through:
     *   * List Applications
     *   * List Gateway Applications
     *   * /insight/top_app_by-bytes?wired=true
     * 
     */
    public List<String> apps() {
        return this.apps;
    }
    /**
     * @return 0 means unlimited
     * 
     */
    public Integer clientLimitDown() {
        return this.clientLimitDown;
    }
    /**
     * @return 0 means unlimited
     * 
     */
    public Integer clientLimitUp() {
        return this.clientLimitUp;
    }
    /**
     * @return When the object has been created, in epoch
     * 
     */
    public Double createdTime() {
        return this.createdTime;
    }
    public String description() {
        return this.description;
    }
    public String dscp() {
        return this.dscp;
    }
    /**
     * @return enum: `non_revertable`, `none`, `revertable`
     * 
     */
    public String failoverPolicy() {
        return this.failoverPolicy;
    }
    /**
     * @return If `type`==`custom`, web filtering
     * 
     */
    public List<String> hostnames() {
        return this.hostnames;
    }
    /**
     * @return Unique ID of the object instance in the Mist Organization
     * 
     */
    public String id() {
        return this.id;
    }
    public String maxJitter() {
        return this.maxJitter;
    }
    public String maxLatency() {
        return this.maxLatency;
    }
    public String maxLoss() {
        return this.maxLoss;
    }
    /**
     * @return When the object has been modified for the last time, in epoch
     * 
     */
    public Double modifiedTime() {
        return this.modifiedTime;
    }
    public String name() {
        return this.name;
    }
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return 0 means unlimited
     * 
     */
    public Integer serviceLimitDown() {
        return this.serviceLimitDown;
    }
    /**
     * @return 0 means unlimited
     * 
     */
    public Integer serviceLimitUp() {
        return this.serviceLimitUp;
    }
    /**
     * @return Whether to enable measure SLE
     * 
     */
    public Boolean sleEnabled() {
        return this.sleEnabled;
    }
    /**
     * @return When `type`==`custom`, optional, if it doesn&#39;t exist, http and https is assumed
     * 
     */
    public List<GetServicesOrgServiceSpec> specs() {
        return this.specs;
    }
    public Boolean ssrRelaxedTcpStateEnforcement() {
        return this.ssrRelaxedTcpStateEnforcement;
    }
    /**
     * @return when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
     * 
     */
    public String trafficClass() {
        return this.trafficClass;
    }
    /**
     * @return values from List Traffic Types
     * 
     */
    public String trafficType() {
        return this.trafficType;
    }
    /**
     * @return enum: `app_categories`, `apps`, `custom`, `urls`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return When `type`==`urls`, no need for spec as URL can encode the ports being used
     * 
     */
    public List<String> urls() {
        return this.urls;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServicesOrgService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> addresses;
        private List<String> appCategories;
        private List<String> appSubcategories;
        private List<String> apps;
        private Integer clientLimitDown;
        private Integer clientLimitUp;
        private Double createdTime;
        private String description;
        private String dscp;
        private String failoverPolicy;
        private List<String> hostnames;
        private String id;
        private String maxJitter;
        private String maxLatency;
        private String maxLoss;
        private Double modifiedTime;
        private String name;
        private String orgId;
        private Integer serviceLimitDown;
        private Integer serviceLimitUp;
        private Boolean sleEnabled;
        private List<GetServicesOrgServiceSpec> specs;
        private Boolean ssrRelaxedTcpStateEnforcement;
        private String trafficClass;
        private String trafficType;
        private String type;
        private List<String> urls;
        public Builder() {}
        public Builder(GetServicesOrgService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addresses = defaults.addresses;
    	      this.appCategories = defaults.appCategories;
    	      this.appSubcategories = defaults.appSubcategories;
    	      this.apps = defaults.apps;
    	      this.clientLimitDown = defaults.clientLimitDown;
    	      this.clientLimitUp = defaults.clientLimitUp;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.dscp = defaults.dscp;
    	      this.failoverPolicy = defaults.failoverPolicy;
    	      this.hostnames = defaults.hostnames;
    	      this.id = defaults.id;
    	      this.maxJitter = defaults.maxJitter;
    	      this.maxLatency = defaults.maxLatency;
    	      this.maxLoss = defaults.maxLoss;
    	      this.modifiedTime = defaults.modifiedTime;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.serviceLimitDown = defaults.serviceLimitDown;
    	      this.serviceLimitUp = defaults.serviceLimitUp;
    	      this.sleEnabled = defaults.sleEnabled;
    	      this.specs = defaults.specs;
    	      this.ssrRelaxedTcpStateEnforcement = defaults.ssrRelaxedTcpStateEnforcement;
    	      this.trafficClass = defaults.trafficClass;
    	      this.trafficType = defaults.trafficType;
    	      this.type = defaults.type;
    	      this.urls = defaults.urls;
        }

        @CustomType.Setter
        public Builder addresses(List<String> addresses) {
            if (addresses == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "addresses");
            }
            this.addresses = addresses;
            return this;
        }
        public Builder addresses(String... addresses) {
            return addresses(List.of(addresses));
        }
        @CustomType.Setter
        public Builder appCategories(List<String> appCategories) {
            if (appCategories == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "appCategories");
            }
            this.appCategories = appCategories;
            return this;
        }
        public Builder appCategories(String... appCategories) {
            return appCategories(List.of(appCategories));
        }
        @CustomType.Setter
        public Builder appSubcategories(List<String> appSubcategories) {
            if (appSubcategories == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "appSubcategories");
            }
            this.appSubcategories = appSubcategories;
            return this;
        }
        public Builder appSubcategories(String... appSubcategories) {
            return appSubcategories(List.of(appSubcategories));
        }
        @CustomType.Setter
        public Builder apps(List<String> apps) {
            if (apps == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "apps");
            }
            this.apps = apps;
            return this;
        }
        public Builder apps(String... apps) {
            return apps(List.of(apps));
        }
        @CustomType.Setter
        public Builder clientLimitDown(Integer clientLimitDown) {
            if (clientLimitDown == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "clientLimitDown");
            }
            this.clientLimitDown = clientLimitDown;
            return this;
        }
        @CustomType.Setter
        public Builder clientLimitUp(Integer clientLimitUp) {
            if (clientLimitUp == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "clientLimitUp");
            }
            this.clientLimitUp = clientLimitUp;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(Double createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dscp(String dscp) {
            if (dscp == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "dscp");
            }
            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder failoverPolicy(String failoverPolicy) {
            if (failoverPolicy == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "failoverPolicy");
            }
            this.failoverPolicy = failoverPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder hostnames(List<String> hostnames) {
            if (hostnames == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "hostnames");
            }
            this.hostnames = hostnames;
            return this;
        }
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxJitter(String maxJitter) {
            if (maxJitter == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "maxJitter");
            }
            this.maxJitter = maxJitter;
            return this;
        }
        @CustomType.Setter
        public Builder maxLatency(String maxLatency) {
            if (maxLatency == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "maxLatency");
            }
            this.maxLatency = maxLatency;
            return this;
        }
        @CustomType.Setter
        public Builder maxLoss(String maxLoss) {
            if (maxLoss == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "maxLoss");
            }
            this.maxLoss = maxLoss;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedTime(Double modifiedTime) {
            if (modifiedTime == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "modifiedTime");
            }
            this.modifiedTime = modifiedTime;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLimitDown(Integer serviceLimitDown) {
            if (serviceLimitDown == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "serviceLimitDown");
            }
            this.serviceLimitDown = serviceLimitDown;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLimitUp(Integer serviceLimitUp) {
            if (serviceLimitUp == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "serviceLimitUp");
            }
            this.serviceLimitUp = serviceLimitUp;
            return this;
        }
        @CustomType.Setter
        public Builder sleEnabled(Boolean sleEnabled) {
            if (sleEnabled == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "sleEnabled");
            }
            this.sleEnabled = sleEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder specs(List<GetServicesOrgServiceSpec> specs) {
            if (specs == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "specs");
            }
            this.specs = specs;
            return this;
        }
        public Builder specs(GetServicesOrgServiceSpec... specs) {
            return specs(List.of(specs));
        }
        @CustomType.Setter
        public Builder ssrRelaxedTcpStateEnforcement(Boolean ssrRelaxedTcpStateEnforcement) {
            if (ssrRelaxedTcpStateEnforcement == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "ssrRelaxedTcpStateEnforcement");
            }
            this.ssrRelaxedTcpStateEnforcement = ssrRelaxedTcpStateEnforcement;
            return this;
        }
        @CustomType.Setter
        public Builder trafficClass(String trafficClass) {
            if (trafficClass == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "trafficClass");
            }
            this.trafficClass = trafficClass;
            return this;
        }
        @CustomType.Setter
        public Builder trafficType(String trafficType) {
            if (trafficType == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "trafficType");
            }
            this.trafficType = trafficType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder urls(List<String> urls) {
            if (urls == null) {
              throw new MissingRequiredPropertyException("GetServicesOrgService", "urls");
            }
            this.urls = urls;
            return this;
        }
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }
        public GetServicesOrgService build() {
            final var _resultValue = new GetServicesOrgService();
            _resultValue.addresses = addresses;
            _resultValue.appCategories = appCategories;
            _resultValue.appSubcategories = appSubcategories;
            _resultValue.apps = apps;
            _resultValue.clientLimitDown = clientLimitDown;
            _resultValue.clientLimitUp = clientLimitUp;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.dscp = dscp;
            _resultValue.failoverPolicy = failoverPolicy;
            _resultValue.hostnames = hostnames;
            _resultValue.id = id;
            _resultValue.maxJitter = maxJitter;
            _resultValue.maxLatency = maxLatency;
            _resultValue.maxLoss = maxLoss;
            _resultValue.modifiedTime = modifiedTime;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.serviceLimitDown = serviceLimitDown;
            _resultValue.serviceLimitUp = serviceLimitUp;
            _resultValue.sleEnabled = sleEnabled;
            _resultValue.specs = specs;
            _resultValue.ssrRelaxedTcpStateEnforcement = ssrRelaxedTcpStateEnforcement;
            _resultValue.trafficClass = trafficClass;
            _resultValue.trafficType = trafficType;
            _resultValue.type = type;
            _resultValue.urls = urls;
            return _resultValue;
        }
    }
}
