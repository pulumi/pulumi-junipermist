// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingSleThresholdsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingSleThresholdsArgs Empty = new SettingSleThresholdsArgs();

    /**
     * Capacity, in %
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Integer> capacity;

    /**
     * @return Capacity, in %
     * 
     */
    public Optional<Output<Integer>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * Coverage, in dBm
     * 
     */
    @Import(name="coverage")
    private @Nullable Output<Integer> coverage;

    /**
     * @return Coverage, in dBm
     * 
     */
    public Optional<Output<Integer>> coverage() {
        return Optional.ofNullable(this.coverage);
    }

    /**
     * Throughput, in Mbps
     * 
     */
    @Import(name="throughput")
    private @Nullable Output<Integer> throughput;

    /**
     * @return Throughput, in Mbps
     * 
     */
    public Optional<Output<Integer>> throughput() {
        return Optional.ofNullable(this.throughput);
    }

    /**
     * Time to connect, in seconds
     * 
     */
    @Import(name="timetoconnect")
    private @Nullable Output<Integer> timetoconnect;

    /**
     * @return Time to connect, in seconds
     * 
     */
    public Optional<Output<Integer>> timetoconnect() {
        return Optional.ofNullable(this.timetoconnect);
    }

    private SettingSleThresholdsArgs() {}

    private SettingSleThresholdsArgs(SettingSleThresholdsArgs $) {
        this.capacity = $.capacity;
        this.coverage = $.coverage;
        this.throughput = $.throughput;
        this.timetoconnect = $.timetoconnect;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingSleThresholdsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingSleThresholdsArgs $;

        public Builder() {
            $ = new SettingSleThresholdsArgs();
        }

        public Builder(SettingSleThresholdsArgs defaults) {
            $ = new SettingSleThresholdsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity Capacity, in %
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity Capacity, in %
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param coverage Coverage, in dBm
         * 
         * @return builder
         * 
         */
        public Builder coverage(@Nullable Output<Integer> coverage) {
            $.coverage = coverage;
            return this;
        }

        /**
         * @param coverage Coverage, in dBm
         * 
         * @return builder
         * 
         */
        public Builder coverage(Integer coverage) {
            return coverage(Output.of(coverage));
        }

        /**
         * @param throughput Throughput, in Mbps
         * 
         * @return builder
         * 
         */
        public Builder throughput(@Nullable Output<Integer> throughput) {
            $.throughput = throughput;
            return this;
        }

        /**
         * @param throughput Throughput, in Mbps
         * 
         * @return builder
         * 
         */
        public Builder throughput(Integer throughput) {
            return throughput(Output.of(throughput));
        }

        /**
         * @param timetoconnect Time to connect, in seconds
         * 
         * @return builder
         * 
         */
        public Builder timetoconnect(@Nullable Output<Integer> timetoconnect) {
            $.timetoconnect = timetoconnect;
            return this;
        }

        /**
         * @param timetoconnect Time to connect, in seconds
         * 
         * @return builder
         * 
         */
        public Builder timetoconnect(Integer timetoconnect) {
            return timetoconnect(Output.of(timetoconnect));
        }

        public SettingSleThresholdsArgs build() {
            return $;
        }
    }

}
