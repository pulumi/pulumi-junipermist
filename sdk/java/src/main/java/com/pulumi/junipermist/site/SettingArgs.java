// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.site;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.junipermist.site.inputs.SettingAnalyticArgs;
import com.pulumi.junipermist.site.inputs.SettingAutoUpgradeArgs;
import com.pulumi.junipermist.site.inputs.SettingAutoUpgradeEslArgs;
import com.pulumi.junipermist.site.inputs.SettingBleConfigArgs;
import com.pulumi.junipermist.site.inputs.SettingConfigPushPolicyArgs;
import com.pulumi.junipermist.site.inputs.SettingCriticalUrlMonitoringArgs;
import com.pulumi.junipermist.site.inputs.SettingEngagementArgs;
import com.pulumi.junipermist.site.inputs.SettingGatewayMgmtArgs;
import com.pulumi.junipermist.site.inputs.SettingJuniperSrxArgs;
import com.pulumi.junipermist.site.inputs.SettingLedArgs;
import com.pulumi.junipermist.site.inputs.SettingMarvisArgs;
import com.pulumi.junipermist.site.inputs.SettingOccupancyArgs;
import com.pulumi.junipermist.site.inputs.SettingProxyArgs;
import com.pulumi.junipermist.site.inputs.SettingRogueArgs;
import com.pulumi.junipermist.site.inputs.SettingRtsaArgs;
import com.pulumi.junipermist.site.inputs.SettingSimpleAlertArgs;
import com.pulumi.junipermist.site.inputs.SettingSkyatpArgs;
import com.pulumi.junipermist.site.inputs.SettingSleThresholdsArgs;
import com.pulumi.junipermist.site.inputs.SettingSrxAppArgs;
import com.pulumi.junipermist.site.inputs.SettingSsrArgs;
import com.pulumi.junipermist.site.inputs.SettingSyntheticTestArgs;
import com.pulumi.junipermist.site.inputs.SettingUplinkPortConfigArgs;
import com.pulumi.junipermist.site.inputs.SettingVnaArgs;
import com.pulumi.junipermist.site.inputs.SettingVsInstanceArgs;
import com.pulumi.junipermist.site.inputs.SettingWanVnaArgs;
import com.pulumi.junipermist.site.inputs.SettingWidsArgs;
import com.pulumi.junipermist.site.inputs.SettingWifiArgs;
import com.pulumi.junipermist.site.inputs.SettingWiredVnaArgs;
import com.pulumi.junipermist.site.inputs.SettingZoneOccupancyAlertArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SettingArgs Empty = new SettingArgs();

    @Import(name="analytic")
    private @Nullable Output<SettingAnalyticArgs> analytic;

    public Optional<Output<SettingAnalyticArgs>> analytic() {
        return Optional.ofNullable(this.analytic);
    }

    /**
     * Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
     * `device_updown_threshold` is ignored.
     * 
     */
    @Import(name="apUpdownThreshold")
    private @Nullable Output<Integer> apUpdownThreshold;

    /**
     * @return Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
     * `device_updown_threshold` is ignored.
     * 
     */
    public Optional<Output<Integer>> apUpdownThreshold() {
        return Optional.ofNullable(this.apUpdownThreshold);
    }

    /**
     * Auto Upgrade Settings
     * 
     */
    @Import(name="autoUpgrade")
    private @Nullable Output<SettingAutoUpgradeArgs> autoUpgrade;

    /**
     * @return Auto Upgrade Settings
     * 
     */
    public Optional<Output<SettingAutoUpgradeArgs>> autoUpgrade() {
        return Optional.ofNullable(this.autoUpgrade);
    }

    /**
     * auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware
     * upgrade
     * 
     */
    @Import(name="autoUpgradeEsl")
    private @Nullable Output<SettingAutoUpgradeEslArgs> autoUpgradeEsl;

    /**
     * @return auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware
     * upgrade
     * 
     */
    public Optional<Output<SettingAutoUpgradeEslArgs>> autoUpgradeEsl() {
        return Optional.ofNullable(this.autoUpgradeEsl);
    }

    /**
     * enable threshold-based bgp neighbor down delivery.
     * 
     */
    @Import(name="bgpNeighborUpdownThreshold")
    private @Nullable Output<Integer> bgpNeighborUpdownThreshold;

    /**
     * @return enable threshold-based bgp neighbor down delivery.
     * 
     */
    public Optional<Output<Integer>> bgpNeighborUpdownThreshold() {
        return Optional.ofNullable(this.bgpNeighborUpdownThreshold);
    }

    /**
     * BLE AP settings
     * 
     */
    @Import(name="bleConfig")
    private @Nullable Output<SettingBleConfigArgs> bleConfig;

    /**
     * @return BLE AP settings
     * 
     */
    public Optional<Output<SettingBleConfigArgs>> bleConfig() {
        return Optional.ofNullable(this.bleConfig);
    }

    /**
     * Whether to enable ap auto config revert
     * 
     */
    @Import(name="configAutoRevert")
    private @Nullable Output<Boolean> configAutoRevert;

    /**
     * @return Whether to enable ap auto config revert
     * 
     */
    public Optional<Output<Boolean>> configAutoRevert() {
        return Optional.ofNullable(this.configAutoRevert);
    }

    /**
     * Mist also uses some heuristic rules to prevent destructive configs from being pushed
     * 
     */
    @Import(name="configPushPolicy")
    private @Nullable Output<SettingConfigPushPolicyArgs> configPushPolicy;

    /**
     * @return Mist also uses some heuristic rules to prevent destructive configs from being pushed
     * 
     */
    public Optional<Output<SettingConfigPushPolicyArgs>> configPushPolicy() {
        return Optional.ofNullable(this.configPushPolicy);
    }

    /**
     * You can define some URLs that&#39;s critical to site operations the latency will be captured and considered for site health
     * 
     */
    @Import(name="criticalUrlMonitoring")
    private @Nullable Output<SettingCriticalUrlMonitoringArgs> criticalUrlMonitoring;

    /**
     * @return You can define some URLs that&#39;s critical to site operations the latency will be captured and considered for site health
     * 
     */
    public Optional<Output<SettingCriticalUrlMonitoringArgs>> criticalUrlMonitoring() {
        return Optional.ofNullable(this.criticalUrlMonitoring);
    }

    /**
     * Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
     * 
     */
    @Import(name="defaultPortUsage")
    private @Nullable Output<String> defaultPortUsage;

    /**
     * @return Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
     * 
     */
    public Optional<Output<String>> defaultPortUsage() {
        return Optional.ofNullable(this.defaultPortUsage);
    }

    /**
     * By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device
     * type is desired, use the following
     * 
     */
    @Import(name="deviceUpdownThreshold")
    private @Nullable Output<Integer> deviceUpdownThreshold;

    /**
     * @return By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device
     * type is desired, use the following
     * 
     */
    public Optional<Output<Integer>> deviceUpdownThreshold() {
        return Optional.ofNullable(this.deviceUpdownThreshold);
    }

    @Import(name="enableUnii4")
    private @Nullable Output<Boolean> enableUnii4;

    public Optional<Output<Boolean>> enableUnii4() {
        return Optional.ofNullable(this.enableUnii4);
    }

    /**
     * **Note**: if hours does not exist, it&#39;s treated as everyday of the week, 00:00-23:59. Currently, we don&#39;t allow multiple
     * ranges for the same day
     * 
     */
    @Import(name="engagement")
    private @Nullable Output<SettingEngagementArgs> engagement;

    /**
     * @return **Note**: if hours does not exist, it&#39;s treated as everyday of the week, 00:00-23:59. Currently, we don&#39;t allow multiple
     * ranges for the same day
     * 
     */
    public Optional<Output<SettingEngagementArgs>> engagement() {
        return Optional.ofNullable(this.engagement);
    }

    /**
     * Gateway Site settings
     * 
     */
    @Import(name="gatewayMgmt")
    private @Nullable Output<SettingGatewayMgmtArgs> gatewayMgmt;

    /**
     * @return Gateway Site settings
     * 
     */
    public Optional<Output<SettingGatewayMgmtArgs>> gatewayMgmt() {
        return Optional.ofNullable(this.gatewayMgmt);
    }

    /**
     * Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
     * `device_updown_threshold` is ignored.
     * 
     */
    @Import(name="gatewayUpdownThreshold")
    private @Nullable Output<Integer> gatewayUpdownThreshold;

    /**
     * @return Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
     * `device_updown_threshold` is ignored.
     * 
     */
    public Optional<Output<Integer>> gatewayUpdownThreshold() {
        return Optional.ofNullable(this.gatewayUpdownThreshold);
    }

    @Import(name="juniperSrx")
    private @Nullable Output<SettingJuniperSrxArgs> juniperSrx;

    public Optional<Output<SettingJuniperSrxArgs>> juniperSrx() {
        return Optional.ofNullable(this.juniperSrx);
    }

    /**
     * LED AP settings
     * 
     */
    @Import(name="led")
    private @Nullable Output<SettingLedArgs> led;

    /**
     * @return LED AP settings
     * 
     */
    public Optional<Output<SettingLedArgs>> led() {
        return Optional.ofNullable(this.led);
    }

    @Import(name="marvis")
    private @Nullable Output<SettingMarvisArgs> marvis;

    public Optional<Output<SettingMarvisArgs>> marvis() {
        return Optional.ofNullable(this.marvis);
    }

    /**
     * Occupancy Analytics settings
     * 
     */
    @Import(name="occupancy")
    private @Nullable Output<SettingOccupancyArgs> occupancy;

    /**
     * @return Occupancy Analytics settings
     * 
     */
    public Optional<Output<SettingOccupancyArgs>> occupancy() {
        return Optional.ofNullable(this.occupancy);
    }

    /**
     * Whether to store the config on AP
     * 
     */
    @Import(name="persistConfigOnDevice")
    private @Nullable Output<Boolean> persistConfigOnDevice;

    /**
     * @return Whether to store the config on AP
     * 
     */
    public Optional<Output<Boolean>> persistConfigOnDevice() {
        return Optional.ofNullable(this.persistConfigOnDevice);
    }

    /**
     * Proxy Configuration to talk to Mist
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<SettingProxyArgs> proxy;

    /**
     * @return Proxy Configuration to talk to Mist
     * 
     */
    public Optional<Output<SettingProxyArgs>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the
     * existing configuration will be removed.
     * 
     */
    @Import(name="removeExistingConfigs")
    private @Nullable Output<Boolean> removeExistingConfigs;

    /**
     * @return By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the
     * existing configuration will be removed.
     * 
     */
    public Optional<Output<Boolean>> removeExistingConfigs() {
        return Optional.ofNullable(this.removeExistingConfigs);
    }

    /**
     * Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
     * serial number, battery %, temperature, humidity)
     * 
     */
    @Import(name="reportGatt")
    private @Nullable Output<Boolean> reportGatt;

    /**
     * @return Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
     * serial number, battery %, temperature, humidity)
     * 
     */
    public Optional<Output<Boolean>> reportGatt() {
        return Optional.ofNullable(this.reportGatt);
    }

    /**
     * Rogue site settings
     * 
     */
    @Import(name="rogue")
    private @Nullable Output<SettingRogueArgs> rogue;

    /**
     * @return Rogue site settings
     * 
     */
    public Optional<Output<SettingRogueArgs>> rogue() {
        return Optional.ofNullable(this.rogue);
    }

    /**
     * Managed mobility
     * 
     */
    @Import(name="rtsa")
    private @Nullable Output<SettingRtsaArgs> rtsa;

    /**
     * @return Managed mobility
     * 
     */
    public Optional<Output<SettingRtsaArgs>> rtsa() {
        return Optional.ofNullable(this.rtsa);
    }

    /**
     * Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
     * window, there are more than Y distinct client encountering over X failures
     * 
     */
    @Import(name="simpleAlert")
    private @Nullable Output<SettingSimpleAlertArgs> simpleAlert;

    /**
     * @return Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
     * window, there are more than Y distinct client encountering over X failures
     * 
     */
    public Optional<Output<SettingSimpleAlertArgs>> simpleAlert() {
        return Optional.ofNullable(this.simpleAlert);
    }

    @Import(name="siteId", required=true)
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }

    @Import(name="skyatp")
    private @Nullable Output<SettingSkyatpArgs> skyatp;

    public Optional<Output<SettingSkyatpArgs>> skyatp() {
        return Optional.ofNullable(this.skyatp);
    }

    @Import(name="sleThresholds")
    private @Nullable Output<SettingSleThresholdsArgs> sleThresholds;

    public Optional<Output<SettingSleThresholdsArgs>> sleThresholds() {
        return Optional.ofNullable(this.sleThresholds);
    }

    @Import(name="srxApp")
    private @Nullable Output<SettingSrxAppArgs> srxApp;

    public Optional<Output<SettingSrxAppArgs>> srxApp() {
        return Optional.ofNullable(this.srxApp);
    }

    /**
     * When limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
     * Org:Setting)
     * 
     */
    @Import(name="sshKeys")
    private @Nullable Output<List<String>> sshKeys;

    /**
     * @return When limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
     * Org:Setting)
     * 
     */
    public Optional<Output<List<String>>> sshKeys() {
        return Optional.ofNullable(this.sshKeys);
    }

    @Import(name="ssr")
    private @Nullable Output<SettingSsrArgs> ssr;

    public Optional<Output<SettingSsrArgs>> ssr() {
        return Optional.ofNullable(this.ssr);
    }

    /**
     * Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
     * `device_updown_threshold` is ignored.
     * 
     */
    @Import(name="switchUpdownThreshold")
    private @Nullable Output<Integer> switchUpdownThreshold;

    /**
     * @return Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
     * `device_updown_threshold` is ignored.
     * 
     */
    public Optional<Output<Integer>> switchUpdownThreshold() {
        return Optional.ofNullable(this.switchUpdownThreshold);
    }

    @Import(name="syntheticTest")
    private @Nullable Output<SettingSyntheticTestArgs> syntheticTest;

    public Optional<Output<SettingSyntheticTestArgs>> syntheticTest() {
        return Optional.ofNullable(this.syntheticTest);
    }

    /**
     * Whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
     * 
     */
    @Import(name="trackAnonymousDevices")
    private @Nullable Output<Boolean> trackAnonymousDevices;

    /**
     * @return Whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
     * 
     */
    public Optional<Output<Boolean>> trackAnonymousDevices() {
        return Optional.ofNullable(this.trackAnonymousDevices);
    }

    /**
     * AP Uplink port configuration
     * 
     */
    @Import(name="uplinkPortConfig")
    private @Nullable Output<SettingUplinkPortConfigArgs> uplinkPortConfig;

    /**
     * @return AP Uplink port configuration
     * 
     */
    public Optional<Output<SettingUplinkPortConfigArgs>> uplinkPortConfig() {
        return Optional.ofNullable(this.uplinkPortConfig);
    }

    /**
     * Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    @Import(name="vars")
    private @Nullable Output<Map<String,String>> vars;

    /**
     * @return Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     * 
     */
    public Optional<Output<Map<String,String>>> vars() {
        return Optional.ofNullable(this.vars);
    }

    @Import(name="vna")
    private @Nullable Output<SettingVnaArgs> vna;

    public Optional<Output<SettingVnaArgs>> vna() {
        return Optional.ofNullable(this.vna);
    }

    /**
     * enable threshold-based vpn path down delivery.
     * 
     */
    @Import(name="vpnPathUpdownThreshold")
    private @Nullable Output<Integer> vpnPathUpdownThreshold;

    /**
     * @return enable threshold-based vpn path down delivery.
     * 
     */
    public Optional<Output<Integer>> vpnPathUpdownThreshold() {
        return Optional.ofNullable(this.vpnPathUpdownThreshold);
    }

    /**
     * enable threshold-based vpn peer down delivery.
     * 
     */
    @Import(name="vpnPeerUpdownThreshold")
    private @Nullable Output<Integer> vpnPeerUpdownThreshold;

    /**
     * @return enable threshold-based vpn peer down delivery.
     * 
     */
    public Optional<Output<Integer>> vpnPeerUpdownThreshold() {
        return Optional.ofNullable(this.vpnPeerUpdownThreshold);
    }

    /**
     * Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
     * 
     */
    @Import(name="vsInstance")
    private @Nullable Output<Map<String,SettingVsInstanceArgs>> vsInstance;

    /**
     * @return Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
     * 
     */
    public Optional<Output<Map<String,SettingVsInstanceArgs>>> vsInstance() {
        return Optional.ofNullable(this.vsInstance);
    }

    @Import(name="wanVna")
    private @Nullable Output<SettingWanVnaArgs> wanVna;

    public Optional<Output<SettingWanVnaArgs>> wanVna() {
        return Optional.ofNullable(this.wanVna);
    }

    /**
     * WIDS site settings
     * 
     */
    @Import(name="wids")
    private @Nullable Output<SettingWidsArgs> wids;

    /**
     * @return WIDS site settings
     * 
     */
    public Optional<Output<SettingWidsArgs>> wids() {
        return Optional.ofNullable(this.wids);
    }

    /**
     * Wi-Fi site settings
     * 
     */
    @Import(name="wifi")
    private @Nullable Output<SettingWifiArgs> wifi;

    /**
     * @return Wi-Fi site settings
     * 
     */
    public Optional<Output<SettingWifiArgs>> wifi() {
        return Optional.ofNullable(this.wifi);
    }

    @Import(name="wiredVna")
    private @Nullable Output<SettingWiredVnaArgs> wiredVna;

    public Optional<Output<SettingWiredVnaArgs>> wiredVna() {
        return Optional.ofNullable(this.wiredVna);
    }

    /**
     * Zone Occupancy alert site settings
     * 
     */
    @Import(name="zoneOccupancyAlert")
    private @Nullable Output<SettingZoneOccupancyAlertArgs> zoneOccupancyAlert;

    /**
     * @return Zone Occupancy alert site settings
     * 
     */
    public Optional<Output<SettingZoneOccupancyAlertArgs>> zoneOccupancyAlert() {
        return Optional.ofNullable(this.zoneOccupancyAlert);
    }

    private SettingArgs() {}

    private SettingArgs(SettingArgs $) {
        this.analytic = $.analytic;
        this.apUpdownThreshold = $.apUpdownThreshold;
        this.autoUpgrade = $.autoUpgrade;
        this.autoUpgradeEsl = $.autoUpgradeEsl;
        this.bgpNeighborUpdownThreshold = $.bgpNeighborUpdownThreshold;
        this.bleConfig = $.bleConfig;
        this.configAutoRevert = $.configAutoRevert;
        this.configPushPolicy = $.configPushPolicy;
        this.criticalUrlMonitoring = $.criticalUrlMonitoring;
        this.defaultPortUsage = $.defaultPortUsage;
        this.deviceUpdownThreshold = $.deviceUpdownThreshold;
        this.enableUnii4 = $.enableUnii4;
        this.engagement = $.engagement;
        this.gatewayMgmt = $.gatewayMgmt;
        this.gatewayUpdownThreshold = $.gatewayUpdownThreshold;
        this.juniperSrx = $.juniperSrx;
        this.led = $.led;
        this.marvis = $.marvis;
        this.occupancy = $.occupancy;
        this.persistConfigOnDevice = $.persistConfigOnDevice;
        this.proxy = $.proxy;
        this.removeExistingConfigs = $.removeExistingConfigs;
        this.reportGatt = $.reportGatt;
        this.rogue = $.rogue;
        this.rtsa = $.rtsa;
        this.simpleAlert = $.simpleAlert;
        this.siteId = $.siteId;
        this.skyatp = $.skyatp;
        this.sleThresholds = $.sleThresholds;
        this.srxApp = $.srxApp;
        this.sshKeys = $.sshKeys;
        this.ssr = $.ssr;
        this.switchUpdownThreshold = $.switchUpdownThreshold;
        this.syntheticTest = $.syntheticTest;
        this.trackAnonymousDevices = $.trackAnonymousDevices;
        this.uplinkPortConfig = $.uplinkPortConfig;
        this.vars = $.vars;
        this.vna = $.vna;
        this.vpnPathUpdownThreshold = $.vpnPathUpdownThreshold;
        this.vpnPeerUpdownThreshold = $.vpnPeerUpdownThreshold;
        this.vsInstance = $.vsInstance;
        this.wanVna = $.wanVna;
        this.wids = $.wids;
        this.wifi = $.wifi;
        this.wiredVna = $.wiredVna;
        this.zoneOccupancyAlert = $.zoneOccupancyAlert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SettingArgs $;

        public Builder() {
            $ = new SettingArgs();
        }

        public Builder(SettingArgs defaults) {
            $ = new SettingArgs(Objects.requireNonNull(defaults));
        }

        public Builder analytic(@Nullable Output<SettingAnalyticArgs> analytic) {
            $.analytic = analytic;
            return this;
        }

        public Builder analytic(SettingAnalyticArgs analytic) {
            return analytic(Output.of(analytic));
        }

        /**
         * @param apUpdownThreshold Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
         * `device_updown_threshold` is ignored.
         * 
         * @return builder
         * 
         */
        public Builder apUpdownThreshold(@Nullable Output<Integer> apUpdownThreshold) {
            $.apUpdownThreshold = apUpdownThreshold;
            return this;
        }

        /**
         * @param apUpdownThreshold Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
         * `device_updown_threshold` is ignored.
         * 
         * @return builder
         * 
         */
        public Builder apUpdownThreshold(Integer apUpdownThreshold) {
            return apUpdownThreshold(Output.of(apUpdownThreshold));
        }

        /**
         * @param autoUpgrade Auto Upgrade Settings
         * 
         * @return builder
         * 
         */
        public Builder autoUpgrade(@Nullable Output<SettingAutoUpgradeArgs> autoUpgrade) {
            $.autoUpgrade = autoUpgrade;
            return this;
        }

        /**
         * @param autoUpgrade Auto Upgrade Settings
         * 
         * @return builder
         * 
         */
        public Builder autoUpgrade(SettingAutoUpgradeArgs autoUpgrade) {
            return autoUpgrade(Output.of(autoUpgrade));
        }

        /**
         * @param autoUpgradeEsl auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware
         * upgrade
         * 
         * @return builder
         * 
         */
        public Builder autoUpgradeEsl(@Nullable Output<SettingAutoUpgradeEslArgs> autoUpgradeEsl) {
            $.autoUpgradeEsl = autoUpgradeEsl;
            return this;
        }

        /**
         * @param autoUpgradeEsl auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware
         * upgrade
         * 
         * @return builder
         * 
         */
        public Builder autoUpgradeEsl(SettingAutoUpgradeEslArgs autoUpgradeEsl) {
            return autoUpgradeEsl(Output.of(autoUpgradeEsl));
        }

        /**
         * @param bgpNeighborUpdownThreshold enable threshold-based bgp neighbor down delivery.
         * 
         * @return builder
         * 
         */
        public Builder bgpNeighborUpdownThreshold(@Nullable Output<Integer> bgpNeighborUpdownThreshold) {
            $.bgpNeighborUpdownThreshold = bgpNeighborUpdownThreshold;
            return this;
        }

        /**
         * @param bgpNeighborUpdownThreshold enable threshold-based bgp neighbor down delivery.
         * 
         * @return builder
         * 
         */
        public Builder bgpNeighborUpdownThreshold(Integer bgpNeighborUpdownThreshold) {
            return bgpNeighborUpdownThreshold(Output.of(bgpNeighborUpdownThreshold));
        }

        /**
         * @param bleConfig BLE AP settings
         * 
         * @return builder
         * 
         */
        public Builder bleConfig(@Nullable Output<SettingBleConfigArgs> bleConfig) {
            $.bleConfig = bleConfig;
            return this;
        }

        /**
         * @param bleConfig BLE AP settings
         * 
         * @return builder
         * 
         */
        public Builder bleConfig(SettingBleConfigArgs bleConfig) {
            return bleConfig(Output.of(bleConfig));
        }

        /**
         * @param configAutoRevert Whether to enable ap auto config revert
         * 
         * @return builder
         * 
         */
        public Builder configAutoRevert(@Nullable Output<Boolean> configAutoRevert) {
            $.configAutoRevert = configAutoRevert;
            return this;
        }

        /**
         * @param configAutoRevert Whether to enable ap auto config revert
         * 
         * @return builder
         * 
         */
        public Builder configAutoRevert(Boolean configAutoRevert) {
            return configAutoRevert(Output.of(configAutoRevert));
        }

        /**
         * @param configPushPolicy Mist also uses some heuristic rules to prevent destructive configs from being pushed
         * 
         * @return builder
         * 
         */
        public Builder configPushPolicy(@Nullable Output<SettingConfigPushPolicyArgs> configPushPolicy) {
            $.configPushPolicy = configPushPolicy;
            return this;
        }

        /**
         * @param configPushPolicy Mist also uses some heuristic rules to prevent destructive configs from being pushed
         * 
         * @return builder
         * 
         */
        public Builder configPushPolicy(SettingConfigPushPolicyArgs configPushPolicy) {
            return configPushPolicy(Output.of(configPushPolicy));
        }

        /**
         * @param criticalUrlMonitoring You can define some URLs that&#39;s critical to site operations the latency will be captured and considered for site health
         * 
         * @return builder
         * 
         */
        public Builder criticalUrlMonitoring(@Nullable Output<SettingCriticalUrlMonitoringArgs> criticalUrlMonitoring) {
            $.criticalUrlMonitoring = criticalUrlMonitoring;
            return this;
        }

        /**
         * @param criticalUrlMonitoring You can define some URLs that&#39;s critical to site operations the latency will be captured and considered for site health
         * 
         * @return builder
         * 
         */
        public Builder criticalUrlMonitoring(SettingCriticalUrlMonitoringArgs criticalUrlMonitoring) {
            return criticalUrlMonitoring(Output.of(criticalUrlMonitoring));
        }

        /**
         * @param defaultPortUsage Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
         * 
         * @return builder
         * 
         */
        public Builder defaultPortUsage(@Nullable Output<String> defaultPortUsage) {
            $.defaultPortUsage = defaultPortUsage;
            return this;
        }

        /**
         * @param defaultPortUsage Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
         * 
         * @return builder
         * 
         */
        public Builder defaultPortUsage(String defaultPortUsage) {
            return defaultPortUsage(Output.of(defaultPortUsage));
        }

        /**
         * @param deviceUpdownThreshold By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device
         * type is desired, use the following
         * 
         * @return builder
         * 
         */
        public Builder deviceUpdownThreshold(@Nullable Output<Integer> deviceUpdownThreshold) {
            $.deviceUpdownThreshold = deviceUpdownThreshold;
            return this;
        }

        /**
         * @param deviceUpdownThreshold By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device
         * type is desired, use the following
         * 
         * @return builder
         * 
         */
        public Builder deviceUpdownThreshold(Integer deviceUpdownThreshold) {
            return deviceUpdownThreshold(Output.of(deviceUpdownThreshold));
        }

        public Builder enableUnii4(@Nullable Output<Boolean> enableUnii4) {
            $.enableUnii4 = enableUnii4;
            return this;
        }

        public Builder enableUnii4(Boolean enableUnii4) {
            return enableUnii4(Output.of(enableUnii4));
        }

        /**
         * @param engagement **Note**: if hours does not exist, it&#39;s treated as everyday of the week, 00:00-23:59. Currently, we don&#39;t allow multiple
         * ranges for the same day
         * 
         * @return builder
         * 
         */
        public Builder engagement(@Nullable Output<SettingEngagementArgs> engagement) {
            $.engagement = engagement;
            return this;
        }

        /**
         * @param engagement **Note**: if hours does not exist, it&#39;s treated as everyday of the week, 00:00-23:59. Currently, we don&#39;t allow multiple
         * ranges for the same day
         * 
         * @return builder
         * 
         */
        public Builder engagement(SettingEngagementArgs engagement) {
            return engagement(Output.of(engagement));
        }

        /**
         * @param gatewayMgmt Gateway Site settings
         * 
         * @return builder
         * 
         */
        public Builder gatewayMgmt(@Nullable Output<SettingGatewayMgmtArgs> gatewayMgmt) {
            $.gatewayMgmt = gatewayMgmt;
            return this;
        }

        /**
         * @param gatewayMgmt Gateway Site settings
         * 
         * @return builder
         * 
         */
        public Builder gatewayMgmt(SettingGatewayMgmtArgs gatewayMgmt) {
            return gatewayMgmt(Output.of(gatewayMgmt));
        }

        /**
         * @param gatewayUpdownThreshold Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
         * `device_updown_threshold` is ignored.
         * 
         * @return builder
         * 
         */
        public Builder gatewayUpdownThreshold(@Nullable Output<Integer> gatewayUpdownThreshold) {
            $.gatewayUpdownThreshold = gatewayUpdownThreshold;
            return this;
        }

        /**
         * @param gatewayUpdownThreshold Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
         * `device_updown_threshold` is ignored.
         * 
         * @return builder
         * 
         */
        public Builder gatewayUpdownThreshold(Integer gatewayUpdownThreshold) {
            return gatewayUpdownThreshold(Output.of(gatewayUpdownThreshold));
        }

        public Builder juniperSrx(@Nullable Output<SettingJuniperSrxArgs> juniperSrx) {
            $.juniperSrx = juniperSrx;
            return this;
        }

        public Builder juniperSrx(SettingJuniperSrxArgs juniperSrx) {
            return juniperSrx(Output.of(juniperSrx));
        }

        /**
         * @param led LED AP settings
         * 
         * @return builder
         * 
         */
        public Builder led(@Nullable Output<SettingLedArgs> led) {
            $.led = led;
            return this;
        }

        /**
         * @param led LED AP settings
         * 
         * @return builder
         * 
         */
        public Builder led(SettingLedArgs led) {
            return led(Output.of(led));
        }

        public Builder marvis(@Nullable Output<SettingMarvisArgs> marvis) {
            $.marvis = marvis;
            return this;
        }

        public Builder marvis(SettingMarvisArgs marvis) {
            return marvis(Output.of(marvis));
        }

        /**
         * @param occupancy Occupancy Analytics settings
         * 
         * @return builder
         * 
         */
        public Builder occupancy(@Nullable Output<SettingOccupancyArgs> occupancy) {
            $.occupancy = occupancy;
            return this;
        }

        /**
         * @param occupancy Occupancy Analytics settings
         * 
         * @return builder
         * 
         */
        public Builder occupancy(SettingOccupancyArgs occupancy) {
            return occupancy(Output.of(occupancy));
        }

        /**
         * @param persistConfigOnDevice Whether to store the config on AP
         * 
         * @return builder
         * 
         */
        public Builder persistConfigOnDevice(@Nullable Output<Boolean> persistConfigOnDevice) {
            $.persistConfigOnDevice = persistConfigOnDevice;
            return this;
        }

        /**
         * @param persistConfigOnDevice Whether to store the config on AP
         * 
         * @return builder
         * 
         */
        public Builder persistConfigOnDevice(Boolean persistConfigOnDevice) {
            return persistConfigOnDevice(Output.of(persistConfigOnDevice));
        }

        /**
         * @param proxy Proxy Configuration to talk to Mist
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<SettingProxyArgs> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Proxy Configuration to talk to Mist
         * 
         * @return builder
         * 
         */
        public Builder proxy(SettingProxyArgs proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param removeExistingConfigs By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the
         * existing configuration will be removed.
         * 
         * @return builder
         * 
         */
        public Builder removeExistingConfigs(@Nullable Output<Boolean> removeExistingConfigs) {
            $.removeExistingConfigs = removeExistingConfigs;
            return this;
        }

        /**
         * @param removeExistingConfigs By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the
         * existing configuration will be removed.
         * 
         * @return builder
         * 
         */
        public Builder removeExistingConfigs(Boolean removeExistingConfigs) {
            return removeExistingConfigs(Output.of(removeExistingConfigs));
        }

        /**
         * @param reportGatt Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
         * serial number, battery %, temperature, humidity)
         * 
         * @return builder
         * 
         */
        public Builder reportGatt(@Nullable Output<Boolean> reportGatt) {
            $.reportGatt = reportGatt;
            return this;
        }

        /**
         * @param reportGatt Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
         * serial number, battery %, temperature, humidity)
         * 
         * @return builder
         * 
         */
        public Builder reportGatt(Boolean reportGatt) {
            return reportGatt(Output.of(reportGatt));
        }

        /**
         * @param rogue Rogue site settings
         * 
         * @return builder
         * 
         */
        public Builder rogue(@Nullable Output<SettingRogueArgs> rogue) {
            $.rogue = rogue;
            return this;
        }

        /**
         * @param rogue Rogue site settings
         * 
         * @return builder
         * 
         */
        public Builder rogue(SettingRogueArgs rogue) {
            return rogue(Output.of(rogue));
        }

        /**
         * @param rtsa Managed mobility
         * 
         * @return builder
         * 
         */
        public Builder rtsa(@Nullable Output<SettingRtsaArgs> rtsa) {
            $.rtsa = rtsa;
            return this;
        }

        /**
         * @param rtsa Managed mobility
         * 
         * @return builder
         * 
         */
        public Builder rtsa(SettingRtsaArgs rtsa) {
            return rtsa(Output.of(rtsa));
        }

        /**
         * @param simpleAlert Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
         * window, there are more than Y distinct client encountering over X failures
         * 
         * @return builder
         * 
         */
        public Builder simpleAlert(@Nullable Output<SettingSimpleAlertArgs> simpleAlert) {
            $.simpleAlert = simpleAlert;
            return this;
        }

        /**
         * @param simpleAlert Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
         * window, there are more than Y distinct client encountering over X failures
         * 
         * @return builder
         * 
         */
        public Builder simpleAlert(SettingSimpleAlertArgs simpleAlert) {
            return simpleAlert(Output.of(simpleAlert));
        }

        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public Builder skyatp(@Nullable Output<SettingSkyatpArgs> skyatp) {
            $.skyatp = skyatp;
            return this;
        }

        public Builder skyatp(SettingSkyatpArgs skyatp) {
            return skyatp(Output.of(skyatp));
        }

        public Builder sleThresholds(@Nullable Output<SettingSleThresholdsArgs> sleThresholds) {
            $.sleThresholds = sleThresholds;
            return this;
        }

        public Builder sleThresholds(SettingSleThresholdsArgs sleThresholds) {
            return sleThresholds(Output.of(sleThresholds));
        }

        public Builder srxApp(@Nullable Output<SettingSrxAppArgs> srxApp) {
            $.srxApp = srxApp;
            return this;
        }

        public Builder srxApp(SettingSrxAppArgs srxApp) {
            return srxApp(Output.of(srxApp));
        }

        /**
         * @param sshKeys When limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
         * Org:Setting)
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(@Nullable Output<List<String>> sshKeys) {
            $.sshKeys = sshKeys;
            return this;
        }

        /**
         * @param sshKeys When limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
         * Org:Setting)
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(List<String> sshKeys) {
            return sshKeys(Output.of(sshKeys));
        }

        /**
         * @param sshKeys When limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
         * Org:Setting)
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }

        public Builder ssr(@Nullable Output<SettingSsrArgs> ssr) {
            $.ssr = ssr;
            return this;
        }

        public Builder ssr(SettingSsrArgs ssr) {
            return ssr(Output.of(ssr));
        }

        /**
         * @param switchUpdownThreshold Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
         * `device_updown_threshold` is ignored.
         * 
         * @return builder
         * 
         */
        public Builder switchUpdownThreshold(@Nullable Output<Integer> switchUpdownThreshold) {
            $.switchUpdownThreshold = switchUpdownThreshold;
            return this;
        }

        /**
         * @param switchUpdownThreshold Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
         * `device_updown_threshold` is ignored.
         * 
         * @return builder
         * 
         */
        public Builder switchUpdownThreshold(Integer switchUpdownThreshold) {
            return switchUpdownThreshold(Output.of(switchUpdownThreshold));
        }

        public Builder syntheticTest(@Nullable Output<SettingSyntheticTestArgs> syntheticTest) {
            $.syntheticTest = syntheticTest;
            return this;
        }

        public Builder syntheticTest(SettingSyntheticTestArgs syntheticTest) {
            return syntheticTest(Output.of(syntheticTest));
        }

        /**
         * @param trackAnonymousDevices Whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
         * 
         * @return builder
         * 
         */
        public Builder trackAnonymousDevices(@Nullable Output<Boolean> trackAnonymousDevices) {
            $.trackAnonymousDevices = trackAnonymousDevices;
            return this;
        }

        /**
         * @param trackAnonymousDevices Whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
         * 
         * @return builder
         * 
         */
        public Builder trackAnonymousDevices(Boolean trackAnonymousDevices) {
            return trackAnonymousDevices(Output.of(trackAnonymousDevices));
        }

        /**
         * @param uplinkPortConfig AP Uplink port configuration
         * 
         * @return builder
         * 
         */
        public Builder uplinkPortConfig(@Nullable Output<SettingUplinkPortConfigArgs> uplinkPortConfig) {
            $.uplinkPortConfig = uplinkPortConfig;
            return this;
        }

        /**
         * @param uplinkPortConfig AP Uplink port configuration
         * 
         * @return builder
         * 
         */
        public Builder uplinkPortConfig(SettingUplinkPortConfigArgs uplinkPortConfig) {
            return uplinkPortConfig(Output.of(uplinkPortConfig));
        }

        /**
         * @param vars Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(@Nullable Output<Map<String,String>> vars) {
            $.vars = vars;
            return this;
        }

        /**
         * @param vars Dictionary of name-&gt;value, the vars can then be used in Wlans. This can overwrite those from Site Vars
         * 
         * @return builder
         * 
         */
        public Builder vars(Map<String,String> vars) {
            return vars(Output.of(vars));
        }

        public Builder vna(@Nullable Output<SettingVnaArgs> vna) {
            $.vna = vna;
            return this;
        }

        public Builder vna(SettingVnaArgs vna) {
            return vna(Output.of(vna));
        }

        /**
         * @param vpnPathUpdownThreshold enable threshold-based vpn path down delivery.
         * 
         * @return builder
         * 
         */
        public Builder vpnPathUpdownThreshold(@Nullable Output<Integer> vpnPathUpdownThreshold) {
            $.vpnPathUpdownThreshold = vpnPathUpdownThreshold;
            return this;
        }

        /**
         * @param vpnPathUpdownThreshold enable threshold-based vpn path down delivery.
         * 
         * @return builder
         * 
         */
        public Builder vpnPathUpdownThreshold(Integer vpnPathUpdownThreshold) {
            return vpnPathUpdownThreshold(Output.of(vpnPathUpdownThreshold));
        }

        /**
         * @param vpnPeerUpdownThreshold enable threshold-based vpn peer down delivery.
         * 
         * @return builder
         * 
         */
        public Builder vpnPeerUpdownThreshold(@Nullable Output<Integer> vpnPeerUpdownThreshold) {
            $.vpnPeerUpdownThreshold = vpnPeerUpdownThreshold;
            return this;
        }

        /**
         * @param vpnPeerUpdownThreshold enable threshold-based vpn peer down delivery.
         * 
         * @return builder
         * 
         */
        public Builder vpnPeerUpdownThreshold(Integer vpnPeerUpdownThreshold) {
            return vpnPeerUpdownThreshold(Output.of(vpnPeerUpdownThreshold));
        }

        /**
         * @param vsInstance Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
         * 
         * @return builder
         * 
         */
        public Builder vsInstance(@Nullable Output<Map<String,SettingVsInstanceArgs>> vsInstance) {
            $.vsInstance = vsInstance;
            return this;
        }

        /**
         * @param vsInstance Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
         * 
         * @return builder
         * 
         */
        public Builder vsInstance(Map<String,SettingVsInstanceArgs> vsInstance) {
            return vsInstance(Output.of(vsInstance));
        }

        public Builder wanVna(@Nullable Output<SettingWanVnaArgs> wanVna) {
            $.wanVna = wanVna;
            return this;
        }

        public Builder wanVna(SettingWanVnaArgs wanVna) {
            return wanVna(Output.of(wanVna));
        }

        /**
         * @param wids WIDS site settings
         * 
         * @return builder
         * 
         */
        public Builder wids(@Nullable Output<SettingWidsArgs> wids) {
            $.wids = wids;
            return this;
        }

        /**
         * @param wids WIDS site settings
         * 
         * @return builder
         * 
         */
        public Builder wids(SettingWidsArgs wids) {
            return wids(Output.of(wids));
        }

        /**
         * @param wifi Wi-Fi site settings
         * 
         * @return builder
         * 
         */
        public Builder wifi(@Nullable Output<SettingWifiArgs> wifi) {
            $.wifi = wifi;
            return this;
        }

        /**
         * @param wifi Wi-Fi site settings
         * 
         * @return builder
         * 
         */
        public Builder wifi(SettingWifiArgs wifi) {
            return wifi(Output.of(wifi));
        }

        public Builder wiredVna(@Nullable Output<SettingWiredVnaArgs> wiredVna) {
            $.wiredVna = wiredVna;
            return this;
        }

        public Builder wiredVna(SettingWiredVnaArgs wiredVna) {
            return wiredVna(Output.of(wiredVna));
        }

        /**
         * @param zoneOccupancyAlert Zone Occupancy alert site settings
         * 
         * @return builder
         * 
         */
        public Builder zoneOccupancyAlert(@Nullable Output<SettingZoneOccupancyAlertArgs> zoneOccupancyAlert) {
            $.zoneOccupancyAlert = zoneOccupancyAlert;
            return this;
        }

        /**
         * @param zoneOccupancyAlert Zone Occupancy alert site settings
         * 
         * @return builder
         * 
         */
        public Builder zoneOccupancyAlert(SettingZoneOccupancyAlertArgs zoneOccupancyAlert) {
            return zoneOccupancyAlert(Output.of(zoneOccupancyAlert));
        }

        public SettingArgs build() {
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("SettingArgs", "siteId");
            }
            return $;
        }
    }

}
