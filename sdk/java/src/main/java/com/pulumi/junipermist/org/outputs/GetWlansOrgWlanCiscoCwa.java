// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.org.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWlansOrgWlanCiscoCwa {
    /**
     * @return list of hostnames without http(s):// (matched by substring)
     * 
     */
    private List<String> allowedHostnames;
    /**
     * @return list of CIDRs
     * 
     */
    private List<String> allowedSubnets;
    /**
     * @return list of blocked CIDRs
     * 
     */
    private List<String> blockedSubnets;
    private Boolean enabled;

    private GetWlansOrgWlanCiscoCwa() {}
    /**
     * @return list of hostnames without http(s):// (matched by substring)
     * 
     */
    public List<String> allowedHostnames() {
        return this.allowedHostnames;
    }
    /**
     * @return list of CIDRs
     * 
     */
    public List<String> allowedSubnets() {
        return this.allowedSubnets;
    }
    /**
     * @return list of blocked CIDRs
     * 
     */
    public List<String> blockedSubnets() {
        return this.blockedSubnets;
    }
    public Boolean enabled() {
        return this.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWlansOrgWlanCiscoCwa defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedHostnames;
        private List<String> allowedSubnets;
        private List<String> blockedSubnets;
        private Boolean enabled;
        public Builder() {}
        public Builder(GetWlansOrgWlanCiscoCwa defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedHostnames = defaults.allowedHostnames;
    	      this.allowedSubnets = defaults.allowedSubnets;
    	      this.blockedSubnets = defaults.blockedSubnets;
    	      this.enabled = defaults.enabled;
        }

        @CustomType.Setter
        public Builder allowedHostnames(List<String> allowedHostnames) {
            if (allowedHostnames == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanCiscoCwa", "allowedHostnames");
            }
            this.allowedHostnames = allowedHostnames;
            return this;
        }
        public Builder allowedHostnames(String... allowedHostnames) {
            return allowedHostnames(List.of(allowedHostnames));
        }
        @CustomType.Setter
        public Builder allowedSubnets(List<String> allowedSubnets) {
            if (allowedSubnets == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanCiscoCwa", "allowedSubnets");
            }
            this.allowedSubnets = allowedSubnets;
            return this;
        }
        public Builder allowedSubnets(String... allowedSubnets) {
            return allowedSubnets(List.of(allowedSubnets));
        }
        @CustomType.Setter
        public Builder blockedSubnets(List<String> blockedSubnets) {
            if (blockedSubnets == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanCiscoCwa", "blockedSubnets");
            }
            this.blockedSubnets = blockedSubnets;
            return this;
        }
        public Builder blockedSubnets(String... blockedSubnets) {
            return blockedSubnets(List.of(blockedSubnets));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetWlansOrgWlanCiscoCwa", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        public GetWlansOrgWlanCiscoCwa build() {
            final var _resultValue = new GetWlansOrgWlanCiscoCwa();
            _resultValue.allowedHostnames = allowedHostnames;
            _resultValue.allowedSubnets = allowedSubnets;
            _resultValue.blockedSubnets = blockedSubnets;
            _resultValue.enabled = enabled;
            return _resultValue;
        }
    }
}
