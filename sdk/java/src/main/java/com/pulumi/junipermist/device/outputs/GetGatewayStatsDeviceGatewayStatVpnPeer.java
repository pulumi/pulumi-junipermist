// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.junipermist.device.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetGatewayStatsDeviceGatewayStatVpnPeer {
    /**
     * @return Redundancy status of the associated interface
     * 
     */
    private Boolean isActive;
    /**
     * @return Last seen timestamp
     * 
     */
    private Double lastSeen;
    private Double latency;
    private Double mos;
    private Integer mtu;
    /**
     * @return Peer router mac address
     * 
     */
    private String peerMac;
    /**
     * @return Peer router device interface
     * 
     */
    private String peerPortId;
    private String peerRouterName;
    private String peerSiteId;
    /**
     * @return Router device interface
     * 
     */
    private String portId;
    private String routerName;
    /**
     * @return `ipsec`for SRX, `svr` for 128T
     * 
     */
    private String type;
    private Boolean up;
    private Integer uptime;

    private GetGatewayStatsDeviceGatewayStatVpnPeer() {}
    /**
     * @return Redundancy status of the associated interface
     * 
     */
    public Boolean isActive() {
        return this.isActive;
    }
    /**
     * @return Last seen timestamp
     * 
     */
    public Double lastSeen() {
        return this.lastSeen;
    }
    public Double latency() {
        return this.latency;
    }
    public Double mos() {
        return this.mos;
    }
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return Peer router mac address
     * 
     */
    public String peerMac() {
        return this.peerMac;
    }
    /**
     * @return Peer router device interface
     * 
     */
    public String peerPortId() {
        return this.peerPortId;
    }
    public String peerRouterName() {
        return this.peerRouterName;
    }
    public String peerSiteId() {
        return this.peerSiteId;
    }
    /**
     * @return Router device interface
     * 
     */
    public String portId() {
        return this.portId;
    }
    public String routerName() {
        return this.routerName;
    }
    /**
     * @return `ipsec`for SRX, `svr` for 128T
     * 
     */
    public String type() {
        return this.type;
    }
    public Boolean up() {
        return this.up;
    }
    public Integer uptime() {
        return this.uptime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGatewayStatsDeviceGatewayStatVpnPeer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isActive;
        private Double lastSeen;
        private Double latency;
        private Double mos;
        private Integer mtu;
        private String peerMac;
        private String peerPortId;
        private String peerRouterName;
        private String peerSiteId;
        private String portId;
        private String routerName;
        private String type;
        private Boolean up;
        private Integer uptime;
        public Builder() {}
        public Builder(GetGatewayStatsDeviceGatewayStatVpnPeer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isActive = defaults.isActive;
    	      this.lastSeen = defaults.lastSeen;
    	      this.latency = defaults.latency;
    	      this.mos = defaults.mos;
    	      this.mtu = defaults.mtu;
    	      this.peerMac = defaults.peerMac;
    	      this.peerPortId = defaults.peerPortId;
    	      this.peerRouterName = defaults.peerRouterName;
    	      this.peerSiteId = defaults.peerSiteId;
    	      this.portId = defaults.portId;
    	      this.routerName = defaults.routerName;
    	      this.type = defaults.type;
    	      this.up = defaults.up;
    	      this.uptime = defaults.uptime;
        }

        @CustomType.Setter
        public Builder isActive(Boolean isActive) {
            if (isActive == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "isActive");
            }
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(Double lastSeen) {
            if (lastSeen == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "lastSeen");
            }
            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder latency(Double latency) {
            if (latency == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "latency");
            }
            this.latency = latency;
            return this;
        }
        @CustomType.Setter
        public Builder mos(Double mos) {
            if (mos == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "mos");
            }
            this.mos = mos;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder peerMac(String peerMac) {
            if (peerMac == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "peerMac");
            }
            this.peerMac = peerMac;
            return this;
        }
        @CustomType.Setter
        public Builder peerPortId(String peerPortId) {
            if (peerPortId == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "peerPortId");
            }
            this.peerPortId = peerPortId;
            return this;
        }
        @CustomType.Setter
        public Builder peerRouterName(String peerRouterName) {
            if (peerRouterName == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "peerRouterName");
            }
            this.peerRouterName = peerRouterName;
            return this;
        }
        @CustomType.Setter
        public Builder peerSiteId(String peerSiteId) {
            if (peerSiteId == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "peerSiteId");
            }
            this.peerSiteId = peerSiteId;
            return this;
        }
        @CustomType.Setter
        public Builder portId(String portId) {
            if (portId == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "portId");
            }
            this.portId = portId;
            return this;
        }
        @CustomType.Setter
        public Builder routerName(String routerName) {
            if (routerName == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "routerName");
            }
            this.routerName = routerName;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder up(Boolean up) {
            if (up == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "up");
            }
            this.up = up;
            return this;
        }
        @CustomType.Setter
        public Builder uptime(Integer uptime) {
            if (uptime == null) {
              throw new MissingRequiredPropertyException("GetGatewayStatsDeviceGatewayStatVpnPeer", "uptime");
            }
            this.uptime = uptime;
            return this;
        }
        public GetGatewayStatsDeviceGatewayStatVpnPeer build() {
            final var _resultValue = new GetGatewayStatsDeviceGatewayStatVpnPeer();
            _resultValue.isActive = isActive;
            _resultValue.lastSeen = lastSeen;
            _resultValue.latency = latency;
            _resultValue.mos = mos;
            _resultValue.mtu = mtu;
            _resultValue.peerMac = peerMac;
            _resultValue.peerPortId = peerPortId;
            _resultValue.peerRouterName = peerRouterName;
            _resultValue.peerSiteId = peerSiteId;
            _resultValue.portId = portId;
            _resultValue.routerName = routerName;
            _resultValue.type = type;
            _resultValue.up = up;
            _resultValue.uptime = uptime;
            return _resultValue;
        }
    }
}
